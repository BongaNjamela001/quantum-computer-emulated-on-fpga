 
\subsection{Emulated Quantum Fourier Transform in Shor's Algorithm}

In a 2019 study that focused on the quantum Shor algorithm simulated on FPGA, Zhang et al. employed Shor's findings to factor a large integer $N$ which satisfies $N = p\times q$, where $p$ and $q$ are prime numbers \cite{Zhang2019}. Zhang et al. divided the algorithm into a quantum part and classical part, then simulated the execution of the quantum part on FPGA as a heterogeneous device for offloading inefficient work from a CPU host \cite{Zhang2019}. The communication interface between the heterogeneous quantum device and the CPU for executing both parts of the divided algorithm was modelled through PCIe \cite{Zhang2019}. Zhang et al. performed the experiment on the CPU using the C programming language while the hardware architecture was implemented on Intel Arria 10 GX 1150 device using OpenCL to simulate three quantum registers with a maximum length of 17 qubits \cite{Zhang2019}. The use of 17 qubits to perform Shors algorithm in factoring the integer $(327)_{10}$, required 102796 adaptive lookup tables (ALUTs), 157446 registers, and a total of 1846 RAM blocks on the FPGA \cite{Zhang2019}. Zhang et al. found that the number of RAM blocks double for every qubit that is added \cite{Zhang2019}. Additionally, the study showed that the execution time increases exponentially with the qubit number such that the algorithm's time complexity is linear with the number of qubits, $n$ \cite{Zhang2019}.
