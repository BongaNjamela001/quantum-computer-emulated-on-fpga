// -------------------------------------------------------------
// 
// File Name: /home/bonga/Desktop/EEE4022S/EEE4022S_Github/qaes/codegen/qft_3qubit/hdlsrc/qft_3qubit_fixpt_tb.sv
// Created: 2024-10-25 21:48:22
// 
// Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


import qft_3qubit_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: qft_3qubit_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module qft_3qubit_fixpt_tb;

  logic clk;
  logic reset;
  logic enb;
  logic final_state_re_done;  /* ufix1 */
  logic rdEnb;
  logic final_state_re_done_enb;  /* ufix1 */
  logic [1:0] final_state_re_addr;  /* ufix2 */
  logic final_state_re_active;  /* ufix1 */
  logic snkDone;
  logic snkDonen;
  logic resetn;
  logic tb_enb;
  logic ce_out;
  logic final_state_re_enb;  /* ufix1 */
  logic final_state_re_lastAddr;  /* ufix1 */
  logic [1:0] initial_state_addr;  /* ufix2 */
  logic initial_state_active;  /* ufix1 */
  logic initial_state_enb;  /* ufix1 */
  logic [1:0] initial_state_addr_delay_1;  /* ufix2 */
  logic signed [31:0] fp_initial_state;  /* sfix32 */
  logic [7:0] rawData_initial_state;  /* ufix1 [8] */
  logic signed [31:0] status_initial_state;  /* sfix32 */
  logic [7:0] holdData_initial_state;  /* ufix1 [8] */
  logic [7:0] initial_state_offset;  /* ufix1 [8] */
  logic [7:0] initial_state_1;  /* ufix1 [8] */
  vector_of_signed_logic_14 final_state_re [0:7];  /* sfix14_En14 [8] */
  vector_of_signed_logic_14 final_state_im [0:7];  /* sfix14_En14 [8] */
  logic [1:0] final_state_re_addr_delay_1;  /* ufix2 */
  logic signed [31:0] fp_final_state_re_expected;  /* sfix32 */
  vector_of_signed_logic_14 final_state_re_expected [0:7];  /* sfix14_En14 [8] */
  logic signed [31:0] status_final_state_re_expected;  /* sfix32 */
  vector_of_signed_logic_14 final_state_re_ref [0:7];  /* sfix14_En14 [8] */
  logic final_state_re_testFailure;  /* ufix1 */
  logic signed [31:0] fp_final_state_im_expected;  /* sfix32 */
  vector_of_signed_logic_14 final_state_im_expected [0:7];  /* sfix14_En14 [8] */
  logic signed [31:0] status_final_state_im_expected;  /* sfix32 */
  vector_of_signed_logic_14 final_state_im_ref [0:7];  /* sfix14_En14 [8] */
  logic final_state_im_testFailure;  /* ufix1 */
  logic testFailure;  /* ufix1 */


  assign final_state_re_done_enb = final_state_re_done & rdEnb;

  assign final_state_re_active = final_state_re_addr != 2'b11;

  assign #2 enb = rdEnb;

  assign snkDonen =  ~ snkDone;

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  assign resetn =  ~ reset;

  assign tb_enb = resetn & snkDonen;

  assign rdEnb = (snkDone == 1'b0 ? tb_enb :
              1'b0);

  assign ce_out = enb & (rdEnb & tb_enb);

  assign final_state_re_enb = ce_out & final_state_re_active;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 3
  always_ff @(posedge clk or posedge reset)
    begin : final_state_process
      if (reset == 1'b1) begin
        final_state_re_addr <= 2'b00;
      end
      else begin
        if (final_state_re_enb) begin
          final_state_re_addr <= final_state_re_addr + 2'b01;
        end
      end
    end

  assign final_state_re_lastAddr = final_state_re_addr == 2'b11;

  assign final_state_re_done = final_state_re_lastAddr & resetn;

  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        snkDone <= 0;
      end
      else begin
        if (final_state_re_done_enb) begin
          snkDone <= final_state_re_done;
        end
      end
    end

  assign initial_state_active = initial_state_addr != 2'b11;

  assign initial_state_enb = initial_state_active & (rdEnb & tb_enb);

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 3
  always_ff @(posedge clk or posedge reset)
    begin : initial_state_process
      if (reset == 1'b1) begin
        initial_state_addr <= 2'b00;
      end
      else begin
        if (initial_state_enb) begin
          initial_state_addr <= initial_state_addr + 2'b01;
        end
      end
    end

  assign #1 initial_state_addr_delay_1 = initial_state_addr;

  // Data source for initial_state
  initial
    begin : initial_state_fileread
      fp_initial_state = $fopen("initial_state.dat", "r");
      status_initial_state = $rewind(fp_initial_state);
    end

  always @(initial_state_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_initial_state <= '{1'bx, 1'bx, 1'bx, 1'bx, 1'bx, 1'bx, 1'bx, 1'bx};
      end
      else if (rdEnb == 1) begin
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[0]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[1]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[2]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[3]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[4]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[5]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[6]);
        status_initial_state = $fscanf(fp_initial_state, "%h", rawData_initial_state[7]);
      end
    end

  // holdData reg for initial_state
  always @(posedge clk or posedge reset)
    begin : stimuli_initial_state
      if (reset) begin
        holdData_initial_state <= '{1'bx, 1'bx, 1'bx, 1'bx, 1'bx, 1'bx, 1'bx, 1'bx};
      end
      else begin
        holdData_initial_state <= rawData_initial_state;
      end
    end

  always @(rawData_initial_state[7] or rawData_initial_state[6] or rawData_initial_state[5] or rawData_initial_state[4] or rawData_initial_state[3] or rawData_initial_state[2] or rawData_initial_state[1] or rawData_initial_state[0] or rdEnb)
    begin : stimuli_initial_state_1
      if (rdEnb == 1'b0) begin
        initial_state_offset <= holdData_initial_state;
      end
      else begin
        initial_state_offset <= rawData_initial_state;
      end
    end

  assign #2 initial_state_1 = initial_state_offset;

  qft_3qubit_fixpt u_qft_3qubit_fixpt (.initial_state(initial_state_1),  /* ufix1 [8] */
                                       .final_state_re(final_state_re),  /* sfix14_En14 [8] */
                                       .final_state_im(final_state_im)  /* sfix14_En14 [8] */
                                       );

  assign #1 final_state_re_addr_delay_1 = final_state_re_addr;

  // Data source for final_state_re_expected
  initial
    begin : final_state_re_expected_fileread
      fp_final_state_re_expected = $fopen("final_state_re_expected.dat", "r");
      status_final_state_re_expected = $rewind(fp_final_state_re_expected);
    end

  always @(final_state_re_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        final_state_re_expected <= '{14'bx, 14'bx, 14'bx, 14'bx, 14'bx, 14'bx, 14'bx, 14'bx};
      end
      else if (rdEnb == 1) begin
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[0]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[1]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[2]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[3]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[4]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[5]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[6]);
        status_final_state_re_expected = $fscanf(fp_final_state_re_expected, "%h", final_state_re_expected[7]);
      end
    end

  assign final_state_re_ref = final_state_re_expected;

  always @(posedge clk or posedge reset)
    begin : final_state_re_checker
      if (reset == 1'b1) begin
        final_state_re_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && final_state_re !== final_state_re_ref) begin
          final_state_re_testFailure <= 1'b1;
          $display("ERROR in final_state_re at time %t : Expected '%p' Actual '%p'", $time, final_state_re_ref, final_state_re);
        end
      end
    end

  // Data source for final_state_im_expected
  initial
    begin : final_state_im_expected_fileread
      fp_final_state_im_expected = $fopen("final_state_im_expected.dat", "r");
      status_final_state_im_expected = $rewind(fp_final_state_im_expected);
    end

  always @(final_state_re_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        final_state_im_expected <= '{14'bx, 14'bx, 14'bx, 14'bx, 14'bx, 14'bx, 14'bx, 14'bx};
      end
      else if (rdEnb == 1) begin
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[0]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[1]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[2]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[3]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[4]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[5]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[6]);
        status_final_state_im_expected = $fscanf(fp_final_state_im_expected, "%h", final_state_im_expected[7]);
      end
    end

  assign final_state_im_ref = final_state_im_expected;

  always @(posedge clk or posedge reset)
    begin : final_state_im_checker
      if (reset == 1'b1) begin
        final_state_im_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && final_state_im !== final_state_im_ref) begin
          final_state_im_testFailure <= 1'b1;
          $display("ERROR in final_state_im at time %t : Expected '%p' Actual '%p'", $time, final_state_im_ref, final_state_im);
        end
      end
    end

  assign testFailure = final_state_re_testFailure | final_state_im_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // qft_3qubit_fixpt_tb

