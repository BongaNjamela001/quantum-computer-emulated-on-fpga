// -------------------------------------------------------------
// 
// File Name: /home/bonga/Desktop/EEE4022S/EEE4022S_Github/qaes/universal_q_gates/x_gate/codegen/x_gate/hdlsrc/x_gate_fixpt_tb.sv
// Created: 2024-10-26 15:02:31
// 
// Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: x_gate_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module x_gate_fixpt_tb;

  logic clk;
  logic reset;
  logic enb;
  logic new_state_done;  /* ufix1 */
  logic rdEnb;
  logic new_state_done_enb;  /* ufix1 */
  logic new_state_addr;  /* ufix1 */
  logic new_state_active;  /* ufix1 */
  logic snkDone;
  logic snkDonen;
  logic resetn;
  logic tb_enb;
  logic ce_out;
  logic new_state_enb;  /* ufix1 */
  logic new_state_lastAddr;  /* ufix1 */
  logic state_addr;  /* ufix1 */
  logic state_active;  /* ufix1 */
  logic state_enb;  /* ufix1 */
  logic state_addr_delay_1;  /* ufix1 */
  logic signed [31:0] fp_state;  /* sfix32 */
  logic [1:0] rawData_state;  /* ufix1 [2] */
  logic signed [31:0] status_state;  /* sfix32 */
  logic [1:0] holdData_state;  /* ufix1 [2] */
  logic [1:0] state_offset;  /* ufix1 [2] */
  logic [1:0] state_1;  /* ufix1 [2] */
  logic [1:0] new_state_1;  /* ufix1 [2] */
  logic new_state_addr_delay_1;  /* ufix1 */
  logic signed [31:0] fp_new_state_expected;  /* sfix32 */
  logic [1:0] new_state_expected;  /* ufix1 [2] */
  logic signed [31:0] status_new_state_expected;  /* sfix32 */
  logic [1:0] new_state_ref;  /* ufix1 [2] */
  logic new_state_testFailure;  /* ufix1 */
  logic testFailure;  /* ufix1 */


  assign new_state_done_enb = new_state_done & rdEnb;

  assign new_state_active = new_state_addr != 1'b1;

  assign #2 enb = rdEnb;

  assign snkDonen =  ~ snkDone;

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  assign resetn =  ~ reset;

  assign tb_enb = resetn & snkDonen;

  assign rdEnb = (snkDone == 1'b0 ? tb_enb :
              1'b0);

  assign ce_out = enb & (rdEnb & tb_enb);

  assign new_state_enb = ce_out & new_state_active;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always_ff @(posedge clk or posedge reset)
    begin : new_state_process
      if (reset == 1'b1) begin
        new_state_addr <= 1'b0;
      end
      else begin
        if (new_state_enb) begin
          new_state_addr <=  ~ new_state_addr;
        end
      end
    end

  assign new_state_lastAddr = new_state_addr == 1'b1;

  assign new_state_done = new_state_lastAddr & resetn;

  // Delay to allow last sim cycle to complete
  always @(posedge clk or posedge reset)
    begin : checkDone_1
      if (reset) begin
        snkDone <= 0;
      end
      else begin
        if (new_state_done_enb) begin
          snkDone <= new_state_done;
        end
      end
    end

  assign state_active = state_addr != 1'b1;

  assign state_enb = state_active & (rdEnb & tb_enb);

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always_ff @(posedge clk or posedge reset)
    begin : state_process
      if (reset == 1'b1) begin
        state_addr <= 1'b0;
      end
      else begin
        if (state_enb) begin
          state_addr <=  ~ state_addr;
        end
      end
    end

  assign #1 state_addr_delay_1 = state_addr;

  // Data source for state
  initial
    begin : state_fileread
      fp_state = $fopen("state.dat", "r");
      status_state = $rewind(fp_state);
    end

  always @(state_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        rawData_state <= '{1'bx, 1'bx};
      end
      else if (rdEnb == 1) begin
        status_state = $fscanf(fp_state, "%h", rawData_state[0]);
        status_state = $fscanf(fp_state, "%h", rawData_state[1]);
      end
    end

  // holdData reg for state
  always @(posedge clk or posedge reset)
    begin : stimuli_state
      if (reset) begin
        holdData_state <= '{1'bx, 1'bx};
      end
      else begin
        holdData_state <= rawData_state;
      end
    end

  always @(rawData_state[1] or rawData_state[0] or rdEnb)
    begin : stimuli_state_1
      if (rdEnb == 1'b0) begin
        state_offset <= holdData_state;
      end
      else begin
        state_offset <= rawData_state;
      end
    end

  assign #2 state_1 = state_offset;

  x_gate_fixpt u_x_gate_fixpt (.state(state_1),  /* ufix1 [2] */
                               .new_state(new_state_1)  /* ufix1 [2] */
                               );

  assign #1 new_state_addr_delay_1 = new_state_addr;

  // Data source for new_state_expected
  initial
    begin : new_state_expected_fileread
      fp_new_state_expected = $fopen("new_state_expected.dat", "r");
      status_new_state_expected = $rewind(fp_new_state_expected);
    end

  always @(new_state_addr_delay_1, rdEnb, tb_enb)
    begin
      if (tb_enb == 0) begin
        new_state_expected <= '{1'bx, 1'bx};
      end
      else if (rdEnb == 1) begin
        status_new_state_expected = $fscanf(fp_new_state_expected, "%h", new_state_expected[0]);
        status_new_state_expected = $fscanf(fp_new_state_expected, "%h", new_state_expected[1]);
      end
    end

  assign new_state_ref = new_state_expected;

  always @(posedge clk or posedge reset)
    begin : new_state_1_checker
      if (reset == 1'b1) begin
        new_state_testFailure <= 1'b0;
      end
      else begin
        if (ce_out == 1'b1 && new_state_1 !== new_state_ref) begin
          new_state_testFailure <= 1'b1;
          $display("ERROR in new_state_1 at time %t : Expected '%p' Actual '%p'", $time, new_state_ref, new_state_1);
        end
      end
    end

  assign testFailure = new_state_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // x_gate_fixpt_tb

