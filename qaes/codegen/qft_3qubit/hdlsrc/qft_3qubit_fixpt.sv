// -------------------------------------------------------------
// 
// File Name: /home/bonga/Desktop/EEE4022S/EEE4022S_Github/qaes/codegen/qft_3qubit/hdlsrc/qft_3qubit_fixpt.sv
// Created: 2024-10-26 09:25:26
// 
// Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// -------------------------------------------------------------


import qft_3qubit_fixpt_pkg::* ;

// -------------------------------------------------------------
// 
// Module: qft_3qubit_fixpt
// Source Path: qft_3qubit_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module qft_3qubit_fixpt
          #(  parameter logic [63:0] cval = '{1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1}  /* ufix1 [64] */,
              parameter logic [63:0] gain_const2_data = '{1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1}  /* ufix1 [64] */,
              parameter logic [63:0] gain_const4_data = '{1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1}  /* ufix1 [64] */,
              parameter logic [63:0] gain_const5_data = '{1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0,
             1'b1, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b0, 1'b1}  /* ufix1 [64] */)
          (  input logic clk,
             input logic [7:0]initial_state  /* ufix1 [8] */,
             output vector_of_signed_logic_14 final_state_re[0:7]  /* sfix14_En14 [8] */,
             output vector_of_signed_logic_14 final_state_im[0:7]  /* sfix14_En14 [8] */);


  logic [63:0] c16_kconst;  /* ufix1 [64] */
  logic kconst [0:7] [0:7];  /* ufix1 [8x8] */
  logic [63:0] s;  /* ufix1 [64] */
  vector_of_signed_logic_14 c42_kconst_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 c42_kconst_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 kconst_re [0:7] [0:7];  /* sfix14_En13 [8x8] */
  vector_of_signed_logic_14 kconst_im [0:7] [0:7];  /* sfix14_En13 [8x8] */
  vector_of_signed_logic_14 alpha_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_1 [0:63];  /* sfix14_En13 [64] */
  logic [63:0] c68_kconst_re;  /* ufix1 [64] */
  logic [63:0] c68_kconst_im;  /* ufix1 [64] */
  logic kconst_re_1 [0:7] [0:7];  /* ufix1 [8x8] */
  logic kconst_im_1 [0:7] [0:7];  /* ufix1 [8x8] */
  logic [63:0] alpha_re_2;  /* ufix1 [64] */
  logic [63:0] alpha_im_2;  /* ufix1 [64] */
  logic [63:0] selector_out_re_1;  /* ufix1 [64] */
  logic [63:0] selector_out_im_1;  /* ufix1 [64] */
  logic [63:0] alpha_re_3;  /* ufix1 [64] */
  logic [63:0] alpha_im_3;  /* ufix1 [64] */
  vector_of_signed_logic_14 c94_kconst_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 c94_kconst_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 kconst_re_2 [0:7] [0:7];  /* sfix14_En13 [8x8] */
  vector_of_signed_logic_14 kconst_im_2 [0:7] [0:7];  /* sfix14_En13 [8x8] */
  vector_of_signed_logic_14 alpha_re_4 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_4 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_re_2 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_2 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_5 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_5 [0:63];  /* sfix14_En13 [64] */
  logic [63:0] c120_kconst_re;  /* ufix1 [64] */
  logic [63:0] c120_kconst_im;  /* ufix1 [64] */
  logic kconst_re_3 [0:7] [0:7];  /* ufix1 [8x8] */
  logic kconst_im_3 [0:7] [0:7];  /* ufix1 [8x8] */
  logic [63:0] alpha_re_6;  /* ufix1 [64] */
  logic [63:0] alpha_im_6;  /* ufix1 [64] */
  logic [63:0] selector_out_re_3;  /* ufix1 [64] */
  logic [63:0] selector_out_im_3;  /* ufix1 [64] */
  logic [63:0] alpha_re_7;  /* ufix1 [64] */
  logic [63:0] alpha_im_7;  /* ufix1 [64] */
  logic [63:0] c146_kconst_re;  /* ufix1 [64] */
  logic [63:0] c146_kconst_im;  /* ufix1 [64] */
  logic kconst_re_4 [0:7] [0:7];  /* ufix1 [8x8] */
  logic kconst_im_4 [0:7] [0:7];  /* ufix1 [8x8] */
  logic [63:0] alpha_re_8;  /* ufix1 [64] */
  logic [63:0] alpha_im_8;  /* ufix1 [64] */
  logic [63:0] selector_out_re_4;  /* ufix1 [64] */
  logic [63:0] selector_out_im_4;  /* ufix1 [64] */
  logic [63:0] alpha_re_9;  /* ufix1 [64] */
  logic [63:0] alpha_im_9;  /* ufix1 [64] */
  vector_of_signed_logic_14 c172_kconst_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 c172_kconst_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 kconst_re_5 [0:7] [0:7];  /* sfix14_En13 [8x8] */
  vector_of_signed_logic_14 kconst_im_5 [0:7] [0:7];  /* sfix14_En13 [8x8] */
  vector_of_signed_logic_14 alpha_re_10 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_10 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_re_5 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_5 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_11 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_11 [0:63];  /* sfix14_En13 [64] */
  logic [7:0] initial_state_1;  /* ufix1 [8] */
  logic [63:0] selector_out;  /* ufix1 [64] */
  logic [63:0] s_1;  /* ufix1 [64] */
  vector_of_signed_logic_14 MMul_dot_product6_in1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product6_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product6_in1_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product6_cast_1 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_18 MMul_dot_product_out_re [0:63];  /* sfix18_En13 [64] */
  vector_of_signed_logic_18 MMul_dot_product_out_im [0:63];  /* sfix18_En13 [64] */
  vector_of_signed_logic_18 reshape_out_re [0:7] [0:7];  /* sfix18_En13 [8x8] */
  vector_of_signed_logic_18 reshape_out_im [0:7] [0:7];  /* sfix18_En13 [8x8] */
  vector_of_signed_logic_18 selector_out_re_6 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_6 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_7 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_7 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_01_out_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_01_out_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_8 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_8 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_12_out_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_12_out_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_9 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_9 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_23_out_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_23_out_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_10 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_10 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_34_out_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_34_out_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_11 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_11 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_45_out_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_45_out_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_12 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_12 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_56_out_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 MMul_add_56_out_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_re_13 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 selector_out_im_13 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 alpha_re_12 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 alpha_im_12 [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 out0_re [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_18 out0_im [0:7];  /* sfix18_En13 [8] */
  vector_of_signed_logic_14 state_after_H1_re [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 state_after_H1_im [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 selector_out_re_14 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_14 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_13 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_13 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product5_in0_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product5_sub_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product5_sub_cast_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product5_in0_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product5_sub_cast_2 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product5_sub_cast_3 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product5_in0_im_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product5_add_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product5_add_cast_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product5_in0_re_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product5_add_cast_2 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product5_add_cast_3 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product_out_re_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product_out_im_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 reshape_out_re_1 [0:7] [0:7];  /* sfix19_En13 [8x8] */
  vector_of_signed_logic_19 reshape_out_im_1 [0:7] [0:7];  /* sfix19_En13 [8x8] */
  vector_of_signed_logic_19 selector_out_re_15 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_15 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_16 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_16 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_01_out_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_01_out_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_17 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_17 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_12_out_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_12_out_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_18 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_18 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_23_out_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_23_out_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_19 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_19 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_34_out_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_34_out_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_20 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_20 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_45_out_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_45_out_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_21 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_21 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_56_out_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_56_out_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_22 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_22 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 alpha_re_14 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 alpha_im_14 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 out0_re_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 out0_im_1 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_14 state_after_CR2_12_re [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 state_after_CR2_12_im [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 selector_out_re_23 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_23 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_15 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_15 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product4_in0_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product4_sub_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product4_sub_cast_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product4_in0_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product4_sub_cast_2 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product4_sub_cast_3 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product4_in0_im_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product4_add_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product4_add_cast_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product4_in0_re_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product4_add_cast_2 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product4_add_cast_3 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product_out_re_2 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product_out_im_2 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 reshape_out_re_2 [0:7] [0:7];  /* sfix19_En13 [8x8] */
  vector_of_signed_logic_19 reshape_out_im_2 [0:7] [0:7];  /* sfix19_En13 [8x8] */
  vector_of_signed_logic_19 selector_out_re_24 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_24 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_25 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_25 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_01_out_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_01_out_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_26 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_26 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_12_out_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_12_out_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_27 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_27 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_23_out_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_23_out_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_28 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_28 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_34_out_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_34_out_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_29 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_29 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_45_out_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_45_out_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_30 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_30 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_56_out_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_56_out_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_31 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_31 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 alpha_re_16 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 alpha_im_16 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 out0_re_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 out0_im_2 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_14 state_after_CR3_13_re [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 state_after_CR3_13_im [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 selector_out_re_32 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_32 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_17 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_17 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_28 MMul_dot_product3_mul_temp [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product3_sub_cast [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_28 MMul_dot_product3_mul_temp_1 [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product3_sub_cast_1 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_28 MMul_dot_product3_mul_temp_2 [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product3_add_cast [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_28 MMul_dot_product3_mul_temp_3 [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product3_add_cast_1 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product_out_re_3 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product_out_im_3 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_32 reshape_out_re_3 [0:7] [0:7];  /* sfix32_En26 [8x8] */
  vector_of_signed_logic_32 reshape_out_im_3 [0:7] [0:7];  /* sfix32_En26 [8x8] */
  vector_of_signed_logic_32 selector_out_re_33 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_33 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_34 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_34 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_01_out_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_01_out_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_35 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_35 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_12_out_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_12_out_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_36 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_36 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_23_out_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_23_out_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_37 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_37 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_34_out_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_34_out_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_38 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_38 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_45_out_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_45_out_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_39 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_39 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_56_out_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_56_out_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_40 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_40 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 alpha_re_18 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 alpha_im_18 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 out0_re_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 out0_im_3 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_14 state_after_H2_re [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 state_after_H2_im [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 selector_out_re_41 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_41 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_19 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_19 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product2_in0_re [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product2_sub_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product2_sub_cast_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product2_in0_im [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product2_sub_cast_2 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product2_sub_cast_3 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product2_in0_im_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product2_add_cast [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product2_add_cast_1 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_14 MMul_dot_product2_in0_re_1 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_15 MMul_dot_product2_add_cast_2 [0:63];  /* sfix15_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product2_add_cast_3 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product_out_re_4 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 MMul_dot_product_out_im_4 [0:63];  /* sfix19_En13 [64] */
  vector_of_signed_logic_19 reshape_out_re_4 [0:7] [0:7];  /* sfix19_En13 [8x8] */
  vector_of_signed_logic_19 reshape_out_im_4 [0:7] [0:7];  /* sfix19_En13 [8x8] */
  vector_of_signed_logic_19 selector_out_re_42 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_42 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_43 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_43 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_01_out_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_01_out_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_44 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_44 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_12_out_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_12_out_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_45 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_45 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_23_out_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_23_out_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_46 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_46 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_34_out_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_34_out_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_47 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_47 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_45_out_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_45_out_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_48 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_48 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_56_out_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 MMul_add_56_out_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_re_49 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 selector_out_im_49 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 alpha_re_20 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 alpha_im_20 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 out0_re_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_19 out0_im_4 [0:7];  /* sfix19_En13 [8] */
  vector_of_signed_logic_14 state_after_CR2_23_re [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 state_after_CR2_23_im [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 selector_out_re_50 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 selector_out_im_50 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_re_21 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_14 alpha_im_21 [0:63];  /* sfix14_En13 [64] */
  vector_of_signed_logic_28 MMul_dot_product1_mul_temp [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product1_sub_cast [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_28 MMul_dot_product1_mul_temp_1 [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product1_sub_cast_1 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_28 MMul_dot_product1_mul_temp_2 [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product1_add_cast [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_28 MMul_dot_product1_mul_temp_3 [0:63];  /* sfix28_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product1_add_cast_1 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product_out_re_5 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_32 MMul_dot_product_out_im_5 [0:63];  /* sfix32_En26 [64] */
  vector_of_signed_logic_32 reshape_out_re_5 [0:7] [0:7];  /* sfix32_En26 [8x8] */
  vector_of_signed_logic_32 reshape_out_im_5 [0:7] [0:7];  /* sfix32_En26 [8x8] */
  vector_of_signed_logic_32 selector_out_re_51 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_51 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_52 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_52 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_01_out_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_01_out_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_53 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_53 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_12_out_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_12_out_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_54 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_54 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_23_out_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_23_out_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_55 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_55 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_34_out_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_34_out_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_56 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_56 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_45_out_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_45_out_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_57 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_57 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_56_out_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 MMul_add_56_out_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_re_58 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 selector_out_im_58 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 alpha_re_22 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 alpha_im_22 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 out0_re_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_32 out0_im_5 [0:7];  /* sfix32_En26 [8] */
  vector_of_signed_logic_14 result_re [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 result_im [0:7];  /* sfix14_En13 [8] */
  vector_of_signed_logic_14 state_after_H3_re [0:7];  /* sfix14_En14 [8] */
  vector_of_signed_logic_14 state_after_H3_im [0:7];  /* sfix14_En14 [8] */
  logic [63:0] selector_out_1;  /* ufix1 [64] */
  logic [63:0] s_2;  /* ufix1 [64] */
  vector_of_signed_logic_14 selector_out_re_59 [0:63];  /* sfix14_En14 [64] */
  vector_of_signed_logic_14 selector_out_im_59 [0:63];  /* sfix14_En14 [64] */
  vector_of_signed_logic_14 alpha_re_23 [0:63];  /* sfix14_En14 [64] */
  vector_of_signed_logic_14 alpha_im_23 [0:63];  /* sfix14_En14 [64] */
  vector_of_signed_logic_14 MMul_dot_product_in0 [0:63];  /* sfix14_En14 [64] */
  vector_of_signed_logic_15 MMul_dot_product_cast [0:63];  /* sfix15_En14 [64] */
  vector_of_signed_logic_14 MMul_dot_product_in0_1 [0:63];  /* sfix14_En14 [64] */
  vector_of_signed_logic_15 MMul_dot_product_cast_1 [0:63];  /* sfix15_En14 [64] */
  vector_of_signed_logic_18 MMul_dot_product_out_re_6 [0:63];  /* sfix18_En14 [64] */
  vector_of_signed_logic_18 MMul_dot_product_out_im_6 [0:63];  /* sfix18_En14 [64] */
  vector_of_signed_logic_18 reshape_out_re_6 [0:7] [0:7];  /* sfix18_En14 [8x8] */
  vector_of_signed_logic_18 reshape_out_im_6 [0:7] [0:7];  /* sfix18_En14 [8x8] */
  vector_of_signed_logic_18 selector_out_re_60 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_60 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_61 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_61 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_01_out_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_01_out_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_62 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_62 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_12_out_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_12_out_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_63 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_63 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_23_out_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_23_out_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_64 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_64 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_34_out_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_34_out_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_65 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_65 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_45_out_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_45_out_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_66 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_66 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_56_out_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 MMul_add_56_out_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_re_67 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 selector_out_im_67 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 alpha_re_24 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 alpha_im_24 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 out0_re_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_18 out0_im_6 [0:7];  /* sfix18_En14 [8] */
  vector_of_signed_logic_14 final_state_re_1 [0:7];  /* sfix14_En14 [8] */
  vector_of_signed_logic_14 final_state_im_1 [0:7];  /* sfix14_En14 [8] */
  vector_of_signed_logic_14 final_state_re_2 [0:7];  /* sfix14_En14 [8] */
  vector_of_signed_logic_14 final_state_im_2 [0:7];  /* sfix14_En14 [8] */


  assign c16_kconst = cval;

  always_comb begin
    kconst[0][0] = c16_kconst[0];
    kconst[1][0] = c16_kconst[1];
    kconst[2][0] = c16_kconst[2];
    kconst[3][0] = c16_kconst[3];
    kconst[4][0] = c16_kconst[4];
    kconst[5][0] = c16_kconst[5];
    kconst[6][0] = c16_kconst[6];
    kconst[7][0] = c16_kconst[7];
    kconst[0][1] = c16_kconst[8];
    kconst[1][1] = c16_kconst[9];
    kconst[2][1] = c16_kconst[10];
    kconst[3][1] = c16_kconst[11];
    kconst[4][1] = c16_kconst[12];
    kconst[5][1] = c16_kconst[13];
    kconst[6][1] = c16_kconst[14];
    kconst[7][1] = c16_kconst[15];
    kconst[0][2] = c16_kconst[16];
    kconst[1][2] = c16_kconst[17];
    kconst[2][2] = c16_kconst[18];
    kconst[3][2] = c16_kconst[19];
    kconst[4][2] = c16_kconst[20];
    kconst[5][2] = c16_kconst[21];
    kconst[6][2] = c16_kconst[22];
    kconst[7][2] = c16_kconst[23];
    kconst[0][3] = c16_kconst[24];
    kconst[1][3] = c16_kconst[25];
    kconst[2][3] = c16_kconst[26];
    kconst[3][3] = c16_kconst[27];
    kconst[4][3] = c16_kconst[28];
    kconst[5][3] = c16_kconst[29];
    kconst[6][3] = c16_kconst[30];
    kconst[7][3] = c16_kconst[31];
    kconst[0][4] = c16_kconst[32];
    kconst[1][4] = c16_kconst[33];
    kconst[2][4] = c16_kconst[34];
    kconst[3][4] = c16_kconst[35];
    kconst[4][4] = c16_kconst[36];
    kconst[5][4] = c16_kconst[37];
    kconst[6][4] = c16_kconst[38];
    kconst[7][4] = c16_kconst[39];
    kconst[0][5] = c16_kconst[40];
    kconst[1][5] = c16_kconst[41];
    kconst[2][5] = c16_kconst[42];
    kconst[3][5] = c16_kconst[43];
    kconst[4][5] = c16_kconst[44];
    kconst[5][5] = c16_kconst[45];
    kconst[6][5] = c16_kconst[46];
    kconst[7][5] = c16_kconst[47];
    kconst[0][6] = c16_kconst[48];
    kconst[1][6] = c16_kconst[49];
    kconst[2][6] = c16_kconst[50];
    kconst[3][6] = c16_kconst[51];
    kconst[4][6] = c16_kconst[52];
    kconst[5][6] = c16_kconst[53];
    kconst[6][6] = c16_kconst[54];
    kconst[7][6] = c16_kconst[55];
    kconst[0][7] = c16_kconst[56];
    kconst[1][7] = c16_kconst[57];
    kconst[2][7] = c16_kconst[58];
    kconst[3][7] = c16_kconst[59];
    kconst[4][7] = c16_kconst[60];
    kconst[5][7] = c16_kconst[61];
    kconst[6][7] = c16_kconst[62];
    kconst[7][7] = c16_kconst[63];
  end

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  always_comb begin
    s[0] = kconst[0][0];
    s[1] = kconst[1][0];
    s[2] = kconst[2][0];
    s[3] = kconst[3][0];
    s[4] = kconst[4][0];
    s[5] = kconst[5][0];
    s[6] = kconst[6][0];
    s[7] = kconst[7][0];
    s[8] = kconst[0][1];
    s[9] = kconst[1][1];
    s[10] = kconst[2][1];
    s[11] = kconst[3][1];
    s[12] = kconst[4][1];
    s[13] = kconst[5][1];
    s[14] = kconst[6][1];
    s[15] = kconst[7][1];
    s[16] = kconst[0][2];
    s[17] = kconst[1][2];
    s[18] = kconst[2][2];
    s[19] = kconst[3][2];
    s[20] = kconst[4][2];
    s[21] = kconst[5][2];
    s[22] = kconst[6][2];
    s[23] = kconst[7][2];
    s[24] = kconst[0][3];
    s[25] = kconst[1][3];
    s[26] = kconst[2][3];
    s[27] = kconst[3][3];
    s[28] = kconst[4][3];
    s[29] = kconst[5][3];
    s[30] = kconst[6][3];
    s[31] = kconst[7][3];
    s[32] = kconst[0][4];
    s[33] = kconst[1][4];
    s[34] = kconst[2][4];
    s[35] = kconst[3][4];
    s[36] = kconst[4][4];
    s[37] = kconst[5][4];
    s[38] = kconst[6][4];
    s[39] = kconst[7][4];
    s[40] = kconst[0][5];
    s[41] = kconst[1][5];
    s[42] = kconst[2][5];
    s[43] = kconst[3][5];
    s[44] = kconst[4][5];
    s[45] = kconst[5][5];
    s[46] = kconst[6][5];
    s[47] = kconst[7][5];
    s[48] = kconst[0][6];
    s[49] = kconst[1][6];
    s[50] = kconst[2][6];
    s[51] = kconst[3][6];
    s[52] = kconst[4][6];
    s[53] = kconst[5][6];
    s[54] = kconst[6][6];
    s[55] = kconst[7][6];
    s[56] = kconst[0][7];
    s[57] = kconst[1][7];
    s[58] = kconst[2][7];
    s[59] = kconst[3][7];
    s[60] = kconst[4][7];
    s[61] = kconst[5][7];
    s[62] = kconst[6][7];
    s[63] = kconst[7][7];
  end

  assign c42_kconst_re[0] = 14'sb01011010100000;
  assign c42_kconst_im[0] = 14'sb00000000000000;
  assign c42_kconst_re[1] = 14'sb01011010100000;
  assign c42_kconst_im[1] = 14'sb00000000000000;
  assign c42_kconst_re[2] = 14'sb00000000000000;
  assign c42_kconst_im[2] = 14'sb00000000000000;
  assign c42_kconst_re[3] = 14'sb00000000000000;
  assign c42_kconst_im[3] = 14'sb00000000000000;
  assign c42_kconst_re[4] = 14'sb00000000000000;
  assign c42_kconst_im[4] = 14'sb00000000000000;
  assign c42_kconst_re[5] = 14'sb00000000000000;
  assign c42_kconst_im[5] = 14'sb00000000000000;
  assign c42_kconst_re[6] = 14'sb00000000000000;
  assign c42_kconst_im[6] = 14'sb00000000000000;
  assign c42_kconst_re[7] = 14'sb00000000000000;
  assign c42_kconst_im[7] = 14'sb00000000000000;
  assign c42_kconst_re[8] = 14'sb01011010100000;
  assign c42_kconst_im[8] = 14'sb00000000000000;
  assign c42_kconst_re[9] = 14'sb10100101011111;
  assign c42_kconst_im[9] = 14'sb00000000000000;
  assign c42_kconst_re[10] = 14'sb00000000000000;
  assign c42_kconst_im[10] = 14'sb00000000000000;
  assign c42_kconst_re[11] = 14'sb00000000000000;
  assign c42_kconst_im[11] = 14'sb00000000000000;
  assign c42_kconst_re[12] = 14'sb00000000000000;
  assign c42_kconst_im[12] = 14'sb00000000000000;
  assign c42_kconst_re[13] = 14'sb00000000000000;
  assign c42_kconst_im[13] = 14'sb00000000000000;
  assign c42_kconst_re[14] = 14'sb00000000000000;
  assign c42_kconst_im[14] = 14'sb00000000000000;
  assign c42_kconst_re[15] = 14'sb00000000000000;
  assign c42_kconst_im[15] = 14'sb00000000000000;
  assign c42_kconst_re[16] = 14'sb00000000000000;
  assign c42_kconst_im[16] = 14'sb00000000000000;
  assign c42_kconst_re[17] = 14'sb00000000000000;
  assign c42_kconst_im[17] = 14'sb00000000000000;
  assign c42_kconst_re[18] = 14'sb01011010100000;
  assign c42_kconst_im[18] = 14'sb00000000000000;
  assign c42_kconst_re[19] = 14'sb01011010100000;
  assign c42_kconst_im[19] = 14'sb00000000000000;
  assign c42_kconst_re[20] = 14'sb00000000000000;
  assign c42_kconst_im[20] = 14'sb00000000000000;
  assign c42_kconst_re[21] = 14'sb00000000000000;
  assign c42_kconst_im[21] = 14'sb00000000000000;
  assign c42_kconst_re[22] = 14'sb00000000000000;
  assign c42_kconst_im[22] = 14'sb00000000000000;
  assign c42_kconst_re[23] = 14'sb00000000000000;
  assign c42_kconst_im[23] = 14'sb00000000000000;
  assign c42_kconst_re[24] = 14'sb00000000000000;
  assign c42_kconst_im[24] = 14'sb00000000000000;
  assign c42_kconst_re[25] = 14'sb00000000000000;
  assign c42_kconst_im[25] = 14'sb00000000000000;
  assign c42_kconst_re[26] = 14'sb01011010100000;
  assign c42_kconst_im[26] = 14'sb00000000000000;
  assign c42_kconst_re[27] = 14'sb10100101011111;
  assign c42_kconst_im[27] = 14'sb00000000000000;
  assign c42_kconst_re[28] = 14'sb00000000000000;
  assign c42_kconst_im[28] = 14'sb00000000000000;
  assign c42_kconst_re[29] = 14'sb00000000000000;
  assign c42_kconst_im[29] = 14'sb00000000000000;
  assign c42_kconst_re[30] = 14'sb00000000000000;
  assign c42_kconst_im[30] = 14'sb00000000000000;
  assign c42_kconst_re[31] = 14'sb00000000000000;
  assign c42_kconst_im[31] = 14'sb00000000000000;
  assign c42_kconst_re[32] = 14'sb00000000000000;
  assign c42_kconst_im[32] = 14'sb00000000000000;
  assign c42_kconst_re[33] = 14'sb00000000000000;
  assign c42_kconst_im[33] = 14'sb00000000000000;
  assign c42_kconst_re[34] = 14'sb00000000000000;
  assign c42_kconst_im[34] = 14'sb00000000000000;
  assign c42_kconst_re[35] = 14'sb00000000000000;
  assign c42_kconst_im[35] = 14'sb00000000000000;
  assign c42_kconst_re[36] = 14'sb01011010100000;
  assign c42_kconst_im[36] = 14'sb00000000000000;
  assign c42_kconst_re[37] = 14'sb01011010100000;
  assign c42_kconst_im[37] = 14'sb00000000000000;
  assign c42_kconst_re[38] = 14'sb00000000000000;
  assign c42_kconst_im[38] = 14'sb00000000000000;
  assign c42_kconst_re[39] = 14'sb00000000000000;
  assign c42_kconst_im[39] = 14'sb00000000000000;
  assign c42_kconst_re[40] = 14'sb00000000000000;
  assign c42_kconst_im[40] = 14'sb00000000000000;
  assign c42_kconst_re[41] = 14'sb00000000000000;
  assign c42_kconst_im[41] = 14'sb00000000000000;
  assign c42_kconst_re[42] = 14'sb00000000000000;
  assign c42_kconst_im[42] = 14'sb00000000000000;
  assign c42_kconst_re[43] = 14'sb00000000000000;
  assign c42_kconst_im[43] = 14'sb00000000000000;
  assign c42_kconst_re[44] = 14'sb01011010100000;
  assign c42_kconst_im[44] = 14'sb00000000000000;
  assign c42_kconst_re[45] = 14'sb10100101011111;
  assign c42_kconst_im[45] = 14'sb00000000000000;
  assign c42_kconst_re[46] = 14'sb00000000000000;
  assign c42_kconst_im[46] = 14'sb00000000000000;
  assign c42_kconst_re[47] = 14'sb00000000000000;
  assign c42_kconst_im[47] = 14'sb00000000000000;
  assign c42_kconst_re[48] = 14'sb00000000000000;
  assign c42_kconst_im[48] = 14'sb00000000000000;
  assign c42_kconst_re[49] = 14'sb00000000000000;
  assign c42_kconst_im[49] = 14'sb00000000000000;
  assign c42_kconst_re[50] = 14'sb00000000000000;
  assign c42_kconst_im[50] = 14'sb00000000000000;
  assign c42_kconst_re[51] = 14'sb00000000000000;
  assign c42_kconst_im[51] = 14'sb00000000000000;
  assign c42_kconst_re[52] = 14'sb00000000000000;
  assign c42_kconst_im[52] = 14'sb00000000000000;
  assign c42_kconst_re[53] = 14'sb00000000000000;
  assign c42_kconst_im[53] = 14'sb00000000000000;
  assign c42_kconst_re[54] = 14'sb01011010100000;
  assign c42_kconst_im[54] = 14'sb00000000000000;
  assign c42_kconst_re[55] = 14'sb01011010100000;
  assign c42_kconst_im[55] = 14'sb00000000000000;
  assign c42_kconst_re[56] = 14'sb00000000000000;
  assign c42_kconst_im[56] = 14'sb00000000000000;
  assign c42_kconst_re[57] = 14'sb00000000000000;
  assign c42_kconst_im[57] = 14'sb00000000000000;
  assign c42_kconst_re[58] = 14'sb00000000000000;
  assign c42_kconst_im[58] = 14'sb00000000000000;
  assign c42_kconst_re[59] = 14'sb00000000000000;
  assign c42_kconst_im[59] = 14'sb00000000000000;
  assign c42_kconst_re[60] = 14'sb00000000000000;
  assign c42_kconst_im[60] = 14'sb00000000000000;
  assign c42_kconst_re[61] = 14'sb00000000000000;
  assign c42_kconst_im[61] = 14'sb00000000000000;
  assign c42_kconst_re[62] = 14'sb01011010100000;
  assign c42_kconst_im[62] = 14'sb00000000000000;
  assign c42_kconst_re[63] = 14'sb10100101011111;
  assign c42_kconst_im[63] = 14'sb00000000000000;

  always_comb begin
    kconst_re[0][0] = c42_kconst_re[0];
    kconst_im[0][0] = c42_kconst_im[0];
    kconst_re[1][0] = c42_kconst_re[1];
    kconst_im[1][0] = c42_kconst_im[1];
    kconst_re[2][0] = c42_kconst_re[2];
    kconst_im[2][0] = c42_kconst_im[2];
    kconst_re[3][0] = c42_kconst_re[3];
    kconst_im[3][0] = c42_kconst_im[3];
    kconst_re[4][0] = c42_kconst_re[4];
    kconst_im[4][0] = c42_kconst_im[4];
    kconst_re[5][0] = c42_kconst_re[5];
    kconst_im[5][0] = c42_kconst_im[5];
    kconst_re[6][0] = c42_kconst_re[6];
    kconst_im[6][0] = c42_kconst_im[6];
    kconst_re[7][0] = c42_kconst_re[7];
    kconst_im[7][0] = c42_kconst_im[7];
    kconst_re[0][1] = c42_kconst_re[8];
    kconst_im[0][1] = c42_kconst_im[8];
    kconst_re[1][1] = c42_kconst_re[9];
    kconst_im[1][1] = c42_kconst_im[9];
    kconst_re[2][1] = c42_kconst_re[10];
    kconst_im[2][1] = c42_kconst_im[10];
    kconst_re[3][1] = c42_kconst_re[11];
    kconst_im[3][1] = c42_kconst_im[11];
    kconst_re[4][1] = c42_kconst_re[12];
    kconst_im[4][1] = c42_kconst_im[12];
    kconst_re[5][1] = c42_kconst_re[13];
    kconst_im[5][1] = c42_kconst_im[13];
    kconst_re[6][1] = c42_kconst_re[14];
    kconst_im[6][1] = c42_kconst_im[14];
    kconst_re[7][1] = c42_kconst_re[15];
    kconst_im[7][1] = c42_kconst_im[15];
    kconst_re[0][2] = c42_kconst_re[16];
    kconst_im[0][2] = c42_kconst_im[16];
    kconst_re[1][2] = c42_kconst_re[17];
    kconst_im[1][2] = c42_kconst_im[17];
    kconst_re[2][2] = c42_kconst_re[18];
    kconst_im[2][2] = c42_kconst_im[18];
    kconst_re[3][2] = c42_kconst_re[19];
    kconst_im[3][2] = c42_kconst_im[19];
    kconst_re[4][2] = c42_kconst_re[20];
    kconst_im[4][2] = c42_kconst_im[20];
    kconst_re[5][2] = c42_kconst_re[21];
    kconst_im[5][2] = c42_kconst_im[21];
    kconst_re[6][2] = c42_kconst_re[22];
    kconst_im[6][2] = c42_kconst_im[22];
    kconst_re[7][2] = c42_kconst_re[23];
    kconst_im[7][2] = c42_kconst_im[23];
    kconst_re[0][3] = c42_kconst_re[24];
    kconst_im[0][3] = c42_kconst_im[24];
    kconst_re[1][3] = c42_kconst_re[25];
    kconst_im[1][3] = c42_kconst_im[25];
    kconst_re[2][3] = c42_kconst_re[26];
    kconst_im[2][3] = c42_kconst_im[26];
    kconst_re[3][3] = c42_kconst_re[27];
    kconst_im[3][3] = c42_kconst_im[27];
    kconst_re[4][3] = c42_kconst_re[28];
    kconst_im[4][3] = c42_kconst_im[28];
    kconst_re[5][3] = c42_kconst_re[29];
    kconst_im[5][3] = c42_kconst_im[29];
    kconst_re[6][3] = c42_kconst_re[30];
    kconst_im[6][3] = c42_kconst_im[30];
    kconst_re[7][3] = c42_kconst_re[31];
    kconst_im[7][3] = c42_kconst_im[31];
    kconst_re[0][4] = c42_kconst_re[32];
    kconst_im[0][4] = c42_kconst_im[32];
    kconst_re[1][4] = c42_kconst_re[33];
    kconst_im[1][4] = c42_kconst_im[33];
    kconst_re[2][4] = c42_kconst_re[34];
    kconst_im[2][4] = c42_kconst_im[34];
    kconst_re[3][4] = c42_kconst_re[35];
    kconst_im[3][4] = c42_kconst_im[35];
    kconst_re[4][4] = c42_kconst_re[36];
    kconst_im[4][4] = c42_kconst_im[36];
    kconst_re[5][4] = c42_kconst_re[37];
    kconst_im[5][4] = c42_kconst_im[37];
    kconst_re[6][4] = c42_kconst_re[38];
    kconst_im[6][4] = c42_kconst_im[38];
    kconst_re[7][4] = c42_kconst_re[39];
    kconst_im[7][4] = c42_kconst_im[39];
    kconst_re[0][5] = c42_kconst_re[40];
    kconst_im[0][5] = c42_kconst_im[40];
    kconst_re[1][5] = c42_kconst_re[41];
    kconst_im[1][5] = c42_kconst_im[41];
    kconst_re[2][5] = c42_kconst_re[42];
    kconst_im[2][5] = c42_kconst_im[42];
    kconst_re[3][5] = c42_kconst_re[43];
    kconst_im[3][5] = c42_kconst_im[43];
    kconst_re[4][5] = c42_kconst_re[44];
    kconst_im[4][5] = c42_kconst_im[44];
    kconst_re[5][5] = c42_kconst_re[45];
    kconst_im[5][5] = c42_kconst_im[45];
    kconst_re[6][5] = c42_kconst_re[46];
    kconst_im[6][5] = c42_kconst_im[46];
    kconst_re[7][5] = c42_kconst_re[47];
    kconst_im[7][5] = c42_kconst_im[47];
    kconst_re[0][6] = c42_kconst_re[48];
    kconst_im[0][6] = c42_kconst_im[48];
    kconst_re[1][6] = c42_kconst_re[49];
    kconst_im[1][6] = c42_kconst_im[49];
    kconst_re[2][6] = c42_kconst_re[50];
    kconst_im[2][6] = c42_kconst_im[50];
    kconst_re[3][6] = c42_kconst_re[51];
    kconst_im[3][6] = c42_kconst_im[51];
    kconst_re[4][6] = c42_kconst_re[52];
    kconst_im[4][6] = c42_kconst_im[52];
    kconst_re[5][6] = c42_kconst_re[53];
    kconst_im[5][6] = c42_kconst_im[53];
    kconst_re[6][6] = c42_kconst_re[54];
    kconst_im[6][6] = c42_kconst_im[54];
    kconst_re[7][6] = c42_kconst_re[55];
    kconst_im[7][6] = c42_kconst_im[55];
    kconst_re[0][7] = c42_kconst_re[56];
    kconst_im[0][7] = c42_kconst_im[56];
    kconst_re[1][7] = c42_kconst_re[57];
    kconst_im[1][7] = c42_kconst_im[57];
    kconst_re[2][7] = c42_kconst_re[58];
    kconst_im[2][7] = c42_kconst_im[58];
    kconst_re[3][7] = c42_kconst_re[59];
    kconst_im[3][7] = c42_kconst_im[59];
    kconst_re[4][7] = c42_kconst_re[60];
    kconst_im[4][7] = c42_kconst_im[60];
    kconst_re[5][7] = c42_kconst_re[61];
    kconst_im[5][7] = c42_kconst_im[61];
    kconst_re[6][7] = c42_kconst_re[62];
    kconst_im[6][7] = c42_kconst_im[62];
    kconst_re[7][7] = c42_kconst_re[63];
    kconst_im[7][7] = c42_kconst_im[63];
  end

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  always_comb begin
    alpha_re[0] = kconst_re[0][0];
    alpha_im[0] = kconst_im[0][0];
    alpha_re[1] = kconst_re[1][0];
    alpha_im[1] = kconst_im[1][0];
    alpha_re[2] = kconst_re[2][0];
    alpha_im[2] = kconst_im[2][0];
    alpha_re[3] = kconst_re[3][0];
    alpha_im[3] = kconst_im[3][0];
    alpha_re[4] = kconst_re[4][0];
    alpha_im[4] = kconst_im[4][0];
    alpha_re[5] = kconst_re[5][0];
    alpha_im[5] = kconst_im[5][0];
    alpha_re[6] = kconst_re[6][0];
    alpha_im[6] = kconst_im[6][0];
    alpha_re[7] = kconst_re[7][0];
    alpha_im[7] = kconst_im[7][0];
    alpha_re[8] = kconst_re[0][1];
    alpha_im[8] = kconst_im[0][1];
    alpha_re[9] = kconst_re[1][1];
    alpha_im[9] = kconst_im[1][1];
    alpha_re[10] = kconst_re[2][1];
    alpha_im[10] = kconst_im[2][1];
    alpha_re[11] = kconst_re[3][1];
    alpha_im[11] = kconst_im[3][1];
    alpha_re[12] = kconst_re[4][1];
    alpha_im[12] = kconst_im[4][1];
    alpha_re[13] = kconst_re[5][1];
    alpha_im[13] = kconst_im[5][1];
    alpha_re[14] = kconst_re[6][1];
    alpha_im[14] = kconst_im[6][1];
    alpha_re[15] = kconst_re[7][1];
    alpha_im[15] = kconst_im[7][1];
    alpha_re[16] = kconst_re[0][2];
    alpha_im[16] = kconst_im[0][2];
    alpha_re[17] = kconst_re[1][2];
    alpha_im[17] = kconst_im[1][2];
    alpha_re[18] = kconst_re[2][2];
    alpha_im[18] = kconst_im[2][2];
    alpha_re[19] = kconst_re[3][2];
    alpha_im[19] = kconst_im[3][2];
    alpha_re[20] = kconst_re[4][2];
    alpha_im[20] = kconst_im[4][2];
    alpha_re[21] = kconst_re[5][2];
    alpha_im[21] = kconst_im[5][2];
    alpha_re[22] = kconst_re[6][2];
    alpha_im[22] = kconst_im[6][2];
    alpha_re[23] = kconst_re[7][2];
    alpha_im[23] = kconst_im[7][2];
    alpha_re[24] = kconst_re[0][3];
    alpha_im[24] = kconst_im[0][3];
    alpha_re[25] = kconst_re[1][3];
    alpha_im[25] = kconst_im[1][3];
    alpha_re[26] = kconst_re[2][3];
    alpha_im[26] = kconst_im[2][3];
    alpha_re[27] = kconst_re[3][3];
    alpha_im[27] = kconst_im[3][3];
    alpha_re[28] = kconst_re[4][3];
    alpha_im[28] = kconst_im[4][3];
    alpha_re[29] = kconst_re[5][3];
    alpha_im[29] = kconst_im[5][3];
    alpha_re[30] = kconst_re[6][3];
    alpha_im[30] = kconst_im[6][3];
    alpha_re[31] = kconst_re[7][3];
    alpha_im[31] = kconst_im[7][3];
    alpha_re[32] = kconst_re[0][4];
    alpha_im[32] = kconst_im[0][4];
    alpha_re[33] = kconst_re[1][4];
    alpha_im[33] = kconst_im[1][4];
    alpha_re[34] = kconst_re[2][4];
    alpha_im[34] = kconst_im[2][4];
    alpha_re[35] = kconst_re[3][4];
    alpha_im[35] = kconst_im[3][4];
    alpha_re[36] = kconst_re[4][4];
    alpha_im[36] = kconst_im[4][4];
    alpha_re[37] = kconst_re[5][4];
    alpha_im[37] = kconst_im[5][4];
    alpha_re[38] = kconst_re[6][4];
    alpha_im[38] = kconst_im[6][4];
    alpha_re[39] = kconst_re[7][4];
    alpha_im[39] = kconst_im[7][4];
    alpha_re[40] = kconst_re[0][5];
    alpha_im[40] = kconst_im[0][5];
    alpha_re[41] = kconst_re[1][5];
    alpha_im[41] = kconst_im[1][5];
    alpha_re[42] = kconst_re[2][5];
    alpha_im[42] = kconst_im[2][5];
    alpha_re[43] = kconst_re[3][5];
    alpha_im[43] = kconst_im[3][5];
    alpha_re[44] = kconst_re[4][5];
    alpha_im[44] = kconst_im[4][5];
    alpha_re[45] = kconst_re[5][5];
    alpha_im[45] = kconst_im[5][5];
    alpha_re[46] = kconst_re[6][5];
    alpha_im[46] = kconst_im[6][5];
    alpha_re[47] = kconst_re[7][5];
    alpha_im[47] = kconst_im[7][5];
    alpha_re[48] = kconst_re[0][6];
    alpha_im[48] = kconst_im[0][6];
    alpha_re[49] = kconst_re[1][6];
    alpha_im[49] = kconst_im[1][6];
    alpha_re[50] = kconst_re[2][6];
    alpha_im[50] = kconst_im[2][6];
    alpha_re[51] = kconst_re[3][6];
    alpha_im[51] = kconst_im[3][6];
    alpha_re[52] = kconst_re[4][6];
    alpha_im[52] = kconst_im[4][6];
    alpha_re[53] = kconst_re[5][6];
    alpha_im[53] = kconst_im[5][6];
    alpha_re[54] = kconst_re[6][6];
    alpha_im[54] = kconst_im[6][6];
    alpha_re[55] = kconst_re[7][6];
    alpha_im[55] = kconst_im[7][6];
    alpha_re[56] = kconst_re[0][7];
    alpha_im[56] = kconst_im[0][7];
    alpha_re[57] = kconst_re[1][7];
    alpha_im[57] = kconst_im[1][7];
    alpha_re[58] = kconst_re[2][7];
    alpha_im[58] = kconst_im[2][7];
    alpha_re[59] = kconst_re[3][7];
    alpha_im[59] = kconst_im[3][7];
    alpha_re[60] = kconst_re[4][7];
    alpha_im[60] = kconst_im[4][7];
    alpha_re[61] = kconst_re[5][7];
    alpha_im[61] = kconst_im[5][7];
    alpha_re[62] = kconst_re[6][7];
    alpha_im[62] = kconst_im[6][7];
    alpha_re[63] = kconst_re[7][7];
    alpha_im[63] = kconst_im[7][7];
  end

  assign selector_out_re[0] = alpha_re[0];
  assign selector_out_re[1] = alpha_re[8];
  assign selector_out_re[2] = alpha_re[16];
  assign selector_out_re[3] = alpha_re[24];
  assign selector_out_re[4] = alpha_re[32];
  assign selector_out_re[5] = alpha_re[40];
  assign selector_out_re[6] = alpha_re[48];
  assign selector_out_re[7] = alpha_re[56];
  assign selector_out_re[8] = alpha_re[1];
  assign selector_out_re[9] = alpha_re[9];
  assign selector_out_re[10] = alpha_re[17];
  assign selector_out_re[11] = alpha_re[25];
  assign selector_out_re[12] = alpha_re[33];
  assign selector_out_re[13] = alpha_re[41];
  assign selector_out_re[14] = alpha_re[49];
  assign selector_out_re[15] = alpha_re[57];
  assign selector_out_re[16] = alpha_re[2];
  assign selector_out_re[17] = alpha_re[10];
  assign selector_out_re[18] = alpha_re[18];
  assign selector_out_re[19] = alpha_re[26];
  assign selector_out_re[20] = alpha_re[34];
  assign selector_out_re[21] = alpha_re[42];
  assign selector_out_re[22] = alpha_re[50];
  assign selector_out_re[23] = alpha_re[58];
  assign selector_out_re[24] = alpha_re[3];
  assign selector_out_re[25] = alpha_re[11];
  assign selector_out_re[26] = alpha_re[19];
  assign selector_out_re[27] = alpha_re[27];
  assign selector_out_re[28] = alpha_re[35];
  assign selector_out_re[29] = alpha_re[43];
  assign selector_out_re[30] = alpha_re[51];
  assign selector_out_re[31] = alpha_re[59];
  assign selector_out_re[32] = alpha_re[4];
  assign selector_out_re[33] = alpha_re[12];
  assign selector_out_re[34] = alpha_re[20];
  assign selector_out_re[35] = alpha_re[28];
  assign selector_out_re[36] = alpha_re[36];
  assign selector_out_re[37] = alpha_re[44];
  assign selector_out_re[38] = alpha_re[52];
  assign selector_out_re[39] = alpha_re[60];
  assign selector_out_re[40] = alpha_re[5];
  assign selector_out_re[41] = alpha_re[13];
  assign selector_out_re[42] = alpha_re[21];
  assign selector_out_re[43] = alpha_re[29];
  assign selector_out_re[44] = alpha_re[37];
  assign selector_out_re[45] = alpha_re[45];
  assign selector_out_re[46] = alpha_re[53];
  assign selector_out_re[47] = alpha_re[61];
  assign selector_out_re[48] = alpha_re[6];
  assign selector_out_re[49] = alpha_re[14];
  assign selector_out_re[50] = alpha_re[22];
  assign selector_out_re[51] = alpha_re[30];
  assign selector_out_re[52] = alpha_re[38];
  assign selector_out_re[53] = alpha_re[46];
  assign selector_out_re[54] = alpha_re[54];
  assign selector_out_re[55] = alpha_re[62];
  assign selector_out_re[56] = alpha_re[7];
  assign selector_out_re[57] = alpha_re[15];
  assign selector_out_re[58] = alpha_re[23];
  assign selector_out_re[59] = alpha_re[31];
  assign selector_out_re[60] = alpha_re[39];
  assign selector_out_re[61] = alpha_re[47];
  assign selector_out_re[62] = alpha_re[55];
  assign selector_out_re[63] = alpha_re[63];

  assign selector_out_im[0] = alpha_im[0];
  assign selector_out_im[1] = alpha_im[8];
  assign selector_out_im[2] = alpha_im[16];
  assign selector_out_im[3] = alpha_im[24];
  assign selector_out_im[4] = alpha_im[32];
  assign selector_out_im[5] = alpha_im[40];
  assign selector_out_im[6] = alpha_im[48];
  assign selector_out_im[7] = alpha_im[56];
  assign selector_out_im[8] = alpha_im[1];
  assign selector_out_im[9] = alpha_im[9];
  assign selector_out_im[10] = alpha_im[17];
  assign selector_out_im[11] = alpha_im[25];
  assign selector_out_im[12] = alpha_im[33];
  assign selector_out_im[13] = alpha_im[41];
  assign selector_out_im[14] = alpha_im[49];
  assign selector_out_im[15] = alpha_im[57];
  assign selector_out_im[16] = alpha_im[2];
  assign selector_out_im[17] = alpha_im[10];
  assign selector_out_im[18] = alpha_im[18];
  assign selector_out_im[19] = alpha_im[26];
  assign selector_out_im[20] = alpha_im[34];
  assign selector_out_im[21] = alpha_im[42];
  assign selector_out_im[22] = alpha_im[50];
  assign selector_out_im[23] = alpha_im[58];
  assign selector_out_im[24] = alpha_im[3];
  assign selector_out_im[25] = alpha_im[11];
  assign selector_out_im[26] = alpha_im[19];
  assign selector_out_im[27] = alpha_im[27];
  assign selector_out_im[28] = alpha_im[35];
  assign selector_out_im[29] = alpha_im[43];
  assign selector_out_im[30] = alpha_im[51];
  assign selector_out_im[31] = alpha_im[59];
  assign selector_out_im[32] = alpha_im[4];
  assign selector_out_im[33] = alpha_im[12];
  assign selector_out_im[34] = alpha_im[20];
  assign selector_out_im[35] = alpha_im[28];
  assign selector_out_im[36] = alpha_im[36];
  assign selector_out_im[37] = alpha_im[44];
  assign selector_out_im[38] = alpha_im[52];
  assign selector_out_im[39] = alpha_im[60];
  assign selector_out_im[40] = alpha_im[5];
  assign selector_out_im[41] = alpha_im[13];
  assign selector_out_im[42] = alpha_im[21];
  assign selector_out_im[43] = alpha_im[29];
  assign selector_out_im[44] = alpha_im[37];
  assign selector_out_im[45] = alpha_im[45];
  assign selector_out_im[46] = alpha_im[53];
  assign selector_out_im[47] = alpha_im[61];
  assign selector_out_im[48] = alpha_im[6];
  assign selector_out_im[49] = alpha_im[14];
  assign selector_out_im[50] = alpha_im[22];
  assign selector_out_im[51] = alpha_im[30];
  assign selector_out_im[52] = alpha_im[38];
  assign selector_out_im[53] = alpha_im[46];
  assign selector_out_im[54] = alpha_im[54];
  assign selector_out_im[55] = alpha_im[62];
  assign selector_out_im[56] = alpha_im[7];
  assign selector_out_im[57] = alpha_im[15];
  assign selector_out_im[58] = alpha_im[23];
  assign selector_out_im[59] = alpha_im[31];
  assign selector_out_im[60] = alpha_im[39];
  assign selector_out_im[61] = alpha_im[47];
  assign selector_out_im[62] = alpha_im[55];
  assign selector_out_im[63] = alpha_im[63];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign alpha_re_1[0] = selector_out_re[0];
  assign alpha_im_1[0] = selector_out_im[0];
  assign alpha_re_1[1] = selector_out_re[1];
  assign alpha_im_1[1] = selector_out_im[1];
  assign alpha_re_1[2] = selector_out_re[2];
  assign alpha_im_1[2] = selector_out_im[2];
  assign alpha_re_1[3] = selector_out_re[3];
  assign alpha_im_1[3] = selector_out_im[3];
  assign alpha_re_1[4] = selector_out_re[4];
  assign alpha_im_1[4] = selector_out_im[4];
  assign alpha_re_1[5] = selector_out_re[5];
  assign alpha_im_1[5] = selector_out_im[5];
  assign alpha_re_1[6] = selector_out_re[6];
  assign alpha_im_1[6] = selector_out_im[6];
  assign alpha_re_1[7] = selector_out_re[7];
  assign alpha_im_1[7] = selector_out_im[7];
  assign alpha_re_1[8] = selector_out_re[8];
  assign alpha_im_1[8] = selector_out_im[8];
  assign alpha_re_1[9] = selector_out_re[9];
  assign alpha_im_1[9] = selector_out_im[9];
  assign alpha_re_1[10] = selector_out_re[10];
  assign alpha_im_1[10] = selector_out_im[10];
  assign alpha_re_1[11] = selector_out_re[11];
  assign alpha_im_1[11] = selector_out_im[11];
  assign alpha_re_1[12] = selector_out_re[12];
  assign alpha_im_1[12] = selector_out_im[12];
  assign alpha_re_1[13] = selector_out_re[13];
  assign alpha_im_1[13] = selector_out_im[13];
  assign alpha_re_1[14] = selector_out_re[14];
  assign alpha_im_1[14] = selector_out_im[14];
  assign alpha_re_1[15] = selector_out_re[15];
  assign alpha_im_1[15] = selector_out_im[15];
  assign alpha_re_1[16] = selector_out_re[16];
  assign alpha_im_1[16] = selector_out_im[16];
  assign alpha_re_1[17] = selector_out_re[17];
  assign alpha_im_1[17] = selector_out_im[17];
  assign alpha_re_1[18] = selector_out_re[18];
  assign alpha_im_1[18] = selector_out_im[18];
  assign alpha_re_1[19] = selector_out_re[19];
  assign alpha_im_1[19] = selector_out_im[19];
  assign alpha_re_1[20] = selector_out_re[20];
  assign alpha_im_1[20] = selector_out_im[20];
  assign alpha_re_1[21] = selector_out_re[21];
  assign alpha_im_1[21] = selector_out_im[21];
  assign alpha_re_1[22] = selector_out_re[22];
  assign alpha_im_1[22] = selector_out_im[22];
  assign alpha_re_1[23] = selector_out_re[23];
  assign alpha_im_1[23] = selector_out_im[23];
  assign alpha_re_1[24] = selector_out_re[24];
  assign alpha_im_1[24] = selector_out_im[24];
  assign alpha_re_1[25] = selector_out_re[25];
  assign alpha_im_1[25] = selector_out_im[25];
  assign alpha_re_1[26] = selector_out_re[26];
  assign alpha_im_1[26] = selector_out_im[26];
  assign alpha_re_1[27] = selector_out_re[27];
  assign alpha_im_1[27] = selector_out_im[27];
  assign alpha_re_1[28] = selector_out_re[28];
  assign alpha_im_1[28] = selector_out_im[28];
  assign alpha_re_1[29] = selector_out_re[29];
  assign alpha_im_1[29] = selector_out_im[29];
  assign alpha_re_1[30] = selector_out_re[30];
  assign alpha_im_1[30] = selector_out_im[30];
  assign alpha_re_1[31] = selector_out_re[31];
  assign alpha_im_1[31] = selector_out_im[31];
  assign alpha_re_1[32] = selector_out_re[32];
  assign alpha_im_1[32] = selector_out_im[32];
  assign alpha_re_1[33] = selector_out_re[33];
  assign alpha_im_1[33] = selector_out_im[33];
  assign alpha_re_1[34] = selector_out_re[34];
  assign alpha_im_1[34] = selector_out_im[34];
  assign alpha_re_1[35] = selector_out_re[35];
  assign alpha_im_1[35] = selector_out_im[35];
  assign alpha_re_1[36] = selector_out_re[36];
  assign alpha_im_1[36] = selector_out_im[36];
  assign alpha_re_1[37] = selector_out_re[37];
  assign alpha_im_1[37] = selector_out_im[37];
  assign alpha_re_1[38] = selector_out_re[38];
  assign alpha_im_1[38] = selector_out_im[38];
  assign alpha_re_1[39] = selector_out_re[39];
  assign alpha_im_1[39] = selector_out_im[39];
  assign alpha_re_1[40] = selector_out_re[40];
  assign alpha_im_1[40] = selector_out_im[40];
  assign alpha_re_1[41] = selector_out_re[41];
  assign alpha_im_1[41] = selector_out_im[41];
  assign alpha_re_1[42] = selector_out_re[42];
  assign alpha_im_1[42] = selector_out_im[42];
  assign alpha_re_1[43] = selector_out_re[43];
  assign alpha_im_1[43] = selector_out_im[43];
  assign alpha_re_1[44] = selector_out_re[44];
  assign alpha_im_1[44] = selector_out_im[44];
  assign alpha_re_1[45] = selector_out_re[45];
  assign alpha_im_1[45] = selector_out_im[45];
  assign alpha_re_1[46] = selector_out_re[46];
  assign alpha_im_1[46] = selector_out_im[46];
  assign alpha_re_1[47] = selector_out_re[47];
  assign alpha_im_1[47] = selector_out_im[47];
  assign alpha_re_1[48] = selector_out_re[48];
  assign alpha_im_1[48] = selector_out_im[48];
  assign alpha_re_1[49] = selector_out_re[49];
  assign alpha_im_1[49] = selector_out_im[49];
  assign alpha_re_1[50] = selector_out_re[50];
  assign alpha_im_1[50] = selector_out_im[50];
  assign alpha_re_1[51] = selector_out_re[51];
  assign alpha_im_1[51] = selector_out_im[51];
  assign alpha_re_1[52] = selector_out_re[52];
  assign alpha_im_1[52] = selector_out_im[52];
  assign alpha_re_1[53] = selector_out_re[53];
  assign alpha_im_1[53] = selector_out_im[53];
  assign alpha_re_1[54] = selector_out_re[54];
  assign alpha_im_1[54] = selector_out_im[54];
  assign alpha_re_1[55] = selector_out_re[55];
  assign alpha_im_1[55] = selector_out_im[55];
  assign alpha_re_1[56] = selector_out_re[56];
  assign alpha_im_1[56] = selector_out_im[56];
  assign alpha_re_1[57] = selector_out_re[57];
  assign alpha_im_1[57] = selector_out_im[57];
  assign alpha_re_1[58] = selector_out_re[58];
  assign alpha_im_1[58] = selector_out_im[58];
  assign alpha_re_1[59] = selector_out_re[59];
  assign alpha_im_1[59] = selector_out_im[59];
  assign alpha_re_1[60] = selector_out_re[60];
  assign alpha_im_1[60] = selector_out_im[60];
  assign alpha_re_1[61] = selector_out_re[61];
  assign alpha_im_1[61] = selector_out_im[61];
  assign alpha_re_1[62] = selector_out_re[62];
  assign alpha_im_1[62] = selector_out_im[62];
  assign alpha_re_1[63] = selector_out_re[63];
  assign alpha_im_1[63] = selector_out_im[63];

  assign c68_kconst_re = gain_const2_data;
  assign c68_kconst_im = '{64{1'b0}};

  always_comb begin
    kconst_re_1[0][0] = c68_kconst_re[0];
    kconst_im_1[0][0] = c68_kconst_im[0];
    kconst_re_1[1][0] = c68_kconst_re[1];
    kconst_im_1[1][0] = c68_kconst_im[1];
    kconst_re_1[2][0] = c68_kconst_re[2];
    kconst_im_1[2][0] = c68_kconst_im[2];
    kconst_re_1[3][0] = c68_kconst_re[3];
    kconst_im_1[3][0] = c68_kconst_im[3];
    kconst_re_1[4][0] = c68_kconst_re[4];
    kconst_im_1[4][0] = c68_kconst_im[4];
    kconst_re_1[5][0] = c68_kconst_re[5];
    kconst_im_1[5][0] = c68_kconst_im[5];
    kconst_re_1[6][0] = c68_kconst_re[6];
    kconst_im_1[6][0] = c68_kconst_im[6];
    kconst_re_1[7][0] = c68_kconst_re[7];
    kconst_im_1[7][0] = c68_kconst_im[7];
    kconst_re_1[0][1] = c68_kconst_re[8];
    kconst_im_1[0][1] = c68_kconst_im[8];
    kconst_re_1[1][1] = c68_kconst_re[9];
    kconst_im_1[1][1] = c68_kconst_im[9];
    kconst_re_1[2][1] = c68_kconst_re[10];
    kconst_im_1[2][1] = c68_kconst_im[10];
    kconst_re_1[3][1] = c68_kconst_re[11];
    kconst_im_1[3][1] = c68_kconst_im[11];
    kconst_re_1[4][1] = c68_kconst_re[12];
    kconst_im_1[4][1] = c68_kconst_im[12];
    kconst_re_1[5][1] = c68_kconst_re[13];
    kconst_im_1[5][1] = c68_kconst_im[13];
    kconst_re_1[6][1] = c68_kconst_re[14];
    kconst_im_1[6][1] = c68_kconst_im[14];
    kconst_re_1[7][1] = c68_kconst_re[15];
    kconst_im_1[7][1] = c68_kconst_im[15];
    kconst_re_1[0][2] = c68_kconst_re[16];
    kconst_im_1[0][2] = c68_kconst_im[16];
    kconst_re_1[1][2] = c68_kconst_re[17];
    kconst_im_1[1][2] = c68_kconst_im[17];
    kconst_re_1[2][2] = c68_kconst_re[18];
    kconst_im_1[2][2] = c68_kconst_im[18];
    kconst_re_1[3][2] = c68_kconst_re[19];
    kconst_im_1[3][2] = c68_kconst_im[19];
    kconst_re_1[4][2] = c68_kconst_re[20];
    kconst_im_1[4][2] = c68_kconst_im[20];
    kconst_re_1[5][2] = c68_kconst_re[21];
    kconst_im_1[5][2] = c68_kconst_im[21];
    kconst_re_1[6][2] = c68_kconst_re[22];
    kconst_im_1[6][2] = c68_kconst_im[22];
    kconst_re_1[7][2] = c68_kconst_re[23];
    kconst_im_1[7][2] = c68_kconst_im[23];
    kconst_re_1[0][3] = c68_kconst_re[24];
    kconst_im_1[0][3] = c68_kconst_im[24];
    kconst_re_1[1][3] = c68_kconst_re[25];
    kconst_im_1[1][3] = c68_kconst_im[25];
    kconst_re_1[2][3] = c68_kconst_re[26];
    kconst_im_1[2][3] = c68_kconst_im[26];
    kconst_re_1[3][3] = c68_kconst_re[27];
    kconst_im_1[3][3] = c68_kconst_im[27];
    kconst_re_1[4][3] = c68_kconst_re[28];
    kconst_im_1[4][3] = c68_kconst_im[28];
    kconst_re_1[5][3] = c68_kconst_re[29];
    kconst_im_1[5][3] = c68_kconst_im[29];
    kconst_re_1[6][3] = c68_kconst_re[30];
    kconst_im_1[6][3] = c68_kconst_im[30];
    kconst_re_1[7][3] = c68_kconst_re[31];
    kconst_im_1[7][3] = c68_kconst_im[31];
    kconst_re_1[0][4] = c68_kconst_re[32];
    kconst_im_1[0][4] = c68_kconst_im[32];
    kconst_re_1[1][4] = c68_kconst_re[33];
    kconst_im_1[1][4] = c68_kconst_im[33];
    kconst_re_1[2][4] = c68_kconst_re[34];
    kconst_im_1[2][4] = c68_kconst_im[34];
    kconst_re_1[3][4] = c68_kconst_re[35];
    kconst_im_1[3][4] = c68_kconst_im[35];
    kconst_re_1[4][4] = c68_kconst_re[36];
    kconst_im_1[4][4] = c68_kconst_im[36];
    kconst_re_1[5][4] = c68_kconst_re[37];
    kconst_im_1[5][4] = c68_kconst_im[37];
    kconst_re_1[6][4] = c68_kconst_re[38];
    kconst_im_1[6][4] = c68_kconst_im[38];
    kconst_re_1[7][4] = c68_kconst_re[39];
    kconst_im_1[7][4] = c68_kconst_im[39];
    kconst_re_1[0][5] = c68_kconst_re[40];
    kconst_im_1[0][5] = c68_kconst_im[40];
    kconst_re_1[1][5] = c68_kconst_re[41];
    kconst_im_1[1][5] = c68_kconst_im[41];
    kconst_re_1[2][5] = c68_kconst_re[42];
    kconst_im_1[2][5] = c68_kconst_im[42];
    kconst_re_1[3][5] = c68_kconst_re[43];
    kconst_im_1[3][5] = c68_kconst_im[43];
    kconst_re_1[4][5] = c68_kconst_re[44];
    kconst_im_1[4][5] = c68_kconst_im[44];
    kconst_re_1[5][5] = c68_kconst_re[45];
    kconst_im_1[5][5] = c68_kconst_im[45];
    kconst_re_1[6][5] = c68_kconst_re[46];
    kconst_im_1[6][5] = c68_kconst_im[46];
    kconst_re_1[7][5] = c68_kconst_re[47];
    kconst_im_1[7][5] = c68_kconst_im[47];
    kconst_re_1[0][6] = c68_kconst_re[48];
    kconst_im_1[0][6] = c68_kconst_im[48];
    kconst_re_1[1][6] = c68_kconst_re[49];
    kconst_im_1[1][6] = c68_kconst_im[49];
    kconst_re_1[2][6] = c68_kconst_re[50];
    kconst_im_1[2][6] = c68_kconst_im[50];
    kconst_re_1[3][6] = c68_kconst_re[51];
    kconst_im_1[3][6] = c68_kconst_im[51];
    kconst_re_1[4][6] = c68_kconst_re[52];
    kconst_im_1[4][6] = c68_kconst_im[52];
    kconst_re_1[5][6] = c68_kconst_re[53];
    kconst_im_1[5][6] = c68_kconst_im[53];
    kconst_re_1[6][6] = c68_kconst_re[54];
    kconst_im_1[6][6] = c68_kconst_im[54];
    kconst_re_1[7][6] = c68_kconst_re[55];
    kconst_im_1[7][6] = c68_kconst_im[55];
    kconst_re_1[0][7] = c68_kconst_re[56];
    kconst_im_1[0][7] = c68_kconst_im[56];
    kconst_re_1[1][7] = c68_kconst_re[57];
    kconst_im_1[1][7] = c68_kconst_im[57];
    kconst_re_1[2][7] = c68_kconst_re[58];
    kconst_im_1[2][7] = c68_kconst_im[58];
    kconst_re_1[3][7] = c68_kconst_re[59];
    kconst_im_1[3][7] = c68_kconst_im[59];
    kconst_re_1[4][7] = c68_kconst_re[60];
    kconst_im_1[4][7] = c68_kconst_im[60];
    kconst_re_1[5][7] = c68_kconst_re[61];
    kconst_im_1[5][7] = c68_kconst_im[61];
    kconst_re_1[6][7] = c68_kconst_re[62];
    kconst_im_1[6][7] = c68_kconst_im[62];
    kconst_re_1[7][7] = c68_kconst_re[63];
    kconst_im_1[7][7] = c68_kconst_im[63];
  end

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  always_comb begin
    alpha_re_2[0] = kconst_re_1[0][0];
    alpha_im_2[0] = kconst_im_1[0][0];
    alpha_re_2[1] = kconst_re_1[1][0];
    alpha_im_2[1] = kconst_im_1[1][0];
    alpha_re_2[2] = kconst_re_1[2][0];
    alpha_im_2[2] = kconst_im_1[2][0];
    alpha_re_2[3] = kconst_re_1[3][0];
    alpha_im_2[3] = kconst_im_1[3][0];
    alpha_re_2[4] = kconst_re_1[4][0];
    alpha_im_2[4] = kconst_im_1[4][0];
    alpha_re_2[5] = kconst_re_1[5][0];
    alpha_im_2[5] = kconst_im_1[5][0];
    alpha_re_2[6] = kconst_re_1[6][0];
    alpha_im_2[6] = kconst_im_1[6][0];
    alpha_re_2[7] = kconst_re_1[7][0];
    alpha_im_2[7] = kconst_im_1[7][0];
    alpha_re_2[8] = kconst_re_1[0][1];
    alpha_im_2[8] = kconst_im_1[0][1];
    alpha_re_2[9] = kconst_re_1[1][1];
    alpha_im_2[9] = kconst_im_1[1][1];
    alpha_re_2[10] = kconst_re_1[2][1];
    alpha_im_2[10] = kconst_im_1[2][1];
    alpha_re_2[11] = kconst_re_1[3][1];
    alpha_im_2[11] = kconst_im_1[3][1];
    alpha_re_2[12] = kconst_re_1[4][1];
    alpha_im_2[12] = kconst_im_1[4][1];
    alpha_re_2[13] = kconst_re_1[5][1];
    alpha_im_2[13] = kconst_im_1[5][1];
    alpha_re_2[14] = kconst_re_1[6][1];
    alpha_im_2[14] = kconst_im_1[6][1];
    alpha_re_2[15] = kconst_re_1[7][1];
    alpha_im_2[15] = kconst_im_1[7][1];
    alpha_re_2[16] = kconst_re_1[0][2];
    alpha_im_2[16] = kconst_im_1[0][2];
    alpha_re_2[17] = kconst_re_1[1][2];
    alpha_im_2[17] = kconst_im_1[1][2];
    alpha_re_2[18] = kconst_re_1[2][2];
    alpha_im_2[18] = kconst_im_1[2][2];
    alpha_re_2[19] = kconst_re_1[3][2];
    alpha_im_2[19] = kconst_im_1[3][2];
    alpha_re_2[20] = kconst_re_1[4][2];
    alpha_im_2[20] = kconst_im_1[4][2];
    alpha_re_2[21] = kconst_re_1[5][2];
    alpha_im_2[21] = kconst_im_1[5][2];
    alpha_re_2[22] = kconst_re_1[6][2];
    alpha_im_2[22] = kconst_im_1[6][2];
    alpha_re_2[23] = kconst_re_1[7][2];
    alpha_im_2[23] = kconst_im_1[7][2];
    alpha_re_2[24] = kconst_re_1[0][3];
    alpha_im_2[24] = kconst_im_1[0][3];
    alpha_re_2[25] = kconst_re_1[1][3];
    alpha_im_2[25] = kconst_im_1[1][3];
    alpha_re_2[26] = kconst_re_1[2][3];
    alpha_im_2[26] = kconst_im_1[2][3];
    alpha_re_2[27] = kconst_re_1[3][3];
    alpha_im_2[27] = kconst_im_1[3][3];
    alpha_re_2[28] = kconst_re_1[4][3];
    alpha_im_2[28] = kconst_im_1[4][3];
    alpha_re_2[29] = kconst_re_1[5][3];
    alpha_im_2[29] = kconst_im_1[5][3];
    alpha_re_2[30] = kconst_re_1[6][3];
    alpha_im_2[30] = kconst_im_1[6][3];
    alpha_re_2[31] = kconst_re_1[7][3];
    alpha_im_2[31] = kconst_im_1[7][3];
    alpha_re_2[32] = kconst_re_1[0][4];
    alpha_im_2[32] = kconst_im_1[0][4];
    alpha_re_2[33] = kconst_re_1[1][4];
    alpha_im_2[33] = kconst_im_1[1][4];
    alpha_re_2[34] = kconst_re_1[2][4];
    alpha_im_2[34] = kconst_im_1[2][4];
    alpha_re_2[35] = kconst_re_1[3][4];
    alpha_im_2[35] = kconst_im_1[3][4];
    alpha_re_2[36] = kconst_re_1[4][4];
    alpha_im_2[36] = kconst_im_1[4][4];
    alpha_re_2[37] = kconst_re_1[5][4];
    alpha_im_2[37] = kconst_im_1[5][4];
    alpha_re_2[38] = kconst_re_1[6][4];
    alpha_im_2[38] = kconst_im_1[6][4];
    alpha_re_2[39] = kconst_re_1[7][4];
    alpha_im_2[39] = kconst_im_1[7][4];
    alpha_re_2[40] = kconst_re_1[0][5];
    alpha_im_2[40] = kconst_im_1[0][5];
    alpha_re_2[41] = kconst_re_1[1][5];
    alpha_im_2[41] = kconst_im_1[1][5];
    alpha_re_2[42] = kconst_re_1[2][5];
    alpha_im_2[42] = kconst_im_1[2][5];
    alpha_re_2[43] = kconst_re_1[3][5];
    alpha_im_2[43] = kconst_im_1[3][5];
    alpha_re_2[44] = kconst_re_1[4][5];
    alpha_im_2[44] = kconst_im_1[4][5];
    alpha_re_2[45] = kconst_re_1[5][5];
    alpha_im_2[45] = kconst_im_1[5][5];
    alpha_re_2[46] = kconst_re_1[6][5];
    alpha_im_2[46] = kconst_im_1[6][5];
    alpha_re_2[47] = kconst_re_1[7][5];
    alpha_im_2[47] = kconst_im_1[7][5];
    alpha_re_2[48] = kconst_re_1[0][6];
    alpha_im_2[48] = kconst_im_1[0][6];
    alpha_re_2[49] = kconst_re_1[1][6];
    alpha_im_2[49] = kconst_im_1[1][6];
    alpha_re_2[50] = kconst_re_1[2][6];
    alpha_im_2[50] = kconst_im_1[2][6];
    alpha_re_2[51] = kconst_re_1[3][6];
    alpha_im_2[51] = kconst_im_1[3][6];
    alpha_re_2[52] = kconst_re_1[4][6];
    alpha_im_2[52] = kconst_im_1[4][6];
    alpha_re_2[53] = kconst_re_1[5][6];
    alpha_im_2[53] = kconst_im_1[5][6];
    alpha_re_2[54] = kconst_re_1[6][6];
    alpha_im_2[54] = kconst_im_1[6][6];
    alpha_re_2[55] = kconst_re_1[7][6];
    alpha_im_2[55] = kconst_im_1[7][6];
    alpha_re_2[56] = kconst_re_1[0][7];
    alpha_im_2[56] = kconst_im_1[0][7];
    alpha_re_2[57] = kconst_re_1[1][7];
    alpha_im_2[57] = kconst_im_1[1][7];
    alpha_re_2[58] = kconst_re_1[2][7];
    alpha_im_2[58] = kconst_im_1[2][7];
    alpha_re_2[59] = kconst_re_1[3][7];
    alpha_im_2[59] = kconst_im_1[3][7];
    alpha_re_2[60] = kconst_re_1[4][7];
    alpha_im_2[60] = kconst_im_1[4][7];
    alpha_re_2[61] = kconst_re_1[5][7];
    alpha_im_2[61] = kconst_im_1[5][7];
    alpha_re_2[62] = kconst_re_1[6][7];
    alpha_im_2[62] = kconst_im_1[6][7];
    alpha_re_2[63] = kconst_re_1[7][7];
    alpha_im_2[63] = kconst_im_1[7][7];
  end

  assign selector_out_re_1[0] = alpha_re_2[0];
  assign selector_out_re_1[1] = alpha_re_2[8];
  assign selector_out_re_1[2] = alpha_re_2[16];
  assign selector_out_re_1[3] = alpha_re_2[24];
  assign selector_out_re_1[4] = alpha_re_2[32];
  assign selector_out_re_1[5] = alpha_re_2[40];
  assign selector_out_re_1[6] = alpha_re_2[48];
  assign selector_out_re_1[7] = alpha_re_2[56];
  assign selector_out_re_1[8] = alpha_re_2[1];
  assign selector_out_re_1[9] = alpha_re_2[9];
  assign selector_out_re_1[10] = alpha_re_2[17];
  assign selector_out_re_1[11] = alpha_re_2[25];
  assign selector_out_re_1[12] = alpha_re_2[33];
  assign selector_out_re_1[13] = alpha_re_2[41];
  assign selector_out_re_1[14] = alpha_re_2[49];
  assign selector_out_re_1[15] = alpha_re_2[57];
  assign selector_out_re_1[16] = alpha_re_2[2];
  assign selector_out_re_1[17] = alpha_re_2[10];
  assign selector_out_re_1[18] = alpha_re_2[18];
  assign selector_out_re_1[19] = alpha_re_2[26];
  assign selector_out_re_1[20] = alpha_re_2[34];
  assign selector_out_re_1[21] = alpha_re_2[42];
  assign selector_out_re_1[22] = alpha_re_2[50];
  assign selector_out_re_1[23] = alpha_re_2[58];
  assign selector_out_re_1[24] = alpha_re_2[3];
  assign selector_out_re_1[25] = alpha_re_2[11];
  assign selector_out_re_1[26] = alpha_re_2[19];
  assign selector_out_re_1[27] = alpha_re_2[27];
  assign selector_out_re_1[28] = alpha_re_2[35];
  assign selector_out_re_1[29] = alpha_re_2[43];
  assign selector_out_re_1[30] = alpha_re_2[51];
  assign selector_out_re_1[31] = alpha_re_2[59];
  assign selector_out_re_1[32] = alpha_re_2[4];
  assign selector_out_re_1[33] = alpha_re_2[12];
  assign selector_out_re_1[34] = alpha_re_2[20];
  assign selector_out_re_1[35] = alpha_re_2[28];
  assign selector_out_re_1[36] = alpha_re_2[36];
  assign selector_out_re_1[37] = alpha_re_2[44];
  assign selector_out_re_1[38] = alpha_re_2[52];
  assign selector_out_re_1[39] = alpha_re_2[60];
  assign selector_out_re_1[40] = alpha_re_2[5];
  assign selector_out_re_1[41] = alpha_re_2[13];
  assign selector_out_re_1[42] = alpha_re_2[21];
  assign selector_out_re_1[43] = alpha_re_2[29];
  assign selector_out_re_1[44] = alpha_re_2[37];
  assign selector_out_re_1[45] = alpha_re_2[45];
  assign selector_out_re_1[46] = alpha_re_2[53];
  assign selector_out_re_1[47] = alpha_re_2[61];
  assign selector_out_re_1[48] = alpha_re_2[6];
  assign selector_out_re_1[49] = alpha_re_2[14];
  assign selector_out_re_1[50] = alpha_re_2[22];
  assign selector_out_re_1[51] = alpha_re_2[30];
  assign selector_out_re_1[52] = alpha_re_2[38];
  assign selector_out_re_1[53] = alpha_re_2[46];
  assign selector_out_re_1[54] = alpha_re_2[54];
  assign selector_out_re_1[55] = alpha_re_2[62];
  assign selector_out_re_1[56] = alpha_re_2[7];
  assign selector_out_re_1[57] = alpha_re_2[15];
  assign selector_out_re_1[58] = alpha_re_2[23];
  assign selector_out_re_1[59] = alpha_re_2[31];
  assign selector_out_re_1[60] = alpha_re_2[39];
  assign selector_out_re_1[61] = alpha_re_2[47];
  assign selector_out_re_1[62] = alpha_re_2[55];
  assign selector_out_re_1[63] = alpha_re_2[63];

  assign selector_out_im_1[0] = alpha_im_2[0];
  assign selector_out_im_1[1] = alpha_im_2[8];
  assign selector_out_im_1[2] = alpha_im_2[16];
  assign selector_out_im_1[3] = alpha_im_2[24];
  assign selector_out_im_1[4] = alpha_im_2[32];
  assign selector_out_im_1[5] = alpha_im_2[40];
  assign selector_out_im_1[6] = alpha_im_2[48];
  assign selector_out_im_1[7] = alpha_im_2[56];
  assign selector_out_im_1[8] = alpha_im_2[1];
  assign selector_out_im_1[9] = alpha_im_2[9];
  assign selector_out_im_1[10] = alpha_im_2[17];
  assign selector_out_im_1[11] = alpha_im_2[25];
  assign selector_out_im_1[12] = alpha_im_2[33];
  assign selector_out_im_1[13] = alpha_im_2[41];
  assign selector_out_im_1[14] = alpha_im_2[49];
  assign selector_out_im_1[15] = alpha_im_2[57];
  assign selector_out_im_1[16] = alpha_im_2[2];
  assign selector_out_im_1[17] = alpha_im_2[10];
  assign selector_out_im_1[18] = alpha_im_2[18];
  assign selector_out_im_1[19] = alpha_im_2[26];
  assign selector_out_im_1[20] = alpha_im_2[34];
  assign selector_out_im_1[21] = alpha_im_2[42];
  assign selector_out_im_1[22] = alpha_im_2[50];
  assign selector_out_im_1[23] = alpha_im_2[58];
  assign selector_out_im_1[24] = alpha_im_2[3];
  assign selector_out_im_1[25] = alpha_im_2[11];
  assign selector_out_im_1[26] = alpha_im_2[19];
  assign selector_out_im_1[27] = alpha_im_2[27];
  assign selector_out_im_1[28] = alpha_im_2[35];
  assign selector_out_im_1[29] = alpha_im_2[43];
  assign selector_out_im_1[30] = alpha_im_2[51];
  assign selector_out_im_1[31] = alpha_im_2[59];
  assign selector_out_im_1[32] = alpha_im_2[4];
  assign selector_out_im_1[33] = alpha_im_2[12];
  assign selector_out_im_1[34] = alpha_im_2[20];
  assign selector_out_im_1[35] = alpha_im_2[28];
  assign selector_out_im_1[36] = alpha_im_2[36];
  assign selector_out_im_1[37] = alpha_im_2[44];
  assign selector_out_im_1[38] = alpha_im_2[52];
  assign selector_out_im_1[39] = alpha_im_2[60];
  assign selector_out_im_1[40] = alpha_im_2[5];
  assign selector_out_im_1[41] = alpha_im_2[13];
  assign selector_out_im_1[42] = alpha_im_2[21];
  assign selector_out_im_1[43] = alpha_im_2[29];
  assign selector_out_im_1[44] = alpha_im_2[37];
  assign selector_out_im_1[45] = alpha_im_2[45];
  assign selector_out_im_1[46] = alpha_im_2[53];
  assign selector_out_im_1[47] = alpha_im_2[61];
  assign selector_out_im_1[48] = alpha_im_2[6];
  assign selector_out_im_1[49] = alpha_im_2[14];
  assign selector_out_im_1[50] = alpha_im_2[22];
  assign selector_out_im_1[51] = alpha_im_2[30];
  assign selector_out_im_1[52] = alpha_im_2[38];
  assign selector_out_im_1[53] = alpha_im_2[46];
  assign selector_out_im_1[54] = alpha_im_2[54];
  assign selector_out_im_1[55] = alpha_im_2[62];
  assign selector_out_im_1[56] = alpha_im_2[7];
  assign selector_out_im_1[57] = alpha_im_2[15];
  assign selector_out_im_1[58] = alpha_im_2[23];
  assign selector_out_im_1[59] = alpha_im_2[31];
  assign selector_out_im_1[60] = alpha_im_2[39];
  assign selector_out_im_1[61] = alpha_im_2[47];
  assign selector_out_im_1[62] = alpha_im_2[55];
  assign selector_out_im_1[63] = alpha_im_2[63];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign alpha_re_3[0] = selector_out_re_1[0];
  assign alpha_im_3[0] = selector_out_im_1[0];
  assign alpha_re_3[1] = selector_out_re_1[1];
  assign alpha_im_3[1] = selector_out_im_1[1];
  assign alpha_re_3[2] = selector_out_re_1[2];
  assign alpha_im_3[2] = selector_out_im_1[2];
  assign alpha_re_3[3] = selector_out_re_1[3];
  assign alpha_im_3[3] = selector_out_im_1[3];
  assign alpha_re_3[4] = selector_out_re_1[4];
  assign alpha_im_3[4] = selector_out_im_1[4];
  assign alpha_re_3[5] = selector_out_re_1[5];
  assign alpha_im_3[5] = selector_out_im_1[5];
  assign alpha_re_3[6] = selector_out_re_1[6];
  assign alpha_im_3[6] = selector_out_im_1[6];
  assign alpha_re_3[7] = selector_out_re_1[7];
  assign alpha_im_3[7] = selector_out_im_1[7];
  assign alpha_re_3[8] = selector_out_re_1[8];
  assign alpha_im_3[8] = selector_out_im_1[8];
  assign alpha_re_3[9] = selector_out_re_1[9];
  assign alpha_im_3[9] = selector_out_im_1[9];
  assign alpha_re_3[10] = selector_out_re_1[10];
  assign alpha_im_3[10] = selector_out_im_1[10];
  assign alpha_re_3[11] = selector_out_re_1[11];
  assign alpha_im_3[11] = selector_out_im_1[11];
  assign alpha_re_3[12] = selector_out_re_1[12];
  assign alpha_im_3[12] = selector_out_im_1[12];
  assign alpha_re_3[13] = selector_out_re_1[13];
  assign alpha_im_3[13] = selector_out_im_1[13];
  assign alpha_re_3[14] = selector_out_re_1[14];
  assign alpha_im_3[14] = selector_out_im_1[14];
  assign alpha_re_3[15] = selector_out_re_1[15];
  assign alpha_im_3[15] = selector_out_im_1[15];
  assign alpha_re_3[16] = selector_out_re_1[16];
  assign alpha_im_3[16] = selector_out_im_1[16];
  assign alpha_re_3[17] = selector_out_re_1[17];
  assign alpha_im_3[17] = selector_out_im_1[17];
  assign alpha_re_3[18] = selector_out_re_1[18];
  assign alpha_im_3[18] = selector_out_im_1[18];
  assign alpha_re_3[19] = selector_out_re_1[19];
  assign alpha_im_3[19] = selector_out_im_1[19];
  assign alpha_re_3[20] = selector_out_re_1[20];
  assign alpha_im_3[20] = selector_out_im_1[20];
  assign alpha_re_3[21] = selector_out_re_1[21];
  assign alpha_im_3[21] = selector_out_im_1[21];
  assign alpha_re_3[22] = selector_out_re_1[22];
  assign alpha_im_3[22] = selector_out_im_1[22];
  assign alpha_re_3[23] = selector_out_re_1[23];
  assign alpha_im_3[23] = selector_out_im_1[23];
  assign alpha_re_3[24] = selector_out_re_1[24];
  assign alpha_im_3[24] = selector_out_im_1[24];
  assign alpha_re_3[25] = selector_out_re_1[25];
  assign alpha_im_3[25] = selector_out_im_1[25];
  assign alpha_re_3[26] = selector_out_re_1[26];
  assign alpha_im_3[26] = selector_out_im_1[26];
  assign alpha_re_3[27] = selector_out_re_1[27];
  assign alpha_im_3[27] = selector_out_im_1[27];
  assign alpha_re_3[28] = selector_out_re_1[28];
  assign alpha_im_3[28] = selector_out_im_1[28];
  assign alpha_re_3[29] = selector_out_re_1[29];
  assign alpha_im_3[29] = selector_out_im_1[29];
  assign alpha_re_3[30] = selector_out_re_1[30];
  assign alpha_im_3[30] = selector_out_im_1[30];
  assign alpha_re_3[31] = selector_out_re_1[31];
  assign alpha_im_3[31] = selector_out_im_1[31];
  assign alpha_re_3[32] = selector_out_re_1[32];
  assign alpha_im_3[32] = selector_out_im_1[32];
  assign alpha_re_3[33] = selector_out_re_1[33];
  assign alpha_im_3[33] = selector_out_im_1[33];
  assign alpha_re_3[34] = selector_out_re_1[34];
  assign alpha_im_3[34] = selector_out_im_1[34];
  assign alpha_re_3[35] = selector_out_re_1[35];
  assign alpha_im_3[35] = selector_out_im_1[35];
  assign alpha_re_3[36] = selector_out_re_1[36];
  assign alpha_im_3[36] = selector_out_im_1[36];
  assign alpha_re_3[37] = selector_out_re_1[37];
  assign alpha_im_3[37] = selector_out_im_1[37];
  assign alpha_re_3[38] = selector_out_re_1[38];
  assign alpha_im_3[38] = selector_out_im_1[38];
  assign alpha_re_3[39] = selector_out_re_1[39];
  assign alpha_im_3[39] = selector_out_im_1[39];
  assign alpha_re_3[40] = selector_out_re_1[40];
  assign alpha_im_3[40] = selector_out_im_1[40];
  assign alpha_re_3[41] = selector_out_re_1[41];
  assign alpha_im_3[41] = selector_out_im_1[41];
  assign alpha_re_3[42] = selector_out_re_1[42];
  assign alpha_im_3[42] = selector_out_im_1[42];
  assign alpha_re_3[43] = selector_out_re_1[43];
  assign alpha_im_3[43] = selector_out_im_1[43];
  assign alpha_re_3[44] = selector_out_re_1[44];
  assign alpha_im_3[44] = selector_out_im_1[44];
  assign alpha_re_3[45] = selector_out_re_1[45];
  assign alpha_im_3[45] = selector_out_im_1[45];
  assign alpha_re_3[46] = selector_out_re_1[46];
  assign alpha_im_3[46] = selector_out_im_1[46];
  assign alpha_re_3[47] = selector_out_re_1[47];
  assign alpha_im_3[47] = selector_out_im_1[47];
  assign alpha_re_3[48] = selector_out_re_1[48];
  assign alpha_im_3[48] = selector_out_im_1[48];
  assign alpha_re_3[49] = selector_out_re_1[49];
  assign alpha_im_3[49] = selector_out_im_1[49];
  assign alpha_re_3[50] = selector_out_re_1[50];
  assign alpha_im_3[50] = selector_out_im_1[50];
  assign alpha_re_3[51] = selector_out_re_1[51];
  assign alpha_im_3[51] = selector_out_im_1[51];
  assign alpha_re_3[52] = selector_out_re_1[52];
  assign alpha_im_3[52] = selector_out_im_1[52];
  assign alpha_re_3[53] = selector_out_re_1[53];
  assign alpha_im_3[53] = selector_out_im_1[53];
  assign alpha_re_3[54] = selector_out_re_1[54];
  assign alpha_im_3[54] = selector_out_im_1[54];
  assign alpha_re_3[55] = selector_out_re_1[55];
  assign alpha_im_3[55] = selector_out_im_1[55];
  assign alpha_re_3[56] = selector_out_re_1[56];
  assign alpha_im_3[56] = selector_out_im_1[56];
  assign alpha_re_3[57] = selector_out_re_1[57];
  assign alpha_im_3[57] = selector_out_im_1[57];
  assign alpha_re_3[58] = selector_out_re_1[58];
  assign alpha_im_3[58] = selector_out_im_1[58];
  assign alpha_re_3[59] = selector_out_re_1[59];
  assign alpha_im_3[59] = selector_out_im_1[59];
  assign alpha_re_3[60] = selector_out_re_1[60];
  assign alpha_im_3[60] = selector_out_im_1[60];
  assign alpha_re_3[61] = selector_out_re_1[61];
  assign alpha_im_3[61] = selector_out_im_1[61];
  assign alpha_re_3[62] = selector_out_re_1[62];
  assign alpha_im_3[62] = selector_out_im_1[62];
  assign alpha_re_3[63] = selector_out_re_1[63];
  assign alpha_im_3[63] = selector_out_im_1[63];

  assign c94_kconst_re[0] = 14'sb01011010100000;
  assign c94_kconst_im[0] = 14'sb00000000000000;
  assign c94_kconst_re[1] = 14'sb00000000000000;
  assign c94_kconst_im[1] = 14'sb00000000000000;
  assign c94_kconst_re[2] = 14'sb01011010100000;
  assign c94_kconst_im[2] = 14'sb00000000000000;
  assign c94_kconst_re[3] = 14'sb00000000000000;
  assign c94_kconst_im[3] = 14'sb00000000000000;
  assign c94_kconst_re[4] = 14'sb00000000000000;
  assign c94_kconst_im[4] = 14'sb00000000000000;
  assign c94_kconst_re[5] = 14'sb00000000000000;
  assign c94_kconst_im[5] = 14'sb00000000000000;
  assign c94_kconst_re[6] = 14'sb00000000000000;
  assign c94_kconst_im[6] = 14'sb00000000000000;
  assign c94_kconst_re[7] = 14'sb00000000000000;
  assign c94_kconst_im[7] = 14'sb00000000000000;
  assign c94_kconst_re[8] = 14'sb00000000000000;
  assign c94_kconst_im[8] = 14'sb00000000000000;
  assign c94_kconst_re[9] = 14'sb01011010100000;
  assign c94_kconst_im[9] = 14'sb00000000000000;
  assign c94_kconst_re[10] = 14'sb00000000000000;
  assign c94_kconst_im[10] = 14'sb00000000000000;
  assign c94_kconst_re[11] = 14'sb01011010100000;
  assign c94_kconst_im[11] = 14'sb00000000000000;
  assign c94_kconst_re[12] = 14'sb00000000000000;
  assign c94_kconst_im[12] = 14'sb00000000000000;
  assign c94_kconst_re[13] = 14'sb00000000000000;
  assign c94_kconst_im[13] = 14'sb00000000000000;
  assign c94_kconst_re[14] = 14'sb00000000000000;
  assign c94_kconst_im[14] = 14'sb00000000000000;
  assign c94_kconst_re[15] = 14'sb00000000000000;
  assign c94_kconst_im[15] = 14'sb00000000000000;
  assign c94_kconst_re[16] = 14'sb01011010100000;
  assign c94_kconst_im[16] = 14'sb00000000000000;
  assign c94_kconst_re[17] = 14'sb00000000000000;
  assign c94_kconst_im[17] = 14'sb00000000000000;
  assign c94_kconst_re[18] = 14'sb10100101011110;
  assign c94_kconst_im[18] = 14'sb00000000000000;
  assign c94_kconst_re[19] = 14'sb00000000000000;
  assign c94_kconst_im[19] = 14'sb00000000000000;
  assign c94_kconst_re[20] = 14'sb00000000000000;
  assign c94_kconst_im[20] = 14'sb00000000000000;
  assign c94_kconst_re[21] = 14'sb00000000000000;
  assign c94_kconst_im[21] = 14'sb00000000000000;
  assign c94_kconst_re[22] = 14'sb00000000000000;
  assign c94_kconst_im[22] = 14'sb00000000000000;
  assign c94_kconst_re[23] = 14'sb00000000000000;
  assign c94_kconst_im[23] = 14'sb00000000000000;
  assign c94_kconst_re[24] = 14'sb00000000000000;
  assign c94_kconst_im[24] = 14'sb00000000000000;
  assign c94_kconst_re[25] = 14'sb01011010100000;
  assign c94_kconst_im[25] = 14'sb00000000000000;
  assign c94_kconst_re[26] = 14'sb00000000000000;
  assign c94_kconst_im[26] = 14'sb00000000000000;
  assign c94_kconst_re[27] = 14'sb10100101011110;
  assign c94_kconst_im[27] = 14'sb00000000000000;
  assign c94_kconst_re[28] = 14'sb00000000000000;
  assign c94_kconst_im[28] = 14'sb00000000000000;
  assign c94_kconst_re[29] = 14'sb00000000000000;
  assign c94_kconst_im[29] = 14'sb00000000000000;
  assign c94_kconst_re[30] = 14'sb00000000000000;
  assign c94_kconst_im[30] = 14'sb00000000000000;
  assign c94_kconst_re[31] = 14'sb00000000000000;
  assign c94_kconst_im[31] = 14'sb00000000000000;
  assign c94_kconst_re[32] = 14'sb00000000000000;
  assign c94_kconst_im[32] = 14'sb00000000000000;
  assign c94_kconst_re[33] = 14'sb00000000000000;
  assign c94_kconst_im[33] = 14'sb00000000000000;
  assign c94_kconst_re[34] = 14'sb00000000000000;
  assign c94_kconst_im[34] = 14'sb00000000000000;
  assign c94_kconst_re[35] = 14'sb00000000000000;
  assign c94_kconst_im[35] = 14'sb00000000000000;
  assign c94_kconst_re[36] = 14'sb01011010100000;
  assign c94_kconst_im[36] = 14'sb00000000000000;
  assign c94_kconst_re[37] = 14'sb00000000000000;
  assign c94_kconst_im[37] = 14'sb00000000000000;
  assign c94_kconst_re[38] = 14'sb01011010100000;
  assign c94_kconst_im[38] = 14'sb00000000000000;
  assign c94_kconst_re[39] = 14'sb00000000000000;
  assign c94_kconst_im[39] = 14'sb00000000000000;
  assign c94_kconst_re[40] = 14'sb00000000000000;
  assign c94_kconst_im[40] = 14'sb00000000000000;
  assign c94_kconst_re[41] = 14'sb00000000000000;
  assign c94_kconst_im[41] = 14'sb00000000000000;
  assign c94_kconst_re[42] = 14'sb00000000000000;
  assign c94_kconst_im[42] = 14'sb00000000000000;
  assign c94_kconst_re[43] = 14'sb00000000000000;
  assign c94_kconst_im[43] = 14'sb00000000000000;
  assign c94_kconst_re[44] = 14'sb00000000000000;
  assign c94_kconst_im[44] = 14'sb00000000000000;
  assign c94_kconst_re[45] = 14'sb01011010100000;
  assign c94_kconst_im[45] = 14'sb00000000000000;
  assign c94_kconst_re[46] = 14'sb00000000000000;
  assign c94_kconst_im[46] = 14'sb00000000000000;
  assign c94_kconst_re[47] = 14'sb01011010100000;
  assign c94_kconst_im[47] = 14'sb00000000000000;
  assign c94_kconst_re[48] = 14'sb00000000000000;
  assign c94_kconst_im[48] = 14'sb00000000000000;
  assign c94_kconst_re[49] = 14'sb00000000000000;
  assign c94_kconst_im[49] = 14'sb00000000000000;
  assign c94_kconst_re[50] = 14'sb00000000000000;
  assign c94_kconst_im[50] = 14'sb00000000000000;
  assign c94_kconst_re[51] = 14'sb00000000000000;
  assign c94_kconst_im[51] = 14'sb00000000000000;
  assign c94_kconst_re[52] = 14'sb01011010100000;
  assign c94_kconst_im[52] = 14'sb00000000000000;
  assign c94_kconst_re[53] = 14'sb00000000000000;
  assign c94_kconst_im[53] = 14'sb00000000000000;
  assign c94_kconst_re[54] = 14'sb10100101011110;
  assign c94_kconst_im[54] = 14'sb00000000000000;
  assign c94_kconst_re[55] = 14'sb00000000000000;
  assign c94_kconst_im[55] = 14'sb00000000000000;
  assign c94_kconst_re[56] = 14'sb00000000000000;
  assign c94_kconst_im[56] = 14'sb00000000000000;
  assign c94_kconst_re[57] = 14'sb00000000000000;
  assign c94_kconst_im[57] = 14'sb00000000000000;
  assign c94_kconst_re[58] = 14'sb00000000000000;
  assign c94_kconst_im[58] = 14'sb00000000000000;
  assign c94_kconst_re[59] = 14'sb00000000000000;
  assign c94_kconst_im[59] = 14'sb00000000000000;
  assign c94_kconst_re[60] = 14'sb00000000000000;
  assign c94_kconst_im[60] = 14'sb00000000000000;
  assign c94_kconst_re[61] = 14'sb01011010100000;
  assign c94_kconst_im[61] = 14'sb00000000000000;
  assign c94_kconst_re[62] = 14'sb00000000000000;
  assign c94_kconst_im[62] = 14'sb00000000000000;
  assign c94_kconst_re[63] = 14'sb10100101011110;
  assign c94_kconst_im[63] = 14'sb00000000000000;

  always_comb begin
    kconst_re_2[0][0] = c94_kconst_re[0];
    kconst_im_2[0][0] = c94_kconst_im[0];
    kconst_re_2[1][0] = c94_kconst_re[1];
    kconst_im_2[1][0] = c94_kconst_im[1];
    kconst_re_2[2][0] = c94_kconst_re[2];
    kconst_im_2[2][0] = c94_kconst_im[2];
    kconst_re_2[3][0] = c94_kconst_re[3];
    kconst_im_2[3][0] = c94_kconst_im[3];
    kconst_re_2[4][0] = c94_kconst_re[4];
    kconst_im_2[4][0] = c94_kconst_im[4];
    kconst_re_2[5][0] = c94_kconst_re[5];
    kconst_im_2[5][0] = c94_kconst_im[5];
    kconst_re_2[6][0] = c94_kconst_re[6];
    kconst_im_2[6][0] = c94_kconst_im[6];
    kconst_re_2[7][0] = c94_kconst_re[7];
    kconst_im_2[7][0] = c94_kconst_im[7];
    kconst_re_2[0][1] = c94_kconst_re[8];
    kconst_im_2[0][1] = c94_kconst_im[8];
    kconst_re_2[1][1] = c94_kconst_re[9];
    kconst_im_2[1][1] = c94_kconst_im[9];
    kconst_re_2[2][1] = c94_kconst_re[10];
    kconst_im_2[2][1] = c94_kconst_im[10];
    kconst_re_2[3][1] = c94_kconst_re[11];
    kconst_im_2[3][1] = c94_kconst_im[11];
    kconst_re_2[4][1] = c94_kconst_re[12];
    kconst_im_2[4][1] = c94_kconst_im[12];
    kconst_re_2[5][1] = c94_kconst_re[13];
    kconst_im_2[5][1] = c94_kconst_im[13];
    kconst_re_2[6][1] = c94_kconst_re[14];
    kconst_im_2[6][1] = c94_kconst_im[14];
    kconst_re_2[7][1] = c94_kconst_re[15];
    kconst_im_2[7][1] = c94_kconst_im[15];
    kconst_re_2[0][2] = c94_kconst_re[16];
    kconst_im_2[0][2] = c94_kconst_im[16];
    kconst_re_2[1][2] = c94_kconst_re[17];
    kconst_im_2[1][2] = c94_kconst_im[17];
    kconst_re_2[2][2] = c94_kconst_re[18];
    kconst_im_2[2][2] = c94_kconst_im[18];
    kconst_re_2[3][2] = c94_kconst_re[19];
    kconst_im_2[3][2] = c94_kconst_im[19];
    kconst_re_2[4][2] = c94_kconst_re[20];
    kconst_im_2[4][2] = c94_kconst_im[20];
    kconst_re_2[5][2] = c94_kconst_re[21];
    kconst_im_2[5][2] = c94_kconst_im[21];
    kconst_re_2[6][2] = c94_kconst_re[22];
    kconst_im_2[6][2] = c94_kconst_im[22];
    kconst_re_2[7][2] = c94_kconst_re[23];
    kconst_im_2[7][2] = c94_kconst_im[23];
    kconst_re_2[0][3] = c94_kconst_re[24];
    kconst_im_2[0][3] = c94_kconst_im[24];
    kconst_re_2[1][3] = c94_kconst_re[25];
    kconst_im_2[1][3] = c94_kconst_im[25];
    kconst_re_2[2][3] = c94_kconst_re[26];
    kconst_im_2[2][3] = c94_kconst_im[26];
    kconst_re_2[3][3] = c94_kconst_re[27];
    kconst_im_2[3][3] = c94_kconst_im[27];
    kconst_re_2[4][3] = c94_kconst_re[28];
    kconst_im_2[4][3] = c94_kconst_im[28];
    kconst_re_2[5][3] = c94_kconst_re[29];
    kconst_im_2[5][3] = c94_kconst_im[29];
    kconst_re_2[6][3] = c94_kconst_re[30];
    kconst_im_2[6][3] = c94_kconst_im[30];
    kconst_re_2[7][3] = c94_kconst_re[31];
    kconst_im_2[7][3] = c94_kconst_im[31];
    kconst_re_2[0][4] = c94_kconst_re[32];
    kconst_im_2[0][4] = c94_kconst_im[32];
    kconst_re_2[1][4] = c94_kconst_re[33];
    kconst_im_2[1][4] = c94_kconst_im[33];
    kconst_re_2[2][4] = c94_kconst_re[34];
    kconst_im_2[2][4] = c94_kconst_im[34];
    kconst_re_2[3][4] = c94_kconst_re[35];
    kconst_im_2[3][4] = c94_kconst_im[35];
    kconst_re_2[4][4] = c94_kconst_re[36];
    kconst_im_2[4][4] = c94_kconst_im[36];
    kconst_re_2[5][4] = c94_kconst_re[37];
    kconst_im_2[5][4] = c94_kconst_im[37];
    kconst_re_2[6][4] = c94_kconst_re[38];
    kconst_im_2[6][4] = c94_kconst_im[38];
    kconst_re_2[7][4] = c94_kconst_re[39];
    kconst_im_2[7][4] = c94_kconst_im[39];
    kconst_re_2[0][5] = c94_kconst_re[40];
    kconst_im_2[0][5] = c94_kconst_im[40];
    kconst_re_2[1][5] = c94_kconst_re[41];
    kconst_im_2[1][5] = c94_kconst_im[41];
    kconst_re_2[2][5] = c94_kconst_re[42];
    kconst_im_2[2][5] = c94_kconst_im[42];
    kconst_re_2[3][5] = c94_kconst_re[43];
    kconst_im_2[3][5] = c94_kconst_im[43];
    kconst_re_2[4][5] = c94_kconst_re[44];
    kconst_im_2[4][5] = c94_kconst_im[44];
    kconst_re_2[5][5] = c94_kconst_re[45];
    kconst_im_2[5][5] = c94_kconst_im[45];
    kconst_re_2[6][5] = c94_kconst_re[46];
    kconst_im_2[6][5] = c94_kconst_im[46];
    kconst_re_2[7][5] = c94_kconst_re[47];
    kconst_im_2[7][5] = c94_kconst_im[47];
    kconst_re_2[0][6] = c94_kconst_re[48];
    kconst_im_2[0][6] = c94_kconst_im[48];
    kconst_re_2[1][6] = c94_kconst_re[49];
    kconst_im_2[1][6] = c94_kconst_im[49];
    kconst_re_2[2][6] = c94_kconst_re[50];
    kconst_im_2[2][6] = c94_kconst_im[50];
    kconst_re_2[3][6] = c94_kconst_re[51];
    kconst_im_2[3][6] = c94_kconst_im[51];
    kconst_re_2[4][6] = c94_kconst_re[52];
    kconst_im_2[4][6] = c94_kconst_im[52];
    kconst_re_2[5][6] = c94_kconst_re[53];
    kconst_im_2[5][6] = c94_kconst_im[53];
    kconst_re_2[6][6] = c94_kconst_re[54];
    kconst_im_2[6][6] = c94_kconst_im[54];
    kconst_re_2[7][6] = c94_kconst_re[55];
    kconst_im_2[7][6] = c94_kconst_im[55];
    kconst_re_2[0][7] = c94_kconst_re[56];
    kconst_im_2[0][7] = c94_kconst_im[56];
    kconst_re_2[1][7] = c94_kconst_re[57];
    kconst_im_2[1][7] = c94_kconst_im[57];
    kconst_re_2[2][7] = c94_kconst_re[58];
    kconst_im_2[2][7] = c94_kconst_im[58];
    kconst_re_2[3][7] = c94_kconst_re[59];
    kconst_im_2[3][7] = c94_kconst_im[59];
    kconst_re_2[4][7] = c94_kconst_re[60];
    kconst_im_2[4][7] = c94_kconst_im[60];
    kconst_re_2[5][7] = c94_kconst_re[61];
    kconst_im_2[5][7] = c94_kconst_im[61];
    kconst_re_2[6][7] = c94_kconst_re[62];
    kconst_im_2[6][7] = c94_kconst_im[62];
    kconst_re_2[7][7] = c94_kconst_re[63];
    kconst_im_2[7][7] = c94_kconst_im[63];
  end

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  always_comb begin
    alpha_re_4[0] = kconst_re_2[0][0];
    alpha_im_4[0] = kconst_im_2[0][0];
    alpha_re_4[1] = kconst_re_2[1][0];
    alpha_im_4[1] = kconst_im_2[1][0];
    alpha_re_4[2] = kconst_re_2[2][0];
    alpha_im_4[2] = kconst_im_2[2][0];
    alpha_re_4[3] = kconst_re_2[3][0];
    alpha_im_4[3] = kconst_im_2[3][0];
    alpha_re_4[4] = kconst_re_2[4][0];
    alpha_im_4[4] = kconst_im_2[4][0];
    alpha_re_4[5] = kconst_re_2[5][0];
    alpha_im_4[5] = kconst_im_2[5][0];
    alpha_re_4[6] = kconst_re_2[6][0];
    alpha_im_4[6] = kconst_im_2[6][0];
    alpha_re_4[7] = kconst_re_2[7][0];
    alpha_im_4[7] = kconst_im_2[7][0];
    alpha_re_4[8] = kconst_re_2[0][1];
    alpha_im_4[8] = kconst_im_2[0][1];
    alpha_re_4[9] = kconst_re_2[1][1];
    alpha_im_4[9] = kconst_im_2[1][1];
    alpha_re_4[10] = kconst_re_2[2][1];
    alpha_im_4[10] = kconst_im_2[2][1];
    alpha_re_4[11] = kconst_re_2[3][1];
    alpha_im_4[11] = kconst_im_2[3][1];
    alpha_re_4[12] = kconst_re_2[4][1];
    alpha_im_4[12] = kconst_im_2[4][1];
    alpha_re_4[13] = kconst_re_2[5][1];
    alpha_im_4[13] = kconst_im_2[5][1];
    alpha_re_4[14] = kconst_re_2[6][1];
    alpha_im_4[14] = kconst_im_2[6][1];
    alpha_re_4[15] = kconst_re_2[7][1];
    alpha_im_4[15] = kconst_im_2[7][1];
    alpha_re_4[16] = kconst_re_2[0][2];
    alpha_im_4[16] = kconst_im_2[0][2];
    alpha_re_4[17] = kconst_re_2[1][2];
    alpha_im_4[17] = kconst_im_2[1][2];
    alpha_re_4[18] = kconst_re_2[2][2];
    alpha_im_4[18] = kconst_im_2[2][2];
    alpha_re_4[19] = kconst_re_2[3][2];
    alpha_im_4[19] = kconst_im_2[3][2];
    alpha_re_4[20] = kconst_re_2[4][2];
    alpha_im_4[20] = kconst_im_2[4][2];
    alpha_re_4[21] = kconst_re_2[5][2];
    alpha_im_4[21] = kconst_im_2[5][2];
    alpha_re_4[22] = kconst_re_2[6][2];
    alpha_im_4[22] = kconst_im_2[6][2];
    alpha_re_4[23] = kconst_re_2[7][2];
    alpha_im_4[23] = kconst_im_2[7][2];
    alpha_re_4[24] = kconst_re_2[0][3];
    alpha_im_4[24] = kconst_im_2[0][3];
    alpha_re_4[25] = kconst_re_2[1][3];
    alpha_im_4[25] = kconst_im_2[1][3];
    alpha_re_4[26] = kconst_re_2[2][3];
    alpha_im_4[26] = kconst_im_2[2][3];
    alpha_re_4[27] = kconst_re_2[3][3];
    alpha_im_4[27] = kconst_im_2[3][3];
    alpha_re_4[28] = kconst_re_2[4][3];
    alpha_im_4[28] = kconst_im_2[4][3];
    alpha_re_4[29] = kconst_re_2[5][3];
    alpha_im_4[29] = kconst_im_2[5][3];
    alpha_re_4[30] = kconst_re_2[6][3];
    alpha_im_4[30] = kconst_im_2[6][3];
    alpha_re_4[31] = kconst_re_2[7][3];
    alpha_im_4[31] = kconst_im_2[7][3];
    alpha_re_4[32] = kconst_re_2[0][4];
    alpha_im_4[32] = kconst_im_2[0][4];
    alpha_re_4[33] = kconst_re_2[1][4];
    alpha_im_4[33] = kconst_im_2[1][4];
    alpha_re_4[34] = kconst_re_2[2][4];
    alpha_im_4[34] = kconst_im_2[2][4];
    alpha_re_4[35] = kconst_re_2[3][4];
    alpha_im_4[35] = kconst_im_2[3][4];
    alpha_re_4[36] = kconst_re_2[4][4];
    alpha_im_4[36] = kconst_im_2[4][4];
    alpha_re_4[37] = kconst_re_2[5][4];
    alpha_im_4[37] = kconst_im_2[5][4];
    alpha_re_4[38] = kconst_re_2[6][4];
    alpha_im_4[38] = kconst_im_2[6][4];
    alpha_re_4[39] = kconst_re_2[7][4];
    alpha_im_4[39] = kconst_im_2[7][4];
    alpha_re_4[40] = kconst_re_2[0][5];
    alpha_im_4[40] = kconst_im_2[0][5];
    alpha_re_4[41] = kconst_re_2[1][5];
    alpha_im_4[41] = kconst_im_2[1][5];
    alpha_re_4[42] = kconst_re_2[2][5];
    alpha_im_4[42] = kconst_im_2[2][5];
    alpha_re_4[43] = kconst_re_2[3][5];
    alpha_im_4[43] = kconst_im_2[3][5];
    alpha_re_4[44] = kconst_re_2[4][5];
    alpha_im_4[44] = kconst_im_2[4][5];
    alpha_re_4[45] = kconst_re_2[5][5];
    alpha_im_4[45] = kconst_im_2[5][5];
    alpha_re_4[46] = kconst_re_2[6][5];
    alpha_im_4[46] = kconst_im_2[6][5];
    alpha_re_4[47] = kconst_re_2[7][5];
    alpha_im_4[47] = kconst_im_2[7][5];
    alpha_re_4[48] = kconst_re_2[0][6];
    alpha_im_4[48] = kconst_im_2[0][6];
    alpha_re_4[49] = kconst_re_2[1][6];
    alpha_im_4[49] = kconst_im_2[1][6];
    alpha_re_4[50] = kconst_re_2[2][6];
    alpha_im_4[50] = kconst_im_2[2][6];
    alpha_re_4[51] = kconst_re_2[3][6];
    alpha_im_4[51] = kconst_im_2[3][6];
    alpha_re_4[52] = kconst_re_2[4][6];
    alpha_im_4[52] = kconst_im_2[4][6];
    alpha_re_4[53] = kconst_re_2[5][6];
    alpha_im_4[53] = kconst_im_2[5][6];
    alpha_re_4[54] = kconst_re_2[6][6];
    alpha_im_4[54] = kconst_im_2[6][6];
    alpha_re_4[55] = kconst_re_2[7][6];
    alpha_im_4[55] = kconst_im_2[7][6];
    alpha_re_4[56] = kconst_re_2[0][7];
    alpha_im_4[56] = kconst_im_2[0][7];
    alpha_re_4[57] = kconst_re_2[1][7];
    alpha_im_4[57] = kconst_im_2[1][7];
    alpha_re_4[58] = kconst_re_2[2][7];
    alpha_im_4[58] = kconst_im_2[2][7];
    alpha_re_4[59] = kconst_re_2[3][7];
    alpha_im_4[59] = kconst_im_2[3][7];
    alpha_re_4[60] = kconst_re_2[4][7];
    alpha_im_4[60] = kconst_im_2[4][7];
    alpha_re_4[61] = kconst_re_2[5][7];
    alpha_im_4[61] = kconst_im_2[5][7];
    alpha_re_4[62] = kconst_re_2[6][7];
    alpha_im_4[62] = kconst_im_2[6][7];
    alpha_re_4[63] = kconst_re_2[7][7];
    alpha_im_4[63] = kconst_im_2[7][7];
  end

  assign selector_out_re_2[0] = alpha_re_4[0];
  assign selector_out_re_2[1] = alpha_re_4[8];
  assign selector_out_re_2[2] = alpha_re_4[16];
  assign selector_out_re_2[3] = alpha_re_4[24];
  assign selector_out_re_2[4] = alpha_re_4[32];
  assign selector_out_re_2[5] = alpha_re_4[40];
  assign selector_out_re_2[6] = alpha_re_4[48];
  assign selector_out_re_2[7] = alpha_re_4[56];
  assign selector_out_re_2[8] = alpha_re_4[1];
  assign selector_out_re_2[9] = alpha_re_4[9];
  assign selector_out_re_2[10] = alpha_re_4[17];
  assign selector_out_re_2[11] = alpha_re_4[25];
  assign selector_out_re_2[12] = alpha_re_4[33];
  assign selector_out_re_2[13] = alpha_re_4[41];
  assign selector_out_re_2[14] = alpha_re_4[49];
  assign selector_out_re_2[15] = alpha_re_4[57];
  assign selector_out_re_2[16] = alpha_re_4[2];
  assign selector_out_re_2[17] = alpha_re_4[10];
  assign selector_out_re_2[18] = alpha_re_4[18];
  assign selector_out_re_2[19] = alpha_re_4[26];
  assign selector_out_re_2[20] = alpha_re_4[34];
  assign selector_out_re_2[21] = alpha_re_4[42];
  assign selector_out_re_2[22] = alpha_re_4[50];
  assign selector_out_re_2[23] = alpha_re_4[58];
  assign selector_out_re_2[24] = alpha_re_4[3];
  assign selector_out_re_2[25] = alpha_re_4[11];
  assign selector_out_re_2[26] = alpha_re_4[19];
  assign selector_out_re_2[27] = alpha_re_4[27];
  assign selector_out_re_2[28] = alpha_re_4[35];
  assign selector_out_re_2[29] = alpha_re_4[43];
  assign selector_out_re_2[30] = alpha_re_4[51];
  assign selector_out_re_2[31] = alpha_re_4[59];
  assign selector_out_re_2[32] = alpha_re_4[4];
  assign selector_out_re_2[33] = alpha_re_4[12];
  assign selector_out_re_2[34] = alpha_re_4[20];
  assign selector_out_re_2[35] = alpha_re_4[28];
  assign selector_out_re_2[36] = alpha_re_4[36];
  assign selector_out_re_2[37] = alpha_re_4[44];
  assign selector_out_re_2[38] = alpha_re_4[52];
  assign selector_out_re_2[39] = alpha_re_4[60];
  assign selector_out_re_2[40] = alpha_re_4[5];
  assign selector_out_re_2[41] = alpha_re_4[13];
  assign selector_out_re_2[42] = alpha_re_4[21];
  assign selector_out_re_2[43] = alpha_re_4[29];
  assign selector_out_re_2[44] = alpha_re_4[37];
  assign selector_out_re_2[45] = alpha_re_4[45];
  assign selector_out_re_2[46] = alpha_re_4[53];
  assign selector_out_re_2[47] = alpha_re_4[61];
  assign selector_out_re_2[48] = alpha_re_4[6];
  assign selector_out_re_2[49] = alpha_re_4[14];
  assign selector_out_re_2[50] = alpha_re_4[22];
  assign selector_out_re_2[51] = alpha_re_4[30];
  assign selector_out_re_2[52] = alpha_re_4[38];
  assign selector_out_re_2[53] = alpha_re_4[46];
  assign selector_out_re_2[54] = alpha_re_4[54];
  assign selector_out_re_2[55] = alpha_re_4[62];
  assign selector_out_re_2[56] = alpha_re_4[7];
  assign selector_out_re_2[57] = alpha_re_4[15];
  assign selector_out_re_2[58] = alpha_re_4[23];
  assign selector_out_re_2[59] = alpha_re_4[31];
  assign selector_out_re_2[60] = alpha_re_4[39];
  assign selector_out_re_2[61] = alpha_re_4[47];
  assign selector_out_re_2[62] = alpha_re_4[55];
  assign selector_out_re_2[63] = alpha_re_4[63];

  assign selector_out_im_2[0] = alpha_im_4[0];
  assign selector_out_im_2[1] = alpha_im_4[8];
  assign selector_out_im_2[2] = alpha_im_4[16];
  assign selector_out_im_2[3] = alpha_im_4[24];
  assign selector_out_im_2[4] = alpha_im_4[32];
  assign selector_out_im_2[5] = alpha_im_4[40];
  assign selector_out_im_2[6] = alpha_im_4[48];
  assign selector_out_im_2[7] = alpha_im_4[56];
  assign selector_out_im_2[8] = alpha_im_4[1];
  assign selector_out_im_2[9] = alpha_im_4[9];
  assign selector_out_im_2[10] = alpha_im_4[17];
  assign selector_out_im_2[11] = alpha_im_4[25];
  assign selector_out_im_2[12] = alpha_im_4[33];
  assign selector_out_im_2[13] = alpha_im_4[41];
  assign selector_out_im_2[14] = alpha_im_4[49];
  assign selector_out_im_2[15] = alpha_im_4[57];
  assign selector_out_im_2[16] = alpha_im_4[2];
  assign selector_out_im_2[17] = alpha_im_4[10];
  assign selector_out_im_2[18] = alpha_im_4[18];
  assign selector_out_im_2[19] = alpha_im_4[26];
  assign selector_out_im_2[20] = alpha_im_4[34];
  assign selector_out_im_2[21] = alpha_im_4[42];
  assign selector_out_im_2[22] = alpha_im_4[50];
  assign selector_out_im_2[23] = alpha_im_4[58];
  assign selector_out_im_2[24] = alpha_im_4[3];
  assign selector_out_im_2[25] = alpha_im_4[11];
  assign selector_out_im_2[26] = alpha_im_4[19];
  assign selector_out_im_2[27] = alpha_im_4[27];
  assign selector_out_im_2[28] = alpha_im_4[35];
  assign selector_out_im_2[29] = alpha_im_4[43];
  assign selector_out_im_2[30] = alpha_im_4[51];
  assign selector_out_im_2[31] = alpha_im_4[59];
  assign selector_out_im_2[32] = alpha_im_4[4];
  assign selector_out_im_2[33] = alpha_im_4[12];
  assign selector_out_im_2[34] = alpha_im_4[20];
  assign selector_out_im_2[35] = alpha_im_4[28];
  assign selector_out_im_2[36] = alpha_im_4[36];
  assign selector_out_im_2[37] = alpha_im_4[44];
  assign selector_out_im_2[38] = alpha_im_4[52];
  assign selector_out_im_2[39] = alpha_im_4[60];
  assign selector_out_im_2[40] = alpha_im_4[5];
  assign selector_out_im_2[41] = alpha_im_4[13];
  assign selector_out_im_2[42] = alpha_im_4[21];
  assign selector_out_im_2[43] = alpha_im_4[29];
  assign selector_out_im_2[44] = alpha_im_4[37];
  assign selector_out_im_2[45] = alpha_im_4[45];
  assign selector_out_im_2[46] = alpha_im_4[53];
  assign selector_out_im_2[47] = alpha_im_4[61];
  assign selector_out_im_2[48] = alpha_im_4[6];
  assign selector_out_im_2[49] = alpha_im_4[14];
  assign selector_out_im_2[50] = alpha_im_4[22];
  assign selector_out_im_2[51] = alpha_im_4[30];
  assign selector_out_im_2[52] = alpha_im_4[38];
  assign selector_out_im_2[53] = alpha_im_4[46];
  assign selector_out_im_2[54] = alpha_im_4[54];
  assign selector_out_im_2[55] = alpha_im_4[62];
  assign selector_out_im_2[56] = alpha_im_4[7];
  assign selector_out_im_2[57] = alpha_im_4[15];
  assign selector_out_im_2[58] = alpha_im_4[23];
  assign selector_out_im_2[59] = alpha_im_4[31];
  assign selector_out_im_2[60] = alpha_im_4[39];
  assign selector_out_im_2[61] = alpha_im_4[47];
  assign selector_out_im_2[62] = alpha_im_4[55];
  assign selector_out_im_2[63] = alpha_im_4[63];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign alpha_re_5[0] = selector_out_re_2[0];
  assign alpha_im_5[0] = selector_out_im_2[0];
  assign alpha_re_5[1] = selector_out_re_2[1];
  assign alpha_im_5[1] = selector_out_im_2[1];
  assign alpha_re_5[2] = selector_out_re_2[2];
  assign alpha_im_5[2] = selector_out_im_2[2];
  assign alpha_re_5[3] = selector_out_re_2[3];
  assign alpha_im_5[3] = selector_out_im_2[3];
  assign alpha_re_5[4] = selector_out_re_2[4];
  assign alpha_im_5[4] = selector_out_im_2[4];
  assign alpha_re_5[5] = selector_out_re_2[5];
  assign alpha_im_5[5] = selector_out_im_2[5];
  assign alpha_re_5[6] = selector_out_re_2[6];
  assign alpha_im_5[6] = selector_out_im_2[6];
  assign alpha_re_5[7] = selector_out_re_2[7];
  assign alpha_im_5[7] = selector_out_im_2[7];
  assign alpha_re_5[8] = selector_out_re_2[8];
  assign alpha_im_5[8] = selector_out_im_2[8];
  assign alpha_re_5[9] = selector_out_re_2[9];
  assign alpha_im_5[9] = selector_out_im_2[9];
  assign alpha_re_5[10] = selector_out_re_2[10];
  assign alpha_im_5[10] = selector_out_im_2[10];
  assign alpha_re_5[11] = selector_out_re_2[11];
  assign alpha_im_5[11] = selector_out_im_2[11];
  assign alpha_re_5[12] = selector_out_re_2[12];
  assign alpha_im_5[12] = selector_out_im_2[12];
  assign alpha_re_5[13] = selector_out_re_2[13];
  assign alpha_im_5[13] = selector_out_im_2[13];
  assign alpha_re_5[14] = selector_out_re_2[14];
  assign alpha_im_5[14] = selector_out_im_2[14];
  assign alpha_re_5[15] = selector_out_re_2[15];
  assign alpha_im_5[15] = selector_out_im_2[15];
  assign alpha_re_5[16] = selector_out_re_2[16];
  assign alpha_im_5[16] = selector_out_im_2[16];
  assign alpha_re_5[17] = selector_out_re_2[17];
  assign alpha_im_5[17] = selector_out_im_2[17];
  assign alpha_re_5[18] = selector_out_re_2[18];
  assign alpha_im_5[18] = selector_out_im_2[18];
  assign alpha_re_5[19] = selector_out_re_2[19];
  assign alpha_im_5[19] = selector_out_im_2[19];
  assign alpha_re_5[20] = selector_out_re_2[20];
  assign alpha_im_5[20] = selector_out_im_2[20];
  assign alpha_re_5[21] = selector_out_re_2[21];
  assign alpha_im_5[21] = selector_out_im_2[21];
  assign alpha_re_5[22] = selector_out_re_2[22];
  assign alpha_im_5[22] = selector_out_im_2[22];
  assign alpha_re_5[23] = selector_out_re_2[23];
  assign alpha_im_5[23] = selector_out_im_2[23];
  assign alpha_re_5[24] = selector_out_re_2[24];
  assign alpha_im_5[24] = selector_out_im_2[24];
  assign alpha_re_5[25] = selector_out_re_2[25];
  assign alpha_im_5[25] = selector_out_im_2[25];
  assign alpha_re_5[26] = selector_out_re_2[26];
  assign alpha_im_5[26] = selector_out_im_2[26];
  assign alpha_re_5[27] = selector_out_re_2[27];
  assign alpha_im_5[27] = selector_out_im_2[27];
  assign alpha_re_5[28] = selector_out_re_2[28];
  assign alpha_im_5[28] = selector_out_im_2[28];
  assign alpha_re_5[29] = selector_out_re_2[29];
  assign alpha_im_5[29] = selector_out_im_2[29];
  assign alpha_re_5[30] = selector_out_re_2[30];
  assign alpha_im_5[30] = selector_out_im_2[30];
  assign alpha_re_5[31] = selector_out_re_2[31];
  assign alpha_im_5[31] = selector_out_im_2[31];
  assign alpha_re_5[32] = selector_out_re_2[32];
  assign alpha_im_5[32] = selector_out_im_2[32];
  assign alpha_re_5[33] = selector_out_re_2[33];
  assign alpha_im_5[33] = selector_out_im_2[33];
  assign alpha_re_5[34] = selector_out_re_2[34];
  assign alpha_im_5[34] = selector_out_im_2[34];
  assign alpha_re_5[35] = selector_out_re_2[35];
  assign alpha_im_5[35] = selector_out_im_2[35];
  assign alpha_re_5[36] = selector_out_re_2[36];
  assign alpha_im_5[36] = selector_out_im_2[36];
  assign alpha_re_5[37] = selector_out_re_2[37];
  assign alpha_im_5[37] = selector_out_im_2[37];
  assign alpha_re_5[38] = selector_out_re_2[38];
  assign alpha_im_5[38] = selector_out_im_2[38];
  assign alpha_re_5[39] = selector_out_re_2[39];
  assign alpha_im_5[39] = selector_out_im_2[39];
  assign alpha_re_5[40] = selector_out_re_2[40];
  assign alpha_im_5[40] = selector_out_im_2[40];
  assign alpha_re_5[41] = selector_out_re_2[41];
  assign alpha_im_5[41] = selector_out_im_2[41];
  assign alpha_re_5[42] = selector_out_re_2[42];
  assign alpha_im_5[42] = selector_out_im_2[42];
  assign alpha_re_5[43] = selector_out_re_2[43];
  assign alpha_im_5[43] = selector_out_im_2[43];
  assign alpha_re_5[44] = selector_out_re_2[44];
  assign alpha_im_5[44] = selector_out_im_2[44];
  assign alpha_re_5[45] = selector_out_re_2[45];
  assign alpha_im_5[45] = selector_out_im_2[45];
  assign alpha_re_5[46] = selector_out_re_2[46];
  assign alpha_im_5[46] = selector_out_im_2[46];
  assign alpha_re_5[47] = selector_out_re_2[47];
  assign alpha_im_5[47] = selector_out_im_2[47];
  assign alpha_re_5[48] = selector_out_re_2[48];
  assign alpha_im_5[48] = selector_out_im_2[48];
  assign alpha_re_5[49] = selector_out_re_2[49];
  assign alpha_im_5[49] = selector_out_im_2[49];
  assign alpha_re_5[50] = selector_out_re_2[50];
  assign alpha_im_5[50] = selector_out_im_2[50];
  assign alpha_re_5[51] = selector_out_re_2[51];
  assign alpha_im_5[51] = selector_out_im_2[51];
  assign alpha_re_5[52] = selector_out_re_2[52];
  assign alpha_im_5[52] = selector_out_im_2[52];
  assign alpha_re_5[53] = selector_out_re_2[53];
  assign alpha_im_5[53] = selector_out_im_2[53];
  assign alpha_re_5[54] = selector_out_re_2[54];
  assign alpha_im_5[54] = selector_out_im_2[54];
  assign alpha_re_5[55] = selector_out_re_2[55];
  assign alpha_im_5[55] = selector_out_im_2[55];
  assign alpha_re_5[56] = selector_out_re_2[56];
  assign alpha_im_5[56] = selector_out_im_2[56];
  assign alpha_re_5[57] = selector_out_re_2[57];
  assign alpha_im_5[57] = selector_out_im_2[57];
  assign alpha_re_5[58] = selector_out_re_2[58];
  assign alpha_im_5[58] = selector_out_im_2[58];
  assign alpha_re_5[59] = selector_out_re_2[59];
  assign alpha_im_5[59] = selector_out_im_2[59];
  assign alpha_re_5[60] = selector_out_re_2[60];
  assign alpha_im_5[60] = selector_out_im_2[60];
  assign alpha_re_5[61] = selector_out_re_2[61];
  assign alpha_im_5[61] = selector_out_im_2[61];
  assign alpha_re_5[62] = selector_out_re_2[62];
  assign alpha_im_5[62] = selector_out_im_2[62];
  assign alpha_re_5[63] = selector_out_re_2[63];
  assign alpha_im_5[63] = selector_out_im_2[63];

  assign c120_kconst_re = gain_const4_data;
  assign c120_kconst_im = '{64{1'b0}};

  always_comb begin
    kconst_re_3[0][0] = c120_kconst_re[0];
    kconst_im_3[0][0] = c120_kconst_im[0];
    kconst_re_3[1][0] = c120_kconst_re[1];
    kconst_im_3[1][0] = c120_kconst_im[1];
    kconst_re_3[2][0] = c120_kconst_re[2];
    kconst_im_3[2][0] = c120_kconst_im[2];
    kconst_re_3[3][0] = c120_kconst_re[3];
    kconst_im_3[3][0] = c120_kconst_im[3];
    kconst_re_3[4][0] = c120_kconst_re[4];
    kconst_im_3[4][0] = c120_kconst_im[4];
    kconst_re_3[5][0] = c120_kconst_re[5];
    kconst_im_3[5][0] = c120_kconst_im[5];
    kconst_re_3[6][0] = c120_kconst_re[6];
    kconst_im_3[6][0] = c120_kconst_im[6];
    kconst_re_3[7][0] = c120_kconst_re[7];
    kconst_im_3[7][0] = c120_kconst_im[7];
    kconst_re_3[0][1] = c120_kconst_re[8];
    kconst_im_3[0][1] = c120_kconst_im[8];
    kconst_re_3[1][1] = c120_kconst_re[9];
    kconst_im_3[1][1] = c120_kconst_im[9];
    kconst_re_3[2][1] = c120_kconst_re[10];
    kconst_im_3[2][1] = c120_kconst_im[10];
    kconst_re_3[3][1] = c120_kconst_re[11];
    kconst_im_3[3][1] = c120_kconst_im[11];
    kconst_re_3[4][1] = c120_kconst_re[12];
    kconst_im_3[4][1] = c120_kconst_im[12];
    kconst_re_3[5][1] = c120_kconst_re[13];
    kconst_im_3[5][1] = c120_kconst_im[13];
    kconst_re_3[6][1] = c120_kconst_re[14];
    kconst_im_3[6][1] = c120_kconst_im[14];
    kconst_re_3[7][1] = c120_kconst_re[15];
    kconst_im_3[7][1] = c120_kconst_im[15];
    kconst_re_3[0][2] = c120_kconst_re[16];
    kconst_im_3[0][2] = c120_kconst_im[16];
    kconst_re_3[1][2] = c120_kconst_re[17];
    kconst_im_3[1][2] = c120_kconst_im[17];
    kconst_re_3[2][2] = c120_kconst_re[18];
    kconst_im_3[2][2] = c120_kconst_im[18];
    kconst_re_3[3][2] = c120_kconst_re[19];
    kconst_im_3[3][2] = c120_kconst_im[19];
    kconst_re_3[4][2] = c120_kconst_re[20];
    kconst_im_3[4][2] = c120_kconst_im[20];
    kconst_re_3[5][2] = c120_kconst_re[21];
    kconst_im_3[5][2] = c120_kconst_im[21];
    kconst_re_3[6][2] = c120_kconst_re[22];
    kconst_im_3[6][2] = c120_kconst_im[22];
    kconst_re_3[7][2] = c120_kconst_re[23];
    kconst_im_3[7][2] = c120_kconst_im[23];
    kconst_re_3[0][3] = c120_kconst_re[24];
    kconst_im_3[0][3] = c120_kconst_im[24];
    kconst_re_3[1][3] = c120_kconst_re[25];
    kconst_im_3[1][3] = c120_kconst_im[25];
    kconst_re_3[2][3] = c120_kconst_re[26];
    kconst_im_3[2][3] = c120_kconst_im[26];
    kconst_re_3[3][3] = c120_kconst_re[27];
    kconst_im_3[3][3] = c120_kconst_im[27];
    kconst_re_3[4][3] = c120_kconst_re[28];
    kconst_im_3[4][3] = c120_kconst_im[28];
    kconst_re_3[5][3] = c120_kconst_re[29];
    kconst_im_3[5][3] = c120_kconst_im[29];
    kconst_re_3[6][3] = c120_kconst_re[30];
    kconst_im_3[6][3] = c120_kconst_im[30];
    kconst_re_3[7][3] = c120_kconst_re[31];
    kconst_im_3[7][3] = c120_kconst_im[31];
    kconst_re_3[0][4] = c120_kconst_re[32];
    kconst_im_3[0][4] = c120_kconst_im[32];
    kconst_re_3[1][4] = c120_kconst_re[33];
    kconst_im_3[1][4] = c120_kconst_im[33];
    kconst_re_3[2][4] = c120_kconst_re[34];
    kconst_im_3[2][4] = c120_kconst_im[34];
    kconst_re_3[3][4] = c120_kconst_re[35];
    kconst_im_3[3][4] = c120_kconst_im[35];
    kconst_re_3[4][4] = c120_kconst_re[36];
    kconst_im_3[4][4] = c120_kconst_im[36];
    kconst_re_3[5][4] = c120_kconst_re[37];
    kconst_im_3[5][4] = c120_kconst_im[37];
    kconst_re_3[6][4] = c120_kconst_re[38];
    kconst_im_3[6][4] = c120_kconst_im[38];
    kconst_re_3[7][4] = c120_kconst_re[39];
    kconst_im_3[7][4] = c120_kconst_im[39];
    kconst_re_3[0][5] = c120_kconst_re[40];
    kconst_im_3[0][5] = c120_kconst_im[40];
    kconst_re_3[1][5] = c120_kconst_re[41];
    kconst_im_3[1][5] = c120_kconst_im[41];
    kconst_re_3[2][5] = c120_kconst_re[42];
    kconst_im_3[2][5] = c120_kconst_im[42];
    kconst_re_3[3][5] = c120_kconst_re[43];
    kconst_im_3[3][5] = c120_kconst_im[43];
    kconst_re_3[4][5] = c120_kconst_re[44];
    kconst_im_3[4][5] = c120_kconst_im[44];
    kconst_re_3[5][5] = c120_kconst_re[45];
    kconst_im_3[5][5] = c120_kconst_im[45];
    kconst_re_3[6][5] = c120_kconst_re[46];
    kconst_im_3[6][5] = c120_kconst_im[46];
    kconst_re_3[7][5] = c120_kconst_re[47];
    kconst_im_3[7][5] = c120_kconst_im[47];
    kconst_re_3[0][6] = c120_kconst_re[48];
    kconst_im_3[0][6] = c120_kconst_im[48];
    kconst_re_3[1][6] = c120_kconst_re[49];
    kconst_im_3[1][6] = c120_kconst_im[49];
    kconst_re_3[2][6] = c120_kconst_re[50];
    kconst_im_3[2][6] = c120_kconst_im[50];
    kconst_re_3[3][6] = c120_kconst_re[51];
    kconst_im_3[3][6] = c120_kconst_im[51];
    kconst_re_3[4][6] = c120_kconst_re[52];
    kconst_im_3[4][6] = c120_kconst_im[52];
    kconst_re_3[5][6] = c120_kconst_re[53];
    kconst_im_3[5][6] = c120_kconst_im[53];
    kconst_re_3[6][6] = c120_kconst_re[54];
    kconst_im_3[6][6] = c120_kconst_im[54];
    kconst_re_3[7][6] = c120_kconst_re[55];
    kconst_im_3[7][6] = c120_kconst_im[55];
    kconst_re_3[0][7] = c120_kconst_re[56];
    kconst_im_3[0][7] = c120_kconst_im[56];
    kconst_re_3[1][7] = c120_kconst_re[57];
    kconst_im_3[1][7] = c120_kconst_im[57];
    kconst_re_3[2][7] = c120_kconst_re[58];
    kconst_im_3[2][7] = c120_kconst_im[58];
    kconst_re_3[3][7] = c120_kconst_re[59];
    kconst_im_3[3][7] = c120_kconst_im[59];
    kconst_re_3[4][7] = c120_kconst_re[60];
    kconst_im_3[4][7] = c120_kconst_im[60];
    kconst_re_3[5][7] = c120_kconst_re[61];
    kconst_im_3[5][7] = c120_kconst_im[61];
    kconst_re_3[6][7] = c120_kconst_re[62];
    kconst_im_3[6][7] = c120_kconst_im[62];
    kconst_re_3[7][7] = c120_kconst_re[63];
    kconst_im_3[7][7] = c120_kconst_im[63];
  end

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  always_comb begin
    alpha_re_6[0] = kconst_re_3[0][0];
    alpha_im_6[0] = kconst_im_3[0][0];
    alpha_re_6[1] = kconst_re_3[1][0];
    alpha_im_6[1] = kconst_im_3[1][0];
    alpha_re_6[2] = kconst_re_3[2][0];
    alpha_im_6[2] = kconst_im_3[2][0];
    alpha_re_6[3] = kconst_re_3[3][0];
    alpha_im_6[3] = kconst_im_3[3][0];
    alpha_re_6[4] = kconst_re_3[4][0];
    alpha_im_6[4] = kconst_im_3[4][0];
    alpha_re_6[5] = kconst_re_3[5][0];
    alpha_im_6[5] = kconst_im_3[5][0];
    alpha_re_6[6] = kconst_re_3[6][0];
    alpha_im_6[6] = kconst_im_3[6][0];
    alpha_re_6[7] = kconst_re_3[7][0];
    alpha_im_6[7] = kconst_im_3[7][0];
    alpha_re_6[8] = kconst_re_3[0][1];
    alpha_im_6[8] = kconst_im_3[0][1];
    alpha_re_6[9] = kconst_re_3[1][1];
    alpha_im_6[9] = kconst_im_3[1][1];
    alpha_re_6[10] = kconst_re_3[2][1];
    alpha_im_6[10] = kconst_im_3[2][1];
    alpha_re_6[11] = kconst_re_3[3][1];
    alpha_im_6[11] = kconst_im_3[3][1];
    alpha_re_6[12] = kconst_re_3[4][1];
    alpha_im_6[12] = kconst_im_3[4][1];
    alpha_re_6[13] = kconst_re_3[5][1];
    alpha_im_6[13] = kconst_im_3[5][1];
    alpha_re_6[14] = kconst_re_3[6][1];
    alpha_im_6[14] = kconst_im_3[6][1];
    alpha_re_6[15] = kconst_re_3[7][1];
    alpha_im_6[15] = kconst_im_3[7][1];
    alpha_re_6[16] = kconst_re_3[0][2];
    alpha_im_6[16] = kconst_im_3[0][2];
    alpha_re_6[17] = kconst_re_3[1][2];
    alpha_im_6[17] = kconst_im_3[1][2];
    alpha_re_6[18] = kconst_re_3[2][2];
    alpha_im_6[18] = kconst_im_3[2][2];
    alpha_re_6[19] = kconst_re_3[3][2];
    alpha_im_6[19] = kconst_im_3[3][2];
    alpha_re_6[20] = kconst_re_3[4][2];
    alpha_im_6[20] = kconst_im_3[4][2];
    alpha_re_6[21] = kconst_re_3[5][2];
    alpha_im_6[21] = kconst_im_3[5][2];
    alpha_re_6[22] = kconst_re_3[6][2];
    alpha_im_6[22] = kconst_im_3[6][2];
    alpha_re_6[23] = kconst_re_3[7][2];
    alpha_im_6[23] = kconst_im_3[7][2];
    alpha_re_6[24] = kconst_re_3[0][3];
    alpha_im_6[24] = kconst_im_3[0][3];
    alpha_re_6[25] = kconst_re_3[1][3];
    alpha_im_6[25] = kconst_im_3[1][3];
    alpha_re_6[26] = kconst_re_3[2][3];
    alpha_im_6[26] = kconst_im_3[2][3];
    alpha_re_6[27] = kconst_re_3[3][3];
    alpha_im_6[27] = kconst_im_3[3][3];
    alpha_re_6[28] = kconst_re_3[4][3];
    alpha_im_6[28] = kconst_im_3[4][3];
    alpha_re_6[29] = kconst_re_3[5][3];
    alpha_im_6[29] = kconst_im_3[5][3];
    alpha_re_6[30] = kconst_re_3[6][3];
    alpha_im_6[30] = kconst_im_3[6][3];
    alpha_re_6[31] = kconst_re_3[7][3];
    alpha_im_6[31] = kconst_im_3[7][3];
    alpha_re_6[32] = kconst_re_3[0][4];
    alpha_im_6[32] = kconst_im_3[0][4];
    alpha_re_6[33] = kconst_re_3[1][4];
    alpha_im_6[33] = kconst_im_3[1][4];
    alpha_re_6[34] = kconst_re_3[2][4];
    alpha_im_6[34] = kconst_im_3[2][4];
    alpha_re_6[35] = kconst_re_3[3][4];
    alpha_im_6[35] = kconst_im_3[3][4];
    alpha_re_6[36] = kconst_re_3[4][4];
    alpha_im_6[36] = kconst_im_3[4][4];
    alpha_re_6[37] = kconst_re_3[5][4];
    alpha_im_6[37] = kconst_im_3[5][4];
    alpha_re_6[38] = kconst_re_3[6][4];
    alpha_im_6[38] = kconst_im_3[6][4];
    alpha_re_6[39] = kconst_re_3[7][4];
    alpha_im_6[39] = kconst_im_3[7][4];
    alpha_re_6[40] = kconst_re_3[0][5];
    alpha_im_6[40] = kconst_im_3[0][5];
    alpha_re_6[41] = kconst_re_3[1][5];
    alpha_im_6[41] = kconst_im_3[1][5];
    alpha_re_6[42] = kconst_re_3[2][5];
    alpha_im_6[42] = kconst_im_3[2][5];
    alpha_re_6[43] = kconst_re_3[3][5];
    alpha_im_6[43] = kconst_im_3[3][5];
    alpha_re_6[44] = kconst_re_3[4][5];
    alpha_im_6[44] = kconst_im_3[4][5];
    alpha_re_6[45] = kconst_re_3[5][5];
    alpha_im_6[45] = kconst_im_3[5][5];
    alpha_re_6[46] = kconst_re_3[6][5];
    alpha_im_6[46] = kconst_im_3[6][5];
    alpha_re_6[47] = kconst_re_3[7][5];
    alpha_im_6[47] = kconst_im_3[7][5];
    alpha_re_6[48] = kconst_re_3[0][6];
    alpha_im_6[48] = kconst_im_3[0][6];
    alpha_re_6[49] = kconst_re_3[1][6];
    alpha_im_6[49] = kconst_im_3[1][6];
    alpha_re_6[50] = kconst_re_3[2][6];
    alpha_im_6[50] = kconst_im_3[2][6];
    alpha_re_6[51] = kconst_re_3[3][6];
    alpha_im_6[51] = kconst_im_3[3][6];
    alpha_re_6[52] = kconst_re_3[4][6];
    alpha_im_6[52] = kconst_im_3[4][6];
    alpha_re_6[53] = kconst_re_3[5][6];
    alpha_im_6[53] = kconst_im_3[5][6];
    alpha_re_6[54] = kconst_re_3[6][6];
    alpha_im_6[54] = kconst_im_3[6][6];
    alpha_re_6[55] = kconst_re_3[7][6];
    alpha_im_6[55] = kconst_im_3[7][6];
    alpha_re_6[56] = kconst_re_3[0][7];
    alpha_im_6[56] = kconst_im_3[0][7];
    alpha_re_6[57] = kconst_re_3[1][7];
    alpha_im_6[57] = kconst_im_3[1][7];
    alpha_re_6[58] = kconst_re_3[2][7];
    alpha_im_6[58] = kconst_im_3[2][7];
    alpha_re_6[59] = kconst_re_3[3][7];
    alpha_im_6[59] = kconst_im_3[3][7];
    alpha_re_6[60] = kconst_re_3[4][7];
    alpha_im_6[60] = kconst_im_3[4][7];
    alpha_re_6[61] = kconst_re_3[5][7];
    alpha_im_6[61] = kconst_im_3[5][7];
    alpha_re_6[62] = kconst_re_3[6][7];
    alpha_im_6[62] = kconst_im_3[6][7];
    alpha_re_6[63] = kconst_re_3[7][7];
    alpha_im_6[63] = kconst_im_3[7][7];
  end

  assign selector_out_re_3[0] = alpha_re_6[0];
  assign selector_out_re_3[1] = alpha_re_6[8];
  assign selector_out_re_3[2] = alpha_re_6[16];
  assign selector_out_re_3[3] = alpha_re_6[24];
  assign selector_out_re_3[4] = alpha_re_6[32];
  assign selector_out_re_3[5] = alpha_re_6[40];
  assign selector_out_re_3[6] = alpha_re_6[48];
  assign selector_out_re_3[7] = alpha_re_6[56];
  assign selector_out_re_3[8] = alpha_re_6[1];
  assign selector_out_re_3[9] = alpha_re_6[9];
  assign selector_out_re_3[10] = alpha_re_6[17];
  assign selector_out_re_3[11] = alpha_re_6[25];
  assign selector_out_re_3[12] = alpha_re_6[33];
  assign selector_out_re_3[13] = alpha_re_6[41];
  assign selector_out_re_3[14] = alpha_re_6[49];
  assign selector_out_re_3[15] = alpha_re_6[57];
  assign selector_out_re_3[16] = alpha_re_6[2];
  assign selector_out_re_3[17] = alpha_re_6[10];
  assign selector_out_re_3[18] = alpha_re_6[18];
  assign selector_out_re_3[19] = alpha_re_6[26];
  assign selector_out_re_3[20] = alpha_re_6[34];
  assign selector_out_re_3[21] = alpha_re_6[42];
  assign selector_out_re_3[22] = alpha_re_6[50];
  assign selector_out_re_3[23] = alpha_re_6[58];
  assign selector_out_re_3[24] = alpha_re_6[3];
  assign selector_out_re_3[25] = alpha_re_6[11];
  assign selector_out_re_3[26] = alpha_re_6[19];
  assign selector_out_re_3[27] = alpha_re_6[27];
  assign selector_out_re_3[28] = alpha_re_6[35];
  assign selector_out_re_3[29] = alpha_re_6[43];
  assign selector_out_re_3[30] = alpha_re_6[51];
  assign selector_out_re_3[31] = alpha_re_6[59];
  assign selector_out_re_3[32] = alpha_re_6[4];
  assign selector_out_re_3[33] = alpha_re_6[12];
  assign selector_out_re_3[34] = alpha_re_6[20];
  assign selector_out_re_3[35] = alpha_re_6[28];
  assign selector_out_re_3[36] = alpha_re_6[36];
  assign selector_out_re_3[37] = alpha_re_6[44];
  assign selector_out_re_3[38] = alpha_re_6[52];
  assign selector_out_re_3[39] = alpha_re_6[60];
  assign selector_out_re_3[40] = alpha_re_6[5];
  assign selector_out_re_3[41] = alpha_re_6[13];
  assign selector_out_re_3[42] = alpha_re_6[21];
  assign selector_out_re_3[43] = alpha_re_6[29];
  assign selector_out_re_3[44] = alpha_re_6[37];
  assign selector_out_re_3[45] = alpha_re_6[45];
  assign selector_out_re_3[46] = alpha_re_6[53];
  assign selector_out_re_3[47] = alpha_re_6[61];
  assign selector_out_re_3[48] = alpha_re_6[6];
  assign selector_out_re_3[49] = alpha_re_6[14];
  assign selector_out_re_3[50] = alpha_re_6[22];
  assign selector_out_re_3[51] = alpha_re_6[30];
  assign selector_out_re_3[52] = alpha_re_6[38];
  assign selector_out_re_3[53] = alpha_re_6[46];
  assign selector_out_re_3[54] = alpha_re_6[54];
  assign selector_out_re_3[55] = alpha_re_6[62];
  assign selector_out_re_3[56] = alpha_re_6[7];
  assign selector_out_re_3[57] = alpha_re_6[15];
  assign selector_out_re_3[58] = alpha_re_6[23];
  assign selector_out_re_3[59] = alpha_re_6[31];
  assign selector_out_re_3[60] = alpha_re_6[39];
  assign selector_out_re_3[61] = alpha_re_6[47];
  assign selector_out_re_3[62] = alpha_re_6[55];
  assign selector_out_re_3[63] = alpha_re_6[63];

  assign selector_out_im_3[0] = alpha_im_6[0];
  assign selector_out_im_3[1] = alpha_im_6[8];
  assign selector_out_im_3[2] = alpha_im_6[16];
  assign selector_out_im_3[3] = alpha_im_6[24];
  assign selector_out_im_3[4] = alpha_im_6[32];
  assign selector_out_im_3[5] = alpha_im_6[40];
  assign selector_out_im_3[6] = alpha_im_6[48];
  assign selector_out_im_3[7] = alpha_im_6[56];
  assign selector_out_im_3[8] = alpha_im_6[1];
  assign selector_out_im_3[9] = alpha_im_6[9];
  assign selector_out_im_3[10] = alpha_im_6[17];
  assign selector_out_im_3[11] = alpha_im_6[25];
  assign selector_out_im_3[12] = alpha_im_6[33];
  assign selector_out_im_3[13] = alpha_im_6[41];
  assign selector_out_im_3[14] = alpha_im_6[49];
  assign selector_out_im_3[15] = alpha_im_6[57];
  assign selector_out_im_3[16] = alpha_im_6[2];
  assign selector_out_im_3[17] = alpha_im_6[10];
  assign selector_out_im_3[18] = alpha_im_6[18];
  assign selector_out_im_3[19] = alpha_im_6[26];
  assign selector_out_im_3[20] = alpha_im_6[34];
  assign selector_out_im_3[21] = alpha_im_6[42];
  assign selector_out_im_3[22] = alpha_im_6[50];
  assign selector_out_im_3[23] = alpha_im_6[58];
  assign selector_out_im_3[24] = alpha_im_6[3];
  assign selector_out_im_3[25] = alpha_im_6[11];
  assign selector_out_im_3[26] = alpha_im_6[19];
  assign selector_out_im_3[27] = alpha_im_6[27];
  assign selector_out_im_3[28] = alpha_im_6[35];
  assign selector_out_im_3[29] = alpha_im_6[43];
  assign selector_out_im_3[30] = alpha_im_6[51];
  assign selector_out_im_3[31] = alpha_im_6[59];
  assign selector_out_im_3[32] = alpha_im_6[4];
  assign selector_out_im_3[33] = alpha_im_6[12];
  assign selector_out_im_3[34] = alpha_im_6[20];
  assign selector_out_im_3[35] = alpha_im_6[28];
  assign selector_out_im_3[36] = alpha_im_6[36];
  assign selector_out_im_3[37] = alpha_im_6[44];
  assign selector_out_im_3[38] = alpha_im_6[52];
  assign selector_out_im_3[39] = alpha_im_6[60];
  assign selector_out_im_3[40] = alpha_im_6[5];
  assign selector_out_im_3[41] = alpha_im_6[13];
  assign selector_out_im_3[42] = alpha_im_6[21];
  assign selector_out_im_3[43] = alpha_im_6[29];
  assign selector_out_im_3[44] = alpha_im_6[37];
  assign selector_out_im_3[45] = alpha_im_6[45];
  assign selector_out_im_3[46] = alpha_im_6[53];
  assign selector_out_im_3[47] = alpha_im_6[61];
  assign selector_out_im_3[48] = alpha_im_6[6];
  assign selector_out_im_3[49] = alpha_im_6[14];
  assign selector_out_im_3[50] = alpha_im_6[22];
  assign selector_out_im_3[51] = alpha_im_6[30];
  assign selector_out_im_3[52] = alpha_im_6[38];
  assign selector_out_im_3[53] = alpha_im_6[46];
  assign selector_out_im_3[54] = alpha_im_6[54];
  assign selector_out_im_3[55] = alpha_im_6[62];
  assign selector_out_im_3[56] = alpha_im_6[7];
  assign selector_out_im_3[57] = alpha_im_6[15];
  assign selector_out_im_3[58] = alpha_im_6[23];
  assign selector_out_im_3[59] = alpha_im_6[31];
  assign selector_out_im_3[60] = alpha_im_6[39];
  assign selector_out_im_3[61] = alpha_im_6[47];
  assign selector_out_im_3[62] = alpha_im_6[55];
  assign selector_out_im_3[63] = alpha_im_6[63];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign alpha_re_7[0] = selector_out_re_3[0];
  assign alpha_im_7[0] = selector_out_im_3[0];
  assign alpha_re_7[1] = selector_out_re_3[1];
  assign alpha_im_7[1] = selector_out_im_3[1];
  assign alpha_re_7[2] = selector_out_re_3[2];
  assign alpha_im_7[2] = selector_out_im_3[2];
  assign alpha_re_7[3] = selector_out_re_3[3];
  assign alpha_im_7[3] = selector_out_im_3[3];
  assign alpha_re_7[4] = selector_out_re_3[4];
  assign alpha_im_7[4] = selector_out_im_3[4];
  assign alpha_re_7[5] = selector_out_re_3[5];
  assign alpha_im_7[5] = selector_out_im_3[5];
  assign alpha_re_7[6] = selector_out_re_3[6];
  assign alpha_im_7[6] = selector_out_im_3[6];
  assign alpha_re_7[7] = selector_out_re_3[7];
  assign alpha_im_7[7] = selector_out_im_3[7];
  assign alpha_re_7[8] = selector_out_re_3[8];
  assign alpha_im_7[8] = selector_out_im_3[8];
  assign alpha_re_7[9] = selector_out_re_3[9];
  assign alpha_im_7[9] = selector_out_im_3[9];
  assign alpha_re_7[10] = selector_out_re_3[10];
  assign alpha_im_7[10] = selector_out_im_3[10];
  assign alpha_re_7[11] = selector_out_re_3[11];
  assign alpha_im_7[11] = selector_out_im_3[11];
  assign alpha_re_7[12] = selector_out_re_3[12];
  assign alpha_im_7[12] = selector_out_im_3[12];
  assign alpha_re_7[13] = selector_out_re_3[13];
  assign alpha_im_7[13] = selector_out_im_3[13];
  assign alpha_re_7[14] = selector_out_re_3[14];
  assign alpha_im_7[14] = selector_out_im_3[14];
  assign alpha_re_7[15] = selector_out_re_3[15];
  assign alpha_im_7[15] = selector_out_im_3[15];
  assign alpha_re_7[16] = selector_out_re_3[16];
  assign alpha_im_7[16] = selector_out_im_3[16];
  assign alpha_re_7[17] = selector_out_re_3[17];
  assign alpha_im_7[17] = selector_out_im_3[17];
  assign alpha_re_7[18] = selector_out_re_3[18];
  assign alpha_im_7[18] = selector_out_im_3[18];
  assign alpha_re_7[19] = selector_out_re_3[19];
  assign alpha_im_7[19] = selector_out_im_3[19];
  assign alpha_re_7[20] = selector_out_re_3[20];
  assign alpha_im_7[20] = selector_out_im_3[20];
  assign alpha_re_7[21] = selector_out_re_3[21];
  assign alpha_im_7[21] = selector_out_im_3[21];
  assign alpha_re_7[22] = selector_out_re_3[22];
  assign alpha_im_7[22] = selector_out_im_3[22];
  assign alpha_re_7[23] = selector_out_re_3[23];
  assign alpha_im_7[23] = selector_out_im_3[23];
  assign alpha_re_7[24] = selector_out_re_3[24];
  assign alpha_im_7[24] = selector_out_im_3[24];
  assign alpha_re_7[25] = selector_out_re_3[25];
  assign alpha_im_7[25] = selector_out_im_3[25];
  assign alpha_re_7[26] = selector_out_re_3[26];
  assign alpha_im_7[26] = selector_out_im_3[26];
  assign alpha_re_7[27] = selector_out_re_3[27];
  assign alpha_im_7[27] = selector_out_im_3[27];
  assign alpha_re_7[28] = selector_out_re_3[28];
  assign alpha_im_7[28] = selector_out_im_3[28];
  assign alpha_re_7[29] = selector_out_re_3[29];
  assign alpha_im_7[29] = selector_out_im_3[29];
  assign alpha_re_7[30] = selector_out_re_3[30];
  assign alpha_im_7[30] = selector_out_im_3[30];
  assign alpha_re_7[31] = selector_out_re_3[31];
  assign alpha_im_7[31] = selector_out_im_3[31];
  assign alpha_re_7[32] = selector_out_re_3[32];
  assign alpha_im_7[32] = selector_out_im_3[32];
  assign alpha_re_7[33] = selector_out_re_3[33];
  assign alpha_im_7[33] = selector_out_im_3[33];
  assign alpha_re_7[34] = selector_out_re_3[34];
  assign alpha_im_7[34] = selector_out_im_3[34];
  assign alpha_re_7[35] = selector_out_re_3[35];
  assign alpha_im_7[35] = selector_out_im_3[35];
  assign alpha_re_7[36] = selector_out_re_3[36];
  assign alpha_im_7[36] = selector_out_im_3[36];
  assign alpha_re_7[37] = selector_out_re_3[37];
  assign alpha_im_7[37] = selector_out_im_3[37];
  assign alpha_re_7[38] = selector_out_re_3[38];
  assign alpha_im_7[38] = selector_out_im_3[38];
  assign alpha_re_7[39] = selector_out_re_3[39];
  assign alpha_im_7[39] = selector_out_im_3[39];
  assign alpha_re_7[40] = selector_out_re_3[40];
  assign alpha_im_7[40] = selector_out_im_3[40];
  assign alpha_re_7[41] = selector_out_re_3[41];
  assign alpha_im_7[41] = selector_out_im_3[41];
  assign alpha_re_7[42] = selector_out_re_3[42];
  assign alpha_im_7[42] = selector_out_im_3[42];
  assign alpha_re_7[43] = selector_out_re_3[43];
  assign alpha_im_7[43] = selector_out_im_3[43];
  assign alpha_re_7[44] = selector_out_re_3[44];
  assign alpha_im_7[44] = selector_out_im_3[44];
  assign alpha_re_7[45] = selector_out_re_3[45];
  assign alpha_im_7[45] = selector_out_im_3[45];
  assign alpha_re_7[46] = selector_out_re_3[46];
  assign alpha_im_7[46] = selector_out_im_3[46];
  assign alpha_re_7[47] = selector_out_re_3[47];
  assign alpha_im_7[47] = selector_out_im_3[47];
  assign alpha_re_7[48] = selector_out_re_3[48];
  assign alpha_im_7[48] = selector_out_im_3[48];
  assign alpha_re_7[49] = selector_out_re_3[49];
  assign alpha_im_7[49] = selector_out_im_3[49];
  assign alpha_re_7[50] = selector_out_re_3[50];
  assign alpha_im_7[50] = selector_out_im_3[50];
  assign alpha_re_7[51] = selector_out_re_3[51];
  assign alpha_im_7[51] = selector_out_im_3[51];
  assign alpha_re_7[52] = selector_out_re_3[52];
  assign alpha_im_7[52] = selector_out_im_3[52];
  assign alpha_re_7[53] = selector_out_re_3[53];
  assign alpha_im_7[53] = selector_out_im_3[53];
  assign alpha_re_7[54] = selector_out_re_3[54];
  assign alpha_im_7[54] = selector_out_im_3[54];
  assign alpha_re_7[55] = selector_out_re_3[55];
  assign alpha_im_7[55] = selector_out_im_3[55];
  assign alpha_re_7[56] = selector_out_re_3[56];
  assign alpha_im_7[56] = selector_out_im_3[56];
  assign alpha_re_7[57] = selector_out_re_3[57];
  assign alpha_im_7[57] = selector_out_im_3[57];
  assign alpha_re_7[58] = selector_out_re_3[58];
  assign alpha_im_7[58] = selector_out_im_3[58];
  assign alpha_re_7[59] = selector_out_re_3[59];
  assign alpha_im_7[59] = selector_out_im_3[59];
  assign alpha_re_7[60] = selector_out_re_3[60];
  assign alpha_im_7[60] = selector_out_im_3[60];
  assign alpha_re_7[61] = selector_out_re_3[61];
  assign alpha_im_7[61] = selector_out_im_3[61];
  assign alpha_re_7[62] = selector_out_re_3[62];
  assign alpha_im_7[62] = selector_out_im_3[62];
  assign alpha_re_7[63] = selector_out_re_3[63];
  assign alpha_im_7[63] = selector_out_im_3[63];

  assign c146_kconst_re = gain_const5_data;
  assign c146_kconst_im = '{64{1'b0}};

  always_comb begin
    kconst_re_4[0][0] = c146_kconst_re[0];
    kconst_im_4[0][0] = c146_kconst_im[0];
    kconst_re_4[1][0] = c146_kconst_re[1];
    kconst_im_4[1][0] = c146_kconst_im[1];
    kconst_re_4[2][0] = c146_kconst_re[2];
    kconst_im_4[2][0] = c146_kconst_im[2];
    kconst_re_4[3][0] = c146_kconst_re[3];
    kconst_im_4[3][0] = c146_kconst_im[3];
    kconst_re_4[4][0] = c146_kconst_re[4];
    kconst_im_4[4][0] = c146_kconst_im[4];
    kconst_re_4[5][0] = c146_kconst_re[5];
    kconst_im_4[5][0] = c146_kconst_im[5];
    kconst_re_4[6][0] = c146_kconst_re[6];
    kconst_im_4[6][0] = c146_kconst_im[6];
    kconst_re_4[7][0] = c146_kconst_re[7];
    kconst_im_4[7][0] = c146_kconst_im[7];
    kconst_re_4[0][1] = c146_kconst_re[8];
    kconst_im_4[0][1] = c146_kconst_im[8];
    kconst_re_4[1][1] = c146_kconst_re[9];
    kconst_im_4[1][1] = c146_kconst_im[9];
    kconst_re_4[2][1] = c146_kconst_re[10];
    kconst_im_4[2][1] = c146_kconst_im[10];
    kconst_re_4[3][1] = c146_kconst_re[11];
    kconst_im_4[3][1] = c146_kconst_im[11];
    kconst_re_4[4][1] = c146_kconst_re[12];
    kconst_im_4[4][1] = c146_kconst_im[12];
    kconst_re_4[5][1] = c146_kconst_re[13];
    kconst_im_4[5][1] = c146_kconst_im[13];
    kconst_re_4[6][1] = c146_kconst_re[14];
    kconst_im_4[6][1] = c146_kconst_im[14];
    kconst_re_4[7][1] = c146_kconst_re[15];
    kconst_im_4[7][1] = c146_kconst_im[15];
    kconst_re_4[0][2] = c146_kconst_re[16];
    kconst_im_4[0][2] = c146_kconst_im[16];
    kconst_re_4[1][2] = c146_kconst_re[17];
    kconst_im_4[1][2] = c146_kconst_im[17];
    kconst_re_4[2][2] = c146_kconst_re[18];
    kconst_im_4[2][2] = c146_kconst_im[18];
    kconst_re_4[3][2] = c146_kconst_re[19];
    kconst_im_4[3][2] = c146_kconst_im[19];
    kconst_re_4[4][2] = c146_kconst_re[20];
    kconst_im_4[4][2] = c146_kconst_im[20];
    kconst_re_4[5][2] = c146_kconst_re[21];
    kconst_im_4[5][2] = c146_kconst_im[21];
    kconst_re_4[6][2] = c146_kconst_re[22];
    kconst_im_4[6][2] = c146_kconst_im[22];
    kconst_re_4[7][2] = c146_kconst_re[23];
    kconst_im_4[7][2] = c146_kconst_im[23];
    kconst_re_4[0][3] = c146_kconst_re[24];
    kconst_im_4[0][3] = c146_kconst_im[24];
    kconst_re_4[1][3] = c146_kconst_re[25];
    kconst_im_4[1][3] = c146_kconst_im[25];
    kconst_re_4[2][3] = c146_kconst_re[26];
    kconst_im_4[2][3] = c146_kconst_im[26];
    kconst_re_4[3][3] = c146_kconst_re[27];
    kconst_im_4[3][3] = c146_kconst_im[27];
    kconst_re_4[4][3] = c146_kconst_re[28];
    kconst_im_4[4][3] = c146_kconst_im[28];
    kconst_re_4[5][3] = c146_kconst_re[29];
    kconst_im_4[5][3] = c146_kconst_im[29];
    kconst_re_4[6][3] = c146_kconst_re[30];
    kconst_im_4[6][3] = c146_kconst_im[30];
    kconst_re_4[7][3] = c146_kconst_re[31];
    kconst_im_4[7][3] = c146_kconst_im[31];
    kconst_re_4[0][4] = c146_kconst_re[32];
    kconst_im_4[0][4] = c146_kconst_im[32];
    kconst_re_4[1][4] = c146_kconst_re[33];
    kconst_im_4[1][4] = c146_kconst_im[33];
    kconst_re_4[2][4] = c146_kconst_re[34];
    kconst_im_4[2][4] = c146_kconst_im[34];
    kconst_re_4[3][4] = c146_kconst_re[35];
    kconst_im_4[3][4] = c146_kconst_im[35];
    kconst_re_4[4][4] = c146_kconst_re[36];
    kconst_im_4[4][4] = c146_kconst_im[36];
    kconst_re_4[5][4] = c146_kconst_re[37];
    kconst_im_4[5][4] = c146_kconst_im[37];
    kconst_re_4[6][4] = c146_kconst_re[38];
    kconst_im_4[6][4] = c146_kconst_im[38];
    kconst_re_4[7][4] = c146_kconst_re[39];
    kconst_im_4[7][4] = c146_kconst_im[39];
    kconst_re_4[0][5] = c146_kconst_re[40];
    kconst_im_4[0][5] = c146_kconst_im[40];
    kconst_re_4[1][5] = c146_kconst_re[41];
    kconst_im_4[1][5] = c146_kconst_im[41];
    kconst_re_4[2][5] = c146_kconst_re[42];
    kconst_im_4[2][5] = c146_kconst_im[42];
    kconst_re_4[3][5] = c146_kconst_re[43];
    kconst_im_4[3][5] = c146_kconst_im[43];
    kconst_re_4[4][5] = c146_kconst_re[44];
    kconst_im_4[4][5] = c146_kconst_im[44];
    kconst_re_4[5][5] = c146_kconst_re[45];
    kconst_im_4[5][5] = c146_kconst_im[45];
    kconst_re_4[6][5] = c146_kconst_re[46];
    kconst_im_4[6][5] = c146_kconst_im[46];
    kconst_re_4[7][5] = c146_kconst_re[47];
    kconst_im_4[7][5] = c146_kconst_im[47];
    kconst_re_4[0][6] = c146_kconst_re[48];
    kconst_im_4[0][6] = c146_kconst_im[48];
    kconst_re_4[1][6] = c146_kconst_re[49];
    kconst_im_4[1][6] = c146_kconst_im[49];
    kconst_re_4[2][6] = c146_kconst_re[50];
    kconst_im_4[2][6] = c146_kconst_im[50];
    kconst_re_4[3][6] = c146_kconst_re[51];
    kconst_im_4[3][6] = c146_kconst_im[51];
    kconst_re_4[4][6] = c146_kconst_re[52];
    kconst_im_4[4][6] = c146_kconst_im[52];
    kconst_re_4[5][6] = c146_kconst_re[53];
    kconst_im_4[5][6] = c146_kconst_im[53];
    kconst_re_4[6][6] = c146_kconst_re[54];
    kconst_im_4[6][6] = c146_kconst_im[54];
    kconst_re_4[7][6] = c146_kconst_re[55];
    kconst_im_4[7][6] = c146_kconst_im[55];
    kconst_re_4[0][7] = c146_kconst_re[56];
    kconst_im_4[0][7] = c146_kconst_im[56];
    kconst_re_4[1][7] = c146_kconst_re[57];
    kconst_im_4[1][7] = c146_kconst_im[57];
    kconst_re_4[2][7] = c146_kconst_re[58];
    kconst_im_4[2][7] = c146_kconst_im[58];
    kconst_re_4[3][7] = c146_kconst_re[59];
    kconst_im_4[3][7] = c146_kconst_im[59];
    kconst_re_4[4][7] = c146_kconst_re[60];
    kconst_im_4[4][7] = c146_kconst_im[60];
    kconst_re_4[5][7] = c146_kconst_re[61];
    kconst_im_4[5][7] = c146_kconst_im[61];
    kconst_re_4[6][7] = c146_kconst_re[62];
    kconst_im_4[6][7] = c146_kconst_im[62];
    kconst_re_4[7][7] = c146_kconst_re[63];
    kconst_im_4[7][7] = c146_kconst_im[63];
  end

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  always_comb begin
    alpha_re_8[0] = kconst_re_4[0][0];
    alpha_im_8[0] = kconst_im_4[0][0];
    alpha_re_8[1] = kconst_re_4[1][0];
    alpha_im_8[1] = kconst_im_4[1][0];
    alpha_re_8[2] = kconst_re_4[2][0];
    alpha_im_8[2] = kconst_im_4[2][0];
    alpha_re_8[3] = kconst_re_4[3][0];
    alpha_im_8[3] = kconst_im_4[3][0];
    alpha_re_8[4] = kconst_re_4[4][0];
    alpha_im_8[4] = kconst_im_4[4][0];
    alpha_re_8[5] = kconst_re_4[5][0];
    alpha_im_8[5] = kconst_im_4[5][0];
    alpha_re_8[6] = kconst_re_4[6][0];
    alpha_im_8[6] = kconst_im_4[6][0];
    alpha_re_8[7] = kconst_re_4[7][0];
    alpha_im_8[7] = kconst_im_4[7][0];
    alpha_re_8[8] = kconst_re_4[0][1];
    alpha_im_8[8] = kconst_im_4[0][1];
    alpha_re_8[9] = kconst_re_4[1][1];
    alpha_im_8[9] = kconst_im_4[1][1];
    alpha_re_8[10] = kconst_re_4[2][1];
    alpha_im_8[10] = kconst_im_4[2][1];
    alpha_re_8[11] = kconst_re_4[3][1];
    alpha_im_8[11] = kconst_im_4[3][1];
    alpha_re_8[12] = kconst_re_4[4][1];
    alpha_im_8[12] = kconst_im_4[4][1];
    alpha_re_8[13] = kconst_re_4[5][1];
    alpha_im_8[13] = kconst_im_4[5][1];
    alpha_re_8[14] = kconst_re_4[6][1];
    alpha_im_8[14] = kconst_im_4[6][1];
    alpha_re_8[15] = kconst_re_4[7][1];
    alpha_im_8[15] = kconst_im_4[7][1];
    alpha_re_8[16] = kconst_re_4[0][2];
    alpha_im_8[16] = kconst_im_4[0][2];
    alpha_re_8[17] = kconst_re_4[1][2];
    alpha_im_8[17] = kconst_im_4[1][2];
    alpha_re_8[18] = kconst_re_4[2][2];
    alpha_im_8[18] = kconst_im_4[2][2];
    alpha_re_8[19] = kconst_re_4[3][2];
    alpha_im_8[19] = kconst_im_4[3][2];
    alpha_re_8[20] = kconst_re_4[4][2];
    alpha_im_8[20] = kconst_im_4[4][2];
    alpha_re_8[21] = kconst_re_4[5][2];
    alpha_im_8[21] = kconst_im_4[5][2];
    alpha_re_8[22] = kconst_re_4[6][2];
    alpha_im_8[22] = kconst_im_4[6][2];
    alpha_re_8[23] = kconst_re_4[7][2];
    alpha_im_8[23] = kconst_im_4[7][2];
    alpha_re_8[24] = kconst_re_4[0][3];
    alpha_im_8[24] = kconst_im_4[0][3];
    alpha_re_8[25] = kconst_re_4[1][3];
    alpha_im_8[25] = kconst_im_4[1][3];
    alpha_re_8[26] = kconst_re_4[2][3];
    alpha_im_8[26] = kconst_im_4[2][3];
    alpha_re_8[27] = kconst_re_4[3][3];
    alpha_im_8[27] = kconst_im_4[3][3];
    alpha_re_8[28] = kconst_re_4[4][3];
    alpha_im_8[28] = kconst_im_4[4][3];
    alpha_re_8[29] = kconst_re_4[5][3];
    alpha_im_8[29] = kconst_im_4[5][3];
    alpha_re_8[30] = kconst_re_4[6][3];
    alpha_im_8[30] = kconst_im_4[6][3];
    alpha_re_8[31] = kconst_re_4[7][3];
    alpha_im_8[31] = kconst_im_4[7][3];
    alpha_re_8[32] = kconst_re_4[0][4];
    alpha_im_8[32] = kconst_im_4[0][4];
    alpha_re_8[33] = kconst_re_4[1][4];
    alpha_im_8[33] = kconst_im_4[1][4];
    alpha_re_8[34] = kconst_re_4[2][4];
    alpha_im_8[34] = kconst_im_4[2][4];
    alpha_re_8[35] = kconst_re_4[3][4];
    alpha_im_8[35] = kconst_im_4[3][4];
    alpha_re_8[36] = kconst_re_4[4][4];
    alpha_im_8[36] = kconst_im_4[4][4];
    alpha_re_8[37] = kconst_re_4[5][4];
    alpha_im_8[37] = kconst_im_4[5][4];
    alpha_re_8[38] = kconst_re_4[6][4];
    alpha_im_8[38] = kconst_im_4[6][4];
    alpha_re_8[39] = kconst_re_4[7][4];
    alpha_im_8[39] = kconst_im_4[7][4];
    alpha_re_8[40] = kconst_re_4[0][5];
    alpha_im_8[40] = kconst_im_4[0][5];
    alpha_re_8[41] = kconst_re_4[1][5];
    alpha_im_8[41] = kconst_im_4[1][5];
    alpha_re_8[42] = kconst_re_4[2][5];
    alpha_im_8[42] = kconst_im_4[2][5];
    alpha_re_8[43] = kconst_re_4[3][5];
    alpha_im_8[43] = kconst_im_4[3][5];
    alpha_re_8[44] = kconst_re_4[4][5];
    alpha_im_8[44] = kconst_im_4[4][5];
    alpha_re_8[45] = kconst_re_4[5][5];
    alpha_im_8[45] = kconst_im_4[5][5];
    alpha_re_8[46] = kconst_re_4[6][5];
    alpha_im_8[46] = kconst_im_4[6][5];
    alpha_re_8[47] = kconst_re_4[7][5];
    alpha_im_8[47] = kconst_im_4[7][5];
    alpha_re_8[48] = kconst_re_4[0][6];
    alpha_im_8[48] = kconst_im_4[0][6];
    alpha_re_8[49] = kconst_re_4[1][6];
    alpha_im_8[49] = kconst_im_4[1][6];
    alpha_re_8[50] = kconst_re_4[2][6];
    alpha_im_8[50] = kconst_im_4[2][6];
    alpha_re_8[51] = kconst_re_4[3][6];
    alpha_im_8[51] = kconst_im_4[3][6];
    alpha_re_8[52] = kconst_re_4[4][6];
    alpha_im_8[52] = kconst_im_4[4][6];
    alpha_re_8[53] = kconst_re_4[5][6];
    alpha_im_8[53] = kconst_im_4[5][6];
    alpha_re_8[54] = kconst_re_4[6][6];
    alpha_im_8[54] = kconst_im_4[6][6];
    alpha_re_8[55] = kconst_re_4[7][6];
    alpha_im_8[55] = kconst_im_4[7][6];
    alpha_re_8[56] = kconst_re_4[0][7];
    alpha_im_8[56] = kconst_im_4[0][7];
    alpha_re_8[57] = kconst_re_4[1][7];
    alpha_im_8[57] = kconst_im_4[1][7];
    alpha_re_8[58] = kconst_re_4[2][7];
    alpha_im_8[58] = kconst_im_4[2][7];
    alpha_re_8[59] = kconst_re_4[3][7];
    alpha_im_8[59] = kconst_im_4[3][7];
    alpha_re_8[60] = kconst_re_4[4][7];
    alpha_im_8[60] = kconst_im_4[4][7];
    alpha_re_8[61] = kconst_re_4[5][7];
    alpha_im_8[61] = kconst_im_4[5][7];
    alpha_re_8[62] = kconst_re_4[6][7];
    alpha_im_8[62] = kconst_im_4[6][7];
    alpha_re_8[63] = kconst_re_4[7][7];
    alpha_im_8[63] = kconst_im_4[7][7];
  end

  assign selector_out_re_4[0] = alpha_re_8[0];
  assign selector_out_re_4[1] = alpha_re_8[8];
  assign selector_out_re_4[2] = alpha_re_8[16];
  assign selector_out_re_4[3] = alpha_re_8[24];
  assign selector_out_re_4[4] = alpha_re_8[32];
  assign selector_out_re_4[5] = alpha_re_8[40];
  assign selector_out_re_4[6] = alpha_re_8[48];
  assign selector_out_re_4[7] = alpha_re_8[56];
  assign selector_out_re_4[8] = alpha_re_8[1];
  assign selector_out_re_4[9] = alpha_re_8[9];
  assign selector_out_re_4[10] = alpha_re_8[17];
  assign selector_out_re_4[11] = alpha_re_8[25];
  assign selector_out_re_4[12] = alpha_re_8[33];
  assign selector_out_re_4[13] = alpha_re_8[41];
  assign selector_out_re_4[14] = alpha_re_8[49];
  assign selector_out_re_4[15] = alpha_re_8[57];
  assign selector_out_re_4[16] = alpha_re_8[2];
  assign selector_out_re_4[17] = alpha_re_8[10];
  assign selector_out_re_4[18] = alpha_re_8[18];
  assign selector_out_re_4[19] = alpha_re_8[26];
  assign selector_out_re_4[20] = alpha_re_8[34];
  assign selector_out_re_4[21] = alpha_re_8[42];
  assign selector_out_re_4[22] = alpha_re_8[50];
  assign selector_out_re_4[23] = alpha_re_8[58];
  assign selector_out_re_4[24] = alpha_re_8[3];
  assign selector_out_re_4[25] = alpha_re_8[11];
  assign selector_out_re_4[26] = alpha_re_8[19];
  assign selector_out_re_4[27] = alpha_re_8[27];
  assign selector_out_re_4[28] = alpha_re_8[35];
  assign selector_out_re_4[29] = alpha_re_8[43];
  assign selector_out_re_4[30] = alpha_re_8[51];
  assign selector_out_re_4[31] = alpha_re_8[59];
  assign selector_out_re_4[32] = alpha_re_8[4];
  assign selector_out_re_4[33] = alpha_re_8[12];
  assign selector_out_re_4[34] = alpha_re_8[20];
  assign selector_out_re_4[35] = alpha_re_8[28];
  assign selector_out_re_4[36] = alpha_re_8[36];
  assign selector_out_re_4[37] = alpha_re_8[44];
  assign selector_out_re_4[38] = alpha_re_8[52];
  assign selector_out_re_4[39] = alpha_re_8[60];
  assign selector_out_re_4[40] = alpha_re_8[5];
  assign selector_out_re_4[41] = alpha_re_8[13];
  assign selector_out_re_4[42] = alpha_re_8[21];
  assign selector_out_re_4[43] = alpha_re_8[29];
  assign selector_out_re_4[44] = alpha_re_8[37];
  assign selector_out_re_4[45] = alpha_re_8[45];
  assign selector_out_re_4[46] = alpha_re_8[53];
  assign selector_out_re_4[47] = alpha_re_8[61];
  assign selector_out_re_4[48] = alpha_re_8[6];
  assign selector_out_re_4[49] = alpha_re_8[14];
  assign selector_out_re_4[50] = alpha_re_8[22];
  assign selector_out_re_4[51] = alpha_re_8[30];
  assign selector_out_re_4[52] = alpha_re_8[38];
  assign selector_out_re_4[53] = alpha_re_8[46];
  assign selector_out_re_4[54] = alpha_re_8[54];
  assign selector_out_re_4[55] = alpha_re_8[62];
  assign selector_out_re_4[56] = alpha_re_8[7];
  assign selector_out_re_4[57] = alpha_re_8[15];
  assign selector_out_re_4[58] = alpha_re_8[23];
  assign selector_out_re_4[59] = alpha_re_8[31];
  assign selector_out_re_4[60] = alpha_re_8[39];
  assign selector_out_re_4[61] = alpha_re_8[47];
  assign selector_out_re_4[62] = alpha_re_8[55];
  assign selector_out_re_4[63] = alpha_re_8[63];

  assign selector_out_im_4[0] = alpha_im_8[0];
  assign selector_out_im_4[1] = alpha_im_8[8];
  assign selector_out_im_4[2] = alpha_im_8[16];
  assign selector_out_im_4[3] = alpha_im_8[24];
  assign selector_out_im_4[4] = alpha_im_8[32];
  assign selector_out_im_4[5] = alpha_im_8[40];
  assign selector_out_im_4[6] = alpha_im_8[48];
  assign selector_out_im_4[7] = alpha_im_8[56];
  assign selector_out_im_4[8] = alpha_im_8[1];
  assign selector_out_im_4[9] = alpha_im_8[9];
  assign selector_out_im_4[10] = alpha_im_8[17];
  assign selector_out_im_4[11] = alpha_im_8[25];
  assign selector_out_im_4[12] = alpha_im_8[33];
  assign selector_out_im_4[13] = alpha_im_8[41];
  assign selector_out_im_4[14] = alpha_im_8[49];
  assign selector_out_im_4[15] = alpha_im_8[57];
  assign selector_out_im_4[16] = alpha_im_8[2];
  assign selector_out_im_4[17] = alpha_im_8[10];
  assign selector_out_im_4[18] = alpha_im_8[18];
  assign selector_out_im_4[19] = alpha_im_8[26];
  assign selector_out_im_4[20] = alpha_im_8[34];
  assign selector_out_im_4[21] = alpha_im_8[42];
  assign selector_out_im_4[22] = alpha_im_8[50];
  assign selector_out_im_4[23] = alpha_im_8[58];
  assign selector_out_im_4[24] = alpha_im_8[3];
  assign selector_out_im_4[25] = alpha_im_8[11];
  assign selector_out_im_4[26] = alpha_im_8[19];
  assign selector_out_im_4[27] = alpha_im_8[27];
  assign selector_out_im_4[28] = alpha_im_8[35];
  assign selector_out_im_4[29] = alpha_im_8[43];
  assign selector_out_im_4[30] = alpha_im_8[51];
  assign selector_out_im_4[31] = alpha_im_8[59];
  assign selector_out_im_4[32] = alpha_im_8[4];
  assign selector_out_im_4[33] = alpha_im_8[12];
  assign selector_out_im_4[34] = alpha_im_8[20];
  assign selector_out_im_4[35] = alpha_im_8[28];
  assign selector_out_im_4[36] = alpha_im_8[36];
  assign selector_out_im_4[37] = alpha_im_8[44];
  assign selector_out_im_4[38] = alpha_im_8[52];
  assign selector_out_im_4[39] = alpha_im_8[60];
  assign selector_out_im_4[40] = alpha_im_8[5];
  assign selector_out_im_4[41] = alpha_im_8[13];
  assign selector_out_im_4[42] = alpha_im_8[21];
  assign selector_out_im_4[43] = alpha_im_8[29];
  assign selector_out_im_4[44] = alpha_im_8[37];
  assign selector_out_im_4[45] = alpha_im_8[45];
  assign selector_out_im_4[46] = alpha_im_8[53];
  assign selector_out_im_4[47] = alpha_im_8[61];
  assign selector_out_im_4[48] = alpha_im_8[6];
  assign selector_out_im_4[49] = alpha_im_8[14];
  assign selector_out_im_4[50] = alpha_im_8[22];
  assign selector_out_im_4[51] = alpha_im_8[30];
  assign selector_out_im_4[52] = alpha_im_8[38];
  assign selector_out_im_4[53] = alpha_im_8[46];
  assign selector_out_im_4[54] = alpha_im_8[54];
  assign selector_out_im_4[55] = alpha_im_8[62];
  assign selector_out_im_4[56] = alpha_im_8[7];
  assign selector_out_im_4[57] = alpha_im_8[15];
  assign selector_out_im_4[58] = alpha_im_8[23];
  assign selector_out_im_4[59] = alpha_im_8[31];
  assign selector_out_im_4[60] = alpha_im_8[39];
  assign selector_out_im_4[61] = alpha_im_8[47];
  assign selector_out_im_4[62] = alpha_im_8[55];
  assign selector_out_im_4[63] = alpha_im_8[63];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign alpha_re_9[0] = selector_out_re_4[0];
  assign alpha_im_9[0] = selector_out_im_4[0];
  assign alpha_re_9[1] = selector_out_re_4[1];
  assign alpha_im_9[1] = selector_out_im_4[1];
  assign alpha_re_9[2] = selector_out_re_4[2];
  assign alpha_im_9[2] = selector_out_im_4[2];
  assign alpha_re_9[3] = selector_out_re_4[3];
  assign alpha_im_9[3] = selector_out_im_4[3];
  assign alpha_re_9[4] = selector_out_re_4[4];
  assign alpha_im_9[4] = selector_out_im_4[4];
  assign alpha_re_9[5] = selector_out_re_4[5];
  assign alpha_im_9[5] = selector_out_im_4[5];
  assign alpha_re_9[6] = selector_out_re_4[6];
  assign alpha_im_9[6] = selector_out_im_4[6];
  assign alpha_re_9[7] = selector_out_re_4[7];
  assign alpha_im_9[7] = selector_out_im_4[7];
  assign alpha_re_9[8] = selector_out_re_4[8];
  assign alpha_im_9[8] = selector_out_im_4[8];
  assign alpha_re_9[9] = selector_out_re_4[9];
  assign alpha_im_9[9] = selector_out_im_4[9];
  assign alpha_re_9[10] = selector_out_re_4[10];
  assign alpha_im_9[10] = selector_out_im_4[10];
  assign alpha_re_9[11] = selector_out_re_4[11];
  assign alpha_im_9[11] = selector_out_im_4[11];
  assign alpha_re_9[12] = selector_out_re_4[12];
  assign alpha_im_9[12] = selector_out_im_4[12];
  assign alpha_re_9[13] = selector_out_re_4[13];
  assign alpha_im_9[13] = selector_out_im_4[13];
  assign alpha_re_9[14] = selector_out_re_4[14];
  assign alpha_im_9[14] = selector_out_im_4[14];
  assign alpha_re_9[15] = selector_out_re_4[15];
  assign alpha_im_9[15] = selector_out_im_4[15];
  assign alpha_re_9[16] = selector_out_re_4[16];
  assign alpha_im_9[16] = selector_out_im_4[16];
  assign alpha_re_9[17] = selector_out_re_4[17];
  assign alpha_im_9[17] = selector_out_im_4[17];
  assign alpha_re_9[18] = selector_out_re_4[18];
  assign alpha_im_9[18] = selector_out_im_4[18];
  assign alpha_re_9[19] = selector_out_re_4[19];
  assign alpha_im_9[19] = selector_out_im_4[19];
  assign alpha_re_9[20] = selector_out_re_4[20];
  assign alpha_im_9[20] = selector_out_im_4[20];
  assign alpha_re_9[21] = selector_out_re_4[21];
  assign alpha_im_9[21] = selector_out_im_4[21];
  assign alpha_re_9[22] = selector_out_re_4[22];
  assign alpha_im_9[22] = selector_out_im_4[22];
  assign alpha_re_9[23] = selector_out_re_4[23];
  assign alpha_im_9[23] = selector_out_im_4[23];
  assign alpha_re_9[24] = selector_out_re_4[24];
  assign alpha_im_9[24] = selector_out_im_4[24];
  assign alpha_re_9[25] = selector_out_re_4[25];
  assign alpha_im_9[25] = selector_out_im_4[25];
  assign alpha_re_9[26] = selector_out_re_4[26];
  assign alpha_im_9[26] = selector_out_im_4[26];
  assign alpha_re_9[27] = selector_out_re_4[27];
  assign alpha_im_9[27] = selector_out_im_4[27];
  assign alpha_re_9[28] = selector_out_re_4[28];
  assign alpha_im_9[28] = selector_out_im_4[28];
  assign alpha_re_9[29] = selector_out_re_4[29];
  assign alpha_im_9[29] = selector_out_im_4[29];
  assign alpha_re_9[30] = selector_out_re_4[30];
  assign alpha_im_9[30] = selector_out_im_4[30];
  assign alpha_re_9[31] = selector_out_re_4[31];
  assign alpha_im_9[31] = selector_out_im_4[31];
  assign alpha_re_9[32] = selector_out_re_4[32];
  assign alpha_im_9[32] = selector_out_im_4[32];
  assign alpha_re_9[33] = selector_out_re_4[33];
  assign alpha_im_9[33] = selector_out_im_4[33];
  assign alpha_re_9[34] = selector_out_re_4[34];
  assign alpha_im_9[34] = selector_out_im_4[34];
  assign alpha_re_9[35] = selector_out_re_4[35];
  assign alpha_im_9[35] = selector_out_im_4[35];
  assign alpha_re_9[36] = selector_out_re_4[36];
  assign alpha_im_9[36] = selector_out_im_4[36];
  assign alpha_re_9[37] = selector_out_re_4[37];
  assign alpha_im_9[37] = selector_out_im_4[37];
  assign alpha_re_9[38] = selector_out_re_4[38];
  assign alpha_im_9[38] = selector_out_im_4[38];
  assign alpha_re_9[39] = selector_out_re_4[39];
  assign alpha_im_9[39] = selector_out_im_4[39];
  assign alpha_re_9[40] = selector_out_re_4[40];
  assign alpha_im_9[40] = selector_out_im_4[40];
  assign alpha_re_9[41] = selector_out_re_4[41];
  assign alpha_im_9[41] = selector_out_im_4[41];
  assign alpha_re_9[42] = selector_out_re_4[42];
  assign alpha_im_9[42] = selector_out_im_4[42];
  assign alpha_re_9[43] = selector_out_re_4[43];
  assign alpha_im_9[43] = selector_out_im_4[43];
  assign alpha_re_9[44] = selector_out_re_4[44];
  assign alpha_im_9[44] = selector_out_im_4[44];
  assign alpha_re_9[45] = selector_out_re_4[45];
  assign alpha_im_9[45] = selector_out_im_4[45];
  assign alpha_re_9[46] = selector_out_re_4[46];
  assign alpha_im_9[46] = selector_out_im_4[46];
  assign alpha_re_9[47] = selector_out_re_4[47];
  assign alpha_im_9[47] = selector_out_im_4[47];
  assign alpha_re_9[48] = selector_out_re_4[48];
  assign alpha_im_9[48] = selector_out_im_4[48];
  assign alpha_re_9[49] = selector_out_re_4[49];
  assign alpha_im_9[49] = selector_out_im_4[49];
  assign alpha_re_9[50] = selector_out_re_4[50];
  assign alpha_im_9[50] = selector_out_im_4[50];
  assign alpha_re_9[51] = selector_out_re_4[51];
  assign alpha_im_9[51] = selector_out_im_4[51];
  assign alpha_re_9[52] = selector_out_re_4[52];
  assign alpha_im_9[52] = selector_out_im_4[52];
  assign alpha_re_9[53] = selector_out_re_4[53];
  assign alpha_im_9[53] = selector_out_im_4[53];
  assign alpha_re_9[54] = selector_out_re_4[54];
  assign alpha_im_9[54] = selector_out_im_4[54];
  assign alpha_re_9[55] = selector_out_re_4[55];
  assign alpha_im_9[55] = selector_out_im_4[55];
  assign alpha_re_9[56] = selector_out_re_4[56];
  assign alpha_im_9[56] = selector_out_im_4[56];
  assign alpha_re_9[57] = selector_out_re_4[57];
  assign alpha_im_9[57] = selector_out_im_4[57];
  assign alpha_re_9[58] = selector_out_re_4[58];
  assign alpha_im_9[58] = selector_out_im_4[58];
  assign alpha_re_9[59] = selector_out_re_4[59];
  assign alpha_im_9[59] = selector_out_im_4[59];
  assign alpha_re_9[60] = selector_out_re_4[60];
  assign alpha_im_9[60] = selector_out_im_4[60];
  assign alpha_re_9[61] = selector_out_re_4[61];
  assign alpha_im_9[61] = selector_out_im_4[61];
  assign alpha_re_9[62] = selector_out_re_4[62];
  assign alpha_im_9[62] = selector_out_im_4[62];
  assign alpha_re_9[63] = selector_out_re_4[63];
  assign alpha_im_9[63] = selector_out_im_4[63];

  assign c172_kconst_re[0] = 14'sb01011010100000;
  assign c172_kconst_im[0] = 14'sb00000000000000;
  assign c172_kconst_re[1] = 14'sb00000000000000;
  assign c172_kconst_im[1] = 14'sb00000000000000;
  assign c172_kconst_re[2] = 14'sb00000000000000;
  assign c172_kconst_im[2] = 14'sb00000000000000;
  assign c172_kconst_re[3] = 14'sb00000000000000;
  assign c172_kconst_im[3] = 14'sb00000000000000;
  assign c172_kconst_re[4] = 14'sb01011010100000;
  assign c172_kconst_im[4] = 14'sb00000000000000;
  assign c172_kconst_re[5] = 14'sb00000000000000;
  assign c172_kconst_im[5] = 14'sb00000000000000;
  assign c172_kconst_re[6] = 14'sb00000000000000;
  assign c172_kconst_im[6] = 14'sb00000000000000;
  assign c172_kconst_re[7] = 14'sb00000000000000;
  assign c172_kconst_im[7] = 14'sb00000000000000;
  assign c172_kconst_re[8] = 14'sb00000000000000;
  assign c172_kconst_im[8] = 14'sb00000000000000;
  assign c172_kconst_re[9] = 14'sb01011010100000;
  assign c172_kconst_im[9] = 14'sb00000000000000;
  assign c172_kconst_re[10] = 14'sb00000000000000;
  assign c172_kconst_im[10] = 14'sb00000000000000;
  assign c172_kconst_re[11] = 14'sb00000000000000;
  assign c172_kconst_im[11] = 14'sb00000000000000;
  assign c172_kconst_re[12] = 14'sb00000000000000;
  assign c172_kconst_im[12] = 14'sb00000000000000;
  assign c172_kconst_re[13] = 14'sb01011010100000;
  assign c172_kconst_im[13] = 14'sb00000000000000;
  assign c172_kconst_re[14] = 14'sb00000000000000;
  assign c172_kconst_im[14] = 14'sb00000000000000;
  assign c172_kconst_re[15] = 14'sb00000000000000;
  assign c172_kconst_im[15] = 14'sb00000000000000;
  assign c172_kconst_re[16] = 14'sb00000000000000;
  assign c172_kconst_im[16] = 14'sb00000000000000;
  assign c172_kconst_re[17] = 14'sb00000000000000;
  assign c172_kconst_im[17] = 14'sb00000000000000;
  assign c172_kconst_re[18] = 14'sb01011010100000;
  assign c172_kconst_im[18] = 14'sb00000000000000;
  assign c172_kconst_re[19] = 14'sb00000000000000;
  assign c172_kconst_im[19] = 14'sb00000000000000;
  assign c172_kconst_re[20] = 14'sb00000000000000;
  assign c172_kconst_im[20] = 14'sb00000000000000;
  assign c172_kconst_re[21] = 14'sb00000000000000;
  assign c172_kconst_im[21] = 14'sb00000000000000;
  assign c172_kconst_re[22] = 14'sb01011010100000;
  assign c172_kconst_im[22] = 14'sb00000000000000;
  assign c172_kconst_re[23] = 14'sb00000000000000;
  assign c172_kconst_im[23] = 14'sb00000000000000;
  assign c172_kconst_re[24] = 14'sb00000000000000;
  assign c172_kconst_im[24] = 14'sb00000000000000;
  assign c172_kconst_re[25] = 14'sb00000000000000;
  assign c172_kconst_im[25] = 14'sb00000000000000;
  assign c172_kconst_re[26] = 14'sb00000000000000;
  assign c172_kconst_im[26] = 14'sb00000000000000;
  assign c172_kconst_re[27] = 14'sb01011010100000;
  assign c172_kconst_im[27] = 14'sb00000000000000;
  assign c172_kconst_re[28] = 14'sb00000000000000;
  assign c172_kconst_im[28] = 14'sb00000000000000;
  assign c172_kconst_re[29] = 14'sb00000000000000;
  assign c172_kconst_im[29] = 14'sb00000000000000;
  assign c172_kconst_re[30] = 14'sb00000000000000;
  assign c172_kconst_im[30] = 14'sb00000000000000;
  assign c172_kconst_re[31] = 14'sb01011010100000;
  assign c172_kconst_im[31] = 14'sb00000000000000;
  assign c172_kconst_re[32] = 14'sb01011010100000;
  assign c172_kconst_im[32] = 14'sb00000000000000;
  assign c172_kconst_re[33] = 14'sb00000000000000;
  assign c172_kconst_im[33] = 14'sb00000000000000;
  assign c172_kconst_re[34] = 14'sb00000000000000;
  assign c172_kconst_im[34] = 14'sb00000000000000;
  assign c172_kconst_re[35] = 14'sb00000000000000;
  assign c172_kconst_im[35] = 14'sb00000000000000;
  assign c172_kconst_re[36] = 14'sb10100101011110;
  assign c172_kconst_im[36] = 14'sb00000000000000;
  assign c172_kconst_re[37] = 14'sb00000000000000;
  assign c172_kconst_im[37] = 14'sb00000000000000;
  assign c172_kconst_re[38] = 14'sb00000000000000;
  assign c172_kconst_im[38] = 14'sb00000000000000;
  assign c172_kconst_re[39] = 14'sb00000000000000;
  assign c172_kconst_im[39] = 14'sb00000000000000;
  assign c172_kconst_re[40] = 14'sb00000000000000;
  assign c172_kconst_im[40] = 14'sb00000000000000;
  assign c172_kconst_re[41] = 14'sb01011010100000;
  assign c172_kconst_im[41] = 14'sb00000000000000;
  assign c172_kconst_re[42] = 14'sb00000000000000;
  assign c172_kconst_im[42] = 14'sb00000000000000;
  assign c172_kconst_re[43] = 14'sb00000000000000;
  assign c172_kconst_im[43] = 14'sb00000000000000;
  assign c172_kconst_re[44] = 14'sb00000000000000;
  assign c172_kconst_im[44] = 14'sb00000000000000;
  assign c172_kconst_re[45] = 14'sb10100101011110;
  assign c172_kconst_im[45] = 14'sb00000000000000;
  assign c172_kconst_re[46] = 14'sb00000000000000;
  assign c172_kconst_im[46] = 14'sb00000000000000;
  assign c172_kconst_re[47] = 14'sb00000000000000;
  assign c172_kconst_im[47] = 14'sb00000000000000;
  assign c172_kconst_re[48] = 14'sb00000000000000;
  assign c172_kconst_im[48] = 14'sb00000000000000;
  assign c172_kconst_re[49] = 14'sb00000000000000;
  assign c172_kconst_im[49] = 14'sb00000000000000;
  assign c172_kconst_re[50] = 14'sb01011010100000;
  assign c172_kconst_im[50] = 14'sb00000000000000;
  assign c172_kconst_re[51] = 14'sb00000000000000;
  assign c172_kconst_im[51] = 14'sb00000000000000;
  assign c172_kconst_re[52] = 14'sb00000000000000;
  assign c172_kconst_im[52] = 14'sb00000000000000;
  assign c172_kconst_re[53] = 14'sb00000000000000;
  assign c172_kconst_im[53] = 14'sb00000000000000;
  assign c172_kconst_re[54] = 14'sb10100101011110;
  assign c172_kconst_im[54] = 14'sb00000000000000;
  assign c172_kconst_re[55] = 14'sb00000000000000;
  assign c172_kconst_im[55] = 14'sb00000000000000;
  assign c172_kconst_re[56] = 14'sb00000000000000;
  assign c172_kconst_im[56] = 14'sb00000000000000;
  assign c172_kconst_re[57] = 14'sb00000000000000;
  assign c172_kconst_im[57] = 14'sb00000000000000;
  assign c172_kconst_re[58] = 14'sb00000000000000;
  assign c172_kconst_im[58] = 14'sb00000000000000;
  assign c172_kconst_re[59] = 14'sb01011010100000;
  assign c172_kconst_im[59] = 14'sb00000000000000;
  assign c172_kconst_re[60] = 14'sb00000000000000;
  assign c172_kconst_im[60] = 14'sb00000000000000;
  assign c172_kconst_re[61] = 14'sb00000000000000;
  assign c172_kconst_im[61] = 14'sb00000000000000;
  assign c172_kconst_re[62] = 14'sb00000000000000;
  assign c172_kconst_im[62] = 14'sb00000000000000;
  assign c172_kconst_re[63] = 14'sb10100101011110;
  assign c172_kconst_im[63] = 14'sb00000000000000;

  always_comb begin
    kconst_re_5[0][0] = c172_kconst_re[0];
    kconst_im_5[0][0] = c172_kconst_im[0];
    kconst_re_5[1][0] = c172_kconst_re[1];
    kconst_im_5[1][0] = c172_kconst_im[1];
    kconst_re_5[2][0] = c172_kconst_re[2];
    kconst_im_5[2][0] = c172_kconst_im[2];
    kconst_re_5[3][0] = c172_kconst_re[3];
    kconst_im_5[3][0] = c172_kconst_im[3];
    kconst_re_5[4][0] = c172_kconst_re[4];
    kconst_im_5[4][0] = c172_kconst_im[4];
    kconst_re_5[5][0] = c172_kconst_re[5];
    kconst_im_5[5][0] = c172_kconst_im[5];
    kconst_re_5[6][0] = c172_kconst_re[6];
    kconst_im_5[6][0] = c172_kconst_im[6];
    kconst_re_5[7][0] = c172_kconst_re[7];
    kconst_im_5[7][0] = c172_kconst_im[7];
    kconst_re_5[0][1] = c172_kconst_re[8];
    kconst_im_5[0][1] = c172_kconst_im[8];
    kconst_re_5[1][1] = c172_kconst_re[9];
    kconst_im_5[1][1] = c172_kconst_im[9];
    kconst_re_5[2][1] = c172_kconst_re[10];
    kconst_im_5[2][1] = c172_kconst_im[10];
    kconst_re_5[3][1] = c172_kconst_re[11];
    kconst_im_5[3][1] = c172_kconst_im[11];
    kconst_re_5[4][1] = c172_kconst_re[12];
    kconst_im_5[4][1] = c172_kconst_im[12];
    kconst_re_5[5][1] = c172_kconst_re[13];
    kconst_im_5[5][1] = c172_kconst_im[13];
    kconst_re_5[6][1] = c172_kconst_re[14];
    kconst_im_5[6][1] = c172_kconst_im[14];
    kconst_re_5[7][1] = c172_kconst_re[15];
    kconst_im_5[7][1] = c172_kconst_im[15];
    kconst_re_5[0][2] = c172_kconst_re[16];
    kconst_im_5[0][2] = c172_kconst_im[16];
    kconst_re_5[1][2] = c172_kconst_re[17];
    kconst_im_5[1][2] = c172_kconst_im[17];
    kconst_re_5[2][2] = c172_kconst_re[18];
    kconst_im_5[2][2] = c172_kconst_im[18];
    kconst_re_5[3][2] = c172_kconst_re[19];
    kconst_im_5[3][2] = c172_kconst_im[19];
    kconst_re_5[4][2] = c172_kconst_re[20];
    kconst_im_5[4][2] = c172_kconst_im[20];
    kconst_re_5[5][2] = c172_kconst_re[21];
    kconst_im_5[5][2] = c172_kconst_im[21];
    kconst_re_5[6][2] = c172_kconst_re[22];
    kconst_im_5[6][2] = c172_kconst_im[22];
    kconst_re_5[7][2] = c172_kconst_re[23];
    kconst_im_5[7][2] = c172_kconst_im[23];
    kconst_re_5[0][3] = c172_kconst_re[24];
    kconst_im_5[0][3] = c172_kconst_im[24];
    kconst_re_5[1][3] = c172_kconst_re[25];
    kconst_im_5[1][3] = c172_kconst_im[25];
    kconst_re_5[2][3] = c172_kconst_re[26];
    kconst_im_5[2][3] = c172_kconst_im[26];
    kconst_re_5[3][3] = c172_kconst_re[27];
    kconst_im_5[3][3] = c172_kconst_im[27];
    kconst_re_5[4][3] = c172_kconst_re[28];
    kconst_im_5[4][3] = c172_kconst_im[28];
    kconst_re_5[5][3] = c172_kconst_re[29];
    kconst_im_5[5][3] = c172_kconst_im[29];
    kconst_re_5[6][3] = c172_kconst_re[30];
    kconst_im_5[6][3] = c172_kconst_im[30];
    kconst_re_5[7][3] = c172_kconst_re[31];
    kconst_im_5[7][3] = c172_kconst_im[31];
    kconst_re_5[0][4] = c172_kconst_re[32];
    kconst_im_5[0][4] = c172_kconst_im[32];
    kconst_re_5[1][4] = c172_kconst_re[33];
    kconst_im_5[1][4] = c172_kconst_im[33];
    kconst_re_5[2][4] = c172_kconst_re[34];
    kconst_im_5[2][4] = c172_kconst_im[34];
    kconst_re_5[3][4] = c172_kconst_re[35];
    kconst_im_5[3][4] = c172_kconst_im[35];
    kconst_re_5[4][4] = c172_kconst_re[36];
    kconst_im_5[4][4] = c172_kconst_im[36];
    kconst_re_5[5][4] = c172_kconst_re[37];
    kconst_im_5[5][4] = c172_kconst_im[37];
    kconst_re_5[6][4] = c172_kconst_re[38];
    kconst_im_5[6][4] = c172_kconst_im[38];
    kconst_re_5[7][4] = c172_kconst_re[39];
    kconst_im_5[7][4] = c172_kconst_im[39];
    kconst_re_5[0][5] = c172_kconst_re[40];
    kconst_im_5[0][5] = c172_kconst_im[40];
    kconst_re_5[1][5] = c172_kconst_re[41];
    kconst_im_5[1][5] = c172_kconst_im[41];
    kconst_re_5[2][5] = c172_kconst_re[42];
    kconst_im_5[2][5] = c172_kconst_im[42];
    kconst_re_5[3][5] = c172_kconst_re[43];
    kconst_im_5[3][5] = c172_kconst_im[43];
    kconst_re_5[4][5] = c172_kconst_re[44];
    kconst_im_5[4][5] = c172_kconst_im[44];
    kconst_re_5[5][5] = c172_kconst_re[45];
    kconst_im_5[5][5] = c172_kconst_im[45];
    kconst_re_5[6][5] = c172_kconst_re[46];
    kconst_im_5[6][5] = c172_kconst_im[46];
    kconst_re_5[7][5] = c172_kconst_re[47];
    kconst_im_5[7][5] = c172_kconst_im[47];
    kconst_re_5[0][6] = c172_kconst_re[48];
    kconst_im_5[0][6] = c172_kconst_im[48];
    kconst_re_5[1][6] = c172_kconst_re[49];
    kconst_im_5[1][6] = c172_kconst_im[49];
    kconst_re_5[2][6] = c172_kconst_re[50];
    kconst_im_5[2][6] = c172_kconst_im[50];
    kconst_re_5[3][6] = c172_kconst_re[51];
    kconst_im_5[3][6] = c172_kconst_im[51];
    kconst_re_5[4][6] = c172_kconst_re[52];
    kconst_im_5[4][6] = c172_kconst_im[52];
    kconst_re_5[5][6] = c172_kconst_re[53];
    kconst_im_5[5][6] = c172_kconst_im[53];
    kconst_re_5[6][6] = c172_kconst_re[54];
    kconst_im_5[6][6] = c172_kconst_im[54];
    kconst_re_5[7][6] = c172_kconst_re[55];
    kconst_im_5[7][6] = c172_kconst_im[55];
    kconst_re_5[0][7] = c172_kconst_re[56];
    kconst_im_5[0][7] = c172_kconst_im[56];
    kconst_re_5[1][7] = c172_kconst_re[57];
    kconst_im_5[1][7] = c172_kconst_im[57];
    kconst_re_5[2][7] = c172_kconst_re[58];
    kconst_im_5[2][7] = c172_kconst_im[58];
    kconst_re_5[3][7] = c172_kconst_re[59];
    kconst_im_5[3][7] = c172_kconst_im[59];
    kconst_re_5[4][7] = c172_kconst_re[60];
    kconst_im_5[4][7] = c172_kconst_im[60];
    kconst_re_5[5][7] = c172_kconst_re[61];
    kconst_im_5[5][7] = c172_kconst_im[61];
    kconst_re_5[6][7] = c172_kconst_re[62];
    kconst_im_5[6][7] = c172_kconst_im[62];
    kconst_re_5[7][7] = c172_kconst_re[63];
    kconst_im_5[7][7] = c172_kconst_im[63];
  end

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  always_comb begin
    alpha_re_10[0] = kconst_re_5[0][0];
    alpha_im_10[0] = kconst_im_5[0][0];
    alpha_re_10[1] = kconst_re_5[1][0];
    alpha_im_10[1] = kconst_im_5[1][0];
    alpha_re_10[2] = kconst_re_5[2][0];
    alpha_im_10[2] = kconst_im_5[2][0];
    alpha_re_10[3] = kconst_re_5[3][0];
    alpha_im_10[3] = kconst_im_5[3][0];
    alpha_re_10[4] = kconst_re_5[4][0];
    alpha_im_10[4] = kconst_im_5[4][0];
    alpha_re_10[5] = kconst_re_5[5][0];
    alpha_im_10[5] = kconst_im_5[5][0];
    alpha_re_10[6] = kconst_re_5[6][0];
    alpha_im_10[6] = kconst_im_5[6][0];
    alpha_re_10[7] = kconst_re_5[7][0];
    alpha_im_10[7] = kconst_im_5[7][0];
    alpha_re_10[8] = kconst_re_5[0][1];
    alpha_im_10[8] = kconst_im_5[0][1];
    alpha_re_10[9] = kconst_re_5[1][1];
    alpha_im_10[9] = kconst_im_5[1][1];
    alpha_re_10[10] = kconst_re_5[2][1];
    alpha_im_10[10] = kconst_im_5[2][1];
    alpha_re_10[11] = kconst_re_5[3][1];
    alpha_im_10[11] = kconst_im_5[3][1];
    alpha_re_10[12] = kconst_re_5[4][1];
    alpha_im_10[12] = kconst_im_5[4][1];
    alpha_re_10[13] = kconst_re_5[5][1];
    alpha_im_10[13] = kconst_im_5[5][1];
    alpha_re_10[14] = kconst_re_5[6][1];
    alpha_im_10[14] = kconst_im_5[6][1];
    alpha_re_10[15] = kconst_re_5[7][1];
    alpha_im_10[15] = kconst_im_5[7][1];
    alpha_re_10[16] = kconst_re_5[0][2];
    alpha_im_10[16] = kconst_im_5[0][2];
    alpha_re_10[17] = kconst_re_5[1][2];
    alpha_im_10[17] = kconst_im_5[1][2];
    alpha_re_10[18] = kconst_re_5[2][2];
    alpha_im_10[18] = kconst_im_5[2][2];
    alpha_re_10[19] = kconst_re_5[3][2];
    alpha_im_10[19] = kconst_im_5[3][2];
    alpha_re_10[20] = kconst_re_5[4][2];
    alpha_im_10[20] = kconst_im_5[4][2];
    alpha_re_10[21] = kconst_re_5[5][2];
    alpha_im_10[21] = kconst_im_5[5][2];
    alpha_re_10[22] = kconst_re_5[6][2];
    alpha_im_10[22] = kconst_im_5[6][2];
    alpha_re_10[23] = kconst_re_5[7][2];
    alpha_im_10[23] = kconst_im_5[7][2];
    alpha_re_10[24] = kconst_re_5[0][3];
    alpha_im_10[24] = kconst_im_5[0][3];
    alpha_re_10[25] = kconst_re_5[1][3];
    alpha_im_10[25] = kconst_im_5[1][3];
    alpha_re_10[26] = kconst_re_5[2][3];
    alpha_im_10[26] = kconst_im_5[2][3];
    alpha_re_10[27] = kconst_re_5[3][3];
    alpha_im_10[27] = kconst_im_5[3][3];
    alpha_re_10[28] = kconst_re_5[4][3];
    alpha_im_10[28] = kconst_im_5[4][3];
    alpha_re_10[29] = kconst_re_5[5][3];
    alpha_im_10[29] = kconst_im_5[5][3];
    alpha_re_10[30] = kconst_re_5[6][3];
    alpha_im_10[30] = kconst_im_5[6][3];
    alpha_re_10[31] = kconst_re_5[7][3];
    alpha_im_10[31] = kconst_im_5[7][3];
    alpha_re_10[32] = kconst_re_5[0][4];
    alpha_im_10[32] = kconst_im_5[0][4];
    alpha_re_10[33] = kconst_re_5[1][4];
    alpha_im_10[33] = kconst_im_5[1][4];
    alpha_re_10[34] = kconst_re_5[2][4];
    alpha_im_10[34] = kconst_im_5[2][4];
    alpha_re_10[35] = kconst_re_5[3][4];
    alpha_im_10[35] = kconst_im_5[3][4];
    alpha_re_10[36] = kconst_re_5[4][4];
    alpha_im_10[36] = kconst_im_5[4][4];
    alpha_re_10[37] = kconst_re_5[5][4];
    alpha_im_10[37] = kconst_im_5[5][4];
    alpha_re_10[38] = kconst_re_5[6][4];
    alpha_im_10[38] = kconst_im_5[6][4];
    alpha_re_10[39] = kconst_re_5[7][4];
    alpha_im_10[39] = kconst_im_5[7][4];
    alpha_re_10[40] = kconst_re_5[0][5];
    alpha_im_10[40] = kconst_im_5[0][5];
    alpha_re_10[41] = kconst_re_5[1][5];
    alpha_im_10[41] = kconst_im_5[1][5];
    alpha_re_10[42] = kconst_re_5[2][5];
    alpha_im_10[42] = kconst_im_5[2][5];
    alpha_re_10[43] = kconst_re_5[3][5];
    alpha_im_10[43] = kconst_im_5[3][5];
    alpha_re_10[44] = kconst_re_5[4][5];
    alpha_im_10[44] = kconst_im_5[4][5];
    alpha_re_10[45] = kconst_re_5[5][5];
    alpha_im_10[45] = kconst_im_5[5][5];
    alpha_re_10[46] = kconst_re_5[6][5];
    alpha_im_10[46] = kconst_im_5[6][5];
    alpha_re_10[47] = kconst_re_5[7][5];
    alpha_im_10[47] = kconst_im_5[7][5];
    alpha_re_10[48] = kconst_re_5[0][6];
    alpha_im_10[48] = kconst_im_5[0][6];
    alpha_re_10[49] = kconst_re_5[1][6];
    alpha_im_10[49] = kconst_im_5[1][6];
    alpha_re_10[50] = kconst_re_5[2][6];
    alpha_im_10[50] = kconst_im_5[2][6];
    alpha_re_10[51] = kconst_re_5[3][6];
    alpha_im_10[51] = kconst_im_5[3][6];
    alpha_re_10[52] = kconst_re_5[4][6];
    alpha_im_10[52] = kconst_im_5[4][6];
    alpha_re_10[53] = kconst_re_5[5][6];
    alpha_im_10[53] = kconst_im_5[5][6];
    alpha_re_10[54] = kconst_re_5[6][6];
    alpha_im_10[54] = kconst_im_5[6][6];
    alpha_re_10[55] = kconst_re_5[7][6];
    alpha_im_10[55] = kconst_im_5[7][6];
    alpha_re_10[56] = kconst_re_5[0][7];
    alpha_im_10[56] = kconst_im_5[0][7];
    alpha_re_10[57] = kconst_re_5[1][7];
    alpha_im_10[57] = kconst_im_5[1][7];
    alpha_re_10[58] = kconst_re_5[2][7];
    alpha_im_10[58] = kconst_im_5[2][7];
    alpha_re_10[59] = kconst_re_5[3][7];
    alpha_im_10[59] = kconst_im_5[3][7];
    alpha_re_10[60] = kconst_re_5[4][7];
    alpha_im_10[60] = kconst_im_5[4][7];
    alpha_re_10[61] = kconst_re_5[5][7];
    alpha_im_10[61] = kconst_im_5[5][7];
    alpha_re_10[62] = kconst_re_5[6][7];
    alpha_im_10[62] = kconst_im_5[6][7];
    alpha_re_10[63] = kconst_re_5[7][7];
    alpha_im_10[63] = kconst_im_5[7][7];
  end

  assign selector_out_re_5[0] = alpha_re_10[0];
  assign selector_out_re_5[1] = alpha_re_10[8];
  assign selector_out_re_5[2] = alpha_re_10[16];
  assign selector_out_re_5[3] = alpha_re_10[24];
  assign selector_out_re_5[4] = alpha_re_10[32];
  assign selector_out_re_5[5] = alpha_re_10[40];
  assign selector_out_re_5[6] = alpha_re_10[48];
  assign selector_out_re_5[7] = alpha_re_10[56];
  assign selector_out_re_5[8] = alpha_re_10[1];
  assign selector_out_re_5[9] = alpha_re_10[9];
  assign selector_out_re_5[10] = alpha_re_10[17];
  assign selector_out_re_5[11] = alpha_re_10[25];
  assign selector_out_re_5[12] = alpha_re_10[33];
  assign selector_out_re_5[13] = alpha_re_10[41];
  assign selector_out_re_5[14] = alpha_re_10[49];
  assign selector_out_re_5[15] = alpha_re_10[57];
  assign selector_out_re_5[16] = alpha_re_10[2];
  assign selector_out_re_5[17] = alpha_re_10[10];
  assign selector_out_re_5[18] = alpha_re_10[18];
  assign selector_out_re_5[19] = alpha_re_10[26];
  assign selector_out_re_5[20] = alpha_re_10[34];
  assign selector_out_re_5[21] = alpha_re_10[42];
  assign selector_out_re_5[22] = alpha_re_10[50];
  assign selector_out_re_5[23] = alpha_re_10[58];
  assign selector_out_re_5[24] = alpha_re_10[3];
  assign selector_out_re_5[25] = alpha_re_10[11];
  assign selector_out_re_5[26] = alpha_re_10[19];
  assign selector_out_re_5[27] = alpha_re_10[27];
  assign selector_out_re_5[28] = alpha_re_10[35];
  assign selector_out_re_5[29] = alpha_re_10[43];
  assign selector_out_re_5[30] = alpha_re_10[51];
  assign selector_out_re_5[31] = alpha_re_10[59];
  assign selector_out_re_5[32] = alpha_re_10[4];
  assign selector_out_re_5[33] = alpha_re_10[12];
  assign selector_out_re_5[34] = alpha_re_10[20];
  assign selector_out_re_5[35] = alpha_re_10[28];
  assign selector_out_re_5[36] = alpha_re_10[36];
  assign selector_out_re_5[37] = alpha_re_10[44];
  assign selector_out_re_5[38] = alpha_re_10[52];
  assign selector_out_re_5[39] = alpha_re_10[60];
  assign selector_out_re_5[40] = alpha_re_10[5];
  assign selector_out_re_5[41] = alpha_re_10[13];
  assign selector_out_re_5[42] = alpha_re_10[21];
  assign selector_out_re_5[43] = alpha_re_10[29];
  assign selector_out_re_5[44] = alpha_re_10[37];
  assign selector_out_re_5[45] = alpha_re_10[45];
  assign selector_out_re_5[46] = alpha_re_10[53];
  assign selector_out_re_5[47] = alpha_re_10[61];
  assign selector_out_re_5[48] = alpha_re_10[6];
  assign selector_out_re_5[49] = alpha_re_10[14];
  assign selector_out_re_5[50] = alpha_re_10[22];
  assign selector_out_re_5[51] = alpha_re_10[30];
  assign selector_out_re_5[52] = alpha_re_10[38];
  assign selector_out_re_5[53] = alpha_re_10[46];
  assign selector_out_re_5[54] = alpha_re_10[54];
  assign selector_out_re_5[55] = alpha_re_10[62];
  assign selector_out_re_5[56] = alpha_re_10[7];
  assign selector_out_re_5[57] = alpha_re_10[15];
  assign selector_out_re_5[58] = alpha_re_10[23];
  assign selector_out_re_5[59] = alpha_re_10[31];
  assign selector_out_re_5[60] = alpha_re_10[39];
  assign selector_out_re_5[61] = alpha_re_10[47];
  assign selector_out_re_5[62] = alpha_re_10[55];
  assign selector_out_re_5[63] = alpha_re_10[63];

  assign selector_out_im_5[0] = alpha_im_10[0];
  assign selector_out_im_5[1] = alpha_im_10[8];
  assign selector_out_im_5[2] = alpha_im_10[16];
  assign selector_out_im_5[3] = alpha_im_10[24];
  assign selector_out_im_5[4] = alpha_im_10[32];
  assign selector_out_im_5[5] = alpha_im_10[40];
  assign selector_out_im_5[6] = alpha_im_10[48];
  assign selector_out_im_5[7] = alpha_im_10[56];
  assign selector_out_im_5[8] = alpha_im_10[1];
  assign selector_out_im_5[9] = alpha_im_10[9];
  assign selector_out_im_5[10] = alpha_im_10[17];
  assign selector_out_im_5[11] = alpha_im_10[25];
  assign selector_out_im_5[12] = alpha_im_10[33];
  assign selector_out_im_5[13] = alpha_im_10[41];
  assign selector_out_im_5[14] = alpha_im_10[49];
  assign selector_out_im_5[15] = alpha_im_10[57];
  assign selector_out_im_5[16] = alpha_im_10[2];
  assign selector_out_im_5[17] = alpha_im_10[10];
  assign selector_out_im_5[18] = alpha_im_10[18];
  assign selector_out_im_5[19] = alpha_im_10[26];
  assign selector_out_im_5[20] = alpha_im_10[34];
  assign selector_out_im_5[21] = alpha_im_10[42];
  assign selector_out_im_5[22] = alpha_im_10[50];
  assign selector_out_im_5[23] = alpha_im_10[58];
  assign selector_out_im_5[24] = alpha_im_10[3];
  assign selector_out_im_5[25] = alpha_im_10[11];
  assign selector_out_im_5[26] = alpha_im_10[19];
  assign selector_out_im_5[27] = alpha_im_10[27];
  assign selector_out_im_5[28] = alpha_im_10[35];
  assign selector_out_im_5[29] = alpha_im_10[43];
  assign selector_out_im_5[30] = alpha_im_10[51];
  assign selector_out_im_5[31] = alpha_im_10[59];
  assign selector_out_im_5[32] = alpha_im_10[4];
  assign selector_out_im_5[33] = alpha_im_10[12];
  assign selector_out_im_5[34] = alpha_im_10[20];
  assign selector_out_im_5[35] = alpha_im_10[28];
  assign selector_out_im_5[36] = alpha_im_10[36];
  assign selector_out_im_5[37] = alpha_im_10[44];
  assign selector_out_im_5[38] = alpha_im_10[52];
  assign selector_out_im_5[39] = alpha_im_10[60];
  assign selector_out_im_5[40] = alpha_im_10[5];
  assign selector_out_im_5[41] = alpha_im_10[13];
  assign selector_out_im_5[42] = alpha_im_10[21];
  assign selector_out_im_5[43] = alpha_im_10[29];
  assign selector_out_im_5[44] = alpha_im_10[37];
  assign selector_out_im_5[45] = alpha_im_10[45];
  assign selector_out_im_5[46] = alpha_im_10[53];
  assign selector_out_im_5[47] = alpha_im_10[61];
  assign selector_out_im_5[48] = alpha_im_10[6];
  assign selector_out_im_5[49] = alpha_im_10[14];
  assign selector_out_im_5[50] = alpha_im_10[22];
  assign selector_out_im_5[51] = alpha_im_10[30];
  assign selector_out_im_5[52] = alpha_im_10[38];
  assign selector_out_im_5[53] = alpha_im_10[46];
  assign selector_out_im_5[54] = alpha_im_10[54];
  assign selector_out_im_5[55] = alpha_im_10[62];
  assign selector_out_im_5[56] = alpha_im_10[7];
  assign selector_out_im_5[57] = alpha_im_10[15];
  assign selector_out_im_5[58] = alpha_im_10[23];
  assign selector_out_im_5[59] = alpha_im_10[31];
  assign selector_out_im_5[60] = alpha_im_10[39];
  assign selector_out_im_5[61] = alpha_im_10[47];
  assign selector_out_im_5[62] = alpha_im_10[55];
  assign selector_out_im_5[63] = alpha_im_10[63];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign alpha_re_11[0] = selector_out_re_5[0];
  assign alpha_im_11[0] = selector_out_im_5[0];
  assign alpha_re_11[1] = selector_out_re_5[1];
  assign alpha_im_11[1] = selector_out_im_5[1];
  assign alpha_re_11[2] = selector_out_re_5[2];
  assign alpha_im_11[2] = selector_out_im_5[2];
  assign alpha_re_11[3] = selector_out_re_5[3];
  assign alpha_im_11[3] = selector_out_im_5[3];
  assign alpha_re_11[4] = selector_out_re_5[4];
  assign alpha_im_11[4] = selector_out_im_5[4];
  assign alpha_re_11[5] = selector_out_re_5[5];
  assign alpha_im_11[5] = selector_out_im_5[5];
  assign alpha_re_11[6] = selector_out_re_5[6];
  assign alpha_im_11[6] = selector_out_im_5[6];
  assign alpha_re_11[7] = selector_out_re_5[7];
  assign alpha_im_11[7] = selector_out_im_5[7];
  assign alpha_re_11[8] = selector_out_re_5[8];
  assign alpha_im_11[8] = selector_out_im_5[8];
  assign alpha_re_11[9] = selector_out_re_5[9];
  assign alpha_im_11[9] = selector_out_im_5[9];
  assign alpha_re_11[10] = selector_out_re_5[10];
  assign alpha_im_11[10] = selector_out_im_5[10];
  assign alpha_re_11[11] = selector_out_re_5[11];
  assign alpha_im_11[11] = selector_out_im_5[11];
  assign alpha_re_11[12] = selector_out_re_5[12];
  assign alpha_im_11[12] = selector_out_im_5[12];
  assign alpha_re_11[13] = selector_out_re_5[13];
  assign alpha_im_11[13] = selector_out_im_5[13];
  assign alpha_re_11[14] = selector_out_re_5[14];
  assign alpha_im_11[14] = selector_out_im_5[14];
  assign alpha_re_11[15] = selector_out_re_5[15];
  assign alpha_im_11[15] = selector_out_im_5[15];
  assign alpha_re_11[16] = selector_out_re_5[16];
  assign alpha_im_11[16] = selector_out_im_5[16];
  assign alpha_re_11[17] = selector_out_re_5[17];
  assign alpha_im_11[17] = selector_out_im_5[17];
  assign alpha_re_11[18] = selector_out_re_5[18];
  assign alpha_im_11[18] = selector_out_im_5[18];
  assign alpha_re_11[19] = selector_out_re_5[19];
  assign alpha_im_11[19] = selector_out_im_5[19];
  assign alpha_re_11[20] = selector_out_re_5[20];
  assign alpha_im_11[20] = selector_out_im_5[20];
  assign alpha_re_11[21] = selector_out_re_5[21];
  assign alpha_im_11[21] = selector_out_im_5[21];
  assign alpha_re_11[22] = selector_out_re_5[22];
  assign alpha_im_11[22] = selector_out_im_5[22];
  assign alpha_re_11[23] = selector_out_re_5[23];
  assign alpha_im_11[23] = selector_out_im_5[23];
  assign alpha_re_11[24] = selector_out_re_5[24];
  assign alpha_im_11[24] = selector_out_im_5[24];
  assign alpha_re_11[25] = selector_out_re_5[25];
  assign alpha_im_11[25] = selector_out_im_5[25];
  assign alpha_re_11[26] = selector_out_re_5[26];
  assign alpha_im_11[26] = selector_out_im_5[26];
  assign alpha_re_11[27] = selector_out_re_5[27];
  assign alpha_im_11[27] = selector_out_im_5[27];
  assign alpha_re_11[28] = selector_out_re_5[28];
  assign alpha_im_11[28] = selector_out_im_5[28];
  assign alpha_re_11[29] = selector_out_re_5[29];
  assign alpha_im_11[29] = selector_out_im_5[29];
  assign alpha_re_11[30] = selector_out_re_5[30];
  assign alpha_im_11[30] = selector_out_im_5[30];
  assign alpha_re_11[31] = selector_out_re_5[31];
  assign alpha_im_11[31] = selector_out_im_5[31];
  assign alpha_re_11[32] = selector_out_re_5[32];
  assign alpha_im_11[32] = selector_out_im_5[32];
  assign alpha_re_11[33] = selector_out_re_5[33];
  assign alpha_im_11[33] = selector_out_im_5[33];
  assign alpha_re_11[34] = selector_out_re_5[34];
  assign alpha_im_11[34] = selector_out_im_5[34];
  assign alpha_re_11[35] = selector_out_re_5[35];
  assign alpha_im_11[35] = selector_out_im_5[35];
  assign alpha_re_11[36] = selector_out_re_5[36];
  assign alpha_im_11[36] = selector_out_im_5[36];
  assign alpha_re_11[37] = selector_out_re_5[37];
  assign alpha_im_11[37] = selector_out_im_5[37];
  assign alpha_re_11[38] = selector_out_re_5[38];
  assign alpha_im_11[38] = selector_out_im_5[38];
  assign alpha_re_11[39] = selector_out_re_5[39];
  assign alpha_im_11[39] = selector_out_im_5[39];
  assign alpha_re_11[40] = selector_out_re_5[40];
  assign alpha_im_11[40] = selector_out_im_5[40];
  assign alpha_re_11[41] = selector_out_re_5[41];
  assign alpha_im_11[41] = selector_out_im_5[41];
  assign alpha_re_11[42] = selector_out_re_5[42];
  assign alpha_im_11[42] = selector_out_im_5[42];
  assign alpha_re_11[43] = selector_out_re_5[43];
  assign alpha_im_11[43] = selector_out_im_5[43];
  assign alpha_re_11[44] = selector_out_re_5[44];
  assign alpha_im_11[44] = selector_out_im_5[44];
  assign alpha_re_11[45] = selector_out_re_5[45];
  assign alpha_im_11[45] = selector_out_im_5[45];
  assign alpha_re_11[46] = selector_out_re_5[46];
  assign alpha_im_11[46] = selector_out_im_5[46];
  assign alpha_re_11[47] = selector_out_re_5[47];
  assign alpha_im_11[47] = selector_out_im_5[47];
  assign alpha_re_11[48] = selector_out_re_5[48];
  assign alpha_im_11[48] = selector_out_im_5[48];
  assign alpha_re_11[49] = selector_out_re_5[49];
  assign alpha_im_11[49] = selector_out_im_5[49];
  assign alpha_re_11[50] = selector_out_re_5[50];
  assign alpha_im_11[50] = selector_out_im_5[50];
  assign alpha_re_11[51] = selector_out_re_5[51];
  assign alpha_im_11[51] = selector_out_im_5[51];
  assign alpha_re_11[52] = selector_out_re_5[52];
  assign alpha_im_11[52] = selector_out_im_5[52];
  assign alpha_re_11[53] = selector_out_re_5[53];
  assign alpha_im_11[53] = selector_out_im_5[53];
  assign alpha_re_11[54] = selector_out_re_5[54];
  assign alpha_im_11[54] = selector_out_im_5[54];
  assign alpha_re_11[55] = selector_out_re_5[55];
  assign alpha_im_11[55] = selector_out_im_5[55];
  assign alpha_re_11[56] = selector_out_re_5[56];
  assign alpha_im_11[56] = selector_out_im_5[56];
  assign alpha_re_11[57] = selector_out_re_5[57];
  assign alpha_im_11[57] = selector_out_im_5[57];
  assign alpha_re_11[58] = selector_out_re_5[58];
  assign alpha_im_11[58] = selector_out_im_5[58];
  assign alpha_re_11[59] = selector_out_re_5[59];
  assign alpha_im_11[59] = selector_out_im_5[59];
  assign alpha_re_11[60] = selector_out_re_5[60];
  assign alpha_im_11[60] = selector_out_im_5[60];
  assign alpha_re_11[61] = selector_out_re_5[61];
  assign alpha_im_11[61] = selector_out_im_5[61];
  assign alpha_re_11[62] = selector_out_re_5[62];
  assign alpha_im_11[62] = selector_out_im_5[62];
  assign alpha_re_11[63] = selector_out_re_5[63];
  assign alpha_im_11[63] = selector_out_im_5[63];

  always_ff @(posedge clk)
    begin : initial_state_reg_process
      initial_state_1 <= initial_state;
    end

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out[0] = initial_state_1[0];
  assign selector_out[1] = initial_state_1[1];
  assign selector_out[2] = initial_state_1[2];
  assign selector_out[3] = initial_state_1[3];
  assign selector_out[4] = initial_state_1[4];
  assign selector_out[5] = initial_state_1[5];
  assign selector_out[6] = initial_state_1[6];
  assign selector_out[7] = initial_state_1[7];
  assign selector_out[8] = initial_state_1[0];
  assign selector_out[9] = initial_state_1[1];
  assign selector_out[10] = initial_state_1[2];
  assign selector_out[11] = initial_state_1[3];
  assign selector_out[12] = initial_state_1[4];
  assign selector_out[13] = initial_state_1[5];
  assign selector_out[14] = initial_state_1[6];
  assign selector_out[15] = initial_state_1[7];
  assign selector_out[16] = initial_state_1[0];
  assign selector_out[17] = initial_state_1[1];
  assign selector_out[18] = initial_state_1[2];
  assign selector_out[19] = initial_state_1[3];
  assign selector_out[20] = initial_state_1[4];
  assign selector_out[21] = initial_state_1[5];
  assign selector_out[22] = initial_state_1[6];
  assign selector_out[23] = initial_state_1[7];
  assign selector_out[24] = initial_state_1[0];
  assign selector_out[25] = initial_state_1[1];
  assign selector_out[26] = initial_state_1[2];
  assign selector_out[27] = initial_state_1[3];
  assign selector_out[28] = initial_state_1[4];
  assign selector_out[29] = initial_state_1[5];
  assign selector_out[30] = initial_state_1[6];
  assign selector_out[31] = initial_state_1[7];
  assign selector_out[32] = initial_state_1[0];
  assign selector_out[33] = initial_state_1[1];
  assign selector_out[34] = initial_state_1[2];
  assign selector_out[35] = initial_state_1[3];
  assign selector_out[36] = initial_state_1[4];
  assign selector_out[37] = initial_state_1[5];
  assign selector_out[38] = initial_state_1[6];
  assign selector_out[39] = initial_state_1[7];
  assign selector_out[40] = initial_state_1[0];
  assign selector_out[41] = initial_state_1[1];
  assign selector_out[42] = initial_state_1[2];
  assign selector_out[43] = initial_state_1[3];
  assign selector_out[44] = initial_state_1[4];
  assign selector_out[45] = initial_state_1[5];
  assign selector_out[46] = initial_state_1[6];
  assign selector_out[47] = initial_state_1[7];
  assign selector_out[48] = initial_state_1[0];
  assign selector_out[49] = initial_state_1[1];
  assign selector_out[50] = initial_state_1[2];
  assign selector_out[51] = initial_state_1[3];
  assign selector_out[52] = initial_state_1[4];
  assign selector_out[53] = initial_state_1[5];
  assign selector_out[54] = initial_state_1[6];
  assign selector_out[55] = initial_state_1[7];
  assign selector_out[56] = initial_state_1[0];
  assign selector_out[57] = initial_state_1[1];
  assign selector_out[58] = initial_state_1[2];
  assign selector_out[59] = initial_state_1[3];
  assign selector_out[60] = initial_state_1[4];
  assign selector_out[61] = initial_state_1[5];
  assign selector_out[62] = initial_state_1[6];
  assign selector_out[63] = initial_state_1[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign s_1[0] = selector_out[0];
  assign s_1[1] = selector_out[1];
  assign s_1[2] = selector_out[2];
  assign s_1[3] = selector_out[3];
  assign s_1[4] = selector_out[4];
  assign s_1[5] = selector_out[5];
  assign s_1[6] = selector_out[6];
  assign s_1[7] = selector_out[7];
  assign s_1[8] = selector_out[8];
  assign s_1[9] = selector_out[9];
  assign s_1[10] = selector_out[10];
  assign s_1[11] = selector_out[11];
  assign s_1[12] = selector_out[12];
  assign s_1[13] = selector_out[13];
  assign s_1[14] = selector_out[14];
  assign s_1[15] = selector_out[15];
  assign s_1[16] = selector_out[16];
  assign s_1[17] = selector_out[17];
  assign s_1[18] = selector_out[18];
  assign s_1[19] = selector_out[19];
  assign s_1[20] = selector_out[20];
  assign s_1[21] = selector_out[21];
  assign s_1[22] = selector_out[22];
  assign s_1[23] = selector_out[23];
  assign s_1[24] = selector_out[24];
  assign s_1[25] = selector_out[25];
  assign s_1[26] = selector_out[26];
  assign s_1[27] = selector_out[27];
  assign s_1[28] = selector_out[28];
  assign s_1[29] = selector_out[29];
  assign s_1[30] = selector_out[30];
  assign s_1[31] = selector_out[31];
  assign s_1[32] = selector_out[32];
  assign s_1[33] = selector_out[33];
  assign s_1[34] = selector_out[34];
  assign s_1[35] = selector_out[35];
  assign s_1[36] = selector_out[36];
  assign s_1[37] = selector_out[37];
  assign s_1[38] = selector_out[38];
  assign s_1[39] = selector_out[39];
  assign s_1[40] = selector_out[40];
  assign s_1[41] = selector_out[41];
  assign s_1[42] = selector_out[42];
  assign s_1[43] = selector_out[43];
  assign s_1[44] = selector_out[44];
  assign s_1[45] = selector_out[45];
  assign s_1[46] = selector_out[46];
  assign s_1[47] = selector_out[47];
  assign s_1[48] = selector_out[48];
  assign s_1[49] = selector_out[49];
  assign s_1[50] = selector_out[50];
  assign s_1[51] = selector_out[51];
  assign s_1[52] = selector_out[52];
  assign s_1[53] = selector_out[53];
  assign s_1[54] = selector_out[54];
  assign s_1[55] = selector_out[55];
  assign s_1[56] = selector_out[56];
  assign s_1[57] = selector_out[57];
  assign s_1[58] = selector_out[58];
  assign s_1[59] = selector_out[59];
  assign s_1[60] = selector_out[60];
  assign s_1[61] = selector_out[61];
  assign s_1[62] = selector_out[62];
  assign s_1[63] = selector_out[63];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_dot_product6_in1[0] = (s_1[0] == 1'b1 ? alpha_re_11[0] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[0] = {MMul_dot_product6_in1[0][13], MMul_dot_product6_in1[0]};
  assign MMul_dot_product_out_re[0] = {{3{MMul_dot_product6_cast[0][14]}}, MMul_dot_product6_cast[0]};
  assign MMul_dot_product6_in1_1[0] = (s_1[0] == 1'b1 ? alpha_im_11[0] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[0] = {MMul_dot_product6_in1_1[0][13], MMul_dot_product6_in1_1[0]};
  assign MMul_dot_product_out_im[0] = {{3{MMul_dot_product6_cast_1[0][14]}}, MMul_dot_product6_cast_1[0]};
  assign MMul_dot_product6_in1[1] = (s_1[1] == 1'b1 ? alpha_re_11[1] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[1] = {MMul_dot_product6_in1[1][13], MMul_dot_product6_in1[1]};
  assign MMul_dot_product_out_re[1] = {{3{MMul_dot_product6_cast[1][14]}}, MMul_dot_product6_cast[1]};
  assign MMul_dot_product6_in1_1[1] = (s_1[1] == 1'b1 ? alpha_im_11[1] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[1] = {MMul_dot_product6_in1_1[1][13], MMul_dot_product6_in1_1[1]};
  assign MMul_dot_product_out_im[1] = {{3{MMul_dot_product6_cast_1[1][14]}}, MMul_dot_product6_cast_1[1]};
  assign MMul_dot_product6_in1[2] = (s_1[2] == 1'b1 ? alpha_re_11[2] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[2] = {MMul_dot_product6_in1[2][13], MMul_dot_product6_in1[2]};
  assign MMul_dot_product_out_re[2] = {{3{MMul_dot_product6_cast[2][14]}}, MMul_dot_product6_cast[2]};
  assign MMul_dot_product6_in1_1[2] = (s_1[2] == 1'b1 ? alpha_im_11[2] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[2] = {MMul_dot_product6_in1_1[2][13], MMul_dot_product6_in1_1[2]};
  assign MMul_dot_product_out_im[2] = {{3{MMul_dot_product6_cast_1[2][14]}}, MMul_dot_product6_cast_1[2]};
  assign MMul_dot_product6_in1[3] = (s_1[3] == 1'b1 ? alpha_re_11[3] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[3] = {MMul_dot_product6_in1[3][13], MMul_dot_product6_in1[3]};
  assign MMul_dot_product_out_re[3] = {{3{MMul_dot_product6_cast[3][14]}}, MMul_dot_product6_cast[3]};
  assign MMul_dot_product6_in1_1[3] = (s_1[3] == 1'b1 ? alpha_im_11[3] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[3] = {MMul_dot_product6_in1_1[3][13], MMul_dot_product6_in1_1[3]};
  assign MMul_dot_product_out_im[3] = {{3{MMul_dot_product6_cast_1[3][14]}}, MMul_dot_product6_cast_1[3]};
  assign MMul_dot_product6_in1[4] = (s_1[4] == 1'b1 ? alpha_re_11[4] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[4] = {MMul_dot_product6_in1[4][13], MMul_dot_product6_in1[4]};
  assign MMul_dot_product_out_re[4] = {{3{MMul_dot_product6_cast[4][14]}}, MMul_dot_product6_cast[4]};
  assign MMul_dot_product6_in1_1[4] = (s_1[4] == 1'b1 ? alpha_im_11[4] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[4] = {MMul_dot_product6_in1_1[4][13], MMul_dot_product6_in1_1[4]};
  assign MMul_dot_product_out_im[4] = {{3{MMul_dot_product6_cast_1[4][14]}}, MMul_dot_product6_cast_1[4]};
  assign MMul_dot_product6_in1[5] = (s_1[5] == 1'b1 ? alpha_re_11[5] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[5] = {MMul_dot_product6_in1[5][13], MMul_dot_product6_in1[5]};
  assign MMul_dot_product_out_re[5] = {{3{MMul_dot_product6_cast[5][14]}}, MMul_dot_product6_cast[5]};
  assign MMul_dot_product6_in1_1[5] = (s_1[5] == 1'b1 ? alpha_im_11[5] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[5] = {MMul_dot_product6_in1_1[5][13], MMul_dot_product6_in1_1[5]};
  assign MMul_dot_product_out_im[5] = {{3{MMul_dot_product6_cast_1[5][14]}}, MMul_dot_product6_cast_1[5]};
  assign MMul_dot_product6_in1[6] = (s_1[6] == 1'b1 ? alpha_re_11[6] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[6] = {MMul_dot_product6_in1[6][13], MMul_dot_product6_in1[6]};
  assign MMul_dot_product_out_re[6] = {{3{MMul_dot_product6_cast[6][14]}}, MMul_dot_product6_cast[6]};
  assign MMul_dot_product6_in1_1[6] = (s_1[6] == 1'b1 ? alpha_im_11[6] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[6] = {MMul_dot_product6_in1_1[6][13], MMul_dot_product6_in1_1[6]};
  assign MMul_dot_product_out_im[6] = {{3{MMul_dot_product6_cast_1[6][14]}}, MMul_dot_product6_cast_1[6]};
  assign MMul_dot_product6_in1[7] = (s_1[7] == 1'b1 ? alpha_re_11[7] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[7] = {MMul_dot_product6_in1[7][13], MMul_dot_product6_in1[7]};
  assign MMul_dot_product_out_re[7] = {{3{MMul_dot_product6_cast[7][14]}}, MMul_dot_product6_cast[7]};
  assign MMul_dot_product6_in1_1[7] = (s_1[7] == 1'b1 ? alpha_im_11[7] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[7] = {MMul_dot_product6_in1_1[7][13], MMul_dot_product6_in1_1[7]};
  assign MMul_dot_product_out_im[7] = {{3{MMul_dot_product6_cast_1[7][14]}}, MMul_dot_product6_cast_1[7]};
  assign MMul_dot_product6_in1[8] = (s_1[8] == 1'b1 ? alpha_re_11[8] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[8] = {MMul_dot_product6_in1[8][13], MMul_dot_product6_in1[8]};
  assign MMul_dot_product_out_re[8] = {{3{MMul_dot_product6_cast[8][14]}}, MMul_dot_product6_cast[8]};
  assign MMul_dot_product6_in1_1[8] = (s_1[8] == 1'b1 ? alpha_im_11[8] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[8] = {MMul_dot_product6_in1_1[8][13], MMul_dot_product6_in1_1[8]};
  assign MMul_dot_product_out_im[8] = {{3{MMul_dot_product6_cast_1[8][14]}}, MMul_dot_product6_cast_1[8]};
  assign MMul_dot_product6_in1[9] = (s_1[9] == 1'b1 ? alpha_re_11[9] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[9] = {MMul_dot_product6_in1[9][13], MMul_dot_product6_in1[9]};
  assign MMul_dot_product_out_re[9] = {{3{MMul_dot_product6_cast[9][14]}}, MMul_dot_product6_cast[9]};
  assign MMul_dot_product6_in1_1[9] = (s_1[9] == 1'b1 ? alpha_im_11[9] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[9] = {MMul_dot_product6_in1_1[9][13], MMul_dot_product6_in1_1[9]};
  assign MMul_dot_product_out_im[9] = {{3{MMul_dot_product6_cast_1[9][14]}}, MMul_dot_product6_cast_1[9]};
  assign MMul_dot_product6_in1[10] = (s_1[10] == 1'b1 ? alpha_re_11[10] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[10] = {MMul_dot_product6_in1[10][13], MMul_dot_product6_in1[10]};
  assign MMul_dot_product_out_re[10] = {{3{MMul_dot_product6_cast[10][14]}}, MMul_dot_product6_cast[10]};
  assign MMul_dot_product6_in1_1[10] = (s_1[10] == 1'b1 ? alpha_im_11[10] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[10] = {MMul_dot_product6_in1_1[10][13], MMul_dot_product6_in1_1[10]};
  assign MMul_dot_product_out_im[10] = {{3{MMul_dot_product6_cast_1[10][14]}}, MMul_dot_product6_cast_1[10]};
  assign MMul_dot_product6_in1[11] = (s_1[11] == 1'b1 ? alpha_re_11[11] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[11] = {MMul_dot_product6_in1[11][13], MMul_dot_product6_in1[11]};
  assign MMul_dot_product_out_re[11] = {{3{MMul_dot_product6_cast[11][14]}}, MMul_dot_product6_cast[11]};
  assign MMul_dot_product6_in1_1[11] = (s_1[11] == 1'b1 ? alpha_im_11[11] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[11] = {MMul_dot_product6_in1_1[11][13], MMul_dot_product6_in1_1[11]};
  assign MMul_dot_product_out_im[11] = {{3{MMul_dot_product6_cast_1[11][14]}}, MMul_dot_product6_cast_1[11]};
  assign MMul_dot_product6_in1[12] = (s_1[12] == 1'b1 ? alpha_re_11[12] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[12] = {MMul_dot_product6_in1[12][13], MMul_dot_product6_in1[12]};
  assign MMul_dot_product_out_re[12] = {{3{MMul_dot_product6_cast[12][14]}}, MMul_dot_product6_cast[12]};
  assign MMul_dot_product6_in1_1[12] = (s_1[12] == 1'b1 ? alpha_im_11[12] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[12] = {MMul_dot_product6_in1_1[12][13], MMul_dot_product6_in1_1[12]};
  assign MMul_dot_product_out_im[12] = {{3{MMul_dot_product6_cast_1[12][14]}}, MMul_dot_product6_cast_1[12]};
  assign MMul_dot_product6_in1[13] = (s_1[13] == 1'b1 ? alpha_re_11[13] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[13] = {MMul_dot_product6_in1[13][13], MMul_dot_product6_in1[13]};
  assign MMul_dot_product_out_re[13] = {{3{MMul_dot_product6_cast[13][14]}}, MMul_dot_product6_cast[13]};
  assign MMul_dot_product6_in1_1[13] = (s_1[13] == 1'b1 ? alpha_im_11[13] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[13] = {MMul_dot_product6_in1_1[13][13], MMul_dot_product6_in1_1[13]};
  assign MMul_dot_product_out_im[13] = {{3{MMul_dot_product6_cast_1[13][14]}}, MMul_dot_product6_cast_1[13]};
  assign MMul_dot_product6_in1[14] = (s_1[14] == 1'b1 ? alpha_re_11[14] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[14] = {MMul_dot_product6_in1[14][13], MMul_dot_product6_in1[14]};
  assign MMul_dot_product_out_re[14] = {{3{MMul_dot_product6_cast[14][14]}}, MMul_dot_product6_cast[14]};
  assign MMul_dot_product6_in1_1[14] = (s_1[14] == 1'b1 ? alpha_im_11[14] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[14] = {MMul_dot_product6_in1_1[14][13], MMul_dot_product6_in1_1[14]};
  assign MMul_dot_product_out_im[14] = {{3{MMul_dot_product6_cast_1[14][14]}}, MMul_dot_product6_cast_1[14]};
  assign MMul_dot_product6_in1[15] = (s_1[15] == 1'b1 ? alpha_re_11[15] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[15] = {MMul_dot_product6_in1[15][13], MMul_dot_product6_in1[15]};
  assign MMul_dot_product_out_re[15] = {{3{MMul_dot_product6_cast[15][14]}}, MMul_dot_product6_cast[15]};
  assign MMul_dot_product6_in1_1[15] = (s_1[15] == 1'b1 ? alpha_im_11[15] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[15] = {MMul_dot_product6_in1_1[15][13], MMul_dot_product6_in1_1[15]};
  assign MMul_dot_product_out_im[15] = {{3{MMul_dot_product6_cast_1[15][14]}}, MMul_dot_product6_cast_1[15]};
  assign MMul_dot_product6_in1[16] = (s_1[16] == 1'b1 ? alpha_re_11[16] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[16] = {MMul_dot_product6_in1[16][13], MMul_dot_product6_in1[16]};
  assign MMul_dot_product_out_re[16] = {{3{MMul_dot_product6_cast[16][14]}}, MMul_dot_product6_cast[16]};
  assign MMul_dot_product6_in1_1[16] = (s_1[16] == 1'b1 ? alpha_im_11[16] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[16] = {MMul_dot_product6_in1_1[16][13], MMul_dot_product6_in1_1[16]};
  assign MMul_dot_product_out_im[16] = {{3{MMul_dot_product6_cast_1[16][14]}}, MMul_dot_product6_cast_1[16]};
  assign MMul_dot_product6_in1[17] = (s_1[17] == 1'b1 ? alpha_re_11[17] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[17] = {MMul_dot_product6_in1[17][13], MMul_dot_product6_in1[17]};
  assign MMul_dot_product_out_re[17] = {{3{MMul_dot_product6_cast[17][14]}}, MMul_dot_product6_cast[17]};
  assign MMul_dot_product6_in1_1[17] = (s_1[17] == 1'b1 ? alpha_im_11[17] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[17] = {MMul_dot_product6_in1_1[17][13], MMul_dot_product6_in1_1[17]};
  assign MMul_dot_product_out_im[17] = {{3{MMul_dot_product6_cast_1[17][14]}}, MMul_dot_product6_cast_1[17]};
  assign MMul_dot_product6_in1[18] = (s_1[18] == 1'b1 ? alpha_re_11[18] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[18] = {MMul_dot_product6_in1[18][13], MMul_dot_product6_in1[18]};
  assign MMul_dot_product_out_re[18] = {{3{MMul_dot_product6_cast[18][14]}}, MMul_dot_product6_cast[18]};
  assign MMul_dot_product6_in1_1[18] = (s_1[18] == 1'b1 ? alpha_im_11[18] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[18] = {MMul_dot_product6_in1_1[18][13], MMul_dot_product6_in1_1[18]};
  assign MMul_dot_product_out_im[18] = {{3{MMul_dot_product6_cast_1[18][14]}}, MMul_dot_product6_cast_1[18]};
  assign MMul_dot_product6_in1[19] = (s_1[19] == 1'b1 ? alpha_re_11[19] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[19] = {MMul_dot_product6_in1[19][13], MMul_dot_product6_in1[19]};
  assign MMul_dot_product_out_re[19] = {{3{MMul_dot_product6_cast[19][14]}}, MMul_dot_product6_cast[19]};
  assign MMul_dot_product6_in1_1[19] = (s_1[19] == 1'b1 ? alpha_im_11[19] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[19] = {MMul_dot_product6_in1_1[19][13], MMul_dot_product6_in1_1[19]};
  assign MMul_dot_product_out_im[19] = {{3{MMul_dot_product6_cast_1[19][14]}}, MMul_dot_product6_cast_1[19]};
  assign MMul_dot_product6_in1[20] = (s_1[20] == 1'b1 ? alpha_re_11[20] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[20] = {MMul_dot_product6_in1[20][13], MMul_dot_product6_in1[20]};
  assign MMul_dot_product_out_re[20] = {{3{MMul_dot_product6_cast[20][14]}}, MMul_dot_product6_cast[20]};
  assign MMul_dot_product6_in1_1[20] = (s_1[20] == 1'b1 ? alpha_im_11[20] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[20] = {MMul_dot_product6_in1_1[20][13], MMul_dot_product6_in1_1[20]};
  assign MMul_dot_product_out_im[20] = {{3{MMul_dot_product6_cast_1[20][14]}}, MMul_dot_product6_cast_1[20]};
  assign MMul_dot_product6_in1[21] = (s_1[21] == 1'b1 ? alpha_re_11[21] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[21] = {MMul_dot_product6_in1[21][13], MMul_dot_product6_in1[21]};
  assign MMul_dot_product_out_re[21] = {{3{MMul_dot_product6_cast[21][14]}}, MMul_dot_product6_cast[21]};
  assign MMul_dot_product6_in1_1[21] = (s_1[21] == 1'b1 ? alpha_im_11[21] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[21] = {MMul_dot_product6_in1_1[21][13], MMul_dot_product6_in1_1[21]};
  assign MMul_dot_product_out_im[21] = {{3{MMul_dot_product6_cast_1[21][14]}}, MMul_dot_product6_cast_1[21]};
  assign MMul_dot_product6_in1[22] = (s_1[22] == 1'b1 ? alpha_re_11[22] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[22] = {MMul_dot_product6_in1[22][13], MMul_dot_product6_in1[22]};
  assign MMul_dot_product_out_re[22] = {{3{MMul_dot_product6_cast[22][14]}}, MMul_dot_product6_cast[22]};
  assign MMul_dot_product6_in1_1[22] = (s_1[22] == 1'b1 ? alpha_im_11[22] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[22] = {MMul_dot_product6_in1_1[22][13], MMul_dot_product6_in1_1[22]};
  assign MMul_dot_product_out_im[22] = {{3{MMul_dot_product6_cast_1[22][14]}}, MMul_dot_product6_cast_1[22]};
  assign MMul_dot_product6_in1[23] = (s_1[23] == 1'b1 ? alpha_re_11[23] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[23] = {MMul_dot_product6_in1[23][13], MMul_dot_product6_in1[23]};
  assign MMul_dot_product_out_re[23] = {{3{MMul_dot_product6_cast[23][14]}}, MMul_dot_product6_cast[23]};
  assign MMul_dot_product6_in1_1[23] = (s_1[23] == 1'b1 ? alpha_im_11[23] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[23] = {MMul_dot_product6_in1_1[23][13], MMul_dot_product6_in1_1[23]};
  assign MMul_dot_product_out_im[23] = {{3{MMul_dot_product6_cast_1[23][14]}}, MMul_dot_product6_cast_1[23]};
  assign MMul_dot_product6_in1[24] = (s_1[24] == 1'b1 ? alpha_re_11[24] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[24] = {MMul_dot_product6_in1[24][13], MMul_dot_product6_in1[24]};
  assign MMul_dot_product_out_re[24] = {{3{MMul_dot_product6_cast[24][14]}}, MMul_dot_product6_cast[24]};
  assign MMul_dot_product6_in1_1[24] = (s_1[24] == 1'b1 ? alpha_im_11[24] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[24] = {MMul_dot_product6_in1_1[24][13], MMul_dot_product6_in1_1[24]};
  assign MMul_dot_product_out_im[24] = {{3{MMul_dot_product6_cast_1[24][14]}}, MMul_dot_product6_cast_1[24]};
  assign MMul_dot_product6_in1[25] = (s_1[25] == 1'b1 ? alpha_re_11[25] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[25] = {MMul_dot_product6_in1[25][13], MMul_dot_product6_in1[25]};
  assign MMul_dot_product_out_re[25] = {{3{MMul_dot_product6_cast[25][14]}}, MMul_dot_product6_cast[25]};
  assign MMul_dot_product6_in1_1[25] = (s_1[25] == 1'b1 ? alpha_im_11[25] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[25] = {MMul_dot_product6_in1_1[25][13], MMul_dot_product6_in1_1[25]};
  assign MMul_dot_product_out_im[25] = {{3{MMul_dot_product6_cast_1[25][14]}}, MMul_dot_product6_cast_1[25]};
  assign MMul_dot_product6_in1[26] = (s_1[26] == 1'b1 ? alpha_re_11[26] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[26] = {MMul_dot_product6_in1[26][13], MMul_dot_product6_in1[26]};
  assign MMul_dot_product_out_re[26] = {{3{MMul_dot_product6_cast[26][14]}}, MMul_dot_product6_cast[26]};
  assign MMul_dot_product6_in1_1[26] = (s_1[26] == 1'b1 ? alpha_im_11[26] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[26] = {MMul_dot_product6_in1_1[26][13], MMul_dot_product6_in1_1[26]};
  assign MMul_dot_product_out_im[26] = {{3{MMul_dot_product6_cast_1[26][14]}}, MMul_dot_product6_cast_1[26]};
  assign MMul_dot_product6_in1[27] = (s_1[27] == 1'b1 ? alpha_re_11[27] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[27] = {MMul_dot_product6_in1[27][13], MMul_dot_product6_in1[27]};
  assign MMul_dot_product_out_re[27] = {{3{MMul_dot_product6_cast[27][14]}}, MMul_dot_product6_cast[27]};
  assign MMul_dot_product6_in1_1[27] = (s_1[27] == 1'b1 ? alpha_im_11[27] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[27] = {MMul_dot_product6_in1_1[27][13], MMul_dot_product6_in1_1[27]};
  assign MMul_dot_product_out_im[27] = {{3{MMul_dot_product6_cast_1[27][14]}}, MMul_dot_product6_cast_1[27]};
  assign MMul_dot_product6_in1[28] = (s_1[28] == 1'b1 ? alpha_re_11[28] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[28] = {MMul_dot_product6_in1[28][13], MMul_dot_product6_in1[28]};
  assign MMul_dot_product_out_re[28] = {{3{MMul_dot_product6_cast[28][14]}}, MMul_dot_product6_cast[28]};
  assign MMul_dot_product6_in1_1[28] = (s_1[28] == 1'b1 ? alpha_im_11[28] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[28] = {MMul_dot_product6_in1_1[28][13], MMul_dot_product6_in1_1[28]};
  assign MMul_dot_product_out_im[28] = {{3{MMul_dot_product6_cast_1[28][14]}}, MMul_dot_product6_cast_1[28]};
  assign MMul_dot_product6_in1[29] = (s_1[29] == 1'b1 ? alpha_re_11[29] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[29] = {MMul_dot_product6_in1[29][13], MMul_dot_product6_in1[29]};
  assign MMul_dot_product_out_re[29] = {{3{MMul_dot_product6_cast[29][14]}}, MMul_dot_product6_cast[29]};
  assign MMul_dot_product6_in1_1[29] = (s_1[29] == 1'b1 ? alpha_im_11[29] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[29] = {MMul_dot_product6_in1_1[29][13], MMul_dot_product6_in1_1[29]};
  assign MMul_dot_product_out_im[29] = {{3{MMul_dot_product6_cast_1[29][14]}}, MMul_dot_product6_cast_1[29]};
  assign MMul_dot_product6_in1[30] = (s_1[30] == 1'b1 ? alpha_re_11[30] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[30] = {MMul_dot_product6_in1[30][13], MMul_dot_product6_in1[30]};
  assign MMul_dot_product_out_re[30] = {{3{MMul_dot_product6_cast[30][14]}}, MMul_dot_product6_cast[30]};
  assign MMul_dot_product6_in1_1[30] = (s_1[30] == 1'b1 ? alpha_im_11[30] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[30] = {MMul_dot_product6_in1_1[30][13], MMul_dot_product6_in1_1[30]};
  assign MMul_dot_product_out_im[30] = {{3{MMul_dot_product6_cast_1[30][14]}}, MMul_dot_product6_cast_1[30]};
  assign MMul_dot_product6_in1[31] = (s_1[31] == 1'b1 ? alpha_re_11[31] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[31] = {MMul_dot_product6_in1[31][13], MMul_dot_product6_in1[31]};
  assign MMul_dot_product_out_re[31] = {{3{MMul_dot_product6_cast[31][14]}}, MMul_dot_product6_cast[31]};
  assign MMul_dot_product6_in1_1[31] = (s_1[31] == 1'b1 ? alpha_im_11[31] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[31] = {MMul_dot_product6_in1_1[31][13], MMul_dot_product6_in1_1[31]};
  assign MMul_dot_product_out_im[31] = {{3{MMul_dot_product6_cast_1[31][14]}}, MMul_dot_product6_cast_1[31]};
  assign MMul_dot_product6_in1[32] = (s_1[32] == 1'b1 ? alpha_re_11[32] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[32] = {MMul_dot_product6_in1[32][13], MMul_dot_product6_in1[32]};
  assign MMul_dot_product_out_re[32] = {{3{MMul_dot_product6_cast[32][14]}}, MMul_dot_product6_cast[32]};
  assign MMul_dot_product6_in1_1[32] = (s_1[32] == 1'b1 ? alpha_im_11[32] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[32] = {MMul_dot_product6_in1_1[32][13], MMul_dot_product6_in1_1[32]};
  assign MMul_dot_product_out_im[32] = {{3{MMul_dot_product6_cast_1[32][14]}}, MMul_dot_product6_cast_1[32]};
  assign MMul_dot_product6_in1[33] = (s_1[33] == 1'b1 ? alpha_re_11[33] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[33] = {MMul_dot_product6_in1[33][13], MMul_dot_product6_in1[33]};
  assign MMul_dot_product_out_re[33] = {{3{MMul_dot_product6_cast[33][14]}}, MMul_dot_product6_cast[33]};
  assign MMul_dot_product6_in1_1[33] = (s_1[33] == 1'b1 ? alpha_im_11[33] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[33] = {MMul_dot_product6_in1_1[33][13], MMul_dot_product6_in1_1[33]};
  assign MMul_dot_product_out_im[33] = {{3{MMul_dot_product6_cast_1[33][14]}}, MMul_dot_product6_cast_1[33]};
  assign MMul_dot_product6_in1[34] = (s_1[34] == 1'b1 ? alpha_re_11[34] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[34] = {MMul_dot_product6_in1[34][13], MMul_dot_product6_in1[34]};
  assign MMul_dot_product_out_re[34] = {{3{MMul_dot_product6_cast[34][14]}}, MMul_dot_product6_cast[34]};
  assign MMul_dot_product6_in1_1[34] = (s_1[34] == 1'b1 ? alpha_im_11[34] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[34] = {MMul_dot_product6_in1_1[34][13], MMul_dot_product6_in1_1[34]};
  assign MMul_dot_product_out_im[34] = {{3{MMul_dot_product6_cast_1[34][14]}}, MMul_dot_product6_cast_1[34]};
  assign MMul_dot_product6_in1[35] = (s_1[35] == 1'b1 ? alpha_re_11[35] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[35] = {MMul_dot_product6_in1[35][13], MMul_dot_product6_in1[35]};
  assign MMul_dot_product_out_re[35] = {{3{MMul_dot_product6_cast[35][14]}}, MMul_dot_product6_cast[35]};
  assign MMul_dot_product6_in1_1[35] = (s_1[35] == 1'b1 ? alpha_im_11[35] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[35] = {MMul_dot_product6_in1_1[35][13], MMul_dot_product6_in1_1[35]};
  assign MMul_dot_product_out_im[35] = {{3{MMul_dot_product6_cast_1[35][14]}}, MMul_dot_product6_cast_1[35]};
  assign MMul_dot_product6_in1[36] = (s_1[36] == 1'b1 ? alpha_re_11[36] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[36] = {MMul_dot_product6_in1[36][13], MMul_dot_product6_in1[36]};
  assign MMul_dot_product_out_re[36] = {{3{MMul_dot_product6_cast[36][14]}}, MMul_dot_product6_cast[36]};
  assign MMul_dot_product6_in1_1[36] = (s_1[36] == 1'b1 ? alpha_im_11[36] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[36] = {MMul_dot_product6_in1_1[36][13], MMul_dot_product6_in1_1[36]};
  assign MMul_dot_product_out_im[36] = {{3{MMul_dot_product6_cast_1[36][14]}}, MMul_dot_product6_cast_1[36]};
  assign MMul_dot_product6_in1[37] = (s_1[37] == 1'b1 ? alpha_re_11[37] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[37] = {MMul_dot_product6_in1[37][13], MMul_dot_product6_in1[37]};
  assign MMul_dot_product_out_re[37] = {{3{MMul_dot_product6_cast[37][14]}}, MMul_dot_product6_cast[37]};
  assign MMul_dot_product6_in1_1[37] = (s_1[37] == 1'b1 ? alpha_im_11[37] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[37] = {MMul_dot_product6_in1_1[37][13], MMul_dot_product6_in1_1[37]};
  assign MMul_dot_product_out_im[37] = {{3{MMul_dot_product6_cast_1[37][14]}}, MMul_dot_product6_cast_1[37]};
  assign MMul_dot_product6_in1[38] = (s_1[38] == 1'b1 ? alpha_re_11[38] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[38] = {MMul_dot_product6_in1[38][13], MMul_dot_product6_in1[38]};
  assign MMul_dot_product_out_re[38] = {{3{MMul_dot_product6_cast[38][14]}}, MMul_dot_product6_cast[38]};
  assign MMul_dot_product6_in1_1[38] = (s_1[38] == 1'b1 ? alpha_im_11[38] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[38] = {MMul_dot_product6_in1_1[38][13], MMul_dot_product6_in1_1[38]};
  assign MMul_dot_product_out_im[38] = {{3{MMul_dot_product6_cast_1[38][14]}}, MMul_dot_product6_cast_1[38]};
  assign MMul_dot_product6_in1[39] = (s_1[39] == 1'b1 ? alpha_re_11[39] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[39] = {MMul_dot_product6_in1[39][13], MMul_dot_product6_in1[39]};
  assign MMul_dot_product_out_re[39] = {{3{MMul_dot_product6_cast[39][14]}}, MMul_dot_product6_cast[39]};
  assign MMul_dot_product6_in1_1[39] = (s_1[39] == 1'b1 ? alpha_im_11[39] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[39] = {MMul_dot_product6_in1_1[39][13], MMul_dot_product6_in1_1[39]};
  assign MMul_dot_product_out_im[39] = {{3{MMul_dot_product6_cast_1[39][14]}}, MMul_dot_product6_cast_1[39]};
  assign MMul_dot_product6_in1[40] = (s_1[40] == 1'b1 ? alpha_re_11[40] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[40] = {MMul_dot_product6_in1[40][13], MMul_dot_product6_in1[40]};
  assign MMul_dot_product_out_re[40] = {{3{MMul_dot_product6_cast[40][14]}}, MMul_dot_product6_cast[40]};
  assign MMul_dot_product6_in1_1[40] = (s_1[40] == 1'b1 ? alpha_im_11[40] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[40] = {MMul_dot_product6_in1_1[40][13], MMul_dot_product6_in1_1[40]};
  assign MMul_dot_product_out_im[40] = {{3{MMul_dot_product6_cast_1[40][14]}}, MMul_dot_product6_cast_1[40]};
  assign MMul_dot_product6_in1[41] = (s_1[41] == 1'b1 ? alpha_re_11[41] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[41] = {MMul_dot_product6_in1[41][13], MMul_dot_product6_in1[41]};
  assign MMul_dot_product_out_re[41] = {{3{MMul_dot_product6_cast[41][14]}}, MMul_dot_product6_cast[41]};
  assign MMul_dot_product6_in1_1[41] = (s_1[41] == 1'b1 ? alpha_im_11[41] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[41] = {MMul_dot_product6_in1_1[41][13], MMul_dot_product6_in1_1[41]};
  assign MMul_dot_product_out_im[41] = {{3{MMul_dot_product6_cast_1[41][14]}}, MMul_dot_product6_cast_1[41]};
  assign MMul_dot_product6_in1[42] = (s_1[42] == 1'b1 ? alpha_re_11[42] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[42] = {MMul_dot_product6_in1[42][13], MMul_dot_product6_in1[42]};
  assign MMul_dot_product_out_re[42] = {{3{MMul_dot_product6_cast[42][14]}}, MMul_dot_product6_cast[42]};
  assign MMul_dot_product6_in1_1[42] = (s_1[42] == 1'b1 ? alpha_im_11[42] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[42] = {MMul_dot_product6_in1_1[42][13], MMul_dot_product6_in1_1[42]};
  assign MMul_dot_product_out_im[42] = {{3{MMul_dot_product6_cast_1[42][14]}}, MMul_dot_product6_cast_1[42]};
  assign MMul_dot_product6_in1[43] = (s_1[43] == 1'b1 ? alpha_re_11[43] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[43] = {MMul_dot_product6_in1[43][13], MMul_dot_product6_in1[43]};
  assign MMul_dot_product_out_re[43] = {{3{MMul_dot_product6_cast[43][14]}}, MMul_dot_product6_cast[43]};
  assign MMul_dot_product6_in1_1[43] = (s_1[43] == 1'b1 ? alpha_im_11[43] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[43] = {MMul_dot_product6_in1_1[43][13], MMul_dot_product6_in1_1[43]};
  assign MMul_dot_product_out_im[43] = {{3{MMul_dot_product6_cast_1[43][14]}}, MMul_dot_product6_cast_1[43]};
  assign MMul_dot_product6_in1[44] = (s_1[44] == 1'b1 ? alpha_re_11[44] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[44] = {MMul_dot_product6_in1[44][13], MMul_dot_product6_in1[44]};
  assign MMul_dot_product_out_re[44] = {{3{MMul_dot_product6_cast[44][14]}}, MMul_dot_product6_cast[44]};
  assign MMul_dot_product6_in1_1[44] = (s_1[44] == 1'b1 ? alpha_im_11[44] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[44] = {MMul_dot_product6_in1_1[44][13], MMul_dot_product6_in1_1[44]};
  assign MMul_dot_product_out_im[44] = {{3{MMul_dot_product6_cast_1[44][14]}}, MMul_dot_product6_cast_1[44]};
  assign MMul_dot_product6_in1[45] = (s_1[45] == 1'b1 ? alpha_re_11[45] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[45] = {MMul_dot_product6_in1[45][13], MMul_dot_product6_in1[45]};
  assign MMul_dot_product_out_re[45] = {{3{MMul_dot_product6_cast[45][14]}}, MMul_dot_product6_cast[45]};
  assign MMul_dot_product6_in1_1[45] = (s_1[45] == 1'b1 ? alpha_im_11[45] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[45] = {MMul_dot_product6_in1_1[45][13], MMul_dot_product6_in1_1[45]};
  assign MMul_dot_product_out_im[45] = {{3{MMul_dot_product6_cast_1[45][14]}}, MMul_dot_product6_cast_1[45]};
  assign MMul_dot_product6_in1[46] = (s_1[46] == 1'b1 ? alpha_re_11[46] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[46] = {MMul_dot_product6_in1[46][13], MMul_dot_product6_in1[46]};
  assign MMul_dot_product_out_re[46] = {{3{MMul_dot_product6_cast[46][14]}}, MMul_dot_product6_cast[46]};
  assign MMul_dot_product6_in1_1[46] = (s_1[46] == 1'b1 ? alpha_im_11[46] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[46] = {MMul_dot_product6_in1_1[46][13], MMul_dot_product6_in1_1[46]};
  assign MMul_dot_product_out_im[46] = {{3{MMul_dot_product6_cast_1[46][14]}}, MMul_dot_product6_cast_1[46]};
  assign MMul_dot_product6_in1[47] = (s_1[47] == 1'b1 ? alpha_re_11[47] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[47] = {MMul_dot_product6_in1[47][13], MMul_dot_product6_in1[47]};
  assign MMul_dot_product_out_re[47] = {{3{MMul_dot_product6_cast[47][14]}}, MMul_dot_product6_cast[47]};
  assign MMul_dot_product6_in1_1[47] = (s_1[47] == 1'b1 ? alpha_im_11[47] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[47] = {MMul_dot_product6_in1_1[47][13], MMul_dot_product6_in1_1[47]};
  assign MMul_dot_product_out_im[47] = {{3{MMul_dot_product6_cast_1[47][14]}}, MMul_dot_product6_cast_1[47]};
  assign MMul_dot_product6_in1[48] = (s_1[48] == 1'b1 ? alpha_re_11[48] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[48] = {MMul_dot_product6_in1[48][13], MMul_dot_product6_in1[48]};
  assign MMul_dot_product_out_re[48] = {{3{MMul_dot_product6_cast[48][14]}}, MMul_dot_product6_cast[48]};
  assign MMul_dot_product6_in1_1[48] = (s_1[48] == 1'b1 ? alpha_im_11[48] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[48] = {MMul_dot_product6_in1_1[48][13], MMul_dot_product6_in1_1[48]};
  assign MMul_dot_product_out_im[48] = {{3{MMul_dot_product6_cast_1[48][14]}}, MMul_dot_product6_cast_1[48]};
  assign MMul_dot_product6_in1[49] = (s_1[49] == 1'b1 ? alpha_re_11[49] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[49] = {MMul_dot_product6_in1[49][13], MMul_dot_product6_in1[49]};
  assign MMul_dot_product_out_re[49] = {{3{MMul_dot_product6_cast[49][14]}}, MMul_dot_product6_cast[49]};
  assign MMul_dot_product6_in1_1[49] = (s_1[49] == 1'b1 ? alpha_im_11[49] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[49] = {MMul_dot_product6_in1_1[49][13], MMul_dot_product6_in1_1[49]};
  assign MMul_dot_product_out_im[49] = {{3{MMul_dot_product6_cast_1[49][14]}}, MMul_dot_product6_cast_1[49]};
  assign MMul_dot_product6_in1[50] = (s_1[50] == 1'b1 ? alpha_re_11[50] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[50] = {MMul_dot_product6_in1[50][13], MMul_dot_product6_in1[50]};
  assign MMul_dot_product_out_re[50] = {{3{MMul_dot_product6_cast[50][14]}}, MMul_dot_product6_cast[50]};
  assign MMul_dot_product6_in1_1[50] = (s_1[50] == 1'b1 ? alpha_im_11[50] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[50] = {MMul_dot_product6_in1_1[50][13], MMul_dot_product6_in1_1[50]};
  assign MMul_dot_product_out_im[50] = {{3{MMul_dot_product6_cast_1[50][14]}}, MMul_dot_product6_cast_1[50]};
  assign MMul_dot_product6_in1[51] = (s_1[51] == 1'b1 ? alpha_re_11[51] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[51] = {MMul_dot_product6_in1[51][13], MMul_dot_product6_in1[51]};
  assign MMul_dot_product_out_re[51] = {{3{MMul_dot_product6_cast[51][14]}}, MMul_dot_product6_cast[51]};
  assign MMul_dot_product6_in1_1[51] = (s_1[51] == 1'b1 ? alpha_im_11[51] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[51] = {MMul_dot_product6_in1_1[51][13], MMul_dot_product6_in1_1[51]};
  assign MMul_dot_product_out_im[51] = {{3{MMul_dot_product6_cast_1[51][14]}}, MMul_dot_product6_cast_1[51]};
  assign MMul_dot_product6_in1[52] = (s_1[52] == 1'b1 ? alpha_re_11[52] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[52] = {MMul_dot_product6_in1[52][13], MMul_dot_product6_in1[52]};
  assign MMul_dot_product_out_re[52] = {{3{MMul_dot_product6_cast[52][14]}}, MMul_dot_product6_cast[52]};
  assign MMul_dot_product6_in1_1[52] = (s_1[52] == 1'b1 ? alpha_im_11[52] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[52] = {MMul_dot_product6_in1_1[52][13], MMul_dot_product6_in1_1[52]};
  assign MMul_dot_product_out_im[52] = {{3{MMul_dot_product6_cast_1[52][14]}}, MMul_dot_product6_cast_1[52]};
  assign MMul_dot_product6_in1[53] = (s_1[53] == 1'b1 ? alpha_re_11[53] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[53] = {MMul_dot_product6_in1[53][13], MMul_dot_product6_in1[53]};
  assign MMul_dot_product_out_re[53] = {{3{MMul_dot_product6_cast[53][14]}}, MMul_dot_product6_cast[53]};
  assign MMul_dot_product6_in1_1[53] = (s_1[53] == 1'b1 ? alpha_im_11[53] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[53] = {MMul_dot_product6_in1_1[53][13], MMul_dot_product6_in1_1[53]};
  assign MMul_dot_product_out_im[53] = {{3{MMul_dot_product6_cast_1[53][14]}}, MMul_dot_product6_cast_1[53]};
  assign MMul_dot_product6_in1[54] = (s_1[54] == 1'b1 ? alpha_re_11[54] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[54] = {MMul_dot_product6_in1[54][13], MMul_dot_product6_in1[54]};
  assign MMul_dot_product_out_re[54] = {{3{MMul_dot_product6_cast[54][14]}}, MMul_dot_product6_cast[54]};
  assign MMul_dot_product6_in1_1[54] = (s_1[54] == 1'b1 ? alpha_im_11[54] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[54] = {MMul_dot_product6_in1_1[54][13], MMul_dot_product6_in1_1[54]};
  assign MMul_dot_product_out_im[54] = {{3{MMul_dot_product6_cast_1[54][14]}}, MMul_dot_product6_cast_1[54]};
  assign MMul_dot_product6_in1[55] = (s_1[55] == 1'b1 ? alpha_re_11[55] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[55] = {MMul_dot_product6_in1[55][13], MMul_dot_product6_in1[55]};
  assign MMul_dot_product_out_re[55] = {{3{MMul_dot_product6_cast[55][14]}}, MMul_dot_product6_cast[55]};
  assign MMul_dot_product6_in1_1[55] = (s_1[55] == 1'b1 ? alpha_im_11[55] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[55] = {MMul_dot_product6_in1_1[55][13], MMul_dot_product6_in1_1[55]};
  assign MMul_dot_product_out_im[55] = {{3{MMul_dot_product6_cast_1[55][14]}}, MMul_dot_product6_cast_1[55]};
  assign MMul_dot_product6_in1[56] = (s_1[56] == 1'b1 ? alpha_re_11[56] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[56] = {MMul_dot_product6_in1[56][13], MMul_dot_product6_in1[56]};
  assign MMul_dot_product_out_re[56] = {{3{MMul_dot_product6_cast[56][14]}}, MMul_dot_product6_cast[56]};
  assign MMul_dot_product6_in1_1[56] = (s_1[56] == 1'b1 ? alpha_im_11[56] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[56] = {MMul_dot_product6_in1_1[56][13], MMul_dot_product6_in1_1[56]};
  assign MMul_dot_product_out_im[56] = {{3{MMul_dot_product6_cast_1[56][14]}}, MMul_dot_product6_cast_1[56]};
  assign MMul_dot_product6_in1[57] = (s_1[57] == 1'b1 ? alpha_re_11[57] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[57] = {MMul_dot_product6_in1[57][13], MMul_dot_product6_in1[57]};
  assign MMul_dot_product_out_re[57] = {{3{MMul_dot_product6_cast[57][14]}}, MMul_dot_product6_cast[57]};
  assign MMul_dot_product6_in1_1[57] = (s_1[57] == 1'b1 ? alpha_im_11[57] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[57] = {MMul_dot_product6_in1_1[57][13], MMul_dot_product6_in1_1[57]};
  assign MMul_dot_product_out_im[57] = {{3{MMul_dot_product6_cast_1[57][14]}}, MMul_dot_product6_cast_1[57]};
  assign MMul_dot_product6_in1[58] = (s_1[58] == 1'b1 ? alpha_re_11[58] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[58] = {MMul_dot_product6_in1[58][13], MMul_dot_product6_in1[58]};
  assign MMul_dot_product_out_re[58] = {{3{MMul_dot_product6_cast[58][14]}}, MMul_dot_product6_cast[58]};
  assign MMul_dot_product6_in1_1[58] = (s_1[58] == 1'b1 ? alpha_im_11[58] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[58] = {MMul_dot_product6_in1_1[58][13], MMul_dot_product6_in1_1[58]};
  assign MMul_dot_product_out_im[58] = {{3{MMul_dot_product6_cast_1[58][14]}}, MMul_dot_product6_cast_1[58]};
  assign MMul_dot_product6_in1[59] = (s_1[59] == 1'b1 ? alpha_re_11[59] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[59] = {MMul_dot_product6_in1[59][13], MMul_dot_product6_in1[59]};
  assign MMul_dot_product_out_re[59] = {{3{MMul_dot_product6_cast[59][14]}}, MMul_dot_product6_cast[59]};
  assign MMul_dot_product6_in1_1[59] = (s_1[59] == 1'b1 ? alpha_im_11[59] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[59] = {MMul_dot_product6_in1_1[59][13], MMul_dot_product6_in1_1[59]};
  assign MMul_dot_product_out_im[59] = {{3{MMul_dot_product6_cast_1[59][14]}}, MMul_dot_product6_cast_1[59]};
  assign MMul_dot_product6_in1[60] = (s_1[60] == 1'b1 ? alpha_re_11[60] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[60] = {MMul_dot_product6_in1[60][13], MMul_dot_product6_in1[60]};
  assign MMul_dot_product_out_re[60] = {{3{MMul_dot_product6_cast[60][14]}}, MMul_dot_product6_cast[60]};
  assign MMul_dot_product6_in1_1[60] = (s_1[60] == 1'b1 ? alpha_im_11[60] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[60] = {MMul_dot_product6_in1_1[60][13], MMul_dot_product6_in1_1[60]};
  assign MMul_dot_product_out_im[60] = {{3{MMul_dot_product6_cast_1[60][14]}}, MMul_dot_product6_cast_1[60]};
  assign MMul_dot_product6_in1[61] = (s_1[61] == 1'b1 ? alpha_re_11[61] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[61] = {MMul_dot_product6_in1[61][13], MMul_dot_product6_in1[61]};
  assign MMul_dot_product_out_re[61] = {{3{MMul_dot_product6_cast[61][14]}}, MMul_dot_product6_cast[61]};
  assign MMul_dot_product6_in1_1[61] = (s_1[61] == 1'b1 ? alpha_im_11[61] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[61] = {MMul_dot_product6_in1_1[61][13], MMul_dot_product6_in1_1[61]};
  assign MMul_dot_product_out_im[61] = {{3{MMul_dot_product6_cast_1[61][14]}}, MMul_dot_product6_cast_1[61]};
  assign MMul_dot_product6_in1[62] = (s_1[62] == 1'b1 ? alpha_re_11[62] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[62] = {MMul_dot_product6_in1[62][13], MMul_dot_product6_in1[62]};
  assign MMul_dot_product_out_re[62] = {{3{MMul_dot_product6_cast[62][14]}}, MMul_dot_product6_cast[62]};
  assign MMul_dot_product6_in1_1[62] = (s_1[62] == 1'b1 ? alpha_im_11[62] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[62] = {MMul_dot_product6_in1_1[62][13], MMul_dot_product6_in1_1[62]};
  assign MMul_dot_product_out_im[62] = {{3{MMul_dot_product6_cast_1[62][14]}}, MMul_dot_product6_cast_1[62]};
  assign MMul_dot_product6_in1[63] = (s_1[63] == 1'b1 ? alpha_re_11[63] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast[63] = {MMul_dot_product6_in1[63][13], MMul_dot_product6_in1[63]};
  assign MMul_dot_product_out_re[63] = {{3{MMul_dot_product6_cast[63][14]}}, MMul_dot_product6_cast[63]};
  assign MMul_dot_product6_in1_1[63] = (s_1[63] == 1'b1 ? alpha_im_11[63] :
              14'sb00000000000000);
  assign MMul_dot_product6_cast_1[63] = {MMul_dot_product6_in1_1[63][13], MMul_dot_product6_in1_1[63]};
  assign MMul_dot_product_out_im[63] = {{3{MMul_dot_product6_cast_1[63][14]}}, MMul_dot_product6_cast_1[63]};

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  always_comb begin
    reshape_out_re[0][0] = MMul_dot_product_out_re[0];
    reshape_out_im[0][0] = MMul_dot_product_out_im[0];
    reshape_out_re[1][0] = MMul_dot_product_out_re[1];
    reshape_out_im[1][0] = MMul_dot_product_out_im[1];
    reshape_out_re[2][0] = MMul_dot_product_out_re[2];
    reshape_out_im[2][0] = MMul_dot_product_out_im[2];
    reshape_out_re[3][0] = MMul_dot_product_out_re[3];
    reshape_out_im[3][0] = MMul_dot_product_out_im[3];
    reshape_out_re[4][0] = MMul_dot_product_out_re[4];
    reshape_out_im[4][0] = MMul_dot_product_out_im[4];
    reshape_out_re[5][0] = MMul_dot_product_out_re[5];
    reshape_out_im[5][0] = MMul_dot_product_out_im[5];
    reshape_out_re[6][0] = MMul_dot_product_out_re[6];
    reshape_out_im[6][0] = MMul_dot_product_out_im[6];
    reshape_out_re[7][0] = MMul_dot_product_out_re[7];
    reshape_out_im[7][0] = MMul_dot_product_out_im[7];
    reshape_out_re[0][1] = MMul_dot_product_out_re[8];
    reshape_out_im[0][1] = MMul_dot_product_out_im[8];
    reshape_out_re[1][1] = MMul_dot_product_out_re[9];
    reshape_out_im[1][1] = MMul_dot_product_out_im[9];
    reshape_out_re[2][1] = MMul_dot_product_out_re[10];
    reshape_out_im[2][1] = MMul_dot_product_out_im[10];
    reshape_out_re[3][1] = MMul_dot_product_out_re[11];
    reshape_out_im[3][1] = MMul_dot_product_out_im[11];
    reshape_out_re[4][1] = MMul_dot_product_out_re[12];
    reshape_out_im[4][1] = MMul_dot_product_out_im[12];
    reshape_out_re[5][1] = MMul_dot_product_out_re[13];
    reshape_out_im[5][1] = MMul_dot_product_out_im[13];
    reshape_out_re[6][1] = MMul_dot_product_out_re[14];
    reshape_out_im[6][1] = MMul_dot_product_out_im[14];
    reshape_out_re[7][1] = MMul_dot_product_out_re[15];
    reshape_out_im[7][1] = MMul_dot_product_out_im[15];
    reshape_out_re[0][2] = MMul_dot_product_out_re[16];
    reshape_out_im[0][2] = MMul_dot_product_out_im[16];
    reshape_out_re[1][2] = MMul_dot_product_out_re[17];
    reshape_out_im[1][2] = MMul_dot_product_out_im[17];
    reshape_out_re[2][2] = MMul_dot_product_out_re[18];
    reshape_out_im[2][2] = MMul_dot_product_out_im[18];
    reshape_out_re[3][2] = MMul_dot_product_out_re[19];
    reshape_out_im[3][2] = MMul_dot_product_out_im[19];
    reshape_out_re[4][2] = MMul_dot_product_out_re[20];
    reshape_out_im[4][2] = MMul_dot_product_out_im[20];
    reshape_out_re[5][2] = MMul_dot_product_out_re[21];
    reshape_out_im[5][2] = MMul_dot_product_out_im[21];
    reshape_out_re[6][2] = MMul_dot_product_out_re[22];
    reshape_out_im[6][2] = MMul_dot_product_out_im[22];
    reshape_out_re[7][2] = MMul_dot_product_out_re[23];
    reshape_out_im[7][2] = MMul_dot_product_out_im[23];
    reshape_out_re[0][3] = MMul_dot_product_out_re[24];
    reshape_out_im[0][3] = MMul_dot_product_out_im[24];
    reshape_out_re[1][3] = MMul_dot_product_out_re[25];
    reshape_out_im[1][3] = MMul_dot_product_out_im[25];
    reshape_out_re[2][3] = MMul_dot_product_out_re[26];
    reshape_out_im[2][3] = MMul_dot_product_out_im[26];
    reshape_out_re[3][3] = MMul_dot_product_out_re[27];
    reshape_out_im[3][3] = MMul_dot_product_out_im[27];
    reshape_out_re[4][3] = MMul_dot_product_out_re[28];
    reshape_out_im[4][3] = MMul_dot_product_out_im[28];
    reshape_out_re[5][3] = MMul_dot_product_out_re[29];
    reshape_out_im[5][3] = MMul_dot_product_out_im[29];
    reshape_out_re[6][3] = MMul_dot_product_out_re[30];
    reshape_out_im[6][3] = MMul_dot_product_out_im[30];
    reshape_out_re[7][3] = MMul_dot_product_out_re[31];
    reshape_out_im[7][3] = MMul_dot_product_out_im[31];
    reshape_out_re[0][4] = MMul_dot_product_out_re[32];
    reshape_out_im[0][4] = MMul_dot_product_out_im[32];
    reshape_out_re[1][4] = MMul_dot_product_out_re[33];
    reshape_out_im[1][4] = MMul_dot_product_out_im[33];
    reshape_out_re[2][4] = MMul_dot_product_out_re[34];
    reshape_out_im[2][4] = MMul_dot_product_out_im[34];
    reshape_out_re[3][4] = MMul_dot_product_out_re[35];
    reshape_out_im[3][4] = MMul_dot_product_out_im[35];
    reshape_out_re[4][4] = MMul_dot_product_out_re[36];
    reshape_out_im[4][4] = MMul_dot_product_out_im[36];
    reshape_out_re[5][4] = MMul_dot_product_out_re[37];
    reshape_out_im[5][4] = MMul_dot_product_out_im[37];
    reshape_out_re[6][4] = MMul_dot_product_out_re[38];
    reshape_out_im[6][4] = MMul_dot_product_out_im[38];
    reshape_out_re[7][4] = MMul_dot_product_out_re[39];
    reshape_out_im[7][4] = MMul_dot_product_out_im[39];
    reshape_out_re[0][5] = MMul_dot_product_out_re[40];
    reshape_out_im[0][5] = MMul_dot_product_out_im[40];
    reshape_out_re[1][5] = MMul_dot_product_out_re[41];
    reshape_out_im[1][5] = MMul_dot_product_out_im[41];
    reshape_out_re[2][5] = MMul_dot_product_out_re[42];
    reshape_out_im[2][5] = MMul_dot_product_out_im[42];
    reshape_out_re[3][5] = MMul_dot_product_out_re[43];
    reshape_out_im[3][5] = MMul_dot_product_out_im[43];
    reshape_out_re[4][5] = MMul_dot_product_out_re[44];
    reshape_out_im[4][5] = MMul_dot_product_out_im[44];
    reshape_out_re[5][5] = MMul_dot_product_out_re[45];
    reshape_out_im[5][5] = MMul_dot_product_out_im[45];
    reshape_out_re[6][5] = MMul_dot_product_out_re[46];
    reshape_out_im[6][5] = MMul_dot_product_out_im[46];
    reshape_out_re[7][5] = MMul_dot_product_out_re[47];
    reshape_out_im[7][5] = MMul_dot_product_out_im[47];
    reshape_out_re[0][6] = MMul_dot_product_out_re[48];
    reshape_out_im[0][6] = MMul_dot_product_out_im[48];
    reshape_out_re[1][6] = MMul_dot_product_out_re[49];
    reshape_out_im[1][6] = MMul_dot_product_out_im[49];
    reshape_out_re[2][6] = MMul_dot_product_out_re[50];
    reshape_out_im[2][6] = MMul_dot_product_out_im[50];
    reshape_out_re[3][6] = MMul_dot_product_out_re[51];
    reshape_out_im[3][6] = MMul_dot_product_out_im[51];
    reshape_out_re[4][6] = MMul_dot_product_out_re[52];
    reshape_out_im[4][6] = MMul_dot_product_out_im[52];
    reshape_out_re[5][6] = MMul_dot_product_out_re[53];
    reshape_out_im[5][6] = MMul_dot_product_out_im[53];
    reshape_out_re[6][6] = MMul_dot_product_out_re[54];
    reshape_out_im[6][6] = MMul_dot_product_out_im[54];
    reshape_out_re[7][6] = MMul_dot_product_out_re[55];
    reshape_out_im[7][6] = MMul_dot_product_out_im[55];
    reshape_out_re[0][7] = MMul_dot_product_out_re[56];
    reshape_out_im[0][7] = MMul_dot_product_out_im[56];
    reshape_out_re[1][7] = MMul_dot_product_out_re[57];
    reshape_out_im[1][7] = MMul_dot_product_out_im[57];
    reshape_out_re[2][7] = MMul_dot_product_out_re[58];
    reshape_out_im[2][7] = MMul_dot_product_out_im[58];
    reshape_out_re[3][7] = MMul_dot_product_out_re[59];
    reshape_out_im[3][7] = MMul_dot_product_out_im[59];
    reshape_out_re[4][7] = MMul_dot_product_out_re[60];
    reshape_out_im[4][7] = MMul_dot_product_out_im[60];
    reshape_out_re[5][7] = MMul_dot_product_out_re[61];
    reshape_out_im[5][7] = MMul_dot_product_out_im[61];
    reshape_out_re[6][7] = MMul_dot_product_out_re[62];
    reshape_out_im[6][7] = MMul_dot_product_out_im[62];
    reshape_out_re[7][7] = MMul_dot_product_out_re[63];
    reshape_out_im[7][7] = MMul_dot_product_out_im[63];
  end

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_6[0] = reshape_out_re[0][0];
  assign selector_out_im_6[0] = reshape_out_im[0][0];
  assign selector_out_re_6[1] = reshape_out_re[0][1];
  assign selector_out_im_6[1] = reshape_out_im[0][1];
  assign selector_out_re_6[2] = reshape_out_re[0][2];
  assign selector_out_im_6[2] = reshape_out_im[0][2];
  assign selector_out_re_6[3] = reshape_out_re[0][3];
  assign selector_out_im_6[3] = reshape_out_im[0][3];
  assign selector_out_re_6[4] = reshape_out_re[0][4];
  assign selector_out_im_6[4] = reshape_out_im[0][4];
  assign selector_out_re_6[5] = reshape_out_re[0][5];
  assign selector_out_im_6[5] = reshape_out_im[0][5];
  assign selector_out_re_6[6] = reshape_out_re[0][6];
  assign selector_out_im_6[6] = reshape_out_im[0][6];
  assign selector_out_re_6[7] = reshape_out_re[0][7];
  assign selector_out_im_6[7] = reshape_out_im[0][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_7[0] = reshape_out_re[1][0];
  assign selector_out_im_7[0] = reshape_out_im[1][0];
  assign selector_out_re_7[1] = reshape_out_re[1][1];
  assign selector_out_im_7[1] = reshape_out_im[1][1];
  assign selector_out_re_7[2] = reshape_out_re[1][2];
  assign selector_out_im_7[2] = reshape_out_im[1][2];
  assign selector_out_re_7[3] = reshape_out_re[1][3];
  assign selector_out_im_7[3] = reshape_out_im[1][3];
  assign selector_out_re_7[4] = reshape_out_re[1][4];
  assign selector_out_im_7[4] = reshape_out_im[1][4];
  assign selector_out_re_7[5] = reshape_out_re[1][5];
  assign selector_out_im_7[5] = reshape_out_im[1][5];
  assign selector_out_re_7[6] = reshape_out_re[1][6];
  assign selector_out_im_7[6] = reshape_out_im[1][6];
  assign selector_out_re_7[7] = reshape_out_re[1][7];
  assign selector_out_im_7[7] = reshape_out_im[1][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_add_01_out_re[0] = selector_out_re_6[0] + selector_out_re_7[0];
  assign MMul_add_01_out_im[0] = selector_out_im_6[0] + selector_out_im_7[0];
  assign MMul_add_01_out_re[1] = selector_out_re_6[1] + selector_out_re_7[1];
  assign MMul_add_01_out_im[1] = selector_out_im_6[1] + selector_out_im_7[1];
  assign MMul_add_01_out_re[2] = selector_out_re_6[2] + selector_out_re_7[2];
  assign MMul_add_01_out_im[2] = selector_out_im_6[2] + selector_out_im_7[2];
  assign MMul_add_01_out_re[3] = selector_out_re_6[3] + selector_out_re_7[3];
  assign MMul_add_01_out_im[3] = selector_out_im_6[3] + selector_out_im_7[3];
  assign MMul_add_01_out_re[4] = selector_out_re_6[4] + selector_out_re_7[4];
  assign MMul_add_01_out_im[4] = selector_out_im_6[4] + selector_out_im_7[4];
  assign MMul_add_01_out_re[5] = selector_out_re_6[5] + selector_out_re_7[5];
  assign MMul_add_01_out_im[5] = selector_out_im_6[5] + selector_out_im_7[5];
  assign MMul_add_01_out_re[6] = selector_out_re_6[6] + selector_out_re_7[6];
  assign MMul_add_01_out_im[6] = selector_out_im_6[6] + selector_out_im_7[6];
  assign MMul_add_01_out_re[7] = selector_out_re_6[7] + selector_out_re_7[7];
  assign MMul_add_01_out_im[7] = selector_out_im_6[7] + selector_out_im_7[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_8[0] = reshape_out_re[2][0];
  assign selector_out_im_8[0] = reshape_out_im[2][0];
  assign selector_out_re_8[1] = reshape_out_re[2][1];
  assign selector_out_im_8[1] = reshape_out_im[2][1];
  assign selector_out_re_8[2] = reshape_out_re[2][2];
  assign selector_out_im_8[2] = reshape_out_im[2][2];
  assign selector_out_re_8[3] = reshape_out_re[2][3];
  assign selector_out_im_8[3] = reshape_out_im[2][3];
  assign selector_out_re_8[4] = reshape_out_re[2][4];
  assign selector_out_im_8[4] = reshape_out_im[2][4];
  assign selector_out_re_8[5] = reshape_out_re[2][5];
  assign selector_out_im_8[5] = reshape_out_im[2][5];
  assign selector_out_re_8[6] = reshape_out_re[2][6];
  assign selector_out_im_8[6] = reshape_out_im[2][6];
  assign selector_out_re_8[7] = reshape_out_re[2][7];
  assign selector_out_im_8[7] = reshape_out_im[2][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_add_12_out_re[0] = MMul_add_01_out_re[0] + selector_out_re_8[0];
  assign MMul_add_12_out_im[0] = MMul_add_01_out_im[0] + selector_out_im_8[0];
  assign MMul_add_12_out_re[1] = MMul_add_01_out_re[1] + selector_out_re_8[1];
  assign MMul_add_12_out_im[1] = MMul_add_01_out_im[1] + selector_out_im_8[1];
  assign MMul_add_12_out_re[2] = MMul_add_01_out_re[2] + selector_out_re_8[2];
  assign MMul_add_12_out_im[2] = MMul_add_01_out_im[2] + selector_out_im_8[2];
  assign MMul_add_12_out_re[3] = MMul_add_01_out_re[3] + selector_out_re_8[3];
  assign MMul_add_12_out_im[3] = MMul_add_01_out_im[3] + selector_out_im_8[3];
  assign MMul_add_12_out_re[4] = MMul_add_01_out_re[4] + selector_out_re_8[4];
  assign MMul_add_12_out_im[4] = MMul_add_01_out_im[4] + selector_out_im_8[4];
  assign MMul_add_12_out_re[5] = MMul_add_01_out_re[5] + selector_out_re_8[5];
  assign MMul_add_12_out_im[5] = MMul_add_01_out_im[5] + selector_out_im_8[5];
  assign MMul_add_12_out_re[6] = MMul_add_01_out_re[6] + selector_out_re_8[6];
  assign MMul_add_12_out_im[6] = MMul_add_01_out_im[6] + selector_out_im_8[6];
  assign MMul_add_12_out_re[7] = MMul_add_01_out_re[7] + selector_out_re_8[7];
  assign MMul_add_12_out_im[7] = MMul_add_01_out_im[7] + selector_out_im_8[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_9[0] = reshape_out_re[3][0];
  assign selector_out_im_9[0] = reshape_out_im[3][0];
  assign selector_out_re_9[1] = reshape_out_re[3][1];
  assign selector_out_im_9[1] = reshape_out_im[3][1];
  assign selector_out_re_9[2] = reshape_out_re[3][2];
  assign selector_out_im_9[2] = reshape_out_im[3][2];
  assign selector_out_re_9[3] = reshape_out_re[3][3];
  assign selector_out_im_9[3] = reshape_out_im[3][3];
  assign selector_out_re_9[4] = reshape_out_re[3][4];
  assign selector_out_im_9[4] = reshape_out_im[3][4];
  assign selector_out_re_9[5] = reshape_out_re[3][5];
  assign selector_out_im_9[5] = reshape_out_im[3][5];
  assign selector_out_re_9[6] = reshape_out_re[3][6];
  assign selector_out_im_9[6] = reshape_out_im[3][6];
  assign selector_out_re_9[7] = reshape_out_re[3][7];
  assign selector_out_im_9[7] = reshape_out_im[3][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_add_23_out_re[0] = MMul_add_12_out_re[0] + selector_out_re_9[0];
  assign MMul_add_23_out_im[0] = MMul_add_12_out_im[0] + selector_out_im_9[0];
  assign MMul_add_23_out_re[1] = MMul_add_12_out_re[1] + selector_out_re_9[1];
  assign MMul_add_23_out_im[1] = MMul_add_12_out_im[1] + selector_out_im_9[1];
  assign MMul_add_23_out_re[2] = MMul_add_12_out_re[2] + selector_out_re_9[2];
  assign MMul_add_23_out_im[2] = MMul_add_12_out_im[2] + selector_out_im_9[2];
  assign MMul_add_23_out_re[3] = MMul_add_12_out_re[3] + selector_out_re_9[3];
  assign MMul_add_23_out_im[3] = MMul_add_12_out_im[3] + selector_out_im_9[3];
  assign MMul_add_23_out_re[4] = MMul_add_12_out_re[4] + selector_out_re_9[4];
  assign MMul_add_23_out_im[4] = MMul_add_12_out_im[4] + selector_out_im_9[4];
  assign MMul_add_23_out_re[5] = MMul_add_12_out_re[5] + selector_out_re_9[5];
  assign MMul_add_23_out_im[5] = MMul_add_12_out_im[5] + selector_out_im_9[5];
  assign MMul_add_23_out_re[6] = MMul_add_12_out_re[6] + selector_out_re_9[6];
  assign MMul_add_23_out_im[6] = MMul_add_12_out_im[6] + selector_out_im_9[6];
  assign MMul_add_23_out_re[7] = MMul_add_12_out_re[7] + selector_out_re_9[7];
  assign MMul_add_23_out_im[7] = MMul_add_12_out_im[7] + selector_out_im_9[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_10[0] = reshape_out_re[4][0];
  assign selector_out_im_10[0] = reshape_out_im[4][0];
  assign selector_out_re_10[1] = reshape_out_re[4][1];
  assign selector_out_im_10[1] = reshape_out_im[4][1];
  assign selector_out_re_10[2] = reshape_out_re[4][2];
  assign selector_out_im_10[2] = reshape_out_im[4][2];
  assign selector_out_re_10[3] = reshape_out_re[4][3];
  assign selector_out_im_10[3] = reshape_out_im[4][3];
  assign selector_out_re_10[4] = reshape_out_re[4][4];
  assign selector_out_im_10[4] = reshape_out_im[4][4];
  assign selector_out_re_10[5] = reshape_out_re[4][5];
  assign selector_out_im_10[5] = reshape_out_im[4][5];
  assign selector_out_re_10[6] = reshape_out_re[4][6];
  assign selector_out_im_10[6] = reshape_out_im[4][6];
  assign selector_out_re_10[7] = reshape_out_re[4][7];
  assign selector_out_im_10[7] = reshape_out_im[4][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_add_34_out_re[0] = MMul_add_23_out_re[0] + selector_out_re_10[0];
  assign MMul_add_34_out_im[0] = MMul_add_23_out_im[0] + selector_out_im_10[0];
  assign MMul_add_34_out_re[1] = MMul_add_23_out_re[1] + selector_out_re_10[1];
  assign MMul_add_34_out_im[1] = MMul_add_23_out_im[1] + selector_out_im_10[1];
  assign MMul_add_34_out_re[2] = MMul_add_23_out_re[2] + selector_out_re_10[2];
  assign MMul_add_34_out_im[2] = MMul_add_23_out_im[2] + selector_out_im_10[2];
  assign MMul_add_34_out_re[3] = MMul_add_23_out_re[3] + selector_out_re_10[3];
  assign MMul_add_34_out_im[3] = MMul_add_23_out_im[3] + selector_out_im_10[3];
  assign MMul_add_34_out_re[4] = MMul_add_23_out_re[4] + selector_out_re_10[4];
  assign MMul_add_34_out_im[4] = MMul_add_23_out_im[4] + selector_out_im_10[4];
  assign MMul_add_34_out_re[5] = MMul_add_23_out_re[5] + selector_out_re_10[5];
  assign MMul_add_34_out_im[5] = MMul_add_23_out_im[5] + selector_out_im_10[5];
  assign MMul_add_34_out_re[6] = MMul_add_23_out_re[6] + selector_out_re_10[6];
  assign MMul_add_34_out_im[6] = MMul_add_23_out_im[6] + selector_out_im_10[6];
  assign MMul_add_34_out_re[7] = MMul_add_23_out_re[7] + selector_out_re_10[7];
  assign MMul_add_34_out_im[7] = MMul_add_23_out_im[7] + selector_out_im_10[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_11[0] = reshape_out_re[5][0];
  assign selector_out_im_11[0] = reshape_out_im[5][0];
  assign selector_out_re_11[1] = reshape_out_re[5][1];
  assign selector_out_im_11[1] = reshape_out_im[5][1];
  assign selector_out_re_11[2] = reshape_out_re[5][2];
  assign selector_out_im_11[2] = reshape_out_im[5][2];
  assign selector_out_re_11[3] = reshape_out_re[5][3];
  assign selector_out_im_11[3] = reshape_out_im[5][3];
  assign selector_out_re_11[4] = reshape_out_re[5][4];
  assign selector_out_im_11[4] = reshape_out_im[5][4];
  assign selector_out_re_11[5] = reshape_out_re[5][5];
  assign selector_out_im_11[5] = reshape_out_im[5][5];
  assign selector_out_re_11[6] = reshape_out_re[5][6];
  assign selector_out_im_11[6] = reshape_out_im[5][6];
  assign selector_out_re_11[7] = reshape_out_re[5][7];
  assign selector_out_im_11[7] = reshape_out_im[5][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_add_45_out_re[0] = MMul_add_34_out_re[0] + selector_out_re_11[0];
  assign MMul_add_45_out_im[0] = MMul_add_34_out_im[0] + selector_out_im_11[0];
  assign MMul_add_45_out_re[1] = MMul_add_34_out_re[1] + selector_out_re_11[1];
  assign MMul_add_45_out_im[1] = MMul_add_34_out_im[1] + selector_out_im_11[1];
  assign MMul_add_45_out_re[2] = MMul_add_34_out_re[2] + selector_out_re_11[2];
  assign MMul_add_45_out_im[2] = MMul_add_34_out_im[2] + selector_out_im_11[2];
  assign MMul_add_45_out_re[3] = MMul_add_34_out_re[3] + selector_out_re_11[3];
  assign MMul_add_45_out_im[3] = MMul_add_34_out_im[3] + selector_out_im_11[3];
  assign MMul_add_45_out_re[4] = MMul_add_34_out_re[4] + selector_out_re_11[4];
  assign MMul_add_45_out_im[4] = MMul_add_34_out_im[4] + selector_out_im_11[4];
  assign MMul_add_45_out_re[5] = MMul_add_34_out_re[5] + selector_out_re_11[5];
  assign MMul_add_45_out_im[5] = MMul_add_34_out_im[5] + selector_out_im_11[5];
  assign MMul_add_45_out_re[6] = MMul_add_34_out_re[6] + selector_out_re_11[6];
  assign MMul_add_45_out_im[6] = MMul_add_34_out_im[6] + selector_out_im_11[6];
  assign MMul_add_45_out_re[7] = MMul_add_34_out_re[7] + selector_out_re_11[7];
  assign MMul_add_45_out_im[7] = MMul_add_34_out_im[7] + selector_out_im_11[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_12[0] = reshape_out_re[6][0];
  assign selector_out_im_12[0] = reshape_out_im[6][0];
  assign selector_out_re_12[1] = reshape_out_re[6][1];
  assign selector_out_im_12[1] = reshape_out_im[6][1];
  assign selector_out_re_12[2] = reshape_out_re[6][2];
  assign selector_out_im_12[2] = reshape_out_im[6][2];
  assign selector_out_re_12[3] = reshape_out_re[6][3];
  assign selector_out_im_12[3] = reshape_out_im[6][3];
  assign selector_out_re_12[4] = reshape_out_re[6][4];
  assign selector_out_im_12[4] = reshape_out_im[6][4];
  assign selector_out_re_12[5] = reshape_out_re[6][5];
  assign selector_out_im_12[5] = reshape_out_im[6][5];
  assign selector_out_re_12[6] = reshape_out_re[6][6];
  assign selector_out_im_12[6] = reshape_out_im[6][6];
  assign selector_out_re_12[7] = reshape_out_re[6][7];
  assign selector_out_im_12[7] = reshape_out_im[6][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign MMul_add_56_out_re[0] = MMul_add_45_out_re[0] + selector_out_re_12[0];
  assign MMul_add_56_out_im[0] = MMul_add_45_out_im[0] + selector_out_im_12[0];
  assign MMul_add_56_out_re[1] = MMul_add_45_out_re[1] + selector_out_re_12[1];
  assign MMul_add_56_out_im[1] = MMul_add_45_out_im[1] + selector_out_im_12[1];
  assign MMul_add_56_out_re[2] = MMul_add_45_out_re[2] + selector_out_re_12[2];
  assign MMul_add_56_out_im[2] = MMul_add_45_out_im[2] + selector_out_im_12[2];
  assign MMul_add_56_out_re[3] = MMul_add_45_out_re[3] + selector_out_re_12[3];
  assign MMul_add_56_out_im[3] = MMul_add_45_out_im[3] + selector_out_im_12[3];
  assign MMul_add_56_out_re[4] = MMul_add_45_out_re[4] + selector_out_re_12[4];
  assign MMul_add_56_out_im[4] = MMul_add_45_out_im[4] + selector_out_im_12[4];
  assign MMul_add_56_out_re[5] = MMul_add_45_out_re[5] + selector_out_re_12[5];
  assign MMul_add_56_out_im[5] = MMul_add_45_out_im[5] + selector_out_im_12[5];
  assign MMul_add_56_out_re[6] = MMul_add_45_out_re[6] + selector_out_re_12[6];
  assign MMul_add_56_out_im[6] = MMul_add_45_out_im[6] + selector_out_im_12[6];
  assign MMul_add_56_out_re[7] = MMul_add_45_out_re[7] + selector_out_re_12[7];
  assign MMul_add_56_out_im[7] = MMul_add_45_out_im[7] + selector_out_im_12[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign selector_out_re_13[0] = reshape_out_re[7][0];
  assign selector_out_im_13[0] = reshape_out_im[7][0];
  assign selector_out_re_13[1] = reshape_out_re[7][1];
  assign selector_out_im_13[1] = reshape_out_im[7][1];
  assign selector_out_re_13[2] = reshape_out_re[7][2];
  assign selector_out_im_13[2] = reshape_out_im[7][2];
  assign selector_out_re_13[3] = reshape_out_re[7][3];
  assign selector_out_im_13[3] = reshape_out_im[7][3];
  assign selector_out_re_13[4] = reshape_out_re[7][4];
  assign selector_out_im_13[4] = reshape_out_im[7][4];
  assign selector_out_re_13[5] = reshape_out_re[7][5];
  assign selector_out_im_13[5] = reshape_out_im[7][5];
  assign selector_out_re_13[6] = reshape_out_re[7][6];
  assign selector_out_im_13[6] = reshape_out_im[7][6];
  assign selector_out_re_13[7] = reshape_out_re[7][7];
  assign selector_out_im_13[7] = reshape_out_im[7][7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign alpha_re_12[0] = MMul_add_56_out_re[0] + selector_out_re_13[0];
  assign alpha_im_12[0] = MMul_add_56_out_im[0] + selector_out_im_13[0];
  assign alpha_re_12[1] = MMul_add_56_out_re[1] + selector_out_re_13[1];
  assign alpha_im_12[1] = MMul_add_56_out_im[1] + selector_out_im_13[1];
  assign alpha_re_12[2] = MMul_add_56_out_re[2] + selector_out_re_13[2];
  assign alpha_im_12[2] = MMul_add_56_out_im[2] + selector_out_im_13[2];
  assign alpha_re_12[3] = MMul_add_56_out_re[3] + selector_out_re_13[3];
  assign alpha_im_12[3] = MMul_add_56_out_im[3] + selector_out_im_13[3];
  assign alpha_re_12[4] = MMul_add_56_out_re[4] + selector_out_re_13[4];
  assign alpha_im_12[4] = MMul_add_56_out_im[4] + selector_out_im_13[4];
  assign alpha_re_12[5] = MMul_add_56_out_re[5] + selector_out_re_13[5];
  assign alpha_im_12[5] = MMul_add_56_out_im[5] + selector_out_im_13[5];
  assign alpha_re_12[6] = MMul_add_56_out_re[6] + selector_out_re_13[6];
  assign alpha_im_12[6] = MMul_add_56_out_im[6] + selector_out_im_13[6];
  assign alpha_re_12[7] = MMul_add_56_out_re[7] + selector_out_re_13[7];
  assign alpha_im_12[7] = MMul_add_56_out_im[7] + selector_out_im_13[7];

  // Define the identity and Hadamard gates
  // Identity matrix
  // Hadamard gate
  // Define phase shift gates
  // Controlled phase shift R2
  // Controlled phase shift R3
  // Initialize AB matrix for H otimes I (4x4 matrix)
  // Manually expand the tensor product
  // Initialize result matrix for, which results in an 8x8 matrix
  // Manually expand the tensor product 
  // Step 1: Apply Hadamard to the first qubit
  // Apply H to the first qubit while leaving the others unchanged
  // sizeA1 = size(H,1);
  // sizeB1 = size(I, 1);
  // sizeA2 = size(H, 2);
  // sizeB2 = size(I, 2);
  // size1 = sizeA1 * sizeB1;
  // size2 = sizeA2 * sizeB2;
  // AB = complex(zeros(2, 2));
  // for i = 1:sizeA1
  //     for j = 1:sizeA2
  //         AB((i-1)*2+1:i*2, (j-1)*2+1:j*2) = H(i, j) * I;
  //     end
  // end
  // result = complex(zeros(size(AB, 1)  * size(I, 1), size(AB, 2) * size(I, 2)));
  // for i = 1:size(AB, 1)
  //     for j = 1:size(AB, 2)
  //         result((i-1)*size(I, 1)+1:i*size(I, 1), (j-1)*size(I, 2)+1:j*size(I, 2)) = AB(i, j) * I;
  //     end
  // end
  // H1 = result;
  // Quantum Fourier Transform for 3-qubit system
  // initial_state is a column vector of length 8 (2^3), representing the initial state of the qubits
  // Check if initial_state is of correct size
  assign out0_re[0] = alpha_re_12[0];
  assign out0_im[0] = alpha_im_12[0];
  assign out0_re[1] = alpha_re_12[1];
  assign out0_im[1] = alpha_im_12[1];
  assign out0_re[2] = alpha_re_12[2];
  assign out0_im[2] = alpha_im_12[2];
  assign out0_re[3] = alpha_re_12[3];
  assign out0_im[3] = alpha_im_12[3];
  assign out0_re[4] = alpha_re_12[4];
  assign out0_im[4] = alpha_im_12[4];
  assign out0_re[5] = alpha_re_12[5];
  assign out0_im[5] = alpha_im_12[5];
  assign out0_re[6] = alpha_re_12[6];
  assign out0_im[6] = alpha_im_12[6];
  assign out0_re[7] = alpha_re_12[7];
  assign out0_im[7] = alpha_im_12[7];

  assign state_after_H1_re[0] = out0_re[0][13:0];
  assign state_after_H1_im[0] = out0_im[0][13:0];
  assign state_after_H1_re[1] = out0_re[1][13:0];
  assign state_after_H1_im[1] = out0_im[1][13:0];
  assign state_after_H1_re[2] = out0_re[2][13:0];
  assign state_after_H1_im[2] = out0_im[2][13:0];
  assign state_after_H1_re[3] = out0_re[3][13:0];
  assign state_after_H1_im[3] = out0_im[3][13:0];
  assign state_after_H1_re[4] = out0_re[4][13:0];
  assign state_after_H1_im[4] = out0_im[4][13:0];
  assign state_after_H1_re[5] = out0_re[5][13:0];
  assign state_after_H1_im[5] = out0_im[5][13:0];
  assign state_after_H1_re[6] = out0_re[6][13:0];
  assign state_after_H1_im[6] = out0_im[6][13:0];
  assign state_after_H1_re[7] = out0_re[7][13:0];
  assign state_after_H1_im[7] = out0_im[7][13:0];

  assign selector_out_re_14[0] = state_after_H1_re[0];
  assign selector_out_re_14[1] = state_after_H1_re[1];
  assign selector_out_re_14[2] = state_after_H1_re[2];
  assign selector_out_re_14[3] = state_after_H1_re[3];
  assign selector_out_re_14[4] = state_after_H1_re[4];
  assign selector_out_re_14[5] = state_after_H1_re[5];
  assign selector_out_re_14[6] = state_after_H1_re[6];
  assign selector_out_re_14[7] = state_after_H1_re[7];
  assign selector_out_re_14[8] = state_after_H1_re[0];
  assign selector_out_re_14[9] = state_after_H1_re[1];
  assign selector_out_re_14[10] = state_after_H1_re[2];
  assign selector_out_re_14[11] = state_after_H1_re[3];
  assign selector_out_re_14[12] = state_after_H1_re[4];
  assign selector_out_re_14[13] = state_after_H1_re[5];
  assign selector_out_re_14[14] = state_after_H1_re[6];
  assign selector_out_re_14[15] = state_after_H1_re[7];
  assign selector_out_re_14[16] = state_after_H1_re[0];
  assign selector_out_re_14[17] = state_after_H1_re[1];
  assign selector_out_re_14[18] = state_after_H1_re[2];
  assign selector_out_re_14[19] = state_after_H1_re[3];
  assign selector_out_re_14[20] = state_after_H1_re[4];
  assign selector_out_re_14[21] = state_after_H1_re[5];
  assign selector_out_re_14[22] = state_after_H1_re[6];
  assign selector_out_re_14[23] = state_after_H1_re[7];
  assign selector_out_re_14[24] = state_after_H1_re[0];
  assign selector_out_re_14[25] = state_after_H1_re[1];
  assign selector_out_re_14[26] = state_after_H1_re[2];
  assign selector_out_re_14[27] = state_after_H1_re[3];
  assign selector_out_re_14[28] = state_after_H1_re[4];
  assign selector_out_re_14[29] = state_after_H1_re[5];
  assign selector_out_re_14[30] = state_after_H1_re[6];
  assign selector_out_re_14[31] = state_after_H1_re[7];
  assign selector_out_re_14[32] = state_after_H1_re[0];
  assign selector_out_re_14[33] = state_after_H1_re[1];
  assign selector_out_re_14[34] = state_after_H1_re[2];
  assign selector_out_re_14[35] = state_after_H1_re[3];
  assign selector_out_re_14[36] = state_after_H1_re[4];
  assign selector_out_re_14[37] = state_after_H1_re[5];
  assign selector_out_re_14[38] = state_after_H1_re[6];
  assign selector_out_re_14[39] = state_after_H1_re[7];
  assign selector_out_re_14[40] = state_after_H1_re[0];
  assign selector_out_re_14[41] = state_after_H1_re[1];
  assign selector_out_re_14[42] = state_after_H1_re[2];
  assign selector_out_re_14[43] = state_after_H1_re[3];
  assign selector_out_re_14[44] = state_after_H1_re[4];
  assign selector_out_re_14[45] = state_after_H1_re[5];
  assign selector_out_re_14[46] = state_after_H1_re[6];
  assign selector_out_re_14[47] = state_after_H1_re[7];
  assign selector_out_re_14[48] = state_after_H1_re[0];
  assign selector_out_re_14[49] = state_after_H1_re[1];
  assign selector_out_re_14[50] = state_after_H1_re[2];
  assign selector_out_re_14[51] = state_after_H1_re[3];
  assign selector_out_re_14[52] = state_after_H1_re[4];
  assign selector_out_re_14[53] = state_after_H1_re[5];
  assign selector_out_re_14[54] = state_after_H1_re[6];
  assign selector_out_re_14[55] = state_after_H1_re[7];
  assign selector_out_re_14[56] = state_after_H1_re[0];
  assign selector_out_re_14[57] = state_after_H1_re[1];
  assign selector_out_re_14[58] = state_after_H1_re[2];
  assign selector_out_re_14[59] = state_after_H1_re[3];
  assign selector_out_re_14[60] = state_after_H1_re[4];
  assign selector_out_re_14[61] = state_after_H1_re[5];
  assign selector_out_re_14[62] = state_after_H1_re[6];
  assign selector_out_re_14[63] = state_after_H1_re[7];

  assign selector_out_im_14[0] = state_after_H1_im[0];
  assign selector_out_im_14[1] = state_after_H1_im[1];
  assign selector_out_im_14[2] = state_after_H1_im[2];
  assign selector_out_im_14[3] = state_after_H1_im[3];
  assign selector_out_im_14[4] = state_after_H1_im[4];
  assign selector_out_im_14[5] = state_after_H1_im[5];
  assign selector_out_im_14[6] = state_after_H1_im[6];
  assign selector_out_im_14[7] = state_after_H1_im[7];
  assign selector_out_im_14[8] = state_after_H1_im[0];
  assign selector_out_im_14[9] = state_after_H1_im[1];
  assign selector_out_im_14[10] = state_after_H1_im[2];
  assign selector_out_im_14[11] = state_after_H1_im[3];
  assign selector_out_im_14[12] = state_after_H1_im[4];
  assign selector_out_im_14[13] = state_after_H1_im[5];
  assign selector_out_im_14[14] = state_after_H1_im[6];
  assign selector_out_im_14[15] = state_after_H1_im[7];
  assign selector_out_im_14[16] = state_after_H1_im[0];
  assign selector_out_im_14[17] = state_after_H1_im[1];
  assign selector_out_im_14[18] = state_after_H1_im[2];
  assign selector_out_im_14[19] = state_after_H1_im[3];
  assign selector_out_im_14[20] = state_after_H1_im[4];
  assign selector_out_im_14[21] = state_after_H1_im[5];
  assign selector_out_im_14[22] = state_after_H1_im[6];
  assign selector_out_im_14[23] = state_after_H1_im[7];
  assign selector_out_im_14[24] = state_after_H1_im[0];
  assign selector_out_im_14[25] = state_after_H1_im[1];
  assign selector_out_im_14[26] = state_after_H1_im[2];
  assign selector_out_im_14[27] = state_after_H1_im[3];
  assign selector_out_im_14[28] = state_after_H1_im[4];
  assign selector_out_im_14[29] = state_after_H1_im[5];
  assign selector_out_im_14[30] = state_after_H1_im[6];
  assign selector_out_im_14[31] = state_after_H1_im[7];
  assign selector_out_im_14[32] = state_after_H1_im[0];
  assign selector_out_im_14[33] = state_after_H1_im[1];
  assign selector_out_im_14[34] = state_after_H1_im[2];
  assign selector_out_im_14[35] = state_after_H1_im[3];
  assign selector_out_im_14[36] = state_after_H1_im[4];
  assign selector_out_im_14[37] = state_after_H1_im[5];
  assign selector_out_im_14[38] = state_after_H1_im[6];
  assign selector_out_im_14[39] = state_after_H1_im[7];
  assign selector_out_im_14[40] = state_after_H1_im[0];
  assign selector_out_im_14[41] = state_after_H1_im[1];
  assign selector_out_im_14[42] = state_after_H1_im[2];
  assign selector_out_im_14[43] = state_after_H1_im[3];
  assign selector_out_im_14[44] = state_after_H1_im[4];
  assign selector_out_im_14[45] = state_after_H1_im[5];
  assign selector_out_im_14[46] = state_after_H1_im[6];
  assign selector_out_im_14[47] = state_after_H1_im[7];
  assign selector_out_im_14[48] = state_after_H1_im[0];
  assign selector_out_im_14[49] = state_after_H1_im[1];
  assign selector_out_im_14[50] = state_after_H1_im[2];
  assign selector_out_im_14[51] = state_after_H1_im[3];
  assign selector_out_im_14[52] = state_after_H1_im[4];
  assign selector_out_im_14[53] = state_after_H1_im[5];
  assign selector_out_im_14[54] = state_after_H1_im[6];
  assign selector_out_im_14[55] = state_after_H1_im[7];
  assign selector_out_im_14[56] = state_after_H1_im[0];
  assign selector_out_im_14[57] = state_after_H1_im[1];
  assign selector_out_im_14[58] = state_after_H1_im[2];
  assign selector_out_im_14[59] = state_after_H1_im[3];
  assign selector_out_im_14[60] = state_after_H1_im[4];
  assign selector_out_im_14[61] = state_after_H1_im[5];
  assign selector_out_im_14[62] = state_after_H1_im[6];
  assign selector_out_im_14[63] = state_after_H1_im[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign alpha_re_13[0] = selector_out_re_14[0];
  assign alpha_im_13[0] = selector_out_im_14[0];
  assign alpha_re_13[1] = selector_out_re_14[1];
  assign alpha_im_13[1] = selector_out_im_14[1];
  assign alpha_re_13[2] = selector_out_re_14[2];
  assign alpha_im_13[2] = selector_out_im_14[2];
  assign alpha_re_13[3] = selector_out_re_14[3];
  assign alpha_im_13[3] = selector_out_im_14[3];
  assign alpha_re_13[4] = selector_out_re_14[4];
  assign alpha_im_13[4] = selector_out_im_14[4];
  assign alpha_re_13[5] = selector_out_re_14[5];
  assign alpha_im_13[5] = selector_out_im_14[5];
  assign alpha_re_13[6] = selector_out_re_14[6];
  assign alpha_im_13[6] = selector_out_im_14[6];
  assign alpha_re_13[7] = selector_out_re_14[7];
  assign alpha_im_13[7] = selector_out_im_14[7];
  assign alpha_re_13[8] = selector_out_re_14[8];
  assign alpha_im_13[8] = selector_out_im_14[8];
  assign alpha_re_13[9] = selector_out_re_14[9];
  assign alpha_im_13[9] = selector_out_im_14[9];
  assign alpha_re_13[10] = selector_out_re_14[10];
  assign alpha_im_13[10] = selector_out_im_14[10];
  assign alpha_re_13[11] = selector_out_re_14[11];
  assign alpha_im_13[11] = selector_out_im_14[11];
  assign alpha_re_13[12] = selector_out_re_14[12];
  assign alpha_im_13[12] = selector_out_im_14[12];
  assign alpha_re_13[13] = selector_out_re_14[13];
  assign alpha_im_13[13] = selector_out_im_14[13];
  assign alpha_re_13[14] = selector_out_re_14[14];
  assign alpha_im_13[14] = selector_out_im_14[14];
  assign alpha_re_13[15] = selector_out_re_14[15];
  assign alpha_im_13[15] = selector_out_im_14[15];
  assign alpha_re_13[16] = selector_out_re_14[16];
  assign alpha_im_13[16] = selector_out_im_14[16];
  assign alpha_re_13[17] = selector_out_re_14[17];
  assign alpha_im_13[17] = selector_out_im_14[17];
  assign alpha_re_13[18] = selector_out_re_14[18];
  assign alpha_im_13[18] = selector_out_im_14[18];
  assign alpha_re_13[19] = selector_out_re_14[19];
  assign alpha_im_13[19] = selector_out_im_14[19];
  assign alpha_re_13[20] = selector_out_re_14[20];
  assign alpha_im_13[20] = selector_out_im_14[20];
  assign alpha_re_13[21] = selector_out_re_14[21];
  assign alpha_im_13[21] = selector_out_im_14[21];
  assign alpha_re_13[22] = selector_out_re_14[22];
  assign alpha_im_13[22] = selector_out_im_14[22];
  assign alpha_re_13[23] = selector_out_re_14[23];
  assign alpha_im_13[23] = selector_out_im_14[23];
  assign alpha_re_13[24] = selector_out_re_14[24];
  assign alpha_im_13[24] = selector_out_im_14[24];
  assign alpha_re_13[25] = selector_out_re_14[25];
  assign alpha_im_13[25] = selector_out_im_14[25];
  assign alpha_re_13[26] = selector_out_re_14[26];
  assign alpha_im_13[26] = selector_out_im_14[26];
  assign alpha_re_13[27] = selector_out_re_14[27];
  assign alpha_im_13[27] = selector_out_im_14[27];
  assign alpha_re_13[28] = selector_out_re_14[28];
  assign alpha_im_13[28] = selector_out_im_14[28];
  assign alpha_re_13[29] = selector_out_re_14[29];
  assign alpha_im_13[29] = selector_out_im_14[29];
  assign alpha_re_13[30] = selector_out_re_14[30];
  assign alpha_im_13[30] = selector_out_im_14[30];
  assign alpha_re_13[31] = selector_out_re_14[31];
  assign alpha_im_13[31] = selector_out_im_14[31];
  assign alpha_re_13[32] = selector_out_re_14[32];
  assign alpha_im_13[32] = selector_out_im_14[32];
  assign alpha_re_13[33] = selector_out_re_14[33];
  assign alpha_im_13[33] = selector_out_im_14[33];
  assign alpha_re_13[34] = selector_out_re_14[34];
  assign alpha_im_13[34] = selector_out_im_14[34];
  assign alpha_re_13[35] = selector_out_re_14[35];
  assign alpha_im_13[35] = selector_out_im_14[35];
  assign alpha_re_13[36] = selector_out_re_14[36];
  assign alpha_im_13[36] = selector_out_im_14[36];
  assign alpha_re_13[37] = selector_out_re_14[37];
  assign alpha_im_13[37] = selector_out_im_14[37];
  assign alpha_re_13[38] = selector_out_re_14[38];
  assign alpha_im_13[38] = selector_out_im_14[38];
  assign alpha_re_13[39] = selector_out_re_14[39];
  assign alpha_im_13[39] = selector_out_im_14[39];
  assign alpha_re_13[40] = selector_out_re_14[40];
  assign alpha_im_13[40] = selector_out_im_14[40];
  assign alpha_re_13[41] = selector_out_re_14[41];
  assign alpha_im_13[41] = selector_out_im_14[41];
  assign alpha_re_13[42] = selector_out_re_14[42];
  assign alpha_im_13[42] = selector_out_im_14[42];
  assign alpha_re_13[43] = selector_out_re_14[43];
  assign alpha_im_13[43] = selector_out_im_14[43];
  assign alpha_re_13[44] = selector_out_re_14[44];
  assign alpha_im_13[44] = selector_out_im_14[44];
  assign alpha_re_13[45] = selector_out_re_14[45];
  assign alpha_im_13[45] = selector_out_im_14[45];
  assign alpha_re_13[46] = selector_out_re_14[46];
  assign alpha_im_13[46] = selector_out_im_14[46];
  assign alpha_re_13[47] = selector_out_re_14[47];
  assign alpha_im_13[47] = selector_out_im_14[47];
  assign alpha_re_13[48] = selector_out_re_14[48];
  assign alpha_im_13[48] = selector_out_im_14[48];
  assign alpha_re_13[49] = selector_out_re_14[49];
  assign alpha_im_13[49] = selector_out_im_14[49];
  assign alpha_re_13[50] = selector_out_re_14[50];
  assign alpha_im_13[50] = selector_out_im_14[50];
  assign alpha_re_13[51] = selector_out_re_14[51];
  assign alpha_im_13[51] = selector_out_im_14[51];
  assign alpha_re_13[52] = selector_out_re_14[52];
  assign alpha_im_13[52] = selector_out_im_14[52];
  assign alpha_re_13[53] = selector_out_re_14[53];
  assign alpha_im_13[53] = selector_out_im_14[53];
  assign alpha_re_13[54] = selector_out_re_14[54];
  assign alpha_im_13[54] = selector_out_im_14[54];
  assign alpha_re_13[55] = selector_out_re_14[55];
  assign alpha_im_13[55] = selector_out_im_14[55];
  assign alpha_re_13[56] = selector_out_re_14[56];
  assign alpha_im_13[56] = selector_out_im_14[56];
  assign alpha_re_13[57] = selector_out_re_14[57];
  assign alpha_im_13[57] = selector_out_im_14[57];
  assign alpha_re_13[58] = selector_out_re_14[58];
  assign alpha_im_13[58] = selector_out_im_14[58];
  assign alpha_re_13[59] = selector_out_re_14[59];
  assign alpha_im_13[59] = selector_out_im_14[59];
  assign alpha_re_13[60] = selector_out_re_14[60];
  assign alpha_im_13[60] = selector_out_im_14[60];
  assign alpha_re_13[61] = selector_out_re_14[61];
  assign alpha_im_13[61] = selector_out_im_14[61];
  assign alpha_re_13[62] = selector_out_re_14[62];
  assign alpha_im_13[62] = selector_out_im_14[62];
  assign alpha_re_13[63] = selector_out_re_14[63];
  assign alpha_im_13[63] = selector_out_im_14[63];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_dot_product5_in0_re[0] = (alpha_re_9[0] == 1'b1 ? alpha_re_13[0] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[0] = {MMul_dot_product5_in0_re[0][13], MMul_dot_product5_in0_re[0]};
  assign MMul_dot_product5_sub_cast_1[0] = {{4{MMul_dot_product5_sub_cast[0][14]}}, MMul_dot_product5_sub_cast[0]};
  assign MMul_dot_product5_in0_im[0] = (alpha_im_9[0] == 1'b1 ? alpha_im_13[0] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[0] = {MMul_dot_product5_in0_im[0][13], MMul_dot_product5_in0_im[0]};
  assign MMul_dot_product5_sub_cast_3[0] = {{4{MMul_dot_product5_sub_cast_2[0][14]}}, MMul_dot_product5_sub_cast_2[0]};
  assign MMul_dot_product_out_re_1[0] = MMul_dot_product5_sub_cast_1[0] - MMul_dot_product5_sub_cast_3[0];
  assign MMul_dot_product5_in0_im_1[0] = (alpha_im_9[0] == 1'b1 ? alpha_re_13[0] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[0] = {MMul_dot_product5_in0_im_1[0][13], MMul_dot_product5_in0_im_1[0]};
  assign MMul_dot_product5_add_cast_1[0] = {{4{MMul_dot_product5_add_cast[0][14]}}, MMul_dot_product5_add_cast[0]};
  assign MMul_dot_product5_in0_re_1[0] = (alpha_re_9[0] == 1'b1 ? alpha_im_13[0] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[0] = {MMul_dot_product5_in0_re_1[0][13], MMul_dot_product5_in0_re_1[0]};
  assign MMul_dot_product5_add_cast_3[0] = {{4{MMul_dot_product5_add_cast_2[0][14]}}, MMul_dot_product5_add_cast_2[0]};
  assign MMul_dot_product_out_im_1[0] = MMul_dot_product5_add_cast_1[0] + MMul_dot_product5_add_cast_3[0];
  assign MMul_dot_product5_in0_re[1] = (alpha_re_9[1] == 1'b1 ? alpha_re_13[1] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[1] = {MMul_dot_product5_in0_re[1][13], MMul_dot_product5_in0_re[1]};
  assign MMul_dot_product5_sub_cast_1[1] = {{4{MMul_dot_product5_sub_cast[1][14]}}, MMul_dot_product5_sub_cast[1]};
  assign MMul_dot_product5_in0_im[1] = (alpha_im_9[1] == 1'b1 ? alpha_im_13[1] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[1] = {MMul_dot_product5_in0_im[1][13], MMul_dot_product5_in0_im[1]};
  assign MMul_dot_product5_sub_cast_3[1] = {{4{MMul_dot_product5_sub_cast_2[1][14]}}, MMul_dot_product5_sub_cast_2[1]};
  assign MMul_dot_product_out_re_1[1] = MMul_dot_product5_sub_cast_1[1] - MMul_dot_product5_sub_cast_3[1];
  assign MMul_dot_product5_in0_im_1[1] = (alpha_im_9[1] == 1'b1 ? alpha_re_13[1] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[1] = {MMul_dot_product5_in0_im_1[1][13], MMul_dot_product5_in0_im_1[1]};
  assign MMul_dot_product5_add_cast_1[1] = {{4{MMul_dot_product5_add_cast[1][14]}}, MMul_dot_product5_add_cast[1]};
  assign MMul_dot_product5_in0_re_1[1] = (alpha_re_9[1] == 1'b1 ? alpha_im_13[1] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[1] = {MMul_dot_product5_in0_re_1[1][13], MMul_dot_product5_in0_re_1[1]};
  assign MMul_dot_product5_add_cast_3[1] = {{4{MMul_dot_product5_add_cast_2[1][14]}}, MMul_dot_product5_add_cast_2[1]};
  assign MMul_dot_product_out_im_1[1] = MMul_dot_product5_add_cast_1[1] + MMul_dot_product5_add_cast_3[1];
  assign MMul_dot_product5_in0_re[2] = (alpha_re_9[2] == 1'b1 ? alpha_re_13[2] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[2] = {MMul_dot_product5_in0_re[2][13], MMul_dot_product5_in0_re[2]};
  assign MMul_dot_product5_sub_cast_1[2] = {{4{MMul_dot_product5_sub_cast[2][14]}}, MMul_dot_product5_sub_cast[2]};
  assign MMul_dot_product5_in0_im[2] = (alpha_im_9[2] == 1'b1 ? alpha_im_13[2] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[2] = {MMul_dot_product5_in0_im[2][13], MMul_dot_product5_in0_im[2]};
  assign MMul_dot_product5_sub_cast_3[2] = {{4{MMul_dot_product5_sub_cast_2[2][14]}}, MMul_dot_product5_sub_cast_2[2]};
  assign MMul_dot_product_out_re_1[2] = MMul_dot_product5_sub_cast_1[2] - MMul_dot_product5_sub_cast_3[2];
  assign MMul_dot_product5_in0_im_1[2] = (alpha_im_9[2] == 1'b1 ? alpha_re_13[2] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[2] = {MMul_dot_product5_in0_im_1[2][13], MMul_dot_product5_in0_im_1[2]};
  assign MMul_dot_product5_add_cast_1[2] = {{4{MMul_dot_product5_add_cast[2][14]}}, MMul_dot_product5_add_cast[2]};
  assign MMul_dot_product5_in0_re_1[2] = (alpha_re_9[2] == 1'b1 ? alpha_im_13[2] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[2] = {MMul_dot_product5_in0_re_1[2][13], MMul_dot_product5_in0_re_1[2]};
  assign MMul_dot_product5_add_cast_3[2] = {{4{MMul_dot_product5_add_cast_2[2][14]}}, MMul_dot_product5_add_cast_2[2]};
  assign MMul_dot_product_out_im_1[2] = MMul_dot_product5_add_cast_1[2] + MMul_dot_product5_add_cast_3[2];
  assign MMul_dot_product5_in0_re[3] = (alpha_re_9[3] == 1'b1 ? alpha_re_13[3] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[3] = {MMul_dot_product5_in0_re[3][13], MMul_dot_product5_in0_re[3]};
  assign MMul_dot_product5_sub_cast_1[3] = {{4{MMul_dot_product5_sub_cast[3][14]}}, MMul_dot_product5_sub_cast[3]};
  assign MMul_dot_product5_in0_im[3] = (alpha_im_9[3] == 1'b1 ? alpha_im_13[3] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[3] = {MMul_dot_product5_in0_im[3][13], MMul_dot_product5_in0_im[3]};
  assign MMul_dot_product5_sub_cast_3[3] = {{4{MMul_dot_product5_sub_cast_2[3][14]}}, MMul_dot_product5_sub_cast_2[3]};
  assign MMul_dot_product_out_re_1[3] = MMul_dot_product5_sub_cast_1[3] - MMul_dot_product5_sub_cast_3[3];
  assign MMul_dot_product5_in0_im_1[3] = (alpha_im_9[3] == 1'b1 ? alpha_re_13[3] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[3] = {MMul_dot_product5_in0_im_1[3][13], MMul_dot_product5_in0_im_1[3]};
  assign MMul_dot_product5_add_cast_1[3] = {{4{MMul_dot_product5_add_cast[3][14]}}, MMul_dot_product5_add_cast[3]};
  assign MMul_dot_product5_in0_re_1[3] = (alpha_re_9[3] == 1'b1 ? alpha_im_13[3] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[3] = {MMul_dot_product5_in0_re_1[3][13], MMul_dot_product5_in0_re_1[3]};
  assign MMul_dot_product5_add_cast_3[3] = {{4{MMul_dot_product5_add_cast_2[3][14]}}, MMul_dot_product5_add_cast_2[3]};
  assign MMul_dot_product_out_im_1[3] = MMul_dot_product5_add_cast_1[3] + MMul_dot_product5_add_cast_3[3];
  assign MMul_dot_product5_in0_re[4] = (alpha_re_9[4] == 1'b1 ? alpha_re_13[4] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[4] = {MMul_dot_product5_in0_re[4][13], MMul_dot_product5_in0_re[4]};
  assign MMul_dot_product5_sub_cast_1[4] = {{4{MMul_dot_product5_sub_cast[4][14]}}, MMul_dot_product5_sub_cast[4]};
  assign MMul_dot_product5_in0_im[4] = (alpha_im_9[4] == 1'b1 ? alpha_im_13[4] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[4] = {MMul_dot_product5_in0_im[4][13], MMul_dot_product5_in0_im[4]};
  assign MMul_dot_product5_sub_cast_3[4] = {{4{MMul_dot_product5_sub_cast_2[4][14]}}, MMul_dot_product5_sub_cast_2[4]};
  assign MMul_dot_product_out_re_1[4] = MMul_dot_product5_sub_cast_1[4] - MMul_dot_product5_sub_cast_3[4];
  assign MMul_dot_product5_in0_im_1[4] = (alpha_im_9[4] == 1'b1 ? alpha_re_13[4] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[4] = {MMul_dot_product5_in0_im_1[4][13], MMul_dot_product5_in0_im_1[4]};
  assign MMul_dot_product5_add_cast_1[4] = {{4{MMul_dot_product5_add_cast[4][14]}}, MMul_dot_product5_add_cast[4]};
  assign MMul_dot_product5_in0_re_1[4] = (alpha_re_9[4] == 1'b1 ? alpha_im_13[4] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[4] = {MMul_dot_product5_in0_re_1[4][13], MMul_dot_product5_in0_re_1[4]};
  assign MMul_dot_product5_add_cast_3[4] = {{4{MMul_dot_product5_add_cast_2[4][14]}}, MMul_dot_product5_add_cast_2[4]};
  assign MMul_dot_product_out_im_1[4] = MMul_dot_product5_add_cast_1[4] + MMul_dot_product5_add_cast_3[4];
  assign MMul_dot_product5_in0_re[5] = (alpha_re_9[5] == 1'b1 ? alpha_re_13[5] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[5] = {MMul_dot_product5_in0_re[5][13], MMul_dot_product5_in0_re[5]};
  assign MMul_dot_product5_sub_cast_1[5] = {{4{MMul_dot_product5_sub_cast[5][14]}}, MMul_dot_product5_sub_cast[5]};
  assign MMul_dot_product5_in0_im[5] = (alpha_im_9[5] == 1'b1 ? alpha_im_13[5] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[5] = {MMul_dot_product5_in0_im[5][13], MMul_dot_product5_in0_im[5]};
  assign MMul_dot_product5_sub_cast_3[5] = {{4{MMul_dot_product5_sub_cast_2[5][14]}}, MMul_dot_product5_sub_cast_2[5]};
  assign MMul_dot_product_out_re_1[5] = MMul_dot_product5_sub_cast_1[5] - MMul_dot_product5_sub_cast_3[5];
  assign MMul_dot_product5_in0_im_1[5] = (alpha_im_9[5] == 1'b1 ? alpha_re_13[5] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[5] = {MMul_dot_product5_in0_im_1[5][13], MMul_dot_product5_in0_im_1[5]};
  assign MMul_dot_product5_add_cast_1[5] = {{4{MMul_dot_product5_add_cast[5][14]}}, MMul_dot_product5_add_cast[5]};
  assign MMul_dot_product5_in0_re_1[5] = (alpha_re_9[5] == 1'b1 ? alpha_im_13[5] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[5] = {MMul_dot_product5_in0_re_1[5][13], MMul_dot_product5_in0_re_1[5]};
  assign MMul_dot_product5_add_cast_3[5] = {{4{MMul_dot_product5_add_cast_2[5][14]}}, MMul_dot_product5_add_cast_2[5]};
  assign MMul_dot_product_out_im_1[5] = MMul_dot_product5_add_cast_1[5] + MMul_dot_product5_add_cast_3[5];
  assign MMul_dot_product5_in0_re[6] = (alpha_re_9[6] == 1'b1 ? alpha_re_13[6] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[6] = {MMul_dot_product5_in0_re[6][13], MMul_dot_product5_in0_re[6]};
  assign MMul_dot_product5_sub_cast_1[6] = {{4{MMul_dot_product5_sub_cast[6][14]}}, MMul_dot_product5_sub_cast[6]};
  assign MMul_dot_product5_in0_im[6] = (alpha_im_9[6] == 1'b1 ? alpha_im_13[6] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[6] = {MMul_dot_product5_in0_im[6][13], MMul_dot_product5_in0_im[6]};
  assign MMul_dot_product5_sub_cast_3[6] = {{4{MMul_dot_product5_sub_cast_2[6][14]}}, MMul_dot_product5_sub_cast_2[6]};
  assign MMul_dot_product_out_re_1[6] = MMul_dot_product5_sub_cast_1[6] - MMul_dot_product5_sub_cast_3[6];
  assign MMul_dot_product5_in0_im_1[6] = (alpha_im_9[6] == 1'b1 ? alpha_re_13[6] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[6] = {MMul_dot_product5_in0_im_1[6][13], MMul_dot_product5_in0_im_1[6]};
  assign MMul_dot_product5_add_cast_1[6] = {{4{MMul_dot_product5_add_cast[6][14]}}, MMul_dot_product5_add_cast[6]};
  assign MMul_dot_product5_in0_re_1[6] = (alpha_re_9[6] == 1'b1 ? alpha_im_13[6] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[6] = {MMul_dot_product5_in0_re_1[6][13], MMul_dot_product5_in0_re_1[6]};
  assign MMul_dot_product5_add_cast_3[6] = {{4{MMul_dot_product5_add_cast_2[6][14]}}, MMul_dot_product5_add_cast_2[6]};
  assign MMul_dot_product_out_im_1[6] = MMul_dot_product5_add_cast_1[6] + MMul_dot_product5_add_cast_3[6];
  assign MMul_dot_product5_in0_re[7] = (alpha_re_9[7] == 1'b1 ? alpha_re_13[7] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[7] = {MMul_dot_product5_in0_re[7][13], MMul_dot_product5_in0_re[7]};
  assign MMul_dot_product5_sub_cast_1[7] = {{4{MMul_dot_product5_sub_cast[7][14]}}, MMul_dot_product5_sub_cast[7]};
  assign MMul_dot_product5_in0_im[7] = (alpha_im_9[7] == 1'b1 ? alpha_im_13[7] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[7] = {MMul_dot_product5_in0_im[7][13], MMul_dot_product5_in0_im[7]};
  assign MMul_dot_product5_sub_cast_3[7] = {{4{MMul_dot_product5_sub_cast_2[7][14]}}, MMul_dot_product5_sub_cast_2[7]};
  assign MMul_dot_product_out_re_1[7] = MMul_dot_product5_sub_cast_1[7] - MMul_dot_product5_sub_cast_3[7];
  assign MMul_dot_product5_in0_im_1[7] = (alpha_im_9[7] == 1'b1 ? alpha_re_13[7] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[7] = {MMul_dot_product5_in0_im_1[7][13], MMul_dot_product5_in0_im_1[7]};
  assign MMul_dot_product5_add_cast_1[7] = {{4{MMul_dot_product5_add_cast[7][14]}}, MMul_dot_product5_add_cast[7]};
  assign MMul_dot_product5_in0_re_1[7] = (alpha_re_9[7] == 1'b1 ? alpha_im_13[7] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[7] = {MMul_dot_product5_in0_re_1[7][13], MMul_dot_product5_in0_re_1[7]};
  assign MMul_dot_product5_add_cast_3[7] = {{4{MMul_dot_product5_add_cast_2[7][14]}}, MMul_dot_product5_add_cast_2[7]};
  assign MMul_dot_product_out_im_1[7] = MMul_dot_product5_add_cast_1[7] + MMul_dot_product5_add_cast_3[7];
  assign MMul_dot_product5_in0_re[8] = (alpha_re_9[8] == 1'b1 ? alpha_re_13[8] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[8] = {MMul_dot_product5_in0_re[8][13], MMul_dot_product5_in0_re[8]};
  assign MMul_dot_product5_sub_cast_1[8] = {{4{MMul_dot_product5_sub_cast[8][14]}}, MMul_dot_product5_sub_cast[8]};
  assign MMul_dot_product5_in0_im[8] = (alpha_im_9[8] == 1'b1 ? alpha_im_13[8] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[8] = {MMul_dot_product5_in0_im[8][13], MMul_dot_product5_in0_im[8]};
  assign MMul_dot_product5_sub_cast_3[8] = {{4{MMul_dot_product5_sub_cast_2[8][14]}}, MMul_dot_product5_sub_cast_2[8]};
  assign MMul_dot_product_out_re_1[8] = MMul_dot_product5_sub_cast_1[8] - MMul_dot_product5_sub_cast_3[8];
  assign MMul_dot_product5_in0_im_1[8] = (alpha_im_9[8] == 1'b1 ? alpha_re_13[8] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[8] = {MMul_dot_product5_in0_im_1[8][13], MMul_dot_product5_in0_im_1[8]};
  assign MMul_dot_product5_add_cast_1[8] = {{4{MMul_dot_product5_add_cast[8][14]}}, MMul_dot_product5_add_cast[8]};
  assign MMul_dot_product5_in0_re_1[8] = (alpha_re_9[8] == 1'b1 ? alpha_im_13[8] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[8] = {MMul_dot_product5_in0_re_1[8][13], MMul_dot_product5_in0_re_1[8]};
  assign MMul_dot_product5_add_cast_3[8] = {{4{MMul_dot_product5_add_cast_2[8][14]}}, MMul_dot_product5_add_cast_2[8]};
  assign MMul_dot_product_out_im_1[8] = MMul_dot_product5_add_cast_1[8] + MMul_dot_product5_add_cast_3[8];
  assign MMul_dot_product5_in0_re[9] = (alpha_re_9[9] == 1'b1 ? alpha_re_13[9] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[9] = {MMul_dot_product5_in0_re[9][13], MMul_dot_product5_in0_re[9]};
  assign MMul_dot_product5_sub_cast_1[9] = {{4{MMul_dot_product5_sub_cast[9][14]}}, MMul_dot_product5_sub_cast[9]};
  assign MMul_dot_product5_in0_im[9] = (alpha_im_9[9] == 1'b1 ? alpha_im_13[9] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[9] = {MMul_dot_product5_in0_im[9][13], MMul_dot_product5_in0_im[9]};
  assign MMul_dot_product5_sub_cast_3[9] = {{4{MMul_dot_product5_sub_cast_2[9][14]}}, MMul_dot_product5_sub_cast_2[9]};
  assign MMul_dot_product_out_re_1[9] = MMul_dot_product5_sub_cast_1[9] - MMul_dot_product5_sub_cast_3[9];
  assign MMul_dot_product5_in0_im_1[9] = (alpha_im_9[9] == 1'b1 ? alpha_re_13[9] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[9] = {MMul_dot_product5_in0_im_1[9][13], MMul_dot_product5_in0_im_1[9]};
  assign MMul_dot_product5_add_cast_1[9] = {{4{MMul_dot_product5_add_cast[9][14]}}, MMul_dot_product5_add_cast[9]};
  assign MMul_dot_product5_in0_re_1[9] = (alpha_re_9[9] == 1'b1 ? alpha_im_13[9] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[9] = {MMul_dot_product5_in0_re_1[9][13], MMul_dot_product5_in0_re_1[9]};
  assign MMul_dot_product5_add_cast_3[9] = {{4{MMul_dot_product5_add_cast_2[9][14]}}, MMul_dot_product5_add_cast_2[9]};
  assign MMul_dot_product_out_im_1[9] = MMul_dot_product5_add_cast_1[9] + MMul_dot_product5_add_cast_3[9];
  assign MMul_dot_product5_in0_re[10] = (alpha_re_9[10] == 1'b1 ? alpha_re_13[10] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[10] = {MMul_dot_product5_in0_re[10][13], MMul_dot_product5_in0_re[10]};
  assign MMul_dot_product5_sub_cast_1[10] = {{4{MMul_dot_product5_sub_cast[10][14]}}, MMul_dot_product5_sub_cast[10]};
  assign MMul_dot_product5_in0_im[10] = (alpha_im_9[10] == 1'b1 ? alpha_im_13[10] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[10] = {MMul_dot_product5_in0_im[10][13], MMul_dot_product5_in0_im[10]};
  assign MMul_dot_product5_sub_cast_3[10] = {{4{MMul_dot_product5_sub_cast_2[10][14]}}, MMul_dot_product5_sub_cast_2[10]};
  assign MMul_dot_product_out_re_1[10] = MMul_dot_product5_sub_cast_1[10] - MMul_dot_product5_sub_cast_3[10];
  assign MMul_dot_product5_in0_im_1[10] = (alpha_im_9[10] == 1'b1 ? alpha_re_13[10] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[10] = {MMul_dot_product5_in0_im_1[10][13], MMul_dot_product5_in0_im_1[10]};
  assign MMul_dot_product5_add_cast_1[10] = {{4{MMul_dot_product5_add_cast[10][14]}}, MMul_dot_product5_add_cast[10]};
  assign MMul_dot_product5_in0_re_1[10] = (alpha_re_9[10] == 1'b1 ? alpha_im_13[10] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[10] = {MMul_dot_product5_in0_re_1[10][13], MMul_dot_product5_in0_re_1[10]};
  assign MMul_dot_product5_add_cast_3[10] = {{4{MMul_dot_product5_add_cast_2[10][14]}}, MMul_dot_product5_add_cast_2[10]};
  assign MMul_dot_product_out_im_1[10] = MMul_dot_product5_add_cast_1[10] + MMul_dot_product5_add_cast_3[10];
  assign MMul_dot_product5_in0_re[11] = (alpha_re_9[11] == 1'b1 ? alpha_re_13[11] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[11] = {MMul_dot_product5_in0_re[11][13], MMul_dot_product5_in0_re[11]};
  assign MMul_dot_product5_sub_cast_1[11] = {{4{MMul_dot_product5_sub_cast[11][14]}}, MMul_dot_product5_sub_cast[11]};
  assign MMul_dot_product5_in0_im[11] = (alpha_im_9[11] == 1'b1 ? alpha_im_13[11] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[11] = {MMul_dot_product5_in0_im[11][13], MMul_dot_product5_in0_im[11]};
  assign MMul_dot_product5_sub_cast_3[11] = {{4{MMul_dot_product5_sub_cast_2[11][14]}}, MMul_dot_product5_sub_cast_2[11]};
  assign MMul_dot_product_out_re_1[11] = MMul_dot_product5_sub_cast_1[11] - MMul_dot_product5_sub_cast_3[11];
  assign MMul_dot_product5_in0_im_1[11] = (alpha_im_9[11] == 1'b1 ? alpha_re_13[11] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[11] = {MMul_dot_product5_in0_im_1[11][13], MMul_dot_product5_in0_im_1[11]};
  assign MMul_dot_product5_add_cast_1[11] = {{4{MMul_dot_product5_add_cast[11][14]}}, MMul_dot_product5_add_cast[11]};
  assign MMul_dot_product5_in0_re_1[11] = (alpha_re_9[11] == 1'b1 ? alpha_im_13[11] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[11] = {MMul_dot_product5_in0_re_1[11][13], MMul_dot_product5_in0_re_1[11]};
  assign MMul_dot_product5_add_cast_3[11] = {{4{MMul_dot_product5_add_cast_2[11][14]}}, MMul_dot_product5_add_cast_2[11]};
  assign MMul_dot_product_out_im_1[11] = MMul_dot_product5_add_cast_1[11] + MMul_dot_product5_add_cast_3[11];
  assign MMul_dot_product5_in0_re[12] = (alpha_re_9[12] == 1'b1 ? alpha_re_13[12] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[12] = {MMul_dot_product5_in0_re[12][13], MMul_dot_product5_in0_re[12]};
  assign MMul_dot_product5_sub_cast_1[12] = {{4{MMul_dot_product5_sub_cast[12][14]}}, MMul_dot_product5_sub_cast[12]};
  assign MMul_dot_product5_in0_im[12] = (alpha_im_9[12] == 1'b1 ? alpha_im_13[12] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[12] = {MMul_dot_product5_in0_im[12][13], MMul_dot_product5_in0_im[12]};
  assign MMul_dot_product5_sub_cast_3[12] = {{4{MMul_dot_product5_sub_cast_2[12][14]}}, MMul_dot_product5_sub_cast_2[12]};
  assign MMul_dot_product_out_re_1[12] = MMul_dot_product5_sub_cast_1[12] - MMul_dot_product5_sub_cast_3[12];
  assign MMul_dot_product5_in0_im_1[12] = (alpha_im_9[12] == 1'b1 ? alpha_re_13[12] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[12] = {MMul_dot_product5_in0_im_1[12][13], MMul_dot_product5_in0_im_1[12]};
  assign MMul_dot_product5_add_cast_1[12] = {{4{MMul_dot_product5_add_cast[12][14]}}, MMul_dot_product5_add_cast[12]};
  assign MMul_dot_product5_in0_re_1[12] = (alpha_re_9[12] == 1'b1 ? alpha_im_13[12] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[12] = {MMul_dot_product5_in0_re_1[12][13], MMul_dot_product5_in0_re_1[12]};
  assign MMul_dot_product5_add_cast_3[12] = {{4{MMul_dot_product5_add_cast_2[12][14]}}, MMul_dot_product5_add_cast_2[12]};
  assign MMul_dot_product_out_im_1[12] = MMul_dot_product5_add_cast_1[12] + MMul_dot_product5_add_cast_3[12];
  assign MMul_dot_product5_in0_re[13] = (alpha_re_9[13] == 1'b1 ? alpha_re_13[13] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[13] = {MMul_dot_product5_in0_re[13][13], MMul_dot_product5_in0_re[13]};
  assign MMul_dot_product5_sub_cast_1[13] = {{4{MMul_dot_product5_sub_cast[13][14]}}, MMul_dot_product5_sub_cast[13]};
  assign MMul_dot_product5_in0_im[13] = (alpha_im_9[13] == 1'b1 ? alpha_im_13[13] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[13] = {MMul_dot_product5_in0_im[13][13], MMul_dot_product5_in0_im[13]};
  assign MMul_dot_product5_sub_cast_3[13] = {{4{MMul_dot_product5_sub_cast_2[13][14]}}, MMul_dot_product5_sub_cast_2[13]};
  assign MMul_dot_product_out_re_1[13] = MMul_dot_product5_sub_cast_1[13] - MMul_dot_product5_sub_cast_3[13];
  assign MMul_dot_product5_in0_im_1[13] = (alpha_im_9[13] == 1'b1 ? alpha_re_13[13] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[13] = {MMul_dot_product5_in0_im_1[13][13], MMul_dot_product5_in0_im_1[13]};
  assign MMul_dot_product5_add_cast_1[13] = {{4{MMul_dot_product5_add_cast[13][14]}}, MMul_dot_product5_add_cast[13]};
  assign MMul_dot_product5_in0_re_1[13] = (alpha_re_9[13] == 1'b1 ? alpha_im_13[13] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[13] = {MMul_dot_product5_in0_re_1[13][13], MMul_dot_product5_in0_re_1[13]};
  assign MMul_dot_product5_add_cast_3[13] = {{4{MMul_dot_product5_add_cast_2[13][14]}}, MMul_dot_product5_add_cast_2[13]};
  assign MMul_dot_product_out_im_1[13] = MMul_dot_product5_add_cast_1[13] + MMul_dot_product5_add_cast_3[13];
  assign MMul_dot_product5_in0_re[14] = (alpha_re_9[14] == 1'b1 ? alpha_re_13[14] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[14] = {MMul_dot_product5_in0_re[14][13], MMul_dot_product5_in0_re[14]};
  assign MMul_dot_product5_sub_cast_1[14] = {{4{MMul_dot_product5_sub_cast[14][14]}}, MMul_dot_product5_sub_cast[14]};
  assign MMul_dot_product5_in0_im[14] = (alpha_im_9[14] == 1'b1 ? alpha_im_13[14] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[14] = {MMul_dot_product5_in0_im[14][13], MMul_dot_product5_in0_im[14]};
  assign MMul_dot_product5_sub_cast_3[14] = {{4{MMul_dot_product5_sub_cast_2[14][14]}}, MMul_dot_product5_sub_cast_2[14]};
  assign MMul_dot_product_out_re_1[14] = MMul_dot_product5_sub_cast_1[14] - MMul_dot_product5_sub_cast_3[14];
  assign MMul_dot_product5_in0_im_1[14] = (alpha_im_9[14] == 1'b1 ? alpha_re_13[14] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[14] = {MMul_dot_product5_in0_im_1[14][13], MMul_dot_product5_in0_im_1[14]};
  assign MMul_dot_product5_add_cast_1[14] = {{4{MMul_dot_product5_add_cast[14][14]}}, MMul_dot_product5_add_cast[14]};
  assign MMul_dot_product5_in0_re_1[14] = (alpha_re_9[14] == 1'b1 ? alpha_im_13[14] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[14] = {MMul_dot_product5_in0_re_1[14][13], MMul_dot_product5_in0_re_1[14]};
  assign MMul_dot_product5_add_cast_3[14] = {{4{MMul_dot_product5_add_cast_2[14][14]}}, MMul_dot_product5_add_cast_2[14]};
  assign MMul_dot_product_out_im_1[14] = MMul_dot_product5_add_cast_1[14] + MMul_dot_product5_add_cast_3[14];
  assign MMul_dot_product5_in0_re[15] = (alpha_re_9[15] == 1'b1 ? alpha_re_13[15] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[15] = {MMul_dot_product5_in0_re[15][13], MMul_dot_product5_in0_re[15]};
  assign MMul_dot_product5_sub_cast_1[15] = {{4{MMul_dot_product5_sub_cast[15][14]}}, MMul_dot_product5_sub_cast[15]};
  assign MMul_dot_product5_in0_im[15] = (alpha_im_9[15] == 1'b1 ? alpha_im_13[15] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[15] = {MMul_dot_product5_in0_im[15][13], MMul_dot_product5_in0_im[15]};
  assign MMul_dot_product5_sub_cast_3[15] = {{4{MMul_dot_product5_sub_cast_2[15][14]}}, MMul_dot_product5_sub_cast_2[15]};
  assign MMul_dot_product_out_re_1[15] = MMul_dot_product5_sub_cast_1[15] - MMul_dot_product5_sub_cast_3[15];
  assign MMul_dot_product5_in0_im_1[15] = (alpha_im_9[15] == 1'b1 ? alpha_re_13[15] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[15] = {MMul_dot_product5_in0_im_1[15][13], MMul_dot_product5_in0_im_1[15]};
  assign MMul_dot_product5_add_cast_1[15] = {{4{MMul_dot_product5_add_cast[15][14]}}, MMul_dot_product5_add_cast[15]};
  assign MMul_dot_product5_in0_re_1[15] = (alpha_re_9[15] == 1'b1 ? alpha_im_13[15] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[15] = {MMul_dot_product5_in0_re_1[15][13], MMul_dot_product5_in0_re_1[15]};
  assign MMul_dot_product5_add_cast_3[15] = {{4{MMul_dot_product5_add_cast_2[15][14]}}, MMul_dot_product5_add_cast_2[15]};
  assign MMul_dot_product_out_im_1[15] = MMul_dot_product5_add_cast_1[15] + MMul_dot_product5_add_cast_3[15];
  assign MMul_dot_product5_in0_re[16] = (alpha_re_9[16] == 1'b1 ? alpha_re_13[16] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[16] = {MMul_dot_product5_in0_re[16][13], MMul_dot_product5_in0_re[16]};
  assign MMul_dot_product5_sub_cast_1[16] = {{4{MMul_dot_product5_sub_cast[16][14]}}, MMul_dot_product5_sub_cast[16]};
  assign MMul_dot_product5_in0_im[16] = (alpha_im_9[16] == 1'b1 ? alpha_im_13[16] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[16] = {MMul_dot_product5_in0_im[16][13], MMul_dot_product5_in0_im[16]};
  assign MMul_dot_product5_sub_cast_3[16] = {{4{MMul_dot_product5_sub_cast_2[16][14]}}, MMul_dot_product5_sub_cast_2[16]};
  assign MMul_dot_product_out_re_1[16] = MMul_dot_product5_sub_cast_1[16] - MMul_dot_product5_sub_cast_3[16];
  assign MMul_dot_product5_in0_im_1[16] = (alpha_im_9[16] == 1'b1 ? alpha_re_13[16] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[16] = {MMul_dot_product5_in0_im_1[16][13], MMul_dot_product5_in0_im_1[16]};
  assign MMul_dot_product5_add_cast_1[16] = {{4{MMul_dot_product5_add_cast[16][14]}}, MMul_dot_product5_add_cast[16]};
  assign MMul_dot_product5_in0_re_1[16] = (alpha_re_9[16] == 1'b1 ? alpha_im_13[16] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[16] = {MMul_dot_product5_in0_re_1[16][13], MMul_dot_product5_in0_re_1[16]};
  assign MMul_dot_product5_add_cast_3[16] = {{4{MMul_dot_product5_add_cast_2[16][14]}}, MMul_dot_product5_add_cast_2[16]};
  assign MMul_dot_product_out_im_1[16] = MMul_dot_product5_add_cast_1[16] + MMul_dot_product5_add_cast_3[16];
  assign MMul_dot_product5_in0_re[17] = (alpha_re_9[17] == 1'b1 ? alpha_re_13[17] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[17] = {MMul_dot_product5_in0_re[17][13], MMul_dot_product5_in0_re[17]};
  assign MMul_dot_product5_sub_cast_1[17] = {{4{MMul_dot_product5_sub_cast[17][14]}}, MMul_dot_product5_sub_cast[17]};
  assign MMul_dot_product5_in0_im[17] = (alpha_im_9[17] == 1'b1 ? alpha_im_13[17] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[17] = {MMul_dot_product5_in0_im[17][13], MMul_dot_product5_in0_im[17]};
  assign MMul_dot_product5_sub_cast_3[17] = {{4{MMul_dot_product5_sub_cast_2[17][14]}}, MMul_dot_product5_sub_cast_2[17]};
  assign MMul_dot_product_out_re_1[17] = MMul_dot_product5_sub_cast_1[17] - MMul_dot_product5_sub_cast_3[17];
  assign MMul_dot_product5_in0_im_1[17] = (alpha_im_9[17] == 1'b1 ? alpha_re_13[17] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[17] = {MMul_dot_product5_in0_im_1[17][13], MMul_dot_product5_in0_im_1[17]};
  assign MMul_dot_product5_add_cast_1[17] = {{4{MMul_dot_product5_add_cast[17][14]}}, MMul_dot_product5_add_cast[17]};
  assign MMul_dot_product5_in0_re_1[17] = (alpha_re_9[17] == 1'b1 ? alpha_im_13[17] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[17] = {MMul_dot_product5_in0_re_1[17][13], MMul_dot_product5_in0_re_1[17]};
  assign MMul_dot_product5_add_cast_3[17] = {{4{MMul_dot_product5_add_cast_2[17][14]}}, MMul_dot_product5_add_cast_2[17]};
  assign MMul_dot_product_out_im_1[17] = MMul_dot_product5_add_cast_1[17] + MMul_dot_product5_add_cast_3[17];
  assign MMul_dot_product5_in0_re[18] = (alpha_re_9[18] == 1'b1 ? alpha_re_13[18] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[18] = {MMul_dot_product5_in0_re[18][13], MMul_dot_product5_in0_re[18]};
  assign MMul_dot_product5_sub_cast_1[18] = {{4{MMul_dot_product5_sub_cast[18][14]}}, MMul_dot_product5_sub_cast[18]};
  assign MMul_dot_product5_in0_im[18] = (alpha_im_9[18] == 1'b1 ? alpha_im_13[18] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[18] = {MMul_dot_product5_in0_im[18][13], MMul_dot_product5_in0_im[18]};
  assign MMul_dot_product5_sub_cast_3[18] = {{4{MMul_dot_product5_sub_cast_2[18][14]}}, MMul_dot_product5_sub_cast_2[18]};
  assign MMul_dot_product_out_re_1[18] = MMul_dot_product5_sub_cast_1[18] - MMul_dot_product5_sub_cast_3[18];
  assign MMul_dot_product5_in0_im_1[18] = (alpha_im_9[18] == 1'b1 ? alpha_re_13[18] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[18] = {MMul_dot_product5_in0_im_1[18][13], MMul_dot_product5_in0_im_1[18]};
  assign MMul_dot_product5_add_cast_1[18] = {{4{MMul_dot_product5_add_cast[18][14]}}, MMul_dot_product5_add_cast[18]};
  assign MMul_dot_product5_in0_re_1[18] = (alpha_re_9[18] == 1'b1 ? alpha_im_13[18] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[18] = {MMul_dot_product5_in0_re_1[18][13], MMul_dot_product5_in0_re_1[18]};
  assign MMul_dot_product5_add_cast_3[18] = {{4{MMul_dot_product5_add_cast_2[18][14]}}, MMul_dot_product5_add_cast_2[18]};
  assign MMul_dot_product_out_im_1[18] = MMul_dot_product5_add_cast_1[18] + MMul_dot_product5_add_cast_3[18];
  assign MMul_dot_product5_in0_re[19] = (alpha_re_9[19] == 1'b1 ? alpha_re_13[19] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[19] = {MMul_dot_product5_in0_re[19][13], MMul_dot_product5_in0_re[19]};
  assign MMul_dot_product5_sub_cast_1[19] = {{4{MMul_dot_product5_sub_cast[19][14]}}, MMul_dot_product5_sub_cast[19]};
  assign MMul_dot_product5_in0_im[19] = (alpha_im_9[19] == 1'b1 ? alpha_im_13[19] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[19] = {MMul_dot_product5_in0_im[19][13], MMul_dot_product5_in0_im[19]};
  assign MMul_dot_product5_sub_cast_3[19] = {{4{MMul_dot_product5_sub_cast_2[19][14]}}, MMul_dot_product5_sub_cast_2[19]};
  assign MMul_dot_product_out_re_1[19] = MMul_dot_product5_sub_cast_1[19] - MMul_dot_product5_sub_cast_3[19];
  assign MMul_dot_product5_in0_im_1[19] = (alpha_im_9[19] == 1'b1 ? alpha_re_13[19] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[19] = {MMul_dot_product5_in0_im_1[19][13], MMul_dot_product5_in0_im_1[19]};
  assign MMul_dot_product5_add_cast_1[19] = {{4{MMul_dot_product5_add_cast[19][14]}}, MMul_dot_product5_add_cast[19]};
  assign MMul_dot_product5_in0_re_1[19] = (alpha_re_9[19] == 1'b1 ? alpha_im_13[19] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[19] = {MMul_dot_product5_in0_re_1[19][13], MMul_dot_product5_in0_re_1[19]};
  assign MMul_dot_product5_add_cast_3[19] = {{4{MMul_dot_product5_add_cast_2[19][14]}}, MMul_dot_product5_add_cast_2[19]};
  assign MMul_dot_product_out_im_1[19] = MMul_dot_product5_add_cast_1[19] + MMul_dot_product5_add_cast_3[19];
  assign MMul_dot_product5_in0_re[20] = (alpha_re_9[20] == 1'b1 ? alpha_re_13[20] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[20] = {MMul_dot_product5_in0_re[20][13], MMul_dot_product5_in0_re[20]};
  assign MMul_dot_product5_sub_cast_1[20] = {{4{MMul_dot_product5_sub_cast[20][14]}}, MMul_dot_product5_sub_cast[20]};
  assign MMul_dot_product5_in0_im[20] = (alpha_im_9[20] == 1'b1 ? alpha_im_13[20] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[20] = {MMul_dot_product5_in0_im[20][13], MMul_dot_product5_in0_im[20]};
  assign MMul_dot_product5_sub_cast_3[20] = {{4{MMul_dot_product5_sub_cast_2[20][14]}}, MMul_dot_product5_sub_cast_2[20]};
  assign MMul_dot_product_out_re_1[20] = MMul_dot_product5_sub_cast_1[20] - MMul_dot_product5_sub_cast_3[20];
  assign MMul_dot_product5_in0_im_1[20] = (alpha_im_9[20] == 1'b1 ? alpha_re_13[20] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[20] = {MMul_dot_product5_in0_im_1[20][13], MMul_dot_product5_in0_im_1[20]};
  assign MMul_dot_product5_add_cast_1[20] = {{4{MMul_dot_product5_add_cast[20][14]}}, MMul_dot_product5_add_cast[20]};
  assign MMul_dot_product5_in0_re_1[20] = (alpha_re_9[20] == 1'b1 ? alpha_im_13[20] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[20] = {MMul_dot_product5_in0_re_1[20][13], MMul_dot_product5_in0_re_1[20]};
  assign MMul_dot_product5_add_cast_3[20] = {{4{MMul_dot_product5_add_cast_2[20][14]}}, MMul_dot_product5_add_cast_2[20]};
  assign MMul_dot_product_out_im_1[20] = MMul_dot_product5_add_cast_1[20] + MMul_dot_product5_add_cast_3[20];
  assign MMul_dot_product5_in0_re[21] = (alpha_re_9[21] == 1'b1 ? alpha_re_13[21] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[21] = {MMul_dot_product5_in0_re[21][13], MMul_dot_product5_in0_re[21]};
  assign MMul_dot_product5_sub_cast_1[21] = {{4{MMul_dot_product5_sub_cast[21][14]}}, MMul_dot_product5_sub_cast[21]};
  assign MMul_dot_product5_in0_im[21] = (alpha_im_9[21] == 1'b1 ? alpha_im_13[21] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[21] = {MMul_dot_product5_in0_im[21][13], MMul_dot_product5_in0_im[21]};
  assign MMul_dot_product5_sub_cast_3[21] = {{4{MMul_dot_product5_sub_cast_2[21][14]}}, MMul_dot_product5_sub_cast_2[21]};
  assign MMul_dot_product_out_re_1[21] = MMul_dot_product5_sub_cast_1[21] - MMul_dot_product5_sub_cast_3[21];
  assign MMul_dot_product5_in0_im_1[21] = (alpha_im_9[21] == 1'b1 ? alpha_re_13[21] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[21] = {MMul_dot_product5_in0_im_1[21][13], MMul_dot_product5_in0_im_1[21]};
  assign MMul_dot_product5_add_cast_1[21] = {{4{MMul_dot_product5_add_cast[21][14]}}, MMul_dot_product5_add_cast[21]};
  assign MMul_dot_product5_in0_re_1[21] = (alpha_re_9[21] == 1'b1 ? alpha_im_13[21] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[21] = {MMul_dot_product5_in0_re_1[21][13], MMul_dot_product5_in0_re_1[21]};
  assign MMul_dot_product5_add_cast_3[21] = {{4{MMul_dot_product5_add_cast_2[21][14]}}, MMul_dot_product5_add_cast_2[21]};
  assign MMul_dot_product_out_im_1[21] = MMul_dot_product5_add_cast_1[21] + MMul_dot_product5_add_cast_3[21];
  assign MMul_dot_product5_in0_re[22] = (alpha_re_9[22] == 1'b1 ? alpha_re_13[22] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[22] = {MMul_dot_product5_in0_re[22][13], MMul_dot_product5_in0_re[22]};
  assign MMul_dot_product5_sub_cast_1[22] = {{4{MMul_dot_product5_sub_cast[22][14]}}, MMul_dot_product5_sub_cast[22]};
  assign MMul_dot_product5_in0_im[22] = (alpha_im_9[22] == 1'b1 ? alpha_im_13[22] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[22] = {MMul_dot_product5_in0_im[22][13], MMul_dot_product5_in0_im[22]};
  assign MMul_dot_product5_sub_cast_3[22] = {{4{MMul_dot_product5_sub_cast_2[22][14]}}, MMul_dot_product5_sub_cast_2[22]};
  assign MMul_dot_product_out_re_1[22] = MMul_dot_product5_sub_cast_1[22] - MMul_dot_product5_sub_cast_3[22];
  assign MMul_dot_product5_in0_im_1[22] = (alpha_im_9[22] == 1'b1 ? alpha_re_13[22] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[22] = {MMul_dot_product5_in0_im_1[22][13], MMul_dot_product5_in0_im_1[22]};
  assign MMul_dot_product5_add_cast_1[22] = {{4{MMul_dot_product5_add_cast[22][14]}}, MMul_dot_product5_add_cast[22]};
  assign MMul_dot_product5_in0_re_1[22] = (alpha_re_9[22] == 1'b1 ? alpha_im_13[22] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[22] = {MMul_dot_product5_in0_re_1[22][13], MMul_dot_product5_in0_re_1[22]};
  assign MMul_dot_product5_add_cast_3[22] = {{4{MMul_dot_product5_add_cast_2[22][14]}}, MMul_dot_product5_add_cast_2[22]};
  assign MMul_dot_product_out_im_1[22] = MMul_dot_product5_add_cast_1[22] + MMul_dot_product5_add_cast_3[22];
  assign MMul_dot_product5_in0_re[23] = (alpha_re_9[23] == 1'b1 ? alpha_re_13[23] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[23] = {MMul_dot_product5_in0_re[23][13], MMul_dot_product5_in0_re[23]};
  assign MMul_dot_product5_sub_cast_1[23] = {{4{MMul_dot_product5_sub_cast[23][14]}}, MMul_dot_product5_sub_cast[23]};
  assign MMul_dot_product5_in0_im[23] = (alpha_im_9[23] == 1'b1 ? alpha_im_13[23] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[23] = {MMul_dot_product5_in0_im[23][13], MMul_dot_product5_in0_im[23]};
  assign MMul_dot_product5_sub_cast_3[23] = {{4{MMul_dot_product5_sub_cast_2[23][14]}}, MMul_dot_product5_sub_cast_2[23]};
  assign MMul_dot_product_out_re_1[23] = MMul_dot_product5_sub_cast_1[23] - MMul_dot_product5_sub_cast_3[23];
  assign MMul_dot_product5_in0_im_1[23] = (alpha_im_9[23] == 1'b1 ? alpha_re_13[23] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[23] = {MMul_dot_product5_in0_im_1[23][13], MMul_dot_product5_in0_im_1[23]};
  assign MMul_dot_product5_add_cast_1[23] = {{4{MMul_dot_product5_add_cast[23][14]}}, MMul_dot_product5_add_cast[23]};
  assign MMul_dot_product5_in0_re_1[23] = (alpha_re_9[23] == 1'b1 ? alpha_im_13[23] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[23] = {MMul_dot_product5_in0_re_1[23][13], MMul_dot_product5_in0_re_1[23]};
  assign MMul_dot_product5_add_cast_3[23] = {{4{MMul_dot_product5_add_cast_2[23][14]}}, MMul_dot_product5_add_cast_2[23]};
  assign MMul_dot_product_out_im_1[23] = MMul_dot_product5_add_cast_1[23] + MMul_dot_product5_add_cast_3[23];
  assign MMul_dot_product5_in0_re[24] = (alpha_re_9[24] == 1'b1 ? alpha_re_13[24] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[24] = {MMul_dot_product5_in0_re[24][13], MMul_dot_product5_in0_re[24]};
  assign MMul_dot_product5_sub_cast_1[24] = {{4{MMul_dot_product5_sub_cast[24][14]}}, MMul_dot_product5_sub_cast[24]};
  assign MMul_dot_product5_in0_im[24] = (alpha_im_9[24] == 1'b1 ? alpha_im_13[24] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[24] = {MMul_dot_product5_in0_im[24][13], MMul_dot_product5_in0_im[24]};
  assign MMul_dot_product5_sub_cast_3[24] = {{4{MMul_dot_product5_sub_cast_2[24][14]}}, MMul_dot_product5_sub_cast_2[24]};
  assign MMul_dot_product_out_re_1[24] = MMul_dot_product5_sub_cast_1[24] - MMul_dot_product5_sub_cast_3[24];
  assign MMul_dot_product5_in0_im_1[24] = (alpha_im_9[24] == 1'b1 ? alpha_re_13[24] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[24] = {MMul_dot_product5_in0_im_1[24][13], MMul_dot_product5_in0_im_1[24]};
  assign MMul_dot_product5_add_cast_1[24] = {{4{MMul_dot_product5_add_cast[24][14]}}, MMul_dot_product5_add_cast[24]};
  assign MMul_dot_product5_in0_re_1[24] = (alpha_re_9[24] == 1'b1 ? alpha_im_13[24] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[24] = {MMul_dot_product5_in0_re_1[24][13], MMul_dot_product5_in0_re_1[24]};
  assign MMul_dot_product5_add_cast_3[24] = {{4{MMul_dot_product5_add_cast_2[24][14]}}, MMul_dot_product5_add_cast_2[24]};
  assign MMul_dot_product_out_im_1[24] = MMul_dot_product5_add_cast_1[24] + MMul_dot_product5_add_cast_3[24];
  assign MMul_dot_product5_in0_re[25] = (alpha_re_9[25] == 1'b1 ? alpha_re_13[25] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[25] = {MMul_dot_product5_in0_re[25][13], MMul_dot_product5_in0_re[25]};
  assign MMul_dot_product5_sub_cast_1[25] = {{4{MMul_dot_product5_sub_cast[25][14]}}, MMul_dot_product5_sub_cast[25]};
  assign MMul_dot_product5_in0_im[25] = (alpha_im_9[25] == 1'b1 ? alpha_im_13[25] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[25] = {MMul_dot_product5_in0_im[25][13], MMul_dot_product5_in0_im[25]};
  assign MMul_dot_product5_sub_cast_3[25] = {{4{MMul_dot_product5_sub_cast_2[25][14]}}, MMul_dot_product5_sub_cast_2[25]};
  assign MMul_dot_product_out_re_1[25] = MMul_dot_product5_sub_cast_1[25] - MMul_dot_product5_sub_cast_3[25];
  assign MMul_dot_product5_in0_im_1[25] = (alpha_im_9[25] == 1'b1 ? alpha_re_13[25] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[25] = {MMul_dot_product5_in0_im_1[25][13], MMul_dot_product5_in0_im_1[25]};
  assign MMul_dot_product5_add_cast_1[25] = {{4{MMul_dot_product5_add_cast[25][14]}}, MMul_dot_product5_add_cast[25]};
  assign MMul_dot_product5_in0_re_1[25] = (alpha_re_9[25] == 1'b1 ? alpha_im_13[25] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[25] = {MMul_dot_product5_in0_re_1[25][13], MMul_dot_product5_in0_re_1[25]};
  assign MMul_dot_product5_add_cast_3[25] = {{4{MMul_dot_product5_add_cast_2[25][14]}}, MMul_dot_product5_add_cast_2[25]};
  assign MMul_dot_product_out_im_1[25] = MMul_dot_product5_add_cast_1[25] + MMul_dot_product5_add_cast_3[25];
  assign MMul_dot_product5_in0_re[26] = (alpha_re_9[26] == 1'b1 ? alpha_re_13[26] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[26] = {MMul_dot_product5_in0_re[26][13], MMul_dot_product5_in0_re[26]};
  assign MMul_dot_product5_sub_cast_1[26] = {{4{MMul_dot_product5_sub_cast[26][14]}}, MMul_dot_product5_sub_cast[26]};
  assign MMul_dot_product5_in0_im[26] = (alpha_im_9[26] == 1'b1 ? alpha_im_13[26] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[26] = {MMul_dot_product5_in0_im[26][13], MMul_dot_product5_in0_im[26]};
  assign MMul_dot_product5_sub_cast_3[26] = {{4{MMul_dot_product5_sub_cast_2[26][14]}}, MMul_dot_product5_sub_cast_2[26]};
  assign MMul_dot_product_out_re_1[26] = MMul_dot_product5_sub_cast_1[26] - MMul_dot_product5_sub_cast_3[26];
  assign MMul_dot_product5_in0_im_1[26] = (alpha_im_9[26] == 1'b1 ? alpha_re_13[26] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[26] = {MMul_dot_product5_in0_im_1[26][13], MMul_dot_product5_in0_im_1[26]};
  assign MMul_dot_product5_add_cast_1[26] = {{4{MMul_dot_product5_add_cast[26][14]}}, MMul_dot_product5_add_cast[26]};
  assign MMul_dot_product5_in0_re_1[26] = (alpha_re_9[26] == 1'b1 ? alpha_im_13[26] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[26] = {MMul_dot_product5_in0_re_1[26][13], MMul_dot_product5_in0_re_1[26]};
  assign MMul_dot_product5_add_cast_3[26] = {{4{MMul_dot_product5_add_cast_2[26][14]}}, MMul_dot_product5_add_cast_2[26]};
  assign MMul_dot_product_out_im_1[26] = MMul_dot_product5_add_cast_1[26] + MMul_dot_product5_add_cast_3[26];
  assign MMul_dot_product5_in0_re[27] = (alpha_re_9[27] == 1'b1 ? alpha_re_13[27] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[27] = {MMul_dot_product5_in0_re[27][13], MMul_dot_product5_in0_re[27]};
  assign MMul_dot_product5_sub_cast_1[27] = {{4{MMul_dot_product5_sub_cast[27][14]}}, MMul_dot_product5_sub_cast[27]};
  assign MMul_dot_product5_in0_im[27] = (alpha_im_9[27] == 1'b1 ? alpha_im_13[27] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[27] = {MMul_dot_product5_in0_im[27][13], MMul_dot_product5_in0_im[27]};
  assign MMul_dot_product5_sub_cast_3[27] = {{4{MMul_dot_product5_sub_cast_2[27][14]}}, MMul_dot_product5_sub_cast_2[27]};
  assign MMul_dot_product_out_re_1[27] = MMul_dot_product5_sub_cast_1[27] - MMul_dot_product5_sub_cast_3[27];
  assign MMul_dot_product5_in0_im_1[27] = (alpha_im_9[27] == 1'b1 ? alpha_re_13[27] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[27] = {MMul_dot_product5_in0_im_1[27][13], MMul_dot_product5_in0_im_1[27]};
  assign MMul_dot_product5_add_cast_1[27] = {{4{MMul_dot_product5_add_cast[27][14]}}, MMul_dot_product5_add_cast[27]};
  assign MMul_dot_product5_in0_re_1[27] = (alpha_re_9[27] == 1'b1 ? alpha_im_13[27] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[27] = {MMul_dot_product5_in0_re_1[27][13], MMul_dot_product5_in0_re_1[27]};
  assign MMul_dot_product5_add_cast_3[27] = {{4{MMul_dot_product5_add_cast_2[27][14]}}, MMul_dot_product5_add_cast_2[27]};
  assign MMul_dot_product_out_im_1[27] = MMul_dot_product5_add_cast_1[27] + MMul_dot_product5_add_cast_3[27];
  assign MMul_dot_product5_in0_re[28] = (alpha_re_9[28] == 1'b1 ? alpha_re_13[28] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[28] = {MMul_dot_product5_in0_re[28][13], MMul_dot_product5_in0_re[28]};
  assign MMul_dot_product5_sub_cast_1[28] = {{4{MMul_dot_product5_sub_cast[28][14]}}, MMul_dot_product5_sub_cast[28]};
  assign MMul_dot_product5_in0_im[28] = (alpha_im_9[28] == 1'b1 ? alpha_im_13[28] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[28] = {MMul_dot_product5_in0_im[28][13], MMul_dot_product5_in0_im[28]};
  assign MMul_dot_product5_sub_cast_3[28] = {{4{MMul_dot_product5_sub_cast_2[28][14]}}, MMul_dot_product5_sub_cast_2[28]};
  assign MMul_dot_product_out_re_1[28] = MMul_dot_product5_sub_cast_1[28] - MMul_dot_product5_sub_cast_3[28];
  assign MMul_dot_product5_in0_im_1[28] = (alpha_im_9[28] == 1'b1 ? alpha_re_13[28] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[28] = {MMul_dot_product5_in0_im_1[28][13], MMul_dot_product5_in0_im_1[28]};
  assign MMul_dot_product5_add_cast_1[28] = {{4{MMul_dot_product5_add_cast[28][14]}}, MMul_dot_product5_add_cast[28]};
  assign MMul_dot_product5_in0_re_1[28] = (alpha_re_9[28] == 1'b1 ? alpha_im_13[28] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[28] = {MMul_dot_product5_in0_re_1[28][13], MMul_dot_product5_in0_re_1[28]};
  assign MMul_dot_product5_add_cast_3[28] = {{4{MMul_dot_product5_add_cast_2[28][14]}}, MMul_dot_product5_add_cast_2[28]};
  assign MMul_dot_product_out_im_1[28] = MMul_dot_product5_add_cast_1[28] + MMul_dot_product5_add_cast_3[28];
  assign MMul_dot_product5_in0_re[29] = (alpha_re_9[29] == 1'b1 ? alpha_re_13[29] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[29] = {MMul_dot_product5_in0_re[29][13], MMul_dot_product5_in0_re[29]};
  assign MMul_dot_product5_sub_cast_1[29] = {{4{MMul_dot_product5_sub_cast[29][14]}}, MMul_dot_product5_sub_cast[29]};
  assign MMul_dot_product5_in0_im[29] = (alpha_im_9[29] == 1'b1 ? alpha_im_13[29] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[29] = {MMul_dot_product5_in0_im[29][13], MMul_dot_product5_in0_im[29]};
  assign MMul_dot_product5_sub_cast_3[29] = {{4{MMul_dot_product5_sub_cast_2[29][14]}}, MMul_dot_product5_sub_cast_2[29]};
  assign MMul_dot_product_out_re_1[29] = MMul_dot_product5_sub_cast_1[29] - MMul_dot_product5_sub_cast_3[29];
  assign MMul_dot_product5_in0_im_1[29] = (alpha_im_9[29] == 1'b1 ? alpha_re_13[29] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[29] = {MMul_dot_product5_in0_im_1[29][13], MMul_dot_product5_in0_im_1[29]};
  assign MMul_dot_product5_add_cast_1[29] = {{4{MMul_dot_product5_add_cast[29][14]}}, MMul_dot_product5_add_cast[29]};
  assign MMul_dot_product5_in0_re_1[29] = (alpha_re_9[29] == 1'b1 ? alpha_im_13[29] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[29] = {MMul_dot_product5_in0_re_1[29][13], MMul_dot_product5_in0_re_1[29]};
  assign MMul_dot_product5_add_cast_3[29] = {{4{MMul_dot_product5_add_cast_2[29][14]}}, MMul_dot_product5_add_cast_2[29]};
  assign MMul_dot_product_out_im_1[29] = MMul_dot_product5_add_cast_1[29] + MMul_dot_product5_add_cast_3[29];
  assign MMul_dot_product5_in0_re[30] = (alpha_re_9[30] == 1'b1 ? alpha_re_13[30] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[30] = {MMul_dot_product5_in0_re[30][13], MMul_dot_product5_in0_re[30]};
  assign MMul_dot_product5_sub_cast_1[30] = {{4{MMul_dot_product5_sub_cast[30][14]}}, MMul_dot_product5_sub_cast[30]};
  assign MMul_dot_product5_in0_im[30] = (alpha_im_9[30] == 1'b1 ? alpha_im_13[30] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[30] = {MMul_dot_product5_in0_im[30][13], MMul_dot_product5_in0_im[30]};
  assign MMul_dot_product5_sub_cast_3[30] = {{4{MMul_dot_product5_sub_cast_2[30][14]}}, MMul_dot_product5_sub_cast_2[30]};
  assign MMul_dot_product_out_re_1[30] = MMul_dot_product5_sub_cast_1[30] - MMul_dot_product5_sub_cast_3[30];
  assign MMul_dot_product5_in0_im_1[30] = (alpha_im_9[30] == 1'b1 ? alpha_re_13[30] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[30] = {MMul_dot_product5_in0_im_1[30][13], MMul_dot_product5_in0_im_1[30]};
  assign MMul_dot_product5_add_cast_1[30] = {{4{MMul_dot_product5_add_cast[30][14]}}, MMul_dot_product5_add_cast[30]};
  assign MMul_dot_product5_in0_re_1[30] = (alpha_re_9[30] == 1'b1 ? alpha_im_13[30] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[30] = {MMul_dot_product5_in0_re_1[30][13], MMul_dot_product5_in0_re_1[30]};
  assign MMul_dot_product5_add_cast_3[30] = {{4{MMul_dot_product5_add_cast_2[30][14]}}, MMul_dot_product5_add_cast_2[30]};
  assign MMul_dot_product_out_im_1[30] = MMul_dot_product5_add_cast_1[30] + MMul_dot_product5_add_cast_3[30];
  assign MMul_dot_product5_in0_re[31] = (alpha_re_9[31] == 1'b1 ? alpha_re_13[31] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[31] = {MMul_dot_product5_in0_re[31][13], MMul_dot_product5_in0_re[31]};
  assign MMul_dot_product5_sub_cast_1[31] = {{4{MMul_dot_product5_sub_cast[31][14]}}, MMul_dot_product5_sub_cast[31]};
  assign MMul_dot_product5_in0_im[31] = (alpha_im_9[31] == 1'b1 ? alpha_im_13[31] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[31] = {MMul_dot_product5_in0_im[31][13], MMul_dot_product5_in0_im[31]};
  assign MMul_dot_product5_sub_cast_3[31] = {{4{MMul_dot_product5_sub_cast_2[31][14]}}, MMul_dot_product5_sub_cast_2[31]};
  assign MMul_dot_product_out_re_1[31] = MMul_dot_product5_sub_cast_1[31] - MMul_dot_product5_sub_cast_3[31];
  assign MMul_dot_product5_in0_im_1[31] = (alpha_im_9[31] == 1'b1 ? alpha_re_13[31] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[31] = {MMul_dot_product5_in0_im_1[31][13], MMul_dot_product5_in0_im_1[31]};
  assign MMul_dot_product5_add_cast_1[31] = {{4{MMul_dot_product5_add_cast[31][14]}}, MMul_dot_product5_add_cast[31]};
  assign MMul_dot_product5_in0_re_1[31] = (alpha_re_9[31] == 1'b1 ? alpha_im_13[31] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[31] = {MMul_dot_product5_in0_re_1[31][13], MMul_dot_product5_in0_re_1[31]};
  assign MMul_dot_product5_add_cast_3[31] = {{4{MMul_dot_product5_add_cast_2[31][14]}}, MMul_dot_product5_add_cast_2[31]};
  assign MMul_dot_product_out_im_1[31] = MMul_dot_product5_add_cast_1[31] + MMul_dot_product5_add_cast_3[31];
  assign MMul_dot_product5_in0_re[32] = (alpha_re_9[32] == 1'b1 ? alpha_re_13[32] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[32] = {MMul_dot_product5_in0_re[32][13], MMul_dot_product5_in0_re[32]};
  assign MMul_dot_product5_sub_cast_1[32] = {{4{MMul_dot_product5_sub_cast[32][14]}}, MMul_dot_product5_sub_cast[32]};
  assign MMul_dot_product5_in0_im[32] = (alpha_im_9[32] == 1'b1 ? alpha_im_13[32] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[32] = {MMul_dot_product5_in0_im[32][13], MMul_dot_product5_in0_im[32]};
  assign MMul_dot_product5_sub_cast_3[32] = {{4{MMul_dot_product5_sub_cast_2[32][14]}}, MMul_dot_product5_sub_cast_2[32]};
  assign MMul_dot_product_out_re_1[32] = MMul_dot_product5_sub_cast_1[32] - MMul_dot_product5_sub_cast_3[32];
  assign MMul_dot_product5_in0_im_1[32] = (alpha_im_9[32] == 1'b1 ? alpha_re_13[32] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[32] = {MMul_dot_product5_in0_im_1[32][13], MMul_dot_product5_in0_im_1[32]};
  assign MMul_dot_product5_add_cast_1[32] = {{4{MMul_dot_product5_add_cast[32][14]}}, MMul_dot_product5_add_cast[32]};
  assign MMul_dot_product5_in0_re_1[32] = (alpha_re_9[32] == 1'b1 ? alpha_im_13[32] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[32] = {MMul_dot_product5_in0_re_1[32][13], MMul_dot_product5_in0_re_1[32]};
  assign MMul_dot_product5_add_cast_3[32] = {{4{MMul_dot_product5_add_cast_2[32][14]}}, MMul_dot_product5_add_cast_2[32]};
  assign MMul_dot_product_out_im_1[32] = MMul_dot_product5_add_cast_1[32] + MMul_dot_product5_add_cast_3[32];
  assign MMul_dot_product5_in0_re[33] = (alpha_re_9[33] == 1'b1 ? alpha_re_13[33] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[33] = {MMul_dot_product5_in0_re[33][13], MMul_dot_product5_in0_re[33]};
  assign MMul_dot_product5_sub_cast_1[33] = {{4{MMul_dot_product5_sub_cast[33][14]}}, MMul_dot_product5_sub_cast[33]};
  assign MMul_dot_product5_in0_im[33] = (alpha_im_9[33] == 1'b1 ? alpha_im_13[33] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[33] = {MMul_dot_product5_in0_im[33][13], MMul_dot_product5_in0_im[33]};
  assign MMul_dot_product5_sub_cast_3[33] = {{4{MMul_dot_product5_sub_cast_2[33][14]}}, MMul_dot_product5_sub_cast_2[33]};
  assign MMul_dot_product_out_re_1[33] = MMul_dot_product5_sub_cast_1[33] - MMul_dot_product5_sub_cast_3[33];
  assign MMul_dot_product5_in0_im_1[33] = (alpha_im_9[33] == 1'b1 ? alpha_re_13[33] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[33] = {MMul_dot_product5_in0_im_1[33][13], MMul_dot_product5_in0_im_1[33]};
  assign MMul_dot_product5_add_cast_1[33] = {{4{MMul_dot_product5_add_cast[33][14]}}, MMul_dot_product5_add_cast[33]};
  assign MMul_dot_product5_in0_re_1[33] = (alpha_re_9[33] == 1'b1 ? alpha_im_13[33] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[33] = {MMul_dot_product5_in0_re_1[33][13], MMul_dot_product5_in0_re_1[33]};
  assign MMul_dot_product5_add_cast_3[33] = {{4{MMul_dot_product5_add_cast_2[33][14]}}, MMul_dot_product5_add_cast_2[33]};
  assign MMul_dot_product_out_im_1[33] = MMul_dot_product5_add_cast_1[33] + MMul_dot_product5_add_cast_3[33];
  assign MMul_dot_product5_in0_re[34] = (alpha_re_9[34] == 1'b1 ? alpha_re_13[34] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[34] = {MMul_dot_product5_in0_re[34][13], MMul_dot_product5_in0_re[34]};
  assign MMul_dot_product5_sub_cast_1[34] = {{4{MMul_dot_product5_sub_cast[34][14]}}, MMul_dot_product5_sub_cast[34]};
  assign MMul_dot_product5_in0_im[34] = (alpha_im_9[34] == 1'b1 ? alpha_im_13[34] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[34] = {MMul_dot_product5_in0_im[34][13], MMul_dot_product5_in0_im[34]};
  assign MMul_dot_product5_sub_cast_3[34] = {{4{MMul_dot_product5_sub_cast_2[34][14]}}, MMul_dot_product5_sub_cast_2[34]};
  assign MMul_dot_product_out_re_1[34] = MMul_dot_product5_sub_cast_1[34] - MMul_dot_product5_sub_cast_3[34];
  assign MMul_dot_product5_in0_im_1[34] = (alpha_im_9[34] == 1'b1 ? alpha_re_13[34] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[34] = {MMul_dot_product5_in0_im_1[34][13], MMul_dot_product5_in0_im_1[34]};
  assign MMul_dot_product5_add_cast_1[34] = {{4{MMul_dot_product5_add_cast[34][14]}}, MMul_dot_product5_add_cast[34]};
  assign MMul_dot_product5_in0_re_1[34] = (alpha_re_9[34] == 1'b1 ? alpha_im_13[34] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[34] = {MMul_dot_product5_in0_re_1[34][13], MMul_dot_product5_in0_re_1[34]};
  assign MMul_dot_product5_add_cast_3[34] = {{4{MMul_dot_product5_add_cast_2[34][14]}}, MMul_dot_product5_add_cast_2[34]};
  assign MMul_dot_product_out_im_1[34] = MMul_dot_product5_add_cast_1[34] + MMul_dot_product5_add_cast_3[34];
  assign MMul_dot_product5_in0_re[35] = (alpha_re_9[35] == 1'b1 ? alpha_re_13[35] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[35] = {MMul_dot_product5_in0_re[35][13], MMul_dot_product5_in0_re[35]};
  assign MMul_dot_product5_sub_cast_1[35] = {{4{MMul_dot_product5_sub_cast[35][14]}}, MMul_dot_product5_sub_cast[35]};
  assign MMul_dot_product5_in0_im[35] = (alpha_im_9[35] == 1'b1 ? alpha_im_13[35] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[35] = {MMul_dot_product5_in0_im[35][13], MMul_dot_product5_in0_im[35]};
  assign MMul_dot_product5_sub_cast_3[35] = {{4{MMul_dot_product5_sub_cast_2[35][14]}}, MMul_dot_product5_sub_cast_2[35]};
  assign MMul_dot_product_out_re_1[35] = MMul_dot_product5_sub_cast_1[35] - MMul_dot_product5_sub_cast_3[35];
  assign MMul_dot_product5_in0_im_1[35] = (alpha_im_9[35] == 1'b1 ? alpha_re_13[35] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[35] = {MMul_dot_product5_in0_im_1[35][13], MMul_dot_product5_in0_im_1[35]};
  assign MMul_dot_product5_add_cast_1[35] = {{4{MMul_dot_product5_add_cast[35][14]}}, MMul_dot_product5_add_cast[35]};
  assign MMul_dot_product5_in0_re_1[35] = (alpha_re_9[35] == 1'b1 ? alpha_im_13[35] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[35] = {MMul_dot_product5_in0_re_1[35][13], MMul_dot_product5_in0_re_1[35]};
  assign MMul_dot_product5_add_cast_3[35] = {{4{MMul_dot_product5_add_cast_2[35][14]}}, MMul_dot_product5_add_cast_2[35]};
  assign MMul_dot_product_out_im_1[35] = MMul_dot_product5_add_cast_1[35] + MMul_dot_product5_add_cast_3[35];
  assign MMul_dot_product5_in0_re[36] = (alpha_re_9[36] == 1'b1 ? alpha_re_13[36] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[36] = {MMul_dot_product5_in0_re[36][13], MMul_dot_product5_in0_re[36]};
  assign MMul_dot_product5_sub_cast_1[36] = {{4{MMul_dot_product5_sub_cast[36][14]}}, MMul_dot_product5_sub_cast[36]};
  assign MMul_dot_product5_in0_im[36] = (alpha_im_9[36] == 1'b1 ? alpha_im_13[36] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[36] = {MMul_dot_product5_in0_im[36][13], MMul_dot_product5_in0_im[36]};
  assign MMul_dot_product5_sub_cast_3[36] = {{4{MMul_dot_product5_sub_cast_2[36][14]}}, MMul_dot_product5_sub_cast_2[36]};
  assign MMul_dot_product_out_re_1[36] = MMul_dot_product5_sub_cast_1[36] - MMul_dot_product5_sub_cast_3[36];
  assign MMul_dot_product5_in0_im_1[36] = (alpha_im_9[36] == 1'b1 ? alpha_re_13[36] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[36] = {MMul_dot_product5_in0_im_1[36][13], MMul_dot_product5_in0_im_1[36]};
  assign MMul_dot_product5_add_cast_1[36] = {{4{MMul_dot_product5_add_cast[36][14]}}, MMul_dot_product5_add_cast[36]};
  assign MMul_dot_product5_in0_re_1[36] = (alpha_re_9[36] == 1'b1 ? alpha_im_13[36] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[36] = {MMul_dot_product5_in0_re_1[36][13], MMul_dot_product5_in0_re_1[36]};
  assign MMul_dot_product5_add_cast_3[36] = {{4{MMul_dot_product5_add_cast_2[36][14]}}, MMul_dot_product5_add_cast_2[36]};
  assign MMul_dot_product_out_im_1[36] = MMul_dot_product5_add_cast_1[36] + MMul_dot_product5_add_cast_3[36];
  assign MMul_dot_product5_in0_re[37] = (alpha_re_9[37] == 1'b1 ? alpha_re_13[37] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[37] = {MMul_dot_product5_in0_re[37][13], MMul_dot_product5_in0_re[37]};
  assign MMul_dot_product5_sub_cast_1[37] = {{4{MMul_dot_product5_sub_cast[37][14]}}, MMul_dot_product5_sub_cast[37]};
  assign MMul_dot_product5_in0_im[37] = (alpha_im_9[37] == 1'b1 ? alpha_im_13[37] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[37] = {MMul_dot_product5_in0_im[37][13], MMul_dot_product5_in0_im[37]};
  assign MMul_dot_product5_sub_cast_3[37] = {{4{MMul_dot_product5_sub_cast_2[37][14]}}, MMul_dot_product5_sub_cast_2[37]};
  assign MMul_dot_product_out_re_1[37] = MMul_dot_product5_sub_cast_1[37] - MMul_dot_product5_sub_cast_3[37];
  assign MMul_dot_product5_in0_im_1[37] = (alpha_im_9[37] == 1'b1 ? alpha_re_13[37] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[37] = {MMul_dot_product5_in0_im_1[37][13], MMul_dot_product5_in0_im_1[37]};
  assign MMul_dot_product5_add_cast_1[37] = {{4{MMul_dot_product5_add_cast[37][14]}}, MMul_dot_product5_add_cast[37]};
  assign MMul_dot_product5_in0_re_1[37] = (alpha_re_9[37] == 1'b1 ? alpha_im_13[37] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[37] = {MMul_dot_product5_in0_re_1[37][13], MMul_dot_product5_in0_re_1[37]};
  assign MMul_dot_product5_add_cast_3[37] = {{4{MMul_dot_product5_add_cast_2[37][14]}}, MMul_dot_product5_add_cast_2[37]};
  assign MMul_dot_product_out_im_1[37] = MMul_dot_product5_add_cast_1[37] + MMul_dot_product5_add_cast_3[37];
  assign MMul_dot_product5_in0_re[38] = (alpha_re_9[38] == 1'b1 ? alpha_re_13[38] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[38] = {MMul_dot_product5_in0_re[38][13], MMul_dot_product5_in0_re[38]};
  assign MMul_dot_product5_sub_cast_1[38] = {{4{MMul_dot_product5_sub_cast[38][14]}}, MMul_dot_product5_sub_cast[38]};
  assign MMul_dot_product5_in0_im[38] = (alpha_im_9[38] == 1'b1 ? alpha_im_13[38] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[38] = {MMul_dot_product5_in0_im[38][13], MMul_dot_product5_in0_im[38]};
  assign MMul_dot_product5_sub_cast_3[38] = {{4{MMul_dot_product5_sub_cast_2[38][14]}}, MMul_dot_product5_sub_cast_2[38]};
  assign MMul_dot_product_out_re_1[38] = MMul_dot_product5_sub_cast_1[38] - MMul_dot_product5_sub_cast_3[38];
  assign MMul_dot_product5_in0_im_1[38] = (alpha_im_9[38] == 1'b1 ? alpha_re_13[38] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[38] = {MMul_dot_product5_in0_im_1[38][13], MMul_dot_product5_in0_im_1[38]};
  assign MMul_dot_product5_add_cast_1[38] = {{4{MMul_dot_product5_add_cast[38][14]}}, MMul_dot_product5_add_cast[38]};
  assign MMul_dot_product5_in0_re_1[38] = (alpha_re_9[38] == 1'b1 ? alpha_im_13[38] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[38] = {MMul_dot_product5_in0_re_1[38][13], MMul_dot_product5_in0_re_1[38]};
  assign MMul_dot_product5_add_cast_3[38] = {{4{MMul_dot_product5_add_cast_2[38][14]}}, MMul_dot_product5_add_cast_2[38]};
  assign MMul_dot_product_out_im_1[38] = MMul_dot_product5_add_cast_1[38] + MMul_dot_product5_add_cast_3[38];
  assign MMul_dot_product5_in0_re[39] = (alpha_re_9[39] == 1'b1 ? alpha_re_13[39] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[39] = {MMul_dot_product5_in0_re[39][13], MMul_dot_product5_in0_re[39]};
  assign MMul_dot_product5_sub_cast_1[39] = {{4{MMul_dot_product5_sub_cast[39][14]}}, MMul_dot_product5_sub_cast[39]};
  assign MMul_dot_product5_in0_im[39] = (alpha_im_9[39] == 1'b1 ? alpha_im_13[39] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[39] = {MMul_dot_product5_in0_im[39][13], MMul_dot_product5_in0_im[39]};
  assign MMul_dot_product5_sub_cast_3[39] = {{4{MMul_dot_product5_sub_cast_2[39][14]}}, MMul_dot_product5_sub_cast_2[39]};
  assign MMul_dot_product_out_re_1[39] = MMul_dot_product5_sub_cast_1[39] - MMul_dot_product5_sub_cast_3[39];
  assign MMul_dot_product5_in0_im_1[39] = (alpha_im_9[39] == 1'b1 ? alpha_re_13[39] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[39] = {MMul_dot_product5_in0_im_1[39][13], MMul_dot_product5_in0_im_1[39]};
  assign MMul_dot_product5_add_cast_1[39] = {{4{MMul_dot_product5_add_cast[39][14]}}, MMul_dot_product5_add_cast[39]};
  assign MMul_dot_product5_in0_re_1[39] = (alpha_re_9[39] == 1'b1 ? alpha_im_13[39] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[39] = {MMul_dot_product5_in0_re_1[39][13], MMul_dot_product5_in0_re_1[39]};
  assign MMul_dot_product5_add_cast_3[39] = {{4{MMul_dot_product5_add_cast_2[39][14]}}, MMul_dot_product5_add_cast_2[39]};
  assign MMul_dot_product_out_im_1[39] = MMul_dot_product5_add_cast_1[39] + MMul_dot_product5_add_cast_3[39];
  assign MMul_dot_product5_in0_re[40] = (alpha_re_9[40] == 1'b1 ? alpha_re_13[40] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[40] = {MMul_dot_product5_in0_re[40][13], MMul_dot_product5_in0_re[40]};
  assign MMul_dot_product5_sub_cast_1[40] = {{4{MMul_dot_product5_sub_cast[40][14]}}, MMul_dot_product5_sub_cast[40]};
  assign MMul_dot_product5_in0_im[40] = (alpha_im_9[40] == 1'b1 ? alpha_im_13[40] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[40] = {MMul_dot_product5_in0_im[40][13], MMul_dot_product5_in0_im[40]};
  assign MMul_dot_product5_sub_cast_3[40] = {{4{MMul_dot_product5_sub_cast_2[40][14]}}, MMul_dot_product5_sub_cast_2[40]};
  assign MMul_dot_product_out_re_1[40] = MMul_dot_product5_sub_cast_1[40] - MMul_dot_product5_sub_cast_3[40];
  assign MMul_dot_product5_in0_im_1[40] = (alpha_im_9[40] == 1'b1 ? alpha_re_13[40] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[40] = {MMul_dot_product5_in0_im_1[40][13], MMul_dot_product5_in0_im_1[40]};
  assign MMul_dot_product5_add_cast_1[40] = {{4{MMul_dot_product5_add_cast[40][14]}}, MMul_dot_product5_add_cast[40]};
  assign MMul_dot_product5_in0_re_1[40] = (alpha_re_9[40] == 1'b1 ? alpha_im_13[40] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[40] = {MMul_dot_product5_in0_re_1[40][13], MMul_dot_product5_in0_re_1[40]};
  assign MMul_dot_product5_add_cast_3[40] = {{4{MMul_dot_product5_add_cast_2[40][14]}}, MMul_dot_product5_add_cast_2[40]};
  assign MMul_dot_product_out_im_1[40] = MMul_dot_product5_add_cast_1[40] + MMul_dot_product5_add_cast_3[40];
  assign MMul_dot_product5_in0_re[41] = (alpha_re_9[41] == 1'b1 ? alpha_re_13[41] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[41] = {MMul_dot_product5_in0_re[41][13], MMul_dot_product5_in0_re[41]};
  assign MMul_dot_product5_sub_cast_1[41] = {{4{MMul_dot_product5_sub_cast[41][14]}}, MMul_dot_product5_sub_cast[41]};
  assign MMul_dot_product5_in0_im[41] = (alpha_im_9[41] == 1'b1 ? alpha_im_13[41] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[41] = {MMul_dot_product5_in0_im[41][13], MMul_dot_product5_in0_im[41]};
  assign MMul_dot_product5_sub_cast_3[41] = {{4{MMul_dot_product5_sub_cast_2[41][14]}}, MMul_dot_product5_sub_cast_2[41]};
  assign MMul_dot_product_out_re_1[41] = MMul_dot_product5_sub_cast_1[41] - MMul_dot_product5_sub_cast_3[41];
  assign MMul_dot_product5_in0_im_1[41] = (alpha_im_9[41] == 1'b1 ? alpha_re_13[41] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[41] = {MMul_dot_product5_in0_im_1[41][13], MMul_dot_product5_in0_im_1[41]};
  assign MMul_dot_product5_add_cast_1[41] = {{4{MMul_dot_product5_add_cast[41][14]}}, MMul_dot_product5_add_cast[41]};
  assign MMul_dot_product5_in0_re_1[41] = (alpha_re_9[41] == 1'b1 ? alpha_im_13[41] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[41] = {MMul_dot_product5_in0_re_1[41][13], MMul_dot_product5_in0_re_1[41]};
  assign MMul_dot_product5_add_cast_3[41] = {{4{MMul_dot_product5_add_cast_2[41][14]}}, MMul_dot_product5_add_cast_2[41]};
  assign MMul_dot_product_out_im_1[41] = MMul_dot_product5_add_cast_1[41] + MMul_dot_product5_add_cast_3[41];
  assign MMul_dot_product5_in0_re[42] = (alpha_re_9[42] == 1'b1 ? alpha_re_13[42] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[42] = {MMul_dot_product5_in0_re[42][13], MMul_dot_product5_in0_re[42]};
  assign MMul_dot_product5_sub_cast_1[42] = {{4{MMul_dot_product5_sub_cast[42][14]}}, MMul_dot_product5_sub_cast[42]};
  assign MMul_dot_product5_in0_im[42] = (alpha_im_9[42] == 1'b1 ? alpha_im_13[42] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[42] = {MMul_dot_product5_in0_im[42][13], MMul_dot_product5_in0_im[42]};
  assign MMul_dot_product5_sub_cast_3[42] = {{4{MMul_dot_product5_sub_cast_2[42][14]}}, MMul_dot_product5_sub_cast_2[42]};
  assign MMul_dot_product_out_re_1[42] = MMul_dot_product5_sub_cast_1[42] - MMul_dot_product5_sub_cast_3[42];
  assign MMul_dot_product5_in0_im_1[42] = (alpha_im_9[42] == 1'b1 ? alpha_re_13[42] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[42] = {MMul_dot_product5_in0_im_1[42][13], MMul_dot_product5_in0_im_1[42]};
  assign MMul_dot_product5_add_cast_1[42] = {{4{MMul_dot_product5_add_cast[42][14]}}, MMul_dot_product5_add_cast[42]};
  assign MMul_dot_product5_in0_re_1[42] = (alpha_re_9[42] == 1'b1 ? alpha_im_13[42] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[42] = {MMul_dot_product5_in0_re_1[42][13], MMul_dot_product5_in0_re_1[42]};
  assign MMul_dot_product5_add_cast_3[42] = {{4{MMul_dot_product5_add_cast_2[42][14]}}, MMul_dot_product5_add_cast_2[42]};
  assign MMul_dot_product_out_im_1[42] = MMul_dot_product5_add_cast_1[42] + MMul_dot_product5_add_cast_3[42];
  assign MMul_dot_product5_in0_re[43] = (alpha_re_9[43] == 1'b1 ? alpha_re_13[43] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[43] = {MMul_dot_product5_in0_re[43][13], MMul_dot_product5_in0_re[43]};
  assign MMul_dot_product5_sub_cast_1[43] = {{4{MMul_dot_product5_sub_cast[43][14]}}, MMul_dot_product5_sub_cast[43]};
  assign MMul_dot_product5_in0_im[43] = (alpha_im_9[43] == 1'b1 ? alpha_im_13[43] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[43] = {MMul_dot_product5_in0_im[43][13], MMul_dot_product5_in0_im[43]};
  assign MMul_dot_product5_sub_cast_3[43] = {{4{MMul_dot_product5_sub_cast_2[43][14]}}, MMul_dot_product5_sub_cast_2[43]};
  assign MMul_dot_product_out_re_1[43] = MMul_dot_product5_sub_cast_1[43] - MMul_dot_product5_sub_cast_3[43];
  assign MMul_dot_product5_in0_im_1[43] = (alpha_im_9[43] == 1'b1 ? alpha_re_13[43] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[43] = {MMul_dot_product5_in0_im_1[43][13], MMul_dot_product5_in0_im_1[43]};
  assign MMul_dot_product5_add_cast_1[43] = {{4{MMul_dot_product5_add_cast[43][14]}}, MMul_dot_product5_add_cast[43]};
  assign MMul_dot_product5_in0_re_1[43] = (alpha_re_9[43] == 1'b1 ? alpha_im_13[43] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[43] = {MMul_dot_product5_in0_re_1[43][13], MMul_dot_product5_in0_re_1[43]};
  assign MMul_dot_product5_add_cast_3[43] = {{4{MMul_dot_product5_add_cast_2[43][14]}}, MMul_dot_product5_add_cast_2[43]};
  assign MMul_dot_product_out_im_1[43] = MMul_dot_product5_add_cast_1[43] + MMul_dot_product5_add_cast_3[43];
  assign MMul_dot_product5_in0_re[44] = (alpha_re_9[44] == 1'b1 ? alpha_re_13[44] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[44] = {MMul_dot_product5_in0_re[44][13], MMul_dot_product5_in0_re[44]};
  assign MMul_dot_product5_sub_cast_1[44] = {{4{MMul_dot_product5_sub_cast[44][14]}}, MMul_dot_product5_sub_cast[44]};
  assign MMul_dot_product5_in0_im[44] = (alpha_im_9[44] == 1'b1 ? alpha_im_13[44] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[44] = {MMul_dot_product5_in0_im[44][13], MMul_dot_product5_in0_im[44]};
  assign MMul_dot_product5_sub_cast_3[44] = {{4{MMul_dot_product5_sub_cast_2[44][14]}}, MMul_dot_product5_sub_cast_2[44]};
  assign MMul_dot_product_out_re_1[44] = MMul_dot_product5_sub_cast_1[44] - MMul_dot_product5_sub_cast_3[44];
  assign MMul_dot_product5_in0_im_1[44] = (alpha_im_9[44] == 1'b1 ? alpha_re_13[44] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[44] = {MMul_dot_product5_in0_im_1[44][13], MMul_dot_product5_in0_im_1[44]};
  assign MMul_dot_product5_add_cast_1[44] = {{4{MMul_dot_product5_add_cast[44][14]}}, MMul_dot_product5_add_cast[44]};
  assign MMul_dot_product5_in0_re_1[44] = (alpha_re_9[44] == 1'b1 ? alpha_im_13[44] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[44] = {MMul_dot_product5_in0_re_1[44][13], MMul_dot_product5_in0_re_1[44]};
  assign MMul_dot_product5_add_cast_3[44] = {{4{MMul_dot_product5_add_cast_2[44][14]}}, MMul_dot_product5_add_cast_2[44]};
  assign MMul_dot_product_out_im_1[44] = MMul_dot_product5_add_cast_1[44] + MMul_dot_product5_add_cast_3[44];
  assign MMul_dot_product5_in0_re[45] = (alpha_re_9[45] == 1'b1 ? alpha_re_13[45] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[45] = {MMul_dot_product5_in0_re[45][13], MMul_dot_product5_in0_re[45]};
  assign MMul_dot_product5_sub_cast_1[45] = {{4{MMul_dot_product5_sub_cast[45][14]}}, MMul_dot_product5_sub_cast[45]};
  assign MMul_dot_product5_in0_im[45] = (alpha_im_9[45] == 1'b1 ? alpha_im_13[45] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[45] = {MMul_dot_product5_in0_im[45][13], MMul_dot_product5_in0_im[45]};
  assign MMul_dot_product5_sub_cast_3[45] = {{4{MMul_dot_product5_sub_cast_2[45][14]}}, MMul_dot_product5_sub_cast_2[45]};
  assign MMul_dot_product_out_re_1[45] = MMul_dot_product5_sub_cast_1[45] - MMul_dot_product5_sub_cast_3[45];
  assign MMul_dot_product5_in0_im_1[45] = (alpha_im_9[45] == 1'b1 ? alpha_re_13[45] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[45] = {MMul_dot_product5_in0_im_1[45][13], MMul_dot_product5_in0_im_1[45]};
  assign MMul_dot_product5_add_cast_1[45] = {{4{MMul_dot_product5_add_cast[45][14]}}, MMul_dot_product5_add_cast[45]};
  assign MMul_dot_product5_in0_re_1[45] = (alpha_re_9[45] == 1'b1 ? alpha_im_13[45] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[45] = {MMul_dot_product5_in0_re_1[45][13], MMul_dot_product5_in0_re_1[45]};
  assign MMul_dot_product5_add_cast_3[45] = {{4{MMul_dot_product5_add_cast_2[45][14]}}, MMul_dot_product5_add_cast_2[45]};
  assign MMul_dot_product_out_im_1[45] = MMul_dot_product5_add_cast_1[45] + MMul_dot_product5_add_cast_3[45];
  assign MMul_dot_product5_in0_re[46] = (alpha_re_9[46] == 1'b1 ? alpha_re_13[46] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[46] = {MMul_dot_product5_in0_re[46][13], MMul_dot_product5_in0_re[46]};
  assign MMul_dot_product5_sub_cast_1[46] = {{4{MMul_dot_product5_sub_cast[46][14]}}, MMul_dot_product5_sub_cast[46]};
  assign MMul_dot_product5_in0_im[46] = (alpha_im_9[46] == 1'b1 ? alpha_im_13[46] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[46] = {MMul_dot_product5_in0_im[46][13], MMul_dot_product5_in0_im[46]};
  assign MMul_dot_product5_sub_cast_3[46] = {{4{MMul_dot_product5_sub_cast_2[46][14]}}, MMul_dot_product5_sub_cast_2[46]};
  assign MMul_dot_product_out_re_1[46] = MMul_dot_product5_sub_cast_1[46] - MMul_dot_product5_sub_cast_3[46];
  assign MMul_dot_product5_in0_im_1[46] = (alpha_im_9[46] == 1'b1 ? alpha_re_13[46] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[46] = {MMul_dot_product5_in0_im_1[46][13], MMul_dot_product5_in0_im_1[46]};
  assign MMul_dot_product5_add_cast_1[46] = {{4{MMul_dot_product5_add_cast[46][14]}}, MMul_dot_product5_add_cast[46]};
  assign MMul_dot_product5_in0_re_1[46] = (alpha_re_9[46] == 1'b1 ? alpha_im_13[46] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[46] = {MMul_dot_product5_in0_re_1[46][13], MMul_dot_product5_in0_re_1[46]};
  assign MMul_dot_product5_add_cast_3[46] = {{4{MMul_dot_product5_add_cast_2[46][14]}}, MMul_dot_product5_add_cast_2[46]};
  assign MMul_dot_product_out_im_1[46] = MMul_dot_product5_add_cast_1[46] + MMul_dot_product5_add_cast_3[46];
  assign MMul_dot_product5_in0_re[47] = (alpha_re_9[47] == 1'b1 ? alpha_re_13[47] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[47] = {MMul_dot_product5_in0_re[47][13], MMul_dot_product5_in0_re[47]};
  assign MMul_dot_product5_sub_cast_1[47] = {{4{MMul_dot_product5_sub_cast[47][14]}}, MMul_dot_product5_sub_cast[47]};
  assign MMul_dot_product5_in0_im[47] = (alpha_im_9[47] == 1'b1 ? alpha_im_13[47] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[47] = {MMul_dot_product5_in0_im[47][13], MMul_dot_product5_in0_im[47]};
  assign MMul_dot_product5_sub_cast_3[47] = {{4{MMul_dot_product5_sub_cast_2[47][14]}}, MMul_dot_product5_sub_cast_2[47]};
  assign MMul_dot_product_out_re_1[47] = MMul_dot_product5_sub_cast_1[47] - MMul_dot_product5_sub_cast_3[47];
  assign MMul_dot_product5_in0_im_1[47] = (alpha_im_9[47] == 1'b1 ? alpha_re_13[47] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[47] = {MMul_dot_product5_in0_im_1[47][13], MMul_dot_product5_in0_im_1[47]};
  assign MMul_dot_product5_add_cast_1[47] = {{4{MMul_dot_product5_add_cast[47][14]}}, MMul_dot_product5_add_cast[47]};
  assign MMul_dot_product5_in0_re_1[47] = (alpha_re_9[47] == 1'b1 ? alpha_im_13[47] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[47] = {MMul_dot_product5_in0_re_1[47][13], MMul_dot_product5_in0_re_1[47]};
  assign MMul_dot_product5_add_cast_3[47] = {{4{MMul_dot_product5_add_cast_2[47][14]}}, MMul_dot_product5_add_cast_2[47]};
  assign MMul_dot_product_out_im_1[47] = MMul_dot_product5_add_cast_1[47] + MMul_dot_product5_add_cast_3[47];
  assign MMul_dot_product5_in0_re[48] = (alpha_re_9[48] == 1'b1 ? alpha_re_13[48] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[48] = {MMul_dot_product5_in0_re[48][13], MMul_dot_product5_in0_re[48]};
  assign MMul_dot_product5_sub_cast_1[48] = {{4{MMul_dot_product5_sub_cast[48][14]}}, MMul_dot_product5_sub_cast[48]};
  assign MMul_dot_product5_in0_im[48] = (alpha_im_9[48] == 1'b1 ? alpha_im_13[48] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[48] = {MMul_dot_product5_in0_im[48][13], MMul_dot_product5_in0_im[48]};
  assign MMul_dot_product5_sub_cast_3[48] = {{4{MMul_dot_product5_sub_cast_2[48][14]}}, MMul_dot_product5_sub_cast_2[48]};
  assign MMul_dot_product_out_re_1[48] = MMul_dot_product5_sub_cast_1[48] - MMul_dot_product5_sub_cast_3[48];
  assign MMul_dot_product5_in0_im_1[48] = (alpha_im_9[48] == 1'b1 ? alpha_re_13[48] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[48] = {MMul_dot_product5_in0_im_1[48][13], MMul_dot_product5_in0_im_1[48]};
  assign MMul_dot_product5_add_cast_1[48] = {{4{MMul_dot_product5_add_cast[48][14]}}, MMul_dot_product5_add_cast[48]};
  assign MMul_dot_product5_in0_re_1[48] = (alpha_re_9[48] == 1'b1 ? alpha_im_13[48] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[48] = {MMul_dot_product5_in0_re_1[48][13], MMul_dot_product5_in0_re_1[48]};
  assign MMul_dot_product5_add_cast_3[48] = {{4{MMul_dot_product5_add_cast_2[48][14]}}, MMul_dot_product5_add_cast_2[48]};
  assign MMul_dot_product_out_im_1[48] = MMul_dot_product5_add_cast_1[48] + MMul_dot_product5_add_cast_3[48];
  assign MMul_dot_product5_in0_re[49] = (alpha_re_9[49] == 1'b1 ? alpha_re_13[49] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[49] = {MMul_dot_product5_in0_re[49][13], MMul_dot_product5_in0_re[49]};
  assign MMul_dot_product5_sub_cast_1[49] = {{4{MMul_dot_product5_sub_cast[49][14]}}, MMul_dot_product5_sub_cast[49]};
  assign MMul_dot_product5_in0_im[49] = (alpha_im_9[49] == 1'b1 ? alpha_im_13[49] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[49] = {MMul_dot_product5_in0_im[49][13], MMul_dot_product5_in0_im[49]};
  assign MMul_dot_product5_sub_cast_3[49] = {{4{MMul_dot_product5_sub_cast_2[49][14]}}, MMul_dot_product5_sub_cast_2[49]};
  assign MMul_dot_product_out_re_1[49] = MMul_dot_product5_sub_cast_1[49] - MMul_dot_product5_sub_cast_3[49];
  assign MMul_dot_product5_in0_im_1[49] = (alpha_im_9[49] == 1'b1 ? alpha_re_13[49] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[49] = {MMul_dot_product5_in0_im_1[49][13], MMul_dot_product5_in0_im_1[49]};
  assign MMul_dot_product5_add_cast_1[49] = {{4{MMul_dot_product5_add_cast[49][14]}}, MMul_dot_product5_add_cast[49]};
  assign MMul_dot_product5_in0_re_1[49] = (alpha_re_9[49] == 1'b1 ? alpha_im_13[49] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[49] = {MMul_dot_product5_in0_re_1[49][13], MMul_dot_product5_in0_re_1[49]};
  assign MMul_dot_product5_add_cast_3[49] = {{4{MMul_dot_product5_add_cast_2[49][14]}}, MMul_dot_product5_add_cast_2[49]};
  assign MMul_dot_product_out_im_1[49] = MMul_dot_product5_add_cast_1[49] + MMul_dot_product5_add_cast_3[49];
  assign MMul_dot_product5_in0_re[50] = (alpha_re_9[50] == 1'b1 ? alpha_re_13[50] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[50] = {MMul_dot_product5_in0_re[50][13], MMul_dot_product5_in0_re[50]};
  assign MMul_dot_product5_sub_cast_1[50] = {{4{MMul_dot_product5_sub_cast[50][14]}}, MMul_dot_product5_sub_cast[50]};
  assign MMul_dot_product5_in0_im[50] = (alpha_im_9[50] == 1'b1 ? alpha_im_13[50] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[50] = {MMul_dot_product5_in0_im[50][13], MMul_dot_product5_in0_im[50]};
  assign MMul_dot_product5_sub_cast_3[50] = {{4{MMul_dot_product5_sub_cast_2[50][14]}}, MMul_dot_product5_sub_cast_2[50]};
  assign MMul_dot_product_out_re_1[50] = MMul_dot_product5_sub_cast_1[50] - MMul_dot_product5_sub_cast_3[50];
  assign MMul_dot_product5_in0_im_1[50] = (alpha_im_9[50] == 1'b1 ? alpha_re_13[50] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[50] = {MMul_dot_product5_in0_im_1[50][13], MMul_dot_product5_in0_im_1[50]};
  assign MMul_dot_product5_add_cast_1[50] = {{4{MMul_dot_product5_add_cast[50][14]}}, MMul_dot_product5_add_cast[50]};
  assign MMul_dot_product5_in0_re_1[50] = (alpha_re_9[50] == 1'b1 ? alpha_im_13[50] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[50] = {MMul_dot_product5_in0_re_1[50][13], MMul_dot_product5_in0_re_1[50]};
  assign MMul_dot_product5_add_cast_3[50] = {{4{MMul_dot_product5_add_cast_2[50][14]}}, MMul_dot_product5_add_cast_2[50]};
  assign MMul_dot_product_out_im_1[50] = MMul_dot_product5_add_cast_1[50] + MMul_dot_product5_add_cast_3[50];
  assign MMul_dot_product5_in0_re[51] = (alpha_re_9[51] == 1'b1 ? alpha_re_13[51] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[51] = {MMul_dot_product5_in0_re[51][13], MMul_dot_product5_in0_re[51]};
  assign MMul_dot_product5_sub_cast_1[51] = {{4{MMul_dot_product5_sub_cast[51][14]}}, MMul_dot_product5_sub_cast[51]};
  assign MMul_dot_product5_in0_im[51] = (alpha_im_9[51] == 1'b1 ? alpha_im_13[51] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[51] = {MMul_dot_product5_in0_im[51][13], MMul_dot_product5_in0_im[51]};
  assign MMul_dot_product5_sub_cast_3[51] = {{4{MMul_dot_product5_sub_cast_2[51][14]}}, MMul_dot_product5_sub_cast_2[51]};
  assign MMul_dot_product_out_re_1[51] = MMul_dot_product5_sub_cast_1[51] - MMul_dot_product5_sub_cast_3[51];
  assign MMul_dot_product5_in0_im_1[51] = (alpha_im_9[51] == 1'b1 ? alpha_re_13[51] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[51] = {MMul_dot_product5_in0_im_1[51][13], MMul_dot_product5_in0_im_1[51]};
  assign MMul_dot_product5_add_cast_1[51] = {{4{MMul_dot_product5_add_cast[51][14]}}, MMul_dot_product5_add_cast[51]};
  assign MMul_dot_product5_in0_re_1[51] = (alpha_re_9[51] == 1'b1 ? alpha_im_13[51] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[51] = {MMul_dot_product5_in0_re_1[51][13], MMul_dot_product5_in0_re_1[51]};
  assign MMul_dot_product5_add_cast_3[51] = {{4{MMul_dot_product5_add_cast_2[51][14]}}, MMul_dot_product5_add_cast_2[51]};
  assign MMul_dot_product_out_im_1[51] = MMul_dot_product5_add_cast_1[51] + MMul_dot_product5_add_cast_3[51];
  assign MMul_dot_product5_in0_re[52] = (alpha_re_9[52] == 1'b1 ? alpha_re_13[52] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[52] = {MMul_dot_product5_in0_re[52][13], MMul_dot_product5_in0_re[52]};
  assign MMul_dot_product5_sub_cast_1[52] = {{4{MMul_dot_product5_sub_cast[52][14]}}, MMul_dot_product5_sub_cast[52]};
  assign MMul_dot_product5_in0_im[52] = (alpha_im_9[52] == 1'b1 ? alpha_im_13[52] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[52] = {MMul_dot_product5_in0_im[52][13], MMul_dot_product5_in0_im[52]};
  assign MMul_dot_product5_sub_cast_3[52] = {{4{MMul_dot_product5_sub_cast_2[52][14]}}, MMul_dot_product5_sub_cast_2[52]};
  assign MMul_dot_product_out_re_1[52] = MMul_dot_product5_sub_cast_1[52] - MMul_dot_product5_sub_cast_3[52];
  assign MMul_dot_product5_in0_im_1[52] = (alpha_im_9[52] == 1'b1 ? alpha_re_13[52] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[52] = {MMul_dot_product5_in0_im_1[52][13], MMul_dot_product5_in0_im_1[52]};
  assign MMul_dot_product5_add_cast_1[52] = {{4{MMul_dot_product5_add_cast[52][14]}}, MMul_dot_product5_add_cast[52]};
  assign MMul_dot_product5_in0_re_1[52] = (alpha_re_9[52] == 1'b1 ? alpha_im_13[52] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[52] = {MMul_dot_product5_in0_re_1[52][13], MMul_dot_product5_in0_re_1[52]};
  assign MMul_dot_product5_add_cast_3[52] = {{4{MMul_dot_product5_add_cast_2[52][14]}}, MMul_dot_product5_add_cast_2[52]};
  assign MMul_dot_product_out_im_1[52] = MMul_dot_product5_add_cast_1[52] + MMul_dot_product5_add_cast_3[52];
  assign MMul_dot_product5_in0_re[53] = (alpha_re_9[53] == 1'b1 ? alpha_re_13[53] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[53] = {MMul_dot_product5_in0_re[53][13], MMul_dot_product5_in0_re[53]};
  assign MMul_dot_product5_sub_cast_1[53] = {{4{MMul_dot_product5_sub_cast[53][14]}}, MMul_dot_product5_sub_cast[53]};
  assign MMul_dot_product5_in0_im[53] = (alpha_im_9[53] == 1'b1 ? alpha_im_13[53] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[53] = {MMul_dot_product5_in0_im[53][13], MMul_dot_product5_in0_im[53]};
  assign MMul_dot_product5_sub_cast_3[53] = {{4{MMul_dot_product5_sub_cast_2[53][14]}}, MMul_dot_product5_sub_cast_2[53]};
  assign MMul_dot_product_out_re_1[53] = MMul_dot_product5_sub_cast_1[53] - MMul_dot_product5_sub_cast_3[53];
  assign MMul_dot_product5_in0_im_1[53] = (alpha_im_9[53] == 1'b1 ? alpha_re_13[53] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[53] = {MMul_dot_product5_in0_im_1[53][13], MMul_dot_product5_in0_im_1[53]};
  assign MMul_dot_product5_add_cast_1[53] = {{4{MMul_dot_product5_add_cast[53][14]}}, MMul_dot_product5_add_cast[53]};
  assign MMul_dot_product5_in0_re_1[53] = (alpha_re_9[53] == 1'b1 ? alpha_im_13[53] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[53] = {MMul_dot_product5_in0_re_1[53][13], MMul_dot_product5_in0_re_1[53]};
  assign MMul_dot_product5_add_cast_3[53] = {{4{MMul_dot_product5_add_cast_2[53][14]}}, MMul_dot_product5_add_cast_2[53]};
  assign MMul_dot_product_out_im_1[53] = MMul_dot_product5_add_cast_1[53] + MMul_dot_product5_add_cast_3[53];
  assign MMul_dot_product5_in0_re[54] = (alpha_re_9[54] == 1'b1 ? alpha_re_13[54] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[54] = {MMul_dot_product5_in0_re[54][13], MMul_dot_product5_in0_re[54]};
  assign MMul_dot_product5_sub_cast_1[54] = {{4{MMul_dot_product5_sub_cast[54][14]}}, MMul_dot_product5_sub_cast[54]};
  assign MMul_dot_product5_in0_im[54] = (alpha_im_9[54] == 1'b1 ? alpha_im_13[54] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[54] = {MMul_dot_product5_in0_im[54][13], MMul_dot_product5_in0_im[54]};
  assign MMul_dot_product5_sub_cast_3[54] = {{4{MMul_dot_product5_sub_cast_2[54][14]}}, MMul_dot_product5_sub_cast_2[54]};
  assign MMul_dot_product_out_re_1[54] = MMul_dot_product5_sub_cast_1[54] - MMul_dot_product5_sub_cast_3[54];
  assign MMul_dot_product5_in0_im_1[54] = (alpha_im_9[54] == 1'b1 ? alpha_re_13[54] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[54] = {MMul_dot_product5_in0_im_1[54][13], MMul_dot_product5_in0_im_1[54]};
  assign MMul_dot_product5_add_cast_1[54] = {{4{MMul_dot_product5_add_cast[54][14]}}, MMul_dot_product5_add_cast[54]};
  assign MMul_dot_product5_in0_re_1[54] = (alpha_re_9[54] == 1'b1 ? alpha_im_13[54] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[54] = {MMul_dot_product5_in0_re_1[54][13], MMul_dot_product5_in0_re_1[54]};
  assign MMul_dot_product5_add_cast_3[54] = {{4{MMul_dot_product5_add_cast_2[54][14]}}, MMul_dot_product5_add_cast_2[54]};
  assign MMul_dot_product_out_im_1[54] = MMul_dot_product5_add_cast_1[54] + MMul_dot_product5_add_cast_3[54];
  assign MMul_dot_product5_in0_re[55] = (alpha_re_9[55] == 1'b1 ? alpha_re_13[55] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[55] = {MMul_dot_product5_in0_re[55][13], MMul_dot_product5_in0_re[55]};
  assign MMul_dot_product5_sub_cast_1[55] = {{4{MMul_dot_product5_sub_cast[55][14]}}, MMul_dot_product5_sub_cast[55]};
  assign MMul_dot_product5_in0_im[55] = (alpha_im_9[55] == 1'b1 ? alpha_im_13[55] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[55] = {MMul_dot_product5_in0_im[55][13], MMul_dot_product5_in0_im[55]};
  assign MMul_dot_product5_sub_cast_3[55] = {{4{MMul_dot_product5_sub_cast_2[55][14]}}, MMul_dot_product5_sub_cast_2[55]};
  assign MMul_dot_product_out_re_1[55] = MMul_dot_product5_sub_cast_1[55] - MMul_dot_product5_sub_cast_3[55];
  assign MMul_dot_product5_in0_im_1[55] = (alpha_im_9[55] == 1'b1 ? alpha_re_13[55] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[55] = {MMul_dot_product5_in0_im_1[55][13], MMul_dot_product5_in0_im_1[55]};
  assign MMul_dot_product5_add_cast_1[55] = {{4{MMul_dot_product5_add_cast[55][14]}}, MMul_dot_product5_add_cast[55]};
  assign MMul_dot_product5_in0_re_1[55] = (alpha_re_9[55] == 1'b1 ? alpha_im_13[55] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[55] = {MMul_dot_product5_in0_re_1[55][13], MMul_dot_product5_in0_re_1[55]};
  assign MMul_dot_product5_add_cast_3[55] = {{4{MMul_dot_product5_add_cast_2[55][14]}}, MMul_dot_product5_add_cast_2[55]};
  assign MMul_dot_product_out_im_1[55] = MMul_dot_product5_add_cast_1[55] + MMul_dot_product5_add_cast_3[55];
  assign MMul_dot_product5_in0_re[56] = (alpha_re_9[56] == 1'b1 ? alpha_re_13[56] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[56] = {MMul_dot_product5_in0_re[56][13], MMul_dot_product5_in0_re[56]};
  assign MMul_dot_product5_sub_cast_1[56] = {{4{MMul_dot_product5_sub_cast[56][14]}}, MMul_dot_product5_sub_cast[56]};
  assign MMul_dot_product5_in0_im[56] = (alpha_im_9[56] == 1'b1 ? alpha_im_13[56] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[56] = {MMul_dot_product5_in0_im[56][13], MMul_dot_product5_in0_im[56]};
  assign MMul_dot_product5_sub_cast_3[56] = {{4{MMul_dot_product5_sub_cast_2[56][14]}}, MMul_dot_product5_sub_cast_2[56]};
  assign MMul_dot_product_out_re_1[56] = MMul_dot_product5_sub_cast_1[56] - MMul_dot_product5_sub_cast_3[56];
  assign MMul_dot_product5_in0_im_1[56] = (alpha_im_9[56] == 1'b1 ? alpha_re_13[56] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[56] = {MMul_dot_product5_in0_im_1[56][13], MMul_dot_product5_in0_im_1[56]};
  assign MMul_dot_product5_add_cast_1[56] = {{4{MMul_dot_product5_add_cast[56][14]}}, MMul_dot_product5_add_cast[56]};
  assign MMul_dot_product5_in0_re_1[56] = (alpha_re_9[56] == 1'b1 ? alpha_im_13[56] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[56] = {MMul_dot_product5_in0_re_1[56][13], MMul_dot_product5_in0_re_1[56]};
  assign MMul_dot_product5_add_cast_3[56] = {{4{MMul_dot_product5_add_cast_2[56][14]}}, MMul_dot_product5_add_cast_2[56]};
  assign MMul_dot_product_out_im_1[56] = MMul_dot_product5_add_cast_1[56] + MMul_dot_product5_add_cast_3[56];
  assign MMul_dot_product5_in0_re[57] = (alpha_re_9[57] == 1'b1 ? alpha_re_13[57] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[57] = {MMul_dot_product5_in0_re[57][13], MMul_dot_product5_in0_re[57]};
  assign MMul_dot_product5_sub_cast_1[57] = {{4{MMul_dot_product5_sub_cast[57][14]}}, MMul_dot_product5_sub_cast[57]};
  assign MMul_dot_product5_in0_im[57] = (alpha_im_9[57] == 1'b1 ? alpha_im_13[57] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[57] = {MMul_dot_product5_in0_im[57][13], MMul_dot_product5_in0_im[57]};
  assign MMul_dot_product5_sub_cast_3[57] = {{4{MMul_dot_product5_sub_cast_2[57][14]}}, MMul_dot_product5_sub_cast_2[57]};
  assign MMul_dot_product_out_re_1[57] = MMul_dot_product5_sub_cast_1[57] - MMul_dot_product5_sub_cast_3[57];
  assign MMul_dot_product5_in0_im_1[57] = (alpha_im_9[57] == 1'b1 ? alpha_re_13[57] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[57] = {MMul_dot_product5_in0_im_1[57][13], MMul_dot_product5_in0_im_1[57]};
  assign MMul_dot_product5_add_cast_1[57] = {{4{MMul_dot_product5_add_cast[57][14]}}, MMul_dot_product5_add_cast[57]};
  assign MMul_dot_product5_in0_re_1[57] = (alpha_re_9[57] == 1'b1 ? alpha_im_13[57] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[57] = {MMul_dot_product5_in0_re_1[57][13], MMul_dot_product5_in0_re_1[57]};
  assign MMul_dot_product5_add_cast_3[57] = {{4{MMul_dot_product5_add_cast_2[57][14]}}, MMul_dot_product5_add_cast_2[57]};
  assign MMul_dot_product_out_im_1[57] = MMul_dot_product5_add_cast_1[57] + MMul_dot_product5_add_cast_3[57];
  assign MMul_dot_product5_in0_re[58] = (alpha_re_9[58] == 1'b1 ? alpha_re_13[58] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[58] = {MMul_dot_product5_in0_re[58][13], MMul_dot_product5_in0_re[58]};
  assign MMul_dot_product5_sub_cast_1[58] = {{4{MMul_dot_product5_sub_cast[58][14]}}, MMul_dot_product5_sub_cast[58]};
  assign MMul_dot_product5_in0_im[58] = (alpha_im_9[58] == 1'b1 ? alpha_im_13[58] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[58] = {MMul_dot_product5_in0_im[58][13], MMul_dot_product5_in0_im[58]};
  assign MMul_dot_product5_sub_cast_3[58] = {{4{MMul_dot_product5_sub_cast_2[58][14]}}, MMul_dot_product5_sub_cast_2[58]};
  assign MMul_dot_product_out_re_1[58] = MMul_dot_product5_sub_cast_1[58] - MMul_dot_product5_sub_cast_3[58];
  assign MMul_dot_product5_in0_im_1[58] = (alpha_im_9[58] == 1'b1 ? alpha_re_13[58] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[58] = {MMul_dot_product5_in0_im_1[58][13], MMul_dot_product5_in0_im_1[58]};
  assign MMul_dot_product5_add_cast_1[58] = {{4{MMul_dot_product5_add_cast[58][14]}}, MMul_dot_product5_add_cast[58]};
  assign MMul_dot_product5_in0_re_1[58] = (alpha_re_9[58] == 1'b1 ? alpha_im_13[58] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[58] = {MMul_dot_product5_in0_re_1[58][13], MMul_dot_product5_in0_re_1[58]};
  assign MMul_dot_product5_add_cast_3[58] = {{4{MMul_dot_product5_add_cast_2[58][14]}}, MMul_dot_product5_add_cast_2[58]};
  assign MMul_dot_product_out_im_1[58] = MMul_dot_product5_add_cast_1[58] + MMul_dot_product5_add_cast_3[58];
  assign MMul_dot_product5_in0_re[59] = (alpha_re_9[59] == 1'b1 ? alpha_re_13[59] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[59] = {MMul_dot_product5_in0_re[59][13], MMul_dot_product5_in0_re[59]};
  assign MMul_dot_product5_sub_cast_1[59] = {{4{MMul_dot_product5_sub_cast[59][14]}}, MMul_dot_product5_sub_cast[59]};
  assign MMul_dot_product5_in0_im[59] = (alpha_im_9[59] == 1'b1 ? alpha_im_13[59] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[59] = {MMul_dot_product5_in0_im[59][13], MMul_dot_product5_in0_im[59]};
  assign MMul_dot_product5_sub_cast_3[59] = {{4{MMul_dot_product5_sub_cast_2[59][14]}}, MMul_dot_product5_sub_cast_2[59]};
  assign MMul_dot_product_out_re_1[59] = MMul_dot_product5_sub_cast_1[59] - MMul_dot_product5_sub_cast_3[59];
  assign MMul_dot_product5_in0_im_1[59] = (alpha_im_9[59] == 1'b1 ? alpha_re_13[59] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[59] = {MMul_dot_product5_in0_im_1[59][13], MMul_dot_product5_in0_im_1[59]};
  assign MMul_dot_product5_add_cast_1[59] = {{4{MMul_dot_product5_add_cast[59][14]}}, MMul_dot_product5_add_cast[59]};
  assign MMul_dot_product5_in0_re_1[59] = (alpha_re_9[59] == 1'b1 ? alpha_im_13[59] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[59] = {MMul_dot_product5_in0_re_1[59][13], MMul_dot_product5_in0_re_1[59]};
  assign MMul_dot_product5_add_cast_3[59] = {{4{MMul_dot_product5_add_cast_2[59][14]}}, MMul_dot_product5_add_cast_2[59]};
  assign MMul_dot_product_out_im_1[59] = MMul_dot_product5_add_cast_1[59] + MMul_dot_product5_add_cast_3[59];
  assign MMul_dot_product5_in0_re[60] = (alpha_re_9[60] == 1'b1 ? alpha_re_13[60] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[60] = {MMul_dot_product5_in0_re[60][13], MMul_dot_product5_in0_re[60]};
  assign MMul_dot_product5_sub_cast_1[60] = {{4{MMul_dot_product5_sub_cast[60][14]}}, MMul_dot_product5_sub_cast[60]};
  assign MMul_dot_product5_in0_im[60] = (alpha_im_9[60] == 1'b1 ? alpha_im_13[60] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[60] = {MMul_dot_product5_in0_im[60][13], MMul_dot_product5_in0_im[60]};
  assign MMul_dot_product5_sub_cast_3[60] = {{4{MMul_dot_product5_sub_cast_2[60][14]}}, MMul_dot_product5_sub_cast_2[60]};
  assign MMul_dot_product_out_re_1[60] = MMul_dot_product5_sub_cast_1[60] - MMul_dot_product5_sub_cast_3[60];
  assign MMul_dot_product5_in0_im_1[60] = (alpha_im_9[60] == 1'b1 ? alpha_re_13[60] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[60] = {MMul_dot_product5_in0_im_1[60][13], MMul_dot_product5_in0_im_1[60]};
  assign MMul_dot_product5_add_cast_1[60] = {{4{MMul_dot_product5_add_cast[60][14]}}, MMul_dot_product5_add_cast[60]};
  assign MMul_dot_product5_in0_re_1[60] = (alpha_re_9[60] == 1'b1 ? alpha_im_13[60] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[60] = {MMul_dot_product5_in0_re_1[60][13], MMul_dot_product5_in0_re_1[60]};
  assign MMul_dot_product5_add_cast_3[60] = {{4{MMul_dot_product5_add_cast_2[60][14]}}, MMul_dot_product5_add_cast_2[60]};
  assign MMul_dot_product_out_im_1[60] = MMul_dot_product5_add_cast_1[60] + MMul_dot_product5_add_cast_3[60];
  assign MMul_dot_product5_in0_re[61] = (alpha_re_9[61] == 1'b1 ? alpha_re_13[61] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[61] = {MMul_dot_product5_in0_re[61][13], MMul_dot_product5_in0_re[61]};
  assign MMul_dot_product5_sub_cast_1[61] = {{4{MMul_dot_product5_sub_cast[61][14]}}, MMul_dot_product5_sub_cast[61]};
  assign MMul_dot_product5_in0_im[61] = (alpha_im_9[61] == 1'b1 ? alpha_im_13[61] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[61] = {MMul_dot_product5_in0_im[61][13], MMul_dot_product5_in0_im[61]};
  assign MMul_dot_product5_sub_cast_3[61] = {{4{MMul_dot_product5_sub_cast_2[61][14]}}, MMul_dot_product5_sub_cast_2[61]};
  assign MMul_dot_product_out_re_1[61] = MMul_dot_product5_sub_cast_1[61] - MMul_dot_product5_sub_cast_3[61];
  assign MMul_dot_product5_in0_im_1[61] = (alpha_im_9[61] == 1'b1 ? alpha_re_13[61] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[61] = {MMul_dot_product5_in0_im_1[61][13], MMul_dot_product5_in0_im_1[61]};
  assign MMul_dot_product5_add_cast_1[61] = {{4{MMul_dot_product5_add_cast[61][14]}}, MMul_dot_product5_add_cast[61]};
  assign MMul_dot_product5_in0_re_1[61] = (alpha_re_9[61] == 1'b1 ? alpha_im_13[61] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[61] = {MMul_dot_product5_in0_re_1[61][13], MMul_dot_product5_in0_re_1[61]};
  assign MMul_dot_product5_add_cast_3[61] = {{4{MMul_dot_product5_add_cast_2[61][14]}}, MMul_dot_product5_add_cast_2[61]};
  assign MMul_dot_product_out_im_1[61] = MMul_dot_product5_add_cast_1[61] + MMul_dot_product5_add_cast_3[61];
  assign MMul_dot_product5_in0_re[62] = (alpha_re_9[62] == 1'b1 ? alpha_re_13[62] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[62] = {MMul_dot_product5_in0_re[62][13], MMul_dot_product5_in0_re[62]};
  assign MMul_dot_product5_sub_cast_1[62] = {{4{MMul_dot_product5_sub_cast[62][14]}}, MMul_dot_product5_sub_cast[62]};
  assign MMul_dot_product5_in0_im[62] = (alpha_im_9[62] == 1'b1 ? alpha_im_13[62] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[62] = {MMul_dot_product5_in0_im[62][13], MMul_dot_product5_in0_im[62]};
  assign MMul_dot_product5_sub_cast_3[62] = {{4{MMul_dot_product5_sub_cast_2[62][14]}}, MMul_dot_product5_sub_cast_2[62]};
  assign MMul_dot_product_out_re_1[62] = MMul_dot_product5_sub_cast_1[62] - MMul_dot_product5_sub_cast_3[62];
  assign MMul_dot_product5_in0_im_1[62] = (alpha_im_9[62] == 1'b1 ? alpha_re_13[62] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[62] = {MMul_dot_product5_in0_im_1[62][13], MMul_dot_product5_in0_im_1[62]};
  assign MMul_dot_product5_add_cast_1[62] = {{4{MMul_dot_product5_add_cast[62][14]}}, MMul_dot_product5_add_cast[62]};
  assign MMul_dot_product5_in0_re_1[62] = (alpha_re_9[62] == 1'b1 ? alpha_im_13[62] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[62] = {MMul_dot_product5_in0_re_1[62][13], MMul_dot_product5_in0_re_1[62]};
  assign MMul_dot_product5_add_cast_3[62] = {{4{MMul_dot_product5_add_cast_2[62][14]}}, MMul_dot_product5_add_cast_2[62]};
  assign MMul_dot_product_out_im_1[62] = MMul_dot_product5_add_cast_1[62] + MMul_dot_product5_add_cast_3[62];
  assign MMul_dot_product5_in0_re[63] = (alpha_re_9[63] == 1'b1 ? alpha_re_13[63] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast[63] = {MMul_dot_product5_in0_re[63][13], MMul_dot_product5_in0_re[63]};
  assign MMul_dot_product5_sub_cast_1[63] = {{4{MMul_dot_product5_sub_cast[63][14]}}, MMul_dot_product5_sub_cast[63]};
  assign MMul_dot_product5_in0_im[63] = (alpha_im_9[63] == 1'b1 ? alpha_im_13[63] :
              14'sb00000000000000);
  assign MMul_dot_product5_sub_cast_2[63] = {MMul_dot_product5_in0_im[63][13], MMul_dot_product5_in0_im[63]};
  assign MMul_dot_product5_sub_cast_3[63] = {{4{MMul_dot_product5_sub_cast_2[63][14]}}, MMul_dot_product5_sub_cast_2[63]};
  assign MMul_dot_product_out_re_1[63] = MMul_dot_product5_sub_cast_1[63] - MMul_dot_product5_sub_cast_3[63];
  assign MMul_dot_product5_in0_im_1[63] = (alpha_im_9[63] == 1'b1 ? alpha_re_13[63] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast[63] = {MMul_dot_product5_in0_im_1[63][13], MMul_dot_product5_in0_im_1[63]};
  assign MMul_dot_product5_add_cast_1[63] = {{4{MMul_dot_product5_add_cast[63][14]}}, MMul_dot_product5_add_cast[63]};
  assign MMul_dot_product5_in0_re_1[63] = (alpha_re_9[63] == 1'b1 ? alpha_im_13[63] :
              14'sb00000000000000);
  assign MMul_dot_product5_add_cast_2[63] = {MMul_dot_product5_in0_re_1[63][13], MMul_dot_product5_in0_re_1[63]};
  assign MMul_dot_product5_add_cast_3[63] = {{4{MMul_dot_product5_add_cast_2[63][14]}}, MMul_dot_product5_add_cast_2[63]};
  assign MMul_dot_product_out_im_1[63] = MMul_dot_product5_add_cast_1[63] + MMul_dot_product5_add_cast_3[63];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  always_comb begin
    reshape_out_re_1[0][0] = MMul_dot_product_out_re_1[0];
    reshape_out_im_1[0][0] = MMul_dot_product_out_im_1[0];
    reshape_out_re_1[1][0] = MMul_dot_product_out_re_1[1];
    reshape_out_im_1[1][0] = MMul_dot_product_out_im_1[1];
    reshape_out_re_1[2][0] = MMul_dot_product_out_re_1[2];
    reshape_out_im_1[2][0] = MMul_dot_product_out_im_1[2];
    reshape_out_re_1[3][0] = MMul_dot_product_out_re_1[3];
    reshape_out_im_1[3][0] = MMul_dot_product_out_im_1[3];
    reshape_out_re_1[4][0] = MMul_dot_product_out_re_1[4];
    reshape_out_im_1[4][0] = MMul_dot_product_out_im_1[4];
    reshape_out_re_1[5][0] = MMul_dot_product_out_re_1[5];
    reshape_out_im_1[5][0] = MMul_dot_product_out_im_1[5];
    reshape_out_re_1[6][0] = MMul_dot_product_out_re_1[6];
    reshape_out_im_1[6][0] = MMul_dot_product_out_im_1[6];
    reshape_out_re_1[7][0] = MMul_dot_product_out_re_1[7];
    reshape_out_im_1[7][0] = MMul_dot_product_out_im_1[7];
    reshape_out_re_1[0][1] = MMul_dot_product_out_re_1[8];
    reshape_out_im_1[0][1] = MMul_dot_product_out_im_1[8];
    reshape_out_re_1[1][1] = MMul_dot_product_out_re_1[9];
    reshape_out_im_1[1][1] = MMul_dot_product_out_im_1[9];
    reshape_out_re_1[2][1] = MMul_dot_product_out_re_1[10];
    reshape_out_im_1[2][1] = MMul_dot_product_out_im_1[10];
    reshape_out_re_1[3][1] = MMul_dot_product_out_re_1[11];
    reshape_out_im_1[3][1] = MMul_dot_product_out_im_1[11];
    reshape_out_re_1[4][1] = MMul_dot_product_out_re_1[12];
    reshape_out_im_1[4][1] = MMul_dot_product_out_im_1[12];
    reshape_out_re_1[5][1] = MMul_dot_product_out_re_1[13];
    reshape_out_im_1[5][1] = MMul_dot_product_out_im_1[13];
    reshape_out_re_1[6][1] = MMul_dot_product_out_re_1[14];
    reshape_out_im_1[6][1] = MMul_dot_product_out_im_1[14];
    reshape_out_re_1[7][1] = MMul_dot_product_out_re_1[15];
    reshape_out_im_1[7][1] = MMul_dot_product_out_im_1[15];
    reshape_out_re_1[0][2] = MMul_dot_product_out_re_1[16];
    reshape_out_im_1[0][2] = MMul_dot_product_out_im_1[16];
    reshape_out_re_1[1][2] = MMul_dot_product_out_re_1[17];
    reshape_out_im_1[1][2] = MMul_dot_product_out_im_1[17];
    reshape_out_re_1[2][2] = MMul_dot_product_out_re_1[18];
    reshape_out_im_1[2][2] = MMul_dot_product_out_im_1[18];
    reshape_out_re_1[3][2] = MMul_dot_product_out_re_1[19];
    reshape_out_im_1[3][2] = MMul_dot_product_out_im_1[19];
    reshape_out_re_1[4][2] = MMul_dot_product_out_re_1[20];
    reshape_out_im_1[4][2] = MMul_dot_product_out_im_1[20];
    reshape_out_re_1[5][2] = MMul_dot_product_out_re_1[21];
    reshape_out_im_1[5][2] = MMul_dot_product_out_im_1[21];
    reshape_out_re_1[6][2] = MMul_dot_product_out_re_1[22];
    reshape_out_im_1[6][2] = MMul_dot_product_out_im_1[22];
    reshape_out_re_1[7][2] = MMul_dot_product_out_re_1[23];
    reshape_out_im_1[7][2] = MMul_dot_product_out_im_1[23];
    reshape_out_re_1[0][3] = MMul_dot_product_out_re_1[24];
    reshape_out_im_1[0][3] = MMul_dot_product_out_im_1[24];
    reshape_out_re_1[1][3] = MMul_dot_product_out_re_1[25];
    reshape_out_im_1[1][3] = MMul_dot_product_out_im_1[25];
    reshape_out_re_1[2][3] = MMul_dot_product_out_re_1[26];
    reshape_out_im_1[2][3] = MMul_dot_product_out_im_1[26];
    reshape_out_re_1[3][3] = MMul_dot_product_out_re_1[27];
    reshape_out_im_1[3][3] = MMul_dot_product_out_im_1[27];
    reshape_out_re_1[4][3] = MMul_dot_product_out_re_1[28];
    reshape_out_im_1[4][3] = MMul_dot_product_out_im_1[28];
    reshape_out_re_1[5][3] = MMul_dot_product_out_re_1[29];
    reshape_out_im_1[5][3] = MMul_dot_product_out_im_1[29];
    reshape_out_re_1[6][3] = MMul_dot_product_out_re_1[30];
    reshape_out_im_1[6][3] = MMul_dot_product_out_im_1[30];
    reshape_out_re_1[7][3] = MMul_dot_product_out_re_1[31];
    reshape_out_im_1[7][3] = MMul_dot_product_out_im_1[31];
    reshape_out_re_1[0][4] = MMul_dot_product_out_re_1[32];
    reshape_out_im_1[0][4] = MMul_dot_product_out_im_1[32];
    reshape_out_re_1[1][4] = MMul_dot_product_out_re_1[33];
    reshape_out_im_1[1][4] = MMul_dot_product_out_im_1[33];
    reshape_out_re_1[2][4] = MMul_dot_product_out_re_1[34];
    reshape_out_im_1[2][4] = MMul_dot_product_out_im_1[34];
    reshape_out_re_1[3][4] = MMul_dot_product_out_re_1[35];
    reshape_out_im_1[3][4] = MMul_dot_product_out_im_1[35];
    reshape_out_re_1[4][4] = MMul_dot_product_out_re_1[36];
    reshape_out_im_1[4][4] = MMul_dot_product_out_im_1[36];
    reshape_out_re_1[5][4] = MMul_dot_product_out_re_1[37];
    reshape_out_im_1[5][4] = MMul_dot_product_out_im_1[37];
    reshape_out_re_1[6][4] = MMul_dot_product_out_re_1[38];
    reshape_out_im_1[6][4] = MMul_dot_product_out_im_1[38];
    reshape_out_re_1[7][4] = MMul_dot_product_out_re_1[39];
    reshape_out_im_1[7][4] = MMul_dot_product_out_im_1[39];
    reshape_out_re_1[0][5] = MMul_dot_product_out_re_1[40];
    reshape_out_im_1[0][5] = MMul_dot_product_out_im_1[40];
    reshape_out_re_1[1][5] = MMul_dot_product_out_re_1[41];
    reshape_out_im_1[1][5] = MMul_dot_product_out_im_1[41];
    reshape_out_re_1[2][5] = MMul_dot_product_out_re_1[42];
    reshape_out_im_1[2][5] = MMul_dot_product_out_im_1[42];
    reshape_out_re_1[3][5] = MMul_dot_product_out_re_1[43];
    reshape_out_im_1[3][5] = MMul_dot_product_out_im_1[43];
    reshape_out_re_1[4][5] = MMul_dot_product_out_re_1[44];
    reshape_out_im_1[4][5] = MMul_dot_product_out_im_1[44];
    reshape_out_re_1[5][5] = MMul_dot_product_out_re_1[45];
    reshape_out_im_1[5][5] = MMul_dot_product_out_im_1[45];
    reshape_out_re_1[6][5] = MMul_dot_product_out_re_1[46];
    reshape_out_im_1[6][5] = MMul_dot_product_out_im_1[46];
    reshape_out_re_1[7][5] = MMul_dot_product_out_re_1[47];
    reshape_out_im_1[7][5] = MMul_dot_product_out_im_1[47];
    reshape_out_re_1[0][6] = MMul_dot_product_out_re_1[48];
    reshape_out_im_1[0][6] = MMul_dot_product_out_im_1[48];
    reshape_out_re_1[1][6] = MMul_dot_product_out_re_1[49];
    reshape_out_im_1[1][6] = MMul_dot_product_out_im_1[49];
    reshape_out_re_1[2][6] = MMul_dot_product_out_re_1[50];
    reshape_out_im_1[2][6] = MMul_dot_product_out_im_1[50];
    reshape_out_re_1[3][6] = MMul_dot_product_out_re_1[51];
    reshape_out_im_1[3][6] = MMul_dot_product_out_im_1[51];
    reshape_out_re_1[4][6] = MMul_dot_product_out_re_1[52];
    reshape_out_im_1[4][6] = MMul_dot_product_out_im_1[52];
    reshape_out_re_1[5][6] = MMul_dot_product_out_re_1[53];
    reshape_out_im_1[5][6] = MMul_dot_product_out_im_1[53];
    reshape_out_re_1[6][6] = MMul_dot_product_out_re_1[54];
    reshape_out_im_1[6][6] = MMul_dot_product_out_im_1[54];
    reshape_out_re_1[7][6] = MMul_dot_product_out_re_1[55];
    reshape_out_im_1[7][6] = MMul_dot_product_out_im_1[55];
    reshape_out_re_1[0][7] = MMul_dot_product_out_re_1[56];
    reshape_out_im_1[0][7] = MMul_dot_product_out_im_1[56];
    reshape_out_re_1[1][7] = MMul_dot_product_out_re_1[57];
    reshape_out_im_1[1][7] = MMul_dot_product_out_im_1[57];
    reshape_out_re_1[2][7] = MMul_dot_product_out_re_1[58];
    reshape_out_im_1[2][7] = MMul_dot_product_out_im_1[58];
    reshape_out_re_1[3][7] = MMul_dot_product_out_re_1[59];
    reshape_out_im_1[3][7] = MMul_dot_product_out_im_1[59];
    reshape_out_re_1[4][7] = MMul_dot_product_out_re_1[60];
    reshape_out_im_1[4][7] = MMul_dot_product_out_im_1[60];
    reshape_out_re_1[5][7] = MMul_dot_product_out_re_1[61];
    reshape_out_im_1[5][7] = MMul_dot_product_out_im_1[61];
    reshape_out_re_1[6][7] = MMul_dot_product_out_re_1[62];
    reshape_out_im_1[6][7] = MMul_dot_product_out_im_1[62];
    reshape_out_re_1[7][7] = MMul_dot_product_out_re_1[63];
    reshape_out_im_1[7][7] = MMul_dot_product_out_im_1[63];
  end

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_15[0] = reshape_out_re_1[0][0];
  assign selector_out_im_15[0] = reshape_out_im_1[0][0];
  assign selector_out_re_15[1] = reshape_out_re_1[0][1];
  assign selector_out_im_15[1] = reshape_out_im_1[0][1];
  assign selector_out_re_15[2] = reshape_out_re_1[0][2];
  assign selector_out_im_15[2] = reshape_out_im_1[0][2];
  assign selector_out_re_15[3] = reshape_out_re_1[0][3];
  assign selector_out_im_15[3] = reshape_out_im_1[0][3];
  assign selector_out_re_15[4] = reshape_out_re_1[0][4];
  assign selector_out_im_15[4] = reshape_out_im_1[0][4];
  assign selector_out_re_15[5] = reshape_out_re_1[0][5];
  assign selector_out_im_15[5] = reshape_out_im_1[0][5];
  assign selector_out_re_15[6] = reshape_out_re_1[0][6];
  assign selector_out_im_15[6] = reshape_out_im_1[0][6];
  assign selector_out_re_15[7] = reshape_out_re_1[0][7];
  assign selector_out_im_15[7] = reshape_out_im_1[0][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_16[0] = reshape_out_re_1[1][0];
  assign selector_out_im_16[0] = reshape_out_im_1[1][0];
  assign selector_out_re_16[1] = reshape_out_re_1[1][1];
  assign selector_out_im_16[1] = reshape_out_im_1[1][1];
  assign selector_out_re_16[2] = reshape_out_re_1[1][2];
  assign selector_out_im_16[2] = reshape_out_im_1[1][2];
  assign selector_out_re_16[3] = reshape_out_re_1[1][3];
  assign selector_out_im_16[3] = reshape_out_im_1[1][3];
  assign selector_out_re_16[4] = reshape_out_re_1[1][4];
  assign selector_out_im_16[4] = reshape_out_im_1[1][4];
  assign selector_out_re_16[5] = reshape_out_re_1[1][5];
  assign selector_out_im_16[5] = reshape_out_im_1[1][5];
  assign selector_out_re_16[6] = reshape_out_re_1[1][6];
  assign selector_out_im_16[6] = reshape_out_im_1[1][6];
  assign selector_out_re_16[7] = reshape_out_re_1[1][7];
  assign selector_out_im_16[7] = reshape_out_im_1[1][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_add_01_out_re_1[0] = selector_out_re_15[0] + selector_out_re_16[0];
  assign MMul_add_01_out_im_1[0] = selector_out_im_15[0] + selector_out_im_16[0];
  assign MMul_add_01_out_re_1[1] = selector_out_re_15[1] + selector_out_re_16[1];
  assign MMul_add_01_out_im_1[1] = selector_out_im_15[1] + selector_out_im_16[1];
  assign MMul_add_01_out_re_1[2] = selector_out_re_15[2] + selector_out_re_16[2];
  assign MMul_add_01_out_im_1[2] = selector_out_im_15[2] + selector_out_im_16[2];
  assign MMul_add_01_out_re_1[3] = selector_out_re_15[3] + selector_out_re_16[3];
  assign MMul_add_01_out_im_1[3] = selector_out_im_15[3] + selector_out_im_16[3];
  assign MMul_add_01_out_re_1[4] = selector_out_re_15[4] + selector_out_re_16[4];
  assign MMul_add_01_out_im_1[4] = selector_out_im_15[4] + selector_out_im_16[4];
  assign MMul_add_01_out_re_1[5] = selector_out_re_15[5] + selector_out_re_16[5];
  assign MMul_add_01_out_im_1[5] = selector_out_im_15[5] + selector_out_im_16[5];
  assign MMul_add_01_out_re_1[6] = selector_out_re_15[6] + selector_out_re_16[6];
  assign MMul_add_01_out_im_1[6] = selector_out_im_15[6] + selector_out_im_16[6];
  assign MMul_add_01_out_re_1[7] = selector_out_re_15[7] + selector_out_re_16[7];
  assign MMul_add_01_out_im_1[7] = selector_out_im_15[7] + selector_out_im_16[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_17[0] = reshape_out_re_1[2][0];
  assign selector_out_im_17[0] = reshape_out_im_1[2][0];
  assign selector_out_re_17[1] = reshape_out_re_1[2][1];
  assign selector_out_im_17[1] = reshape_out_im_1[2][1];
  assign selector_out_re_17[2] = reshape_out_re_1[2][2];
  assign selector_out_im_17[2] = reshape_out_im_1[2][2];
  assign selector_out_re_17[3] = reshape_out_re_1[2][3];
  assign selector_out_im_17[3] = reshape_out_im_1[2][3];
  assign selector_out_re_17[4] = reshape_out_re_1[2][4];
  assign selector_out_im_17[4] = reshape_out_im_1[2][4];
  assign selector_out_re_17[5] = reshape_out_re_1[2][5];
  assign selector_out_im_17[5] = reshape_out_im_1[2][5];
  assign selector_out_re_17[6] = reshape_out_re_1[2][6];
  assign selector_out_im_17[6] = reshape_out_im_1[2][6];
  assign selector_out_re_17[7] = reshape_out_re_1[2][7];
  assign selector_out_im_17[7] = reshape_out_im_1[2][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_add_12_out_re_1[0] = MMul_add_01_out_re_1[0] + selector_out_re_17[0];
  assign MMul_add_12_out_im_1[0] = MMul_add_01_out_im_1[0] + selector_out_im_17[0];
  assign MMul_add_12_out_re_1[1] = MMul_add_01_out_re_1[1] + selector_out_re_17[1];
  assign MMul_add_12_out_im_1[1] = MMul_add_01_out_im_1[1] + selector_out_im_17[1];
  assign MMul_add_12_out_re_1[2] = MMul_add_01_out_re_1[2] + selector_out_re_17[2];
  assign MMul_add_12_out_im_1[2] = MMul_add_01_out_im_1[2] + selector_out_im_17[2];
  assign MMul_add_12_out_re_1[3] = MMul_add_01_out_re_1[3] + selector_out_re_17[3];
  assign MMul_add_12_out_im_1[3] = MMul_add_01_out_im_1[3] + selector_out_im_17[3];
  assign MMul_add_12_out_re_1[4] = MMul_add_01_out_re_1[4] + selector_out_re_17[4];
  assign MMul_add_12_out_im_1[4] = MMul_add_01_out_im_1[4] + selector_out_im_17[4];
  assign MMul_add_12_out_re_1[5] = MMul_add_01_out_re_1[5] + selector_out_re_17[5];
  assign MMul_add_12_out_im_1[5] = MMul_add_01_out_im_1[5] + selector_out_im_17[5];
  assign MMul_add_12_out_re_1[6] = MMul_add_01_out_re_1[6] + selector_out_re_17[6];
  assign MMul_add_12_out_im_1[6] = MMul_add_01_out_im_1[6] + selector_out_im_17[6];
  assign MMul_add_12_out_re_1[7] = MMul_add_01_out_re_1[7] + selector_out_re_17[7];
  assign MMul_add_12_out_im_1[7] = MMul_add_01_out_im_1[7] + selector_out_im_17[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_18[0] = reshape_out_re_1[3][0];
  assign selector_out_im_18[0] = reshape_out_im_1[3][0];
  assign selector_out_re_18[1] = reshape_out_re_1[3][1];
  assign selector_out_im_18[1] = reshape_out_im_1[3][1];
  assign selector_out_re_18[2] = reshape_out_re_1[3][2];
  assign selector_out_im_18[2] = reshape_out_im_1[3][2];
  assign selector_out_re_18[3] = reshape_out_re_1[3][3];
  assign selector_out_im_18[3] = reshape_out_im_1[3][3];
  assign selector_out_re_18[4] = reshape_out_re_1[3][4];
  assign selector_out_im_18[4] = reshape_out_im_1[3][4];
  assign selector_out_re_18[5] = reshape_out_re_1[3][5];
  assign selector_out_im_18[5] = reshape_out_im_1[3][5];
  assign selector_out_re_18[6] = reshape_out_re_1[3][6];
  assign selector_out_im_18[6] = reshape_out_im_1[3][6];
  assign selector_out_re_18[7] = reshape_out_re_1[3][7];
  assign selector_out_im_18[7] = reshape_out_im_1[3][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_add_23_out_re_1[0] = MMul_add_12_out_re_1[0] + selector_out_re_18[0];
  assign MMul_add_23_out_im_1[0] = MMul_add_12_out_im_1[0] + selector_out_im_18[0];
  assign MMul_add_23_out_re_1[1] = MMul_add_12_out_re_1[1] + selector_out_re_18[1];
  assign MMul_add_23_out_im_1[1] = MMul_add_12_out_im_1[1] + selector_out_im_18[1];
  assign MMul_add_23_out_re_1[2] = MMul_add_12_out_re_1[2] + selector_out_re_18[2];
  assign MMul_add_23_out_im_1[2] = MMul_add_12_out_im_1[2] + selector_out_im_18[2];
  assign MMul_add_23_out_re_1[3] = MMul_add_12_out_re_1[3] + selector_out_re_18[3];
  assign MMul_add_23_out_im_1[3] = MMul_add_12_out_im_1[3] + selector_out_im_18[3];
  assign MMul_add_23_out_re_1[4] = MMul_add_12_out_re_1[4] + selector_out_re_18[4];
  assign MMul_add_23_out_im_1[4] = MMul_add_12_out_im_1[4] + selector_out_im_18[4];
  assign MMul_add_23_out_re_1[5] = MMul_add_12_out_re_1[5] + selector_out_re_18[5];
  assign MMul_add_23_out_im_1[5] = MMul_add_12_out_im_1[5] + selector_out_im_18[5];
  assign MMul_add_23_out_re_1[6] = MMul_add_12_out_re_1[6] + selector_out_re_18[6];
  assign MMul_add_23_out_im_1[6] = MMul_add_12_out_im_1[6] + selector_out_im_18[6];
  assign MMul_add_23_out_re_1[7] = MMul_add_12_out_re_1[7] + selector_out_re_18[7];
  assign MMul_add_23_out_im_1[7] = MMul_add_12_out_im_1[7] + selector_out_im_18[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_19[0] = reshape_out_re_1[4][0];
  assign selector_out_im_19[0] = reshape_out_im_1[4][0];
  assign selector_out_re_19[1] = reshape_out_re_1[4][1];
  assign selector_out_im_19[1] = reshape_out_im_1[4][1];
  assign selector_out_re_19[2] = reshape_out_re_1[4][2];
  assign selector_out_im_19[2] = reshape_out_im_1[4][2];
  assign selector_out_re_19[3] = reshape_out_re_1[4][3];
  assign selector_out_im_19[3] = reshape_out_im_1[4][3];
  assign selector_out_re_19[4] = reshape_out_re_1[4][4];
  assign selector_out_im_19[4] = reshape_out_im_1[4][4];
  assign selector_out_re_19[5] = reshape_out_re_1[4][5];
  assign selector_out_im_19[5] = reshape_out_im_1[4][5];
  assign selector_out_re_19[6] = reshape_out_re_1[4][6];
  assign selector_out_im_19[6] = reshape_out_im_1[4][6];
  assign selector_out_re_19[7] = reshape_out_re_1[4][7];
  assign selector_out_im_19[7] = reshape_out_im_1[4][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_add_34_out_re_1[0] = MMul_add_23_out_re_1[0] + selector_out_re_19[0];
  assign MMul_add_34_out_im_1[0] = MMul_add_23_out_im_1[0] + selector_out_im_19[0];
  assign MMul_add_34_out_re_1[1] = MMul_add_23_out_re_1[1] + selector_out_re_19[1];
  assign MMul_add_34_out_im_1[1] = MMul_add_23_out_im_1[1] + selector_out_im_19[1];
  assign MMul_add_34_out_re_1[2] = MMul_add_23_out_re_1[2] + selector_out_re_19[2];
  assign MMul_add_34_out_im_1[2] = MMul_add_23_out_im_1[2] + selector_out_im_19[2];
  assign MMul_add_34_out_re_1[3] = MMul_add_23_out_re_1[3] + selector_out_re_19[3];
  assign MMul_add_34_out_im_1[3] = MMul_add_23_out_im_1[3] + selector_out_im_19[3];
  assign MMul_add_34_out_re_1[4] = MMul_add_23_out_re_1[4] + selector_out_re_19[4];
  assign MMul_add_34_out_im_1[4] = MMul_add_23_out_im_1[4] + selector_out_im_19[4];
  assign MMul_add_34_out_re_1[5] = MMul_add_23_out_re_1[5] + selector_out_re_19[5];
  assign MMul_add_34_out_im_1[5] = MMul_add_23_out_im_1[5] + selector_out_im_19[5];
  assign MMul_add_34_out_re_1[6] = MMul_add_23_out_re_1[6] + selector_out_re_19[6];
  assign MMul_add_34_out_im_1[6] = MMul_add_23_out_im_1[6] + selector_out_im_19[6];
  assign MMul_add_34_out_re_1[7] = MMul_add_23_out_re_1[7] + selector_out_re_19[7];
  assign MMul_add_34_out_im_1[7] = MMul_add_23_out_im_1[7] + selector_out_im_19[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_20[0] = reshape_out_re_1[5][0];
  assign selector_out_im_20[0] = reshape_out_im_1[5][0];
  assign selector_out_re_20[1] = reshape_out_re_1[5][1];
  assign selector_out_im_20[1] = reshape_out_im_1[5][1];
  assign selector_out_re_20[2] = reshape_out_re_1[5][2];
  assign selector_out_im_20[2] = reshape_out_im_1[5][2];
  assign selector_out_re_20[3] = reshape_out_re_1[5][3];
  assign selector_out_im_20[3] = reshape_out_im_1[5][3];
  assign selector_out_re_20[4] = reshape_out_re_1[5][4];
  assign selector_out_im_20[4] = reshape_out_im_1[5][4];
  assign selector_out_re_20[5] = reshape_out_re_1[5][5];
  assign selector_out_im_20[5] = reshape_out_im_1[5][5];
  assign selector_out_re_20[6] = reshape_out_re_1[5][6];
  assign selector_out_im_20[6] = reshape_out_im_1[5][6];
  assign selector_out_re_20[7] = reshape_out_re_1[5][7];
  assign selector_out_im_20[7] = reshape_out_im_1[5][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_add_45_out_re_1[0] = MMul_add_34_out_re_1[0] + selector_out_re_20[0];
  assign MMul_add_45_out_im_1[0] = MMul_add_34_out_im_1[0] + selector_out_im_20[0];
  assign MMul_add_45_out_re_1[1] = MMul_add_34_out_re_1[1] + selector_out_re_20[1];
  assign MMul_add_45_out_im_1[1] = MMul_add_34_out_im_1[1] + selector_out_im_20[1];
  assign MMul_add_45_out_re_1[2] = MMul_add_34_out_re_1[2] + selector_out_re_20[2];
  assign MMul_add_45_out_im_1[2] = MMul_add_34_out_im_1[2] + selector_out_im_20[2];
  assign MMul_add_45_out_re_1[3] = MMul_add_34_out_re_1[3] + selector_out_re_20[3];
  assign MMul_add_45_out_im_1[3] = MMul_add_34_out_im_1[3] + selector_out_im_20[3];
  assign MMul_add_45_out_re_1[4] = MMul_add_34_out_re_1[4] + selector_out_re_20[4];
  assign MMul_add_45_out_im_1[4] = MMul_add_34_out_im_1[4] + selector_out_im_20[4];
  assign MMul_add_45_out_re_1[5] = MMul_add_34_out_re_1[5] + selector_out_re_20[5];
  assign MMul_add_45_out_im_1[5] = MMul_add_34_out_im_1[5] + selector_out_im_20[5];
  assign MMul_add_45_out_re_1[6] = MMul_add_34_out_re_1[6] + selector_out_re_20[6];
  assign MMul_add_45_out_im_1[6] = MMul_add_34_out_im_1[6] + selector_out_im_20[6];
  assign MMul_add_45_out_re_1[7] = MMul_add_34_out_re_1[7] + selector_out_re_20[7];
  assign MMul_add_45_out_im_1[7] = MMul_add_34_out_im_1[7] + selector_out_im_20[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_21[0] = reshape_out_re_1[6][0];
  assign selector_out_im_21[0] = reshape_out_im_1[6][0];
  assign selector_out_re_21[1] = reshape_out_re_1[6][1];
  assign selector_out_im_21[1] = reshape_out_im_1[6][1];
  assign selector_out_re_21[2] = reshape_out_re_1[6][2];
  assign selector_out_im_21[2] = reshape_out_im_1[6][2];
  assign selector_out_re_21[3] = reshape_out_re_1[6][3];
  assign selector_out_im_21[3] = reshape_out_im_1[6][3];
  assign selector_out_re_21[4] = reshape_out_re_1[6][4];
  assign selector_out_im_21[4] = reshape_out_im_1[6][4];
  assign selector_out_re_21[5] = reshape_out_re_1[6][5];
  assign selector_out_im_21[5] = reshape_out_im_1[6][5];
  assign selector_out_re_21[6] = reshape_out_re_1[6][6];
  assign selector_out_im_21[6] = reshape_out_im_1[6][6];
  assign selector_out_re_21[7] = reshape_out_re_1[6][7];
  assign selector_out_im_21[7] = reshape_out_im_1[6][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign MMul_add_56_out_re_1[0] = MMul_add_45_out_re_1[0] + selector_out_re_21[0];
  assign MMul_add_56_out_im_1[0] = MMul_add_45_out_im_1[0] + selector_out_im_21[0];
  assign MMul_add_56_out_re_1[1] = MMul_add_45_out_re_1[1] + selector_out_re_21[1];
  assign MMul_add_56_out_im_1[1] = MMul_add_45_out_im_1[1] + selector_out_im_21[1];
  assign MMul_add_56_out_re_1[2] = MMul_add_45_out_re_1[2] + selector_out_re_21[2];
  assign MMul_add_56_out_im_1[2] = MMul_add_45_out_im_1[2] + selector_out_im_21[2];
  assign MMul_add_56_out_re_1[3] = MMul_add_45_out_re_1[3] + selector_out_re_21[3];
  assign MMul_add_56_out_im_1[3] = MMul_add_45_out_im_1[3] + selector_out_im_21[3];
  assign MMul_add_56_out_re_1[4] = MMul_add_45_out_re_1[4] + selector_out_re_21[4];
  assign MMul_add_56_out_im_1[4] = MMul_add_45_out_im_1[4] + selector_out_im_21[4];
  assign MMul_add_56_out_re_1[5] = MMul_add_45_out_re_1[5] + selector_out_re_21[5];
  assign MMul_add_56_out_im_1[5] = MMul_add_45_out_im_1[5] + selector_out_im_21[5];
  assign MMul_add_56_out_re_1[6] = MMul_add_45_out_re_1[6] + selector_out_re_21[6];
  assign MMul_add_56_out_im_1[6] = MMul_add_45_out_im_1[6] + selector_out_im_21[6];
  assign MMul_add_56_out_re_1[7] = MMul_add_45_out_re_1[7] + selector_out_re_21[7];
  assign MMul_add_56_out_im_1[7] = MMul_add_45_out_im_1[7] + selector_out_im_21[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign selector_out_re_22[0] = reshape_out_re_1[7][0];
  assign selector_out_im_22[0] = reshape_out_im_1[7][0];
  assign selector_out_re_22[1] = reshape_out_re_1[7][1];
  assign selector_out_im_22[1] = reshape_out_im_1[7][1];
  assign selector_out_re_22[2] = reshape_out_re_1[7][2];
  assign selector_out_im_22[2] = reshape_out_im_1[7][2];
  assign selector_out_re_22[3] = reshape_out_re_1[7][3];
  assign selector_out_im_22[3] = reshape_out_im_1[7][3];
  assign selector_out_re_22[4] = reshape_out_re_1[7][4];
  assign selector_out_im_22[4] = reshape_out_im_1[7][4];
  assign selector_out_re_22[5] = reshape_out_re_1[7][5];
  assign selector_out_im_22[5] = reshape_out_im_1[7][5];
  assign selector_out_re_22[6] = reshape_out_re_1[7][6];
  assign selector_out_im_22[6] = reshape_out_im_1[7][6];
  assign selector_out_re_22[7] = reshape_out_re_1[7][7];
  assign selector_out_im_22[7] = reshape_out_im_1[7][7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign alpha_re_14[0] = MMul_add_56_out_re_1[0] + selector_out_re_22[0];
  assign alpha_im_14[0] = MMul_add_56_out_im_1[0] + selector_out_im_22[0];
  assign alpha_re_14[1] = MMul_add_56_out_re_1[1] + selector_out_re_22[1];
  assign alpha_im_14[1] = MMul_add_56_out_im_1[1] + selector_out_im_22[1];
  assign alpha_re_14[2] = MMul_add_56_out_re_1[2] + selector_out_re_22[2];
  assign alpha_im_14[2] = MMul_add_56_out_im_1[2] + selector_out_im_22[2];
  assign alpha_re_14[3] = MMul_add_56_out_re_1[3] + selector_out_re_22[3];
  assign alpha_im_14[3] = MMul_add_56_out_im_1[3] + selector_out_im_22[3];
  assign alpha_re_14[4] = MMul_add_56_out_re_1[4] + selector_out_re_22[4];
  assign alpha_im_14[4] = MMul_add_56_out_im_1[4] + selector_out_im_22[4];
  assign alpha_re_14[5] = MMul_add_56_out_re_1[5] + selector_out_re_22[5];
  assign alpha_im_14[5] = MMul_add_56_out_im_1[5] + selector_out_im_22[5];
  assign alpha_re_14[6] = MMul_add_56_out_re_1[6] + selector_out_re_22[6];
  assign alpha_im_14[6] = MMul_add_56_out_im_1[6] + selector_out_im_22[6];
  assign alpha_re_14[7] = MMul_add_56_out_re_1[7] + selector_out_re_22[7];
  assign alpha_im_14[7] = MMul_add_56_out_im_1[7] + selector_out_im_22[7];

  // Step 2: Apply controlled R2 between qubit 1 and qubit 2
  // Controlled phase shift on qubit 1 and 2
  assign out0_re_1[0] = alpha_re_14[0];
  assign out0_im_1[0] = alpha_im_14[0];
  assign out0_re_1[1] = alpha_re_14[1];
  assign out0_im_1[1] = alpha_im_14[1];
  assign out0_re_1[2] = alpha_re_14[2];
  assign out0_im_1[2] = alpha_im_14[2];
  assign out0_re_1[3] = alpha_re_14[3];
  assign out0_im_1[3] = alpha_im_14[3];
  assign out0_re_1[4] = alpha_re_14[4];
  assign out0_im_1[4] = alpha_im_14[4];
  assign out0_re_1[5] = alpha_re_14[5];
  assign out0_im_1[5] = alpha_im_14[5];
  assign out0_re_1[6] = alpha_re_14[6];
  assign out0_im_1[6] = alpha_im_14[6];
  assign out0_re_1[7] = alpha_re_14[7];
  assign out0_im_1[7] = alpha_im_14[7];

  assign state_after_CR2_12_re[0] = out0_re_1[0][13:0];
  assign state_after_CR2_12_im[0] = out0_im_1[0][13:0];
  assign state_after_CR2_12_re[1] = out0_re_1[1][13:0];
  assign state_after_CR2_12_im[1] = out0_im_1[1][13:0];
  assign state_after_CR2_12_re[2] = out0_re_1[2][13:0];
  assign state_after_CR2_12_im[2] = out0_im_1[2][13:0];
  assign state_after_CR2_12_re[3] = out0_re_1[3][13:0];
  assign state_after_CR2_12_im[3] = out0_im_1[3][13:0];
  assign state_after_CR2_12_re[4] = out0_re_1[4][13:0];
  assign state_after_CR2_12_im[4] = out0_im_1[4][13:0];
  assign state_after_CR2_12_re[5] = out0_re_1[5][13:0];
  assign state_after_CR2_12_im[5] = out0_im_1[5][13:0];
  assign state_after_CR2_12_re[6] = out0_re_1[6][13:0];
  assign state_after_CR2_12_im[6] = out0_im_1[6][13:0];
  assign state_after_CR2_12_re[7] = out0_re_1[7][13:0];
  assign state_after_CR2_12_im[7] = out0_im_1[7][13:0];

  assign selector_out_re_23[0] = state_after_CR2_12_re[0];
  assign selector_out_re_23[1] = state_after_CR2_12_re[1];
  assign selector_out_re_23[2] = state_after_CR2_12_re[2];
  assign selector_out_re_23[3] = state_after_CR2_12_re[3];
  assign selector_out_re_23[4] = state_after_CR2_12_re[4];
  assign selector_out_re_23[5] = state_after_CR2_12_re[5];
  assign selector_out_re_23[6] = state_after_CR2_12_re[6];
  assign selector_out_re_23[7] = state_after_CR2_12_re[7];
  assign selector_out_re_23[8] = state_after_CR2_12_re[0];
  assign selector_out_re_23[9] = state_after_CR2_12_re[1];
  assign selector_out_re_23[10] = state_after_CR2_12_re[2];
  assign selector_out_re_23[11] = state_after_CR2_12_re[3];
  assign selector_out_re_23[12] = state_after_CR2_12_re[4];
  assign selector_out_re_23[13] = state_after_CR2_12_re[5];
  assign selector_out_re_23[14] = state_after_CR2_12_re[6];
  assign selector_out_re_23[15] = state_after_CR2_12_re[7];
  assign selector_out_re_23[16] = state_after_CR2_12_re[0];
  assign selector_out_re_23[17] = state_after_CR2_12_re[1];
  assign selector_out_re_23[18] = state_after_CR2_12_re[2];
  assign selector_out_re_23[19] = state_after_CR2_12_re[3];
  assign selector_out_re_23[20] = state_after_CR2_12_re[4];
  assign selector_out_re_23[21] = state_after_CR2_12_re[5];
  assign selector_out_re_23[22] = state_after_CR2_12_re[6];
  assign selector_out_re_23[23] = state_after_CR2_12_re[7];
  assign selector_out_re_23[24] = state_after_CR2_12_re[0];
  assign selector_out_re_23[25] = state_after_CR2_12_re[1];
  assign selector_out_re_23[26] = state_after_CR2_12_re[2];
  assign selector_out_re_23[27] = state_after_CR2_12_re[3];
  assign selector_out_re_23[28] = state_after_CR2_12_re[4];
  assign selector_out_re_23[29] = state_after_CR2_12_re[5];
  assign selector_out_re_23[30] = state_after_CR2_12_re[6];
  assign selector_out_re_23[31] = state_after_CR2_12_re[7];
  assign selector_out_re_23[32] = state_after_CR2_12_re[0];
  assign selector_out_re_23[33] = state_after_CR2_12_re[1];
  assign selector_out_re_23[34] = state_after_CR2_12_re[2];
  assign selector_out_re_23[35] = state_after_CR2_12_re[3];
  assign selector_out_re_23[36] = state_after_CR2_12_re[4];
  assign selector_out_re_23[37] = state_after_CR2_12_re[5];
  assign selector_out_re_23[38] = state_after_CR2_12_re[6];
  assign selector_out_re_23[39] = state_after_CR2_12_re[7];
  assign selector_out_re_23[40] = state_after_CR2_12_re[0];
  assign selector_out_re_23[41] = state_after_CR2_12_re[1];
  assign selector_out_re_23[42] = state_after_CR2_12_re[2];
  assign selector_out_re_23[43] = state_after_CR2_12_re[3];
  assign selector_out_re_23[44] = state_after_CR2_12_re[4];
  assign selector_out_re_23[45] = state_after_CR2_12_re[5];
  assign selector_out_re_23[46] = state_after_CR2_12_re[6];
  assign selector_out_re_23[47] = state_after_CR2_12_re[7];
  assign selector_out_re_23[48] = state_after_CR2_12_re[0];
  assign selector_out_re_23[49] = state_after_CR2_12_re[1];
  assign selector_out_re_23[50] = state_after_CR2_12_re[2];
  assign selector_out_re_23[51] = state_after_CR2_12_re[3];
  assign selector_out_re_23[52] = state_after_CR2_12_re[4];
  assign selector_out_re_23[53] = state_after_CR2_12_re[5];
  assign selector_out_re_23[54] = state_after_CR2_12_re[6];
  assign selector_out_re_23[55] = state_after_CR2_12_re[7];
  assign selector_out_re_23[56] = state_after_CR2_12_re[0];
  assign selector_out_re_23[57] = state_after_CR2_12_re[1];
  assign selector_out_re_23[58] = state_after_CR2_12_re[2];
  assign selector_out_re_23[59] = state_after_CR2_12_re[3];
  assign selector_out_re_23[60] = state_after_CR2_12_re[4];
  assign selector_out_re_23[61] = state_after_CR2_12_re[5];
  assign selector_out_re_23[62] = state_after_CR2_12_re[6];
  assign selector_out_re_23[63] = state_after_CR2_12_re[7];

  assign selector_out_im_23[0] = state_after_CR2_12_im[0];
  assign selector_out_im_23[1] = state_after_CR2_12_im[1];
  assign selector_out_im_23[2] = state_after_CR2_12_im[2];
  assign selector_out_im_23[3] = state_after_CR2_12_im[3];
  assign selector_out_im_23[4] = state_after_CR2_12_im[4];
  assign selector_out_im_23[5] = state_after_CR2_12_im[5];
  assign selector_out_im_23[6] = state_after_CR2_12_im[6];
  assign selector_out_im_23[7] = state_after_CR2_12_im[7];
  assign selector_out_im_23[8] = state_after_CR2_12_im[0];
  assign selector_out_im_23[9] = state_after_CR2_12_im[1];
  assign selector_out_im_23[10] = state_after_CR2_12_im[2];
  assign selector_out_im_23[11] = state_after_CR2_12_im[3];
  assign selector_out_im_23[12] = state_after_CR2_12_im[4];
  assign selector_out_im_23[13] = state_after_CR2_12_im[5];
  assign selector_out_im_23[14] = state_after_CR2_12_im[6];
  assign selector_out_im_23[15] = state_after_CR2_12_im[7];
  assign selector_out_im_23[16] = state_after_CR2_12_im[0];
  assign selector_out_im_23[17] = state_after_CR2_12_im[1];
  assign selector_out_im_23[18] = state_after_CR2_12_im[2];
  assign selector_out_im_23[19] = state_after_CR2_12_im[3];
  assign selector_out_im_23[20] = state_after_CR2_12_im[4];
  assign selector_out_im_23[21] = state_after_CR2_12_im[5];
  assign selector_out_im_23[22] = state_after_CR2_12_im[6];
  assign selector_out_im_23[23] = state_after_CR2_12_im[7];
  assign selector_out_im_23[24] = state_after_CR2_12_im[0];
  assign selector_out_im_23[25] = state_after_CR2_12_im[1];
  assign selector_out_im_23[26] = state_after_CR2_12_im[2];
  assign selector_out_im_23[27] = state_after_CR2_12_im[3];
  assign selector_out_im_23[28] = state_after_CR2_12_im[4];
  assign selector_out_im_23[29] = state_after_CR2_12_im[5];
  assign selector_out_im_23[30] = state_after_CR2_12_im[6];
  assign selector_out_im_23[31] = state_after_CR2_12_im[7];
  assign selector_out_im_23[32] = state_after_CR2_12_im[0];
  assign selector_out_im_23[33] = state_after_CR2_12_im[1];
  assign selector_out_im_23[34] = state_after_CR2_12_im[2];
  assign selector_out_im_23[35] = state_after_CR2_12_im[3];
  assign selector_out_im_23[36] = state_after_CR2_12_im[4];
  assign selector_out_im_23[37] = state_after_CR2_12_im[5];
  assign selector_out_im_23[38] = state_after_CR2_12_im[6];
  assign selector_out_im_23[39] = state_after_CR2_12_im[7];
  assign selector_out_im_23[40] = state_after_CR2_12_im[0];
  assign selector_out_im_23[41] = state_after_CR2_12_im[1];
  assign selector_out_im_23[42] = state_after_CR2_12_im[2];
  assign selector_out_im_23[43] = state_after_CR2_12_im[3];
  assign selector_out_im_23[44] = state_after_CR2_12_im[4];
  assign selector_out_im_23[45] = state_after_CR2_12_im[5];
  assign selector_out_im_23[46] = state_after_CR2_12_im[6];
  assign selector_out_im_23[47] = state_after_CR2_12_im[7];
  assign selector_out_im_23[48] = state_after_CR2_12_im[0];
  assign selector_out_im_23[49] = state_after_CR2_12_im[1];
  assign selector_out_im_23[50] = state_after_CR2_12_im[2];
  assign selector_out_im_23[51] = state_after_CR2_12_im[3];
  assign selector_out_im_23[52] = state_after_CR2_12_im[4];
  assign selector_out_im_23[53] = state_after_CR2_12_im[5];
  assign selector_out_im_23[54] = state_after_CR2_12_im[6];
  assign selector_out_im_23[55] = state_after_CR2_12_im[7];
  assign selector_out_im_23[56] = state_after_CR2_12_im[0];
  assign selector_out_im_23[57] = state_after_CR2_12_im[1];
  assign selector_out_im_23[58] = state_after_CR2_12_im[2];
  assign selector_out_im_23[59] = state_after_CR2_12_im[3];
  assign selector_out_im_23[60] = state_after_CR2_12_im[4];
  assign selector_out_im_23[61] = state_after_CR2_12_im[5];
  assign selector_out_im_23[62] = state_after_CR2_12_im[6];
  assign selector_out_im_23[63] = state_after_CR2_12_im[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign alpha_re_15[0] = selector_out_re_23[0];
  assign alpha_im_15[0] = selector_out_im_23[0];
  assign alpha_re_15[1] = selector_out_re_23[1];
  assign alpha_im_15[1] = selector_out_im_23[1];
  assign alpha_re_15[2] = selector_out_re_23[2];
  assign alpha_im_15[2] = selector_out_im_23[2];
  assign alpha_re_15[3] = selector_out_re_23[3];
  assign alpha_im_15[3] = selector_out_im_23[3];
  assign alpha_re_15[4] = selector_out_re_23[4];
  assign alpha_im_15[4] = selector_out_im_23[4];
  assign alpha_re_15[5] = selector_out_re_23[5];
  assign alpha_im_15[5] = selector_out_im_23[5];
  assign alpha_re_15[6] = selector_out_re_23[6];
  assign alpha_im_15[6] = selector_out_im_23[6];
  assign alpha_re_15[7] = selector_out_re_23[7];
  assign alpha_im_15[7] = selector_out_im_23[7];
  assign alpha_re_15[8] = selector_out_re_23[8];
  assign alpha_im_15[8] = selector_out_im_23[8];
  assign alpha_re_15[9] = selector_out_re_23[9];
  assign alpha_im_15[9] = selector_out_im_23[9];
  assign alpha_re_15[10] = selector_out_re_23[10];
  assign alpha_im_15[10] = selector_out_im_23[10];
  assign alpha_re_15[11] = selector_out_re_23[11];
  assign alpha_im_15[11] = selector_out_im_23[11];
  assign alpha_re_15[12] = selector_out_re_23[12];
  assign alpha_im_15[12] = selector_out_im_23[12];
  assign alpha_re_15[13] = selector_out_re_23[13];
  assign alpha_im_15[13] = selector_out_im_23[13];
  assign alpha_re_15[14] = selector_out_re_23[14];
  assign alpha_im_15[14] = selector_out_im_23[14];
  assign alpha_re_15[15] = selector_out_re_23[15];
  assign alpha_im_15[15] = selector_out_im_23[15];
  assign alpha_re_15[16] = selector_out_re_23[16];
  assign alpha_im_15[16] = selector_out_im_23[16];
  assign alpha_re_15[17] = selector_out_re_23[17];
  assign alpha_im_15[17] = selector_out_im_23[17];
  assign alpha_re_15[18] = selector_out_re_23[18];
  assign alpha_im_15[18] = selector_out_im_23[18];
  assign alpha_re_15[19] = selector_out_re_23[19];
  assign alpha_im_15[19] = selector_out_im_23[19];
  assign alpha_re_15[20] = selector_out_re_23[20];
  assign alpha_im_15[20] = selector_out_im_23[20];
  assign alpha_re_15[21] = selector_out_re_23[21];
  assign alpha_im_15[21] = selector_out_im_23[21];
  assign alpha_re_15[22] = selector_out_re_23[22];
  assign alpha_im_15[22] = selector_out_im_23[22];
  assign alpha_re_15[23] = selector_out_re_23[23];
  assign alpha_im_15[23] = selector_out_im_23[23];
  assign alpha_re_15[24] = selector_out_re_23[24];
  assign alpha_im_15[24] = selector_out_im_23[24];
  assign alpha_re_15[25] = selector_out_re_23[25];
  assign alpha_im_15[25] = selector_out_im_23[25];
  assign alpha_re_15[26] = selector_out_re_23[26];
  assign alpha_im_15[26] = selector_out_im_23[26];
  assign alpha_re_15[27] = selector_out_re_23[27];
  assign alpha_im_15[27] = selector_out_im_23[27];
  assign alpha_re_15[28] = selector_out_re_23[28];
  assign alpha_im_15[28] = selector_out_im_23[28];
  assign alpha_re_15[29] = selector_out_re_23[29];
  assign alpha_im_15[29] = selector_out_im_23[29];
  assign alpha_re_15[30] = selector_out_re_23[30];
  assign alpha_im_15[30] = selector_out_im_23[30];
  assign alpha_re_15[31] = selector_out_re_23[31];
  assign alpha_im_15[31] = selector_out_im_23[31];
  assign alpha_re_15[32] = selector_out_re_23[32];
  assign alpha_im_15[32] = selector_out_im_23[32];
  assign alpha_re_15[33] = selector_out_re_23[33];
  assign alpha_im_15[33] = selector_out_im_23[33];
  assign alpha_re_15[34] = selector_out_re_23[34];
  assign alpha_im_15[34] = selector_out_im_23[34];
  assign alpha_re_15[35] = selector_out_re_23[35];
  assign alpha_im_15[35] = selector_out_im_23[35];
  assign alpha_re_15[36] = selector_out_re_23[36];
  assign alpha_im_15[36] = selector_out_im_23[36];
  assign alpha_re_15[37] = selector_out_re_23[37];
  assign alpha_im_15[37] = selector_out_im_23[37];
  assign alpha_re_15[38] = selector_out_re_23[38];
  assign alpha_im_15[38] = selector_out_im_23[38];
  assign alpha_re_15[39] = selector_out_re_23[39];
  assign alpha_im_15[39] = selector_out_im_23[39];
  assign alpha_re_15[40] = selector_out_re_23[40];
  assign alpha_im_15[40] = selector_out_im_23[40];
  assign alpha_re_15[41] = selector_out_re_23[41];
  assign alpha_im_15[41] = selector_out_im_23[41];
  assign alpha_re_15[42] = selector_out_re_23[42];
  assign alpha_im_15[42] = selector_out_im_23[42];
  assign alpha_re_15[43] = selector_out_re_23[43];
  assign alpha_im_15[43] = selector_out_im_23[43];
  assign alpha_re_15[44] = selector_out_re_23[44];
  assign alpha_im_15[44] = selector_out_im_23[44];
  assign alpha_re_15[45] = selector_out_re_23[45];
  assign alpha_im_15[45] = selector_out_im_23[45];
  assign alpha_re_15[46] = selector_out_re_23[46];
  assign alpha_im_15[46] = selector_out_im_23[46];
  assign alpha_re_15[47] = selector_out_re_23[47];
  assign alpha_im_15[47] = selector_out_im_23[47];
  assign alpha_re_15[48] = selector_out_re_23[48];
  assign alpha_im_15[48] = selector_out_im_23[48];
  assign alpha_re_15[49] = selector_out_re_23[49];
  assign alpha_im_15[49] = selector_out_im_23[49];
  assign alpha_re_15[50] = selector_out_re_23[50];
  assign alpha_im_15[50] = selector_out_im_23[50];
  assign alpha_re_15[51] = selector_out_re_23[51];
  assign alpha_im_15[51] = selector_out_im_23[51];
  assign alpha_re_15[52] = selector_out_re_23[52];
  assign alpha_im_15[52] = selector_out_im_23[52];
  assign alpha_re_15[53] = selector_out_re_23[53];
  assign alpha_im_15[53] = selector_out_im_23[53];
  assign alpha_re_15[54] = selector_out_re_23[54];
  assign alpha_im_15[54] = selector_out_im_23[54];
  assign alpha_re_15[55] = selector_out_re_23[55];
  assign alpha_im_15[55] = selector_out_im_23[55];
  assign alpha_re_15[56] = selector_out_re_23[56];
  assign alpha_im_15[56] = selector_out_im_23[56];
  assign alpha_re_15[57] = selector_out_re_23[57];
  assign alpha_im_15[57] = selector_out_im_23[57];
  assign alpha_re_15[58] = selector_out_re_23[58];
  assign alpha_im_15[58] = selector_out_im_23[58];
  assign alpha_re_15[59] = selector_out_re_23[59];
  assign alpha_im_15[59] = selector_out_im_23[59];
  assign alpha_re_15[60] = selector_out_re_23[60];
  assign alpha_im_15[60] = selector_out_im_23[60];
  assign alpha_re_15[61] = selector_out_re_23[61];
  assign alpha_im_15[61] = selector_out_im_23[61];
  assign alpha_re_15[62] = selector_out_re_23[62];
  assign alpha_im_15[62] = selector_out_im_23[62];
  assign alpha_re_15[63] = selector_out_re_23[63];
  assign alpha_im_15[63] = selector_out_im_23[63];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_dot_product4_in0_re[0] = (alpha_re_7[0] == 1'b1 ? alpha_re_15[0] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[0] = {MMul_dot_product4_in0_re[0][13], MMul_dot_product4_in0_re[0]};
  assign MMul_dot_product4_sub_cast_1[0] = {{4{MMul_dot_product4_sub_cast[0][14]}}, MMul_dot_product4_sub_cast[0]};
  assign MMul_dot_product4_in0_im[0] = (alpha_im_7[0] == 1'b1 ? alpha_im_15[0] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[0] = {MMul_dot_product4_in0_im[0][13], MMul_dot_product4_in0_im[0]};
  assign MMul_dot_product4_sub_cast_3[0] = {{4{MMul_dot_product4_sub_cast_2[0][14]}}, MMul_dot_product4_sub_cast_2[0]};
  assign MMul_dot_product_out_re_2[0] = MMul_dot_product4_sub_cast_1[0] - MMul_dot_product4_sub_cast_3[0];
  assign MMul_dot_product4_in0_im_1[0] = (alpha_im_7[0] == 1'b1 ? alpha_re_15[0] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[0] = {MMul_dot_product4_in0_im_1[0][13], MMul_dot_product4_in0_im_1[0]};
  assign MMul_dot_product4_add_cast_1[0] = {{4{MMul_dot_product4_add_cast[0][14]}}, MMul_dot_product4_add_cast[0]};
  assign MMul_dot_product4_in0_re_1[0] = (alpha_re_7[0] == 1'b1 ? alpha_im_15[0] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[0] = {MMul_dot_product4_in0_re_1[0][13], MMul_dot_product4_in0_re_1[0]};
  assign MMul_dot_product4_add_cast_3[0] = {{4{MMul_dot_product4_add_cast_2[0][14]}}, MMul_dot_product4_add_cast_2[0]};
  assign MMul_dot_product_out_im_2[0] = MMul_dot_product4_add_cast_1[0] + MMul_dot_product4_add_cast_3[0];
  assign MMul_dot_product4_in0_re[1] = (alpha_re_7[1] == 1'b1 ? alpha_re_15[1] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[1] = {MMul_dot_product4_in0_re[1][13], MMul_dot_product4_in0_re[1]};
  assign MMul_dot_product4_sub_cast_1[1] = {{4{MMul_dot_product4_sub_cast[1][14]}}, MMul_dot_product4_sub_cast[1]};
  assign MMul_dot_product4_in0_im[1] = (alpha_im_7[1] == 1'b1 ? alpha_im_15[1] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[1] = {MMul_dot_product4_in0_im[1][13], MMul_dot_product4_in0_im[1]};
  assign MMul_dot_product4_sub_cast_3[1] = {{4{MMul_dot_product4_sub_cast_2[1][14]}}, MMul_dot_product4_sub_cast_2[1]};
  assign MMul_dot_product_out_re_2[1] = MMul_dot_product4_sub_cast_1[1] - MMul_dot_product4_sub_cast_3[1];
  assign MMul_dot_product4_in0_im_1[1] = (alpha_im_7[1] == 1'b1 ? alpha_re_15[1] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[1] = {MMul_dot_product4_in0_im_1[1][13], MMul_dot_product4_in0_im_1[1]};
  assign MMul_dot_product4_add_cast_1[1] = {{4{MMul_dot_product4_add_cast[1][14]}}, MMul_dot_product4_add_cast[1]};
  assign MMul_dot_product4_in0_re_1[1] = (alpha_re_7[1] == 1'b1 ? alpha_im_15[1] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[1] = {MMul_dot_product4_in0_re_1[1][13], MMul_dot_product4_in0_re_1[1]};
  assign MMul_dot_product4_add_cast_3[1] = {{4{MMul_dot_product4_add_cast_2[1][14]}}, MMul_dot_product4_add_cast_2[1]};
  assign MMul_dot_product_out_im_2[1] = MMul_dot_product4_add_cast_1[1] + MMul_dot_product4_add_cast_3[1];
  assign MMul_dot_product4_in0_re[2] = (alpha_re_7[2] == 1'b1 ? alpha_re_15[2] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[2] = {MMul_dot_product4_in0_re[2][13], MMul_dot_product4_in0_re[2]};
  assign MMul_dot_product4_sub_cast_1[2] = {{4{MMul_dot_product4_sub_cast[2][14]}}, MMul_dot_product4_sub_cast[2]};
  assign MMul_dot_product4_in0_im[2] = (alpha_im_7[2] == 1'b1 ? alpha_im_15[2] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[2] = {MMul_dot_product4_in0_im[2][13], MMul_dot_product4_in0_im[2]};
  assign MMul_dot_product4_sub_cast_3[2] = {{4{MMul_dot_product4_sub_cast_2[2][14]}}, MMul_dot_product4_sub_cast_2[2]};
  assign MMul_dot_product_out_re_2[2] = MMul_dot_product4_sub_cast_1[2] - MMul_dot_product4_sub_cast_3[2];
  assign MMul_dot_product4_in0_im_1[2] = (alpha_im_7[2] == 1'b1 ? alpha_re_15[2] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[2] = {MMul_dot_product4_in0_im_1[2][13], MMul_dot_product4_in0_im_1[2]};
  assign MMul_dot_product4_add_cast_1[2] = {{4{MMul_dot_product4_add_cast[2][14]}}, MMul_dot_product4_add_cast[2]};
  assign MMul_dot_product4_in0_re_1[2] = (alpha_re_7[2] == 1'b1 ? alpha_im_15[2] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[2] = {MMul_dot_product4_in0_re_1[2][13], MMul_dot_product4_in0_re_1[2]};
  assign MMul_dot_product4_add_cast_3[2] = {{4{MMul_dot_product4_add_cast_2[2][14]}}, MMul_dot_product4_add_cast_2[2]};
  assign MMul_dot_product_out_im_2[2] = MMul_dot_product4_add_cast_1[2] + MMul_dot_product4_add_cast_3[2];
  assign MMul_dot_product4_in0_re[3] = (alpha_re_7[3] == 1'b1 ? alpha_re_15[3] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[3] = {MMul_dot_product4_in0_re[3][13], MMul_dot_product4_in0_re[3]};
  assign MMul_dot_product4_sub_cast_1[3] = {{4{MMul_dot_product4_sub_cast[3][14]}}, MMul_dot_product4_sub_cast[3]};
  assign MMul_dot_product4_in0_im[3] = (alpha_im_7[3] == 1'b1 ? alpha_im_15[3] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[3] = {MMul_dot_product4_in0_im[3][13], MMul_dot_product4_in0_im[3]};
  assign MMul_dot_product4_sub_cast_3[3] = {{4{MMul_dot_product4_sub_cast_2[3][14]}}, MMul_dot_product4_sub_cast_2[3]};
  assign MMul_dot_product_out_re_2[3] = MMul_dot_product4_sub_cast_1[3] - MMul_dot_product4_sub_cast_3[3];
  assign MMul_dot_product4_in0_im_1[3] = (alpha_im_7[3] == 1'b1 ? alpha_re_15[3] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[3] = {MMul_dot_product4_in0_im_1[3][13], MMul_dot_product4_in0_im_1[3]};
  assign MMul_dot_product4_add_cast_1[3] = {{4{MMul_dot_product4_add_cast[3][14]}}, MMul_dot_product4_add_cast[3]};
  assign MMul_dot_product4_in0_re_1[3] = (alpha_re_7[3] == 1'b1 ? alpha_im_15[3] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[3] = {MMul_dot_product4_in0_re_1[3][13], MMul_dot_product4_in0_re_1[3]};
  assign MMul_dot_product4_add_cast_3[3] = {{4{MMul_dot_product4_add_cast_2[3][14]}}, MMul_dot_product4_add_cast_2[3]};
  assign MMul_dot_product_out_im_2[3] = MMul_dot_product4_add_cast_1[3] + MMul_dot_product4_add_cast_3[3];
  assign MMul_dot_product4_in0_re[4] = (alpha_re_7[4] == 1'b1 ? alpha_re_15[4] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[4] = {MMul_dot_product4_in0_re[4][13], MMul_dot_product4_in0_re[4]};
  assign MMul_dot_product4_sub_cast_1[4] = {{4{MMul_dot_product4_sub_cast[4][14]}}, MMul_dot_product4_sub_cast[4]};
  assign MMul_dot_product4_in0_im[4] = (alpha_im_7[4] == 1'b1 ? alpha_im_15[4] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[4] = {MMul_dot_product4_in0_im[4][13], MMul_dot_product4_in0_im[4]};
  assign MMul_dot_product4_sub_cast_3[4] = {{4{MMul_dot_product4_sub_cast_2[4][14]}}, MMul_dot_product4_sub_cast_2[4]};
  assign MMul_dot_product_out_re_2[4] = MMul_dot_product4_sub_cast_1[4] - MMul_dot_product4_sub_cast_3[4];
  assign MMul_dot_product4_in0_im_1[4] = (alpha_im_7[4] == 1'b1 ? alpha_re_15[4] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[4] = {MMul_dot_product4_in0_im_1[4][13], MMul_dot_product4_in0_im_1[4]};
  assign MMul_dot_product4_add_cast_1[4] = {{4{MMul_dot_product4_add_cast[4][14]}}, MMul_dot_product4_add_cast[4]};
  assign MMul_dot_product4_in0_re_1[4] = (alpha_re_7[4] == 1'b1 ? alpha_im_15[4] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[4] = {MMul_dot_product4_in0_re_1[4][13], MMul_dot_product4_in0_re_1[4]};
  assign MMul_dot_product4_add_cast_3[4] = {{4{MMul_dot_product4_add_cast_2[4][14]}}, MMul_dot_product4_add_cast_2[4]};
  assign MMul_dot_product_out_im_2[4] = MMul_dot_product4_add_cast_1[4] + MMul_dot_product4_add_cast_3[4];
  assign MMul_dot_product4_in0_re[5] = (alpha_re_7[5] == 1'b1 ? alpha_re_15[5] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[5] = {MMul_dot_product4_in0_re[5][13], MMul_dot_product4_in0_re[5]};
  assign MMul_dot_product4_sub_cast_1[5] = {{4{MMul_dot_product4_sub_cast[5][14]}}, MMul_dot_product4_sub_cast[5]};
  assign MMul_dot_product4_in0_im[5] = (alpha_im_7[5] == 1'b1 ? alpha_im_15[5] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[5] = {MMul_dot_product4_in0_im[5][13], MMul_dot_product4_in0_im[5]};
  assign MMul_dot_product4_sub_cast_3[5] = {{4{MMul_dot_product4_sub_cast_2[5][14]}}, MMul_dot_product4_sub_cast_2[5]};
  assign MMul_dot_product_out_re_2[5] = MMul_dot_product4_sub_cast_1[5] - MMul_dot_product4_sub_cast_3[5];
  assign MMul_dot_product4_in0_im_1[5] = (alpha_im_7[5] == 1'b1 ? alpha_re_15[5] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[5] = {MMul_dot_product4_in0_im_1[5][13], MMul_dot_product4_in0_im_1[5]};
  assign MMul_dot_product4_add_cast_1[5] = {{4{MMul_dot_product4_add_cast[5][14]}}, MMul_dot_product4_add_cast[5]};
  assign MMul_dot_product4_in0_re_1[5] = (alpha_re_7[5] == 1'b1 ? alpha_im_15[5] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[5] = {MMul_dot_product4_in0_re_1[5][13], MMul_dot_product4_in0_re_1[5]};
  assign MMul_dot_product4_add_cast_3[5] = {{4{MMul_dot_product4_add_cast_2[5][14]}}, MMul_dot_product4_add_cast_2[5]};
  assign MMul_dot_product_out_im_2[5] = MMul_dot_product4_add_cast_1[5] + MMul_dot_product4_add_cast_3[5];
  assign MMul_dot_product4_in0_re[6] = (alpha_re_7[6] == 1'b1 ? alpha_re_15[6] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[6] = {MMul_dot_product4_in0_re[6][13], MMul_dot_product4_in0_re[6]};
  assign MMul_dot_product4_sub_cast_1[6] = {{4{MMul_dot_product4_sub_cast[6][14]}}, MMul_dot_product4_sub_cast[6]};
  assign MMul_dot_product4_in0_im[6] = (alpha_im_7[6] == 1'b1 ? alpha_im_15[6] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[6] = {MMul_dot_product4_in0_im[6][13], MMul_dot_product4_in0_im[6]};
  assign MMul_dot_product4_sub_cast_3[6] = {{4{MMul_dot_product4_sub_cast_2[6][14]}}, MMul_dot_product4_sub_cast_2[6]};
  assign MMul_dot_product_out_re_2[6] = MMul_dot_product4_sub_cast_1[6] - MMul_dot_product4_sub_cast_3[6];
  assign MMul_dot_product4_in0_im_1[6] = (alpha_im_7[6] == 1'b1 ? alpha_re_15[6] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[6] = {MMul_dot_product4_in0_im_1[6][13], MMul_dot_product4_in0_im_1[6]};
  assign MMul_dot_product4_add_cast_1[6] = {{4{MMul_dot_product4_add_cast[6][14]}}, MMul_dot_product4_add_cast[6]};
  assign MMul_dot_product4_in0_re_1[6] = (alpha_re_7[6] == 1'b1 ? alpha_im_15[6] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[6] = {MMul_dot_product4_in0_re_1[6][13], MMul_dot_product4_in0_re_1[6]};
  assign MMul_dot_product4_add_cast_3[6] = {{4{MMul_dot_product4_add_cast_2[6][14]}}, MMul_dot_product4_add_cast_2[6]};
  assign MMul_dot_product_out_im_2[6] = MMul_dot_product4_add_cast_1[6] + MMul_dot_product4_add_cast_3[6];
  assign MMul_dot_product4_in0_re[7] = (alpha_re_7[7] == 1'b1 ? alpha_re_15[7] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[7] = {MMul_dot_product4_in0_re[7][13], MMul_dot_product4_in0_re[7]};
  assign MMul_dot_product4_sub_cast_1[7] = {{4{MMul_dot_product4_sub_cast[7][14]}}, MMul_dot_product4_sub_cast[7]};
  assign MMul_dot_product4_in0_im[7] = (alpha_im_7[7] == 1'b1 ? alpha_im_15[7] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[7] = {MMul_dot_product4_in0_im[7][13], MMul_dot_product4_in0_im[7]};
  assign MMul_dot_product4_sub_cast_3[7] = {{4{MMul_dot_product4_sub_cast_2[7][14]}}, MMul_dot_product4_sub_cast_2[7]};
  assign MMul_dot_product_out_re_2[7] = MMul_dot_product4_sub_cast_1[7] - MMul_dot_product4_sub_cast_3[7];
  assign MMul_dot_product4_in0_im_1[7] = (alpha_im_7[7] == 1'b1 ? alpha_re_15[7] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[7] = {MMul_dot_product4_in0_im_1[7][13], MMul_dot_product4_in0_im_1[7]};
  assign MMul_dot_product4_add_cast_1[7] = {{4{MMul_dot_product4_add_cast[7][14]}}, MMul_dot_product4_add_cast[7]};
  assign MMul_dot_product4_in0_re_1[7] = (alpha_re_7[7] == 1'b1 ? alpha_im_15[7] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[7] = {MMul_dot_product4_in0_re_1[7][13], MMul_dot_product4_in0_re_1[7]};
  assign MMul_dot_product4_add_cast_3[7] = {{4{MMul_dot_product4_add_cast_2[7][14]}}, MMul_dot_product4_add_cast_2[7]};
  assign MMul_dot_product_out_im_2[7] = MMul_dot_product4_add_cast_1[7] + MMul_dot_product4_add_cast_3[7];
  assign MMul_dot_product4_in0_re[8] = (alpha_re_7[8] == 1'b1 ? alpha_re_15[8] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[8] = {MMul_dot_product4_in0_re[8][13], MMul_dot_product4_in0_re[8]};
  assign MMul_dot_product4_sub_cast_1[8] = {{4{MMul_dot_product4_sub_cast[8][14]}}, MMul_dot_product4_sub_cast[8]};
  assign MMul_dot_product4_in0_im[8] = (alpha_im_7[8] == 1'b1 ? alpha_im_15[8] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[8] = {MMul_dot_product4_in0_im[8][13], MMul_dot_product4_in0_im[8]};
  assign MMul_dot_product4_sub_cast_3[8] = {{4{MMul_dot_product4_sub_cast_2[8][14]}}, MMul_dot_product4_sub_cast_2[8]};
  assign MMul_dot_product_out_re_2[8] = MMul_dot_product4_sub_cast_1[8] - MMul_dot_product4_sub_cast_3[8];
  assign MMul_dot_product4_in0_im_1[8] = (alpha_im_7[8] == 1'b1 ? alpha_re_15[8] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[8] = {MMul_dot_product4_in0_im_1[8][13], MMul_dot_product4_in0_im_1[8]};
  assign MMul_dot_product4_add_cast_1[8] = {{4{MMul_dot_product4_add_cast[8][14]}}, MMul_dot_product4_add_cast[8]};
  assign MMul_dot_product4_in0_re_1[8] = (alpha_re_7[8] == 1'b1 ? alpha_im_15[8] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[8] = {MMul_dot_product4_in0_re_1[8][13], MMul_dot_product4_in0_re_1[8]};
  assign MMul_dot_product4_add_cast_3[8] = {{4{MMul_dot_product4_add_cast_2[8][14]}}, MMul_dot_product4_add_cast_2[8]};
  assign MMul_dot_product_out_im_2[8] = MMul_dot_product4_add_cast_1[8] + MMul_dot_product4_add_cast_3[8];
  assign MMul_dot_product4_in0_re[9] = (alpha_re_7[9] == 1'b1 ? alpha_re_15[9] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[9] = {MMul_dot_product4_in0_re[9][13], MMul_dot_product4_in0_re[9]};
  assign MMul_dot_product4_sub_cast_1[9] = {{4{MMul_dot_product4_sub_cast[9][14]}}, MMul_dot_product4_sub_cast[9]};
  assign MMul_dot_product4_in0_im[9] = (alpha_im_7[9] == 1'b1 ? alpha_im_15[9] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[9] = {MMul_dot_product4_in0_im[9][13], MMul_dot_product4_in0_im[9]};
  assign MMul_dot_product4_sub_cast_3[9] = {{4{MMul_dot_product4_sub_cast_2[9][14]}}, MMul_dot_product4_sub_cast_2[9]};
  assign MMul_dot_product_out_re_2[9] = MMul_dot_product4_sub_cast_1[9] - MMul_dot_product4_sub_cast_3[9];
  assign MMul_dot_product4_in0_im_1[9] = (alpha_im_7[9] == 1'b1 ? alpha_re_15[9] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[9] = {MMul_dot_product4_in0_im_1[9][13], MMul_dot_product4_in0_im_1[9]};
  assign MMul_dot_product4_add_cast_1[9] = {{4{MMul_dot_product4_add_cast[9][14]}}, MMul_dot_product4_add_cast[9]};
  assign MMul_dot_product4_in0_re_1[9] = (alpha_re_7[9] == 1'b1 ? alpha_im_15[9] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[9] = {MMul_dot_product4_in0_re_1[9][13], MMul_dot_product4_in0_re_1[9]};
  assign MMul_dot_product4_add_cast_3[9] = {{4{MMul_dot_product4_add_cast_2[9][14]}}, MMul_dot_product4_add_cast_2[9]};
  assign MMul_dot_product_out_im_2[9] = MMul_dot_product4_add_cast_1[9] + MMul_dot_product4_add_cast_3[9];
  assign MMul_dot_product4_in0_re[10] = (alpha_re_7[10] == 1'b1 ? alpha_re_15[10] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[10] = {MMul_dot_product4_in0_re[10][13], MMul_dot_product4_in0_re[10]};
  assign MMul_dot_product4_sub_cast_1[10] = {{4{MMul_dot_product4_sub_cast[10][14]}}, MMul_dot_product4_sub_cast[10]};
  assign MMul_dot_product4_in0_im[10] = (alpha_im_7[10] == 1'b1 ? alpha_im_15[10] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[10] = {MMul_dot_product4_in0_im[10][13], MMul_dot_product4_in0_im[10]};
  assign MMul_dot_product4_sub_cast_3[10] = {{4{MMul_dot_product4_sub_cast_2[10][14]}}, MMul_dot_product4_sub_cast_2[10]};
  assign MMul_dot_product_out_re_2[10] = MMul_dot_product4_sub_cast_1[10] - MMul_dot_product4_sub_cast_3[10];
  assign MMul_dot_product4_in0_im_1[10] = (alpha_im_7[10] == 1'b1 ? alpha_re_15[10] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[10] = {MMul_dot_product4_in0_im_1[10][13], MMul_dot_product4_in0_im_1[10]};
  assign MMul_dot_product4_add_cast_1[10] = {{4{MMul_dot_product4_add_cast[10][14]}}, MMul_dot_product4_add_cast[10]};
  assign MMul_dot_product4_in0_re_1[10] = (alpha_re_7[10] == 1'b1 ? alpha_im_15[10] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[10] = {MMul_dot_product4_in0_re_1[10][13], MMul_dot_product4_in0_re_1[10]};
  assign MMul_dot_product4_add_cast_3[10] = {{4{MMul_dot_product4_add_cast_2[10][14]}}, MMul_dot_product4_add_cast_2[10]};
  assign MMul_dot_product_out_im_2[10] = MMul_dot_product4_add_cast_1[10] + MMul_dot_product4_add_cast_3[10];
  assign MMul_dot_product4_in0_re[11] = (alpha_re_7[11] == 1'b1 ? alpha_re_15[11] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[11] = {MMul_dot_product4_in0_re[11][13], MMul_dot_product4_in0_re[11]};
  assign MMul_dot_product4_sub_cast_1[11] = {{4{MMul_dot_product4_sub_cast[11][14]}}, MMul_dot_product4_sub_cast[11]};
  assign MMul_dot_product4_in0_im[11] = (alpha_im_7[11] == 1'b1 ? alpha_im_15[11] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[11] = {MMul_dot_product4_in0_im[11][13], MMul_dot_product4_in0_im[11]};
  assign MMul_dot_product4_sub_cast_3[11] = {{4{MMul_dot_product4_sub_cast_2[11][14]}}, MMul_dot_product4_sub_cast_2[11]};
  assign MMul_dot_product_out_re_2[11] = MMul_dot_product4_sub_cast_1[11] - MMul_dot_product4_sub_cast_3[11];
  assign MMul_dot_product4_in0_im_1[11] = (alpha_im_7[11] == 1'b1 ? alpha_re_15[11] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[11] = {MMul_dot_product4_in0_im_1[11][13], MMul_dot_product4_in0_im_1[11]};
  assign MMul_dot_product4_add_cast_1[11] = {{4{MMul_dot_product4_add_cast[11][14]}}, MMul_dot_product4_add_cast[11]};
  assign MMul_dot_product4_in0_re_1[11] = (alpha_re_7[11] == 1'b1 ? alpha_im_15[11] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[11] = {MMul_dot_product4_in0_re_1[11][13], MMul_dot_product4_in0_re_1[11]};
  assign MMul_dot_product4_add_cast_3[11] = {{4{MMul_dot_product4_add_cast_2[11][14]}}, MMul_dot_product4_add_cast_2[11]};
  assign MMul_dot_product_out_im_2[11] = MMul_dot_product4_add_cast_1[11] + MMul_dot_product4_add_cast_3[11];
  assign MMul_dot_product4_in0_re[12] = (alpha_re_7[12] == 1'b1 ? alpha_re_15[12] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[12] = {MMul_dot_product4_in0_re[12][13], MMul_dot_product4_in0_re[12]};
  assign MMul_dot_product4_sub_cast_1[12] = {{4{MMul_dot_product4_sub_cast[12][14]}}, MMul_dot_product4_sub_cast[12]};
  assign MMul_dot_product4_in0_im[12] = (alpha_im_7[12] == 1'b1 ? alpha_im_15[12] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[12] = {MMul_dot_product4_in0_im[12][13], MMul_dot_product4_in0_im[12]};
  assign MMul_dot_product4_sub_cast_3[12] = {{4{MMul_dot_product4_sub_cast_2[12][14]}}, MMul_dot_product4_sub_cast_2[12]};
  assign MMul_dot_product_out_re_2[12] = MMul_dot_product4_sub_cast_1[12] - MMul_dot_product4_sub_cast_3[12];
  assign MMul_dot_product4_in0_im_1[12] = (alpha_im_7[12] == 1'b1 ? alpha_re_15[12] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[12] = {MMul_dot_product4_in0_im_1[12][13], MMul_dot_product4_in0_im_1[12]};
  assign MMul_dot_product4_add_cast_1[12] = {{4{MMul_dot_product4_add_cast[12][14]}}, MMul_dot_product4_add_cast[12]};
  assign MMul_dot_product4_in0_re_1[12] = (alpha_re_7[12] == 1'b1 ? alpha_im_15[12] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[12] = {MMul_dot_product4_in0_re_1[12][13], MMul_dot_product4_in0_re_1[12]};
  assign MMul_dot_product4_add_cast_3[12] = {{4{MMul_dot_product4_add_cast_2[12][14]}}, MMul_dot_product4_add_cast_2[12]};
  assign MMul_dot_product_out_im_2[12] = MMul_dot_product4_add_cast_1[12] + MMul_dot_product4_add_cast_3[12];
  assign MMul_dot_product4_in0_re[13] = (alpha_re_7[13] == 1'b1 ? alpha_re_15[13] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[13] = {MMul_dot_product4_in0_re[13][13], MMul_dot_product4_in0_re[13]};
  assign MMul_dot_product4_sub_cast_1[13] = {{4{MMul_dot_product4_sub_cast[13][14]}}, MMul_dot_product4_sub_cast[13]};
  assign MMul_dot_product4_in0_im[13] = (alpha_im_7[13] == 1'b1 ? alpha_im_15[13] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[13] = {MMul_dot_product4_in0_im[13][13], MMul_dot_product4_in0_im[13]};
  assign MMul_dot_product4_sub_cast_3[13] = {{4{MMul_dot_product4_sub_cast_2[13][14]}}, MMul_dot_product4_sub_cast_2[13]};
  assign MMul_dot_product_out_re_2[13] = MMul_dot_product4_sub_cast_1[13] - MMul_dot_product4_sub_cast_3[13];
  assign MMul_dot_product4_in0_im_1[13] = (alpha_im_7[13] == 1'b1 ? alpha_re_15[13] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[13] = {MMul_dot_product4_in0_im_1[13][13], MMul_dot_product4_in0_im_1[13]};
  assign MMul_dot_product4_add_cast_1[13] = {{4{MMul_dot_product4_add_cast[13][14]}}, MMul_dot_product4_add_cast[13]};
  assign MMul_dot_product4_in0_re_1[13] = (alpha_re_7[13] == 1'b1 ? alpha_im_15[13] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[13] = {MMul_dot_product4_in0_re_1[13][13], MMul_dot_product4_in0_re_1[13]};
  assign MMul_dot_product4_add_cast_3[13] = {{4{MMul_dot_product4_add_cast_2[13][14]}}, MMul_dot_product4_add_cast_2[13]};
  assign MMul_dot_product_out_im_2[13] = MMul_dot_product4_add_cast_1[13] + MMul_dot_product4_add_cast_3[13];
  assign MMul_dot_product4_in0_re[14] = (alpha_re_7[14] == 1'b1 ? alpha_re_15[14] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[14] = {MMul_dot_product4_in0_re[14][13], MMul_dot_product4_in0_re[14]};
  assign MMul_dot_product4_sub_cast_1[14] = {{4{MMul_dot_product4_sub_cast[14][14]}}, MMul_dot_product4_sub_cast[14]};
  assign MMul_dot_product4_in0_im[14] = (alpha_im_7[14] == 1'b1 ? alpha_im_15[14] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[14] = {MMul_dot_product4_in0_im[14][13], MMul_dot_product4_in0_im[14]};
  assign MMul_dot_product4_sub_cast_3[14] = {{4{MMul_dot_product4_sub_cast_2[14][14]}}, MMul_dot_product4_sub_cast_2[14]};
  assign MMul_dot_product_out_re_2[14] = MMul_dot_product4_sub_cast_1[14] - MMul_dot_product4_sub_cast_3[14];
  assign MMul_dot_product4_in0_im_1[14] = (alpha_im_7[14] == 1'b1 ? alpha_re_15[14] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[14] = {MMul_dot_product4_in0_im_1[14][13], MMul_dot_product4_in0_im_1[14]};
  assign MMul_dot_product4_add_cast_1[14] = {{4{MMul_dot_product4_add_cast[14][14]}}, MMul_dot_product4_add_cast[14]};
  assign MMul_dot_product4_in0_re_1[14] = (alpha_re_7[14] == 1'b1 ? alpha_im_15[14] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[14] = {MMul_dot_product4_in0_re_1[14][13], MMul_dot_product4_in0_re_1[14]};
  assign MMul_dot_product4_add_cast_3[14] = {{4{MMul_dot_product4_add_cast_2[14][14]}}, MMul_dot_product4_add_cast_2[14]};
  assign MMul_dot_product_out_im_2[14] = MMul_dot_product4_add_cast_1[14] + MMul_dot_product4_add_cast_3[14];
  assign MMul_dot_product4_in0_re[15] = (alpha_re_7[15] == 1'b1 ? alpha_re_15[15] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[15] = {MMul_dot_product4_in0_re[15][13], MMul_dot_product4_in0_re[15]};
  assign MMul_dot_product4_sub_cast_1[15] = {{4{MMul_dot_product4_sub_cast[15][14]}}, MMul_dot_product4_sub_cast[15]};
  assign MMul_dot_product4_in0_im[15] = (alpha_im_7[15] == 1'b1 ? alpha_im_15[15] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[15] = {MMul_dot_product4_in0_im[15][13], MMul_dot_product4_in0_im[15]};
  assign MMul_dot_product4_sub_cast_3[15] = {{4{MMul_dot_product4_sub_cast_2[15][14]}}, MMul_dot_product4_sub_cast_2[15]};
  assign MMul_dot_product_out_re_2[15] = MMul_dot_product4_sub_cast_1[15] - MMul_dot_product4_sub_cast_3[15];
  assign MMul_dot_product4_in0_im_1[15] = (alpha_im_7[15] == 1'b1 ? alpha_re_15[15] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[15] = {MMul_dot_product4_in0_im_1[15][13], MMul_dot_product4_in0_im_1[15]};
  assign MMul_dot_product4_add_cast_1[15] = {{4{MMul_dot_product4_add_cast[15][14]}}, MMul_dot_product4_add_cast[15]};
  assign MMul_dot_product4_in0_re_1[15] = (alpha_re_7[15] == 1'b1 ? alpha_im_15[15] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[15] = {MMul_dot_product4_in0_re_1[15][13], MMul_dot_product4_in0_re_1[15]};
  assign MMul_dot_product4_add_cast_3[15] = {{4{MMul_dot_product4_add_cast_2[15][14]}}, MMul_dot_product4_add_cast_2[15]};
  assign MMul_dot_product_out_im_2[15] = MMul_dot_product4_add_cast_1[15] + MMul_dot_product4_add_cast_3[15];
  assign MMul_dot_product4_in0_re[16] = (alpha_re_7[16] == 1'b1 ? alpha_re_15[16] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[16] = {MMul_dot_product4_in0_re[16][13], MMul_dot_product4_in0_re[16]};
  assign MMul_dot_product4_sub_cast_1[16] = {{4{MMul_dot_product4_sub_cast[16][14]}}, MMul_dot_product4_sub_cast[16]};
  assign MMul_dot_product4_in0_im[16] = (alpha_im_7[16] == 1'b1 ? alpha_im_15[16] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[16] = {MMul_dot_product4_in0_im[16][13], MMul_dot_product4_in0_im[16]};
  assign MMul_dot_product4_sub_cast_3[16] = {{4{MMul_dot_product4_sub_cast_2[16][14]}}, MMul_dot_product4_sub_cast_2[16]};
  assign MMul_dot_product_out_re_2[16] = MMul_dot_product4_sub_cast_1[16] - MMul_dot_product4_sub_cast_3[16];
  assign MMul_dot_product4_in0_im_1[16] = (alpha_im_7[16] == 1'b1 ? alpha_re_15[16] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[16] = {MMul_dot_product4_in0_im_1[16][13], MMul_dot_product4_in0_im_1[16]};
  assign MMul_dot_product4_add_cast_1[16] = {{4{MMul_dot_product4_add_cast[16][14]}}, MMul_dot_product4_add_cast[16]};
  assign MMul_dot_product4_in0_re_1[16] = (alpha_re_7[16] == 1'b1 ? alpha_im_15[16] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[16] = {MMul_dot_product4_in0_re_1[16][13], MMul_dot_product4_in0_re_1[16]};
  assign MMul_dot_product4_add_cast_3[16] = {{4{MMul_dot_product4_add_cast_2[16][14]}}, MMul_dot_product4_add_cast_2[16]};
  assign MMul_dot_product_out_im_2[16] = MMul_dot_product4_add_cast_1[16] + MMul_dot_product4_add_cast_3[16];
  assign MMul_dot_product4_in0_re[17] = (alpha_re_7[17] == 1'b1 ? alpha_re_15[17] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[17] = {MMul_dot_product4_in0_re[17][13], MMul_dot_product4_in0_re[17]};
  assign MMul_dot_product4_sub_cast_1[17] = {{4{MMul_dot_product4_sub_cast[17][14]}}, MMul_dot_product4_sub_cast[17]};
  assign MMul_dot_product4_in0_im[17] = (alpha_im_7[17] == 1'b1 ? alpha_im_15[17] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[17] = {MMul_dot_product4_in0_im[17][13], MMul_dot_product4_in0_im[17]};
  assign MMul_dot_product4_sub_cast_3[17] = {{4{MMul_dot_product4_sub_cast_2[17][14]}}, MMul_dot_product4_sub_cast_2[17]};
  assign MMul_dot_product_out_re_2[17] = MMul_dot_product4_sub_cast_1[17] - MMul_dot_product4_sub_cast_3[17];
  assign MMul_dot_product4_in0_im_1[17] = (alpha_im_7[17] == 1'b1 ? alpha_re_15[17] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[17] = {MMul_dot_product4_in0_im_1[17][13], MMul_dot_product4_in0_im_1[17]};
  assign MMul_dot_product4_add_cast_1[17] = {{4{MMul_dot_product4_add_cast[17][14]}}, MMul_dot_product4_add_cast[17]};
  assign MMul_dot_product4_in0_re_1[17] = (alpha_re_7[17] == 1'b1 ? alpha_im_15[17] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[17] = {MMul_dot_product4_in0_re_1[17][13], MMul_dot_product4_in0_re_1[17]};
  assign MMul_dot_product4_add_cast_3[17] = {{4{MMul_dot_product4_add_cast_2[17][14]}}, MMul_dot_product4_add_cast_2[17]};
  assign MMul_dot_product_out_im_2[17] = MMul_dot_product4_add_cast_1[17] + MMul_dot_product4_add_cast_3[17];
  assign MMul_dot_product4_in0_re[18] = (alpha_re_7[18] == 1'b1 ? alpha_re_15[18] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[18] = {MMul_dot_product4_in0_re[18][13], MMul_dot_product4_in0_re[18]};
  assign MMul_dot_product4_sub_cast_1[18] = {{4{MMul_dot_product4_sub_cast[18][14]}}, MMul_dot_product4_sub_cast[18]};
  assign MMul_dot_product4_in0_im[18] = (alpha_im_7[18] == 1'b1 ? alpha_im_15[18] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[18] = {MMul_dot_product4_in0_im[18][13], MMul_dot_product4_in0_im[18]};
  assign MMul_dot_product4_sub_cast_3[18] = {{4{MMul_dot_product4_sub_cast_2[18][14]}}, MMul_dot_product4_sub_cast_2[18]};
  assign MMul_dot_product_out_re_2[18] = MMul_dot_product4_sub_cast_1[18] - MMul_dot_product4_sub_cast_3[18];
  assign MMul_dot_product4_in0_im_1[18] = (alpha_im_7[18] == 1'b1 ? alpha_re_15[18] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[18] = {MMul_dot_product4_in0_im_1[18][13], MMul_dot_product4_in0_im_1[18]};
  assign MMul_dot_product4_add_cast_1[18] = {{4{MMul_dot_product4_add_cast[18][14]}}, MMul_dot_product4_add_cast[18]};
  assign MMul_dot_product4_in0_re_1[18] = (alpha_re_7[18] == 1'b1 ? alpha_im_15[18] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[18] = {MMul_dot_product4_in0_re_1[18][13], MMul_dot_product4_in0_re_1[18]};
  assign MMul_dot_product4_add_cast_3[18] = {{4{MMul_dot_product4_add_cast_2[18][14]}}, MMul_dot_product4_add_cast_2[18]};
  assign MMul_dot_product_out_im_2[18] = MMul_dot_product4_add_cast_1[18] + MMul_dot_product4_add_cast_3[18];
  assign MMul_dot_product4_in0_re[19] = (alpha_re_7[19] == 1'b1 ? alpha_re_15[19] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[19] = {MMul_dot_product4_in0_re[19][13], MMul_dot_product4_in0_re[19]};
  assign MMul_dot_product4_sub_cast_1[19] = {{4{MMul_dot_product4_sub_cast[19][14]}}, MMul_dot_product4_sub_cast[19]};
  assign MMul_dot_product4_in0_im[19] = (alpha_im_7[19] == 1'b1 ? alpha_im_15[19] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[19] = {MMul_dot_product4_in0_im[19][13], MMul_dot_product4_in0_im[19]};
  assign MMul_dot_product4_sub_cast_3[19] = {{4{MMul_dot_product4_sub_cast_2[19][14]}}, MMul_dot_product4_sub_cast_2[19]};
  assign MMul_dot_product_out_re_2[19] = MMul_dot_product4_sub_cast_1[19] - MMul_dot_product4_sub_cast_3[19];
  assign MMul_dot_product4_in0_im_1[19] = (alpha_im_7[19] == 1'b1 ? alpha_re_15[19] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[19] = {MMul_dot_product4_in0_im_1[19][13], MMul_dot_product4_in0_im_1[19]};
  assign MMul_dot_product4_add_cast_1[19] = {{4{MMul_dot_product4_add_cast[19][14]}}, MMul_dot_product4_add_cast[19]};
  assign MMul_dot_product4_in0_re_1[19] = (alpha_re_7[19] == 1'b1 ? alpha_im_15[19] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[19] = {MMul_dot_product4_in0_re_1[19][13], MMul_dot_product4_in0_re_1[19]};
  assign MMul_dot_product4_add_cast_3[19] = {{4{MMul_dot_product4_add_cast_2[19][14]}}, MMul_dot_product4_add_cast_2[19]};
  assign MMul_dot_product_out_im_2[19] = MMul_dot_product4_add_cast_1[19] + MMul_dot_product4_add_cast_3[19];
  assign MMul_dot_product4_in0_re[20] = (alpha_re_7[20] == 1'b1 ? alpha_re_15[20] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[20] = {MMul_dot_product4_in0_re[20][13], MMul_dot_product4_in0_re[20]};
  assign MMul_dot_product4_sub_cast_1[20] = {{4{MMul_dot_product4_sub_cast[20][14]}}, MMul_dot_product4_sub_cast[20]};
  assign MMul_dot_product4_in0_im[20] = (alpha_im_7[20] == 1'b1 ? alpha_im_15[20] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[20] = {MMul_dot_product4_in0_im[20][13], MMul_dot_product4_in0_im[20]};
  assign MMul_dot_product4_sub_cast_3[20] = {{4{MMul_dot_product4_sub_cast_2[20][14]}}, MMul_dot_product4_sub_cast_2[20]};
  assign MMul_dot_product_out_re_2[20] = MMul_dot_product4_sub_cast_1[20] - MMul_dot_product4_sub_cast_3[20];
  assign MMul_dot_product4_in0_im_1[20] = (alpha_im_7[20] == 1'b1 ? alpha_re_15[20] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[20] = {MMul_dot_product4_in0_im_1[20][13], MMul_dot_product4_in0_im_1[20]};
  assign MMul_dot_product4_add_cast_1[20] = {{4{MMul_dot_product4_add_cast[20][14]}}, MMul_dot_product4_add_cast[20]};
  assign MMul_dot_product4_in0_re_1[20] = (alpha_re_7[20] == 1'b1 ? alpha_im_15[20] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[20] = {MMul_dot_product4_in0_re_1[20][13], MMul_dot_product4_in0_re_1[20]};
  assign MMul_dot_product4_add_cast_3[20] = {{4{MMul_dot_product4_add_cast_2[20][14]}}, MMul_dot_product4_add_cast_2[20]};
  assign MMul_dot_product_out_im_2[20] = MMul_dot_product4_add_cast_1[20] + MMul_dot_product4_add_cast_3[20];
  assign MMul_dot_product4_in0_re[21] = (alpha_re_7[21] == 1'b1 ? alpha_re_15[21] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[21] = {MMul_dot_product4_in0_re[21][13], MMul_dot_product4_in0_re[21]};
  assign MMul_dot_product4_sub_cast_1[21] = {{4{MMul_dot_product4_sub_cast[21][14]}}, MMul_dot_product4_sub_cast[21]};
  assign MMul_dot_product4_in0_im[21] = (alpha_im_7[21] == 1'b1 ? alpha_im_15[21] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[21] = {MMul_dot_product4_in0_im[21][13], MMul_dot_product4_in0_im[21]};
  assign MMul_dot_product4_sub_cast_3[21] = {{4{MMul_dot_product4_sub_cast_2[21][14]}}, MMul_dot_product4_sub_cast_2[21]};
  assign MMul_dot_product_out_re_2[21] = MMul_dot_product4_sub_cast_1[21] - MMul_dot_product4_sub_cast_3[21];
  assign MMul_dot_product4_in0_im_1[21] = (alpha_im_7[21] == 1'b1 ? alpha_re_15[21] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[21] = {MMul_dot_product4_in0_im_1[21][13], MMul_dot_product4_in0_im_1[21]};
  assign MMul_dot_product4_add_cast_1[21] = {{4{MMul_dot_product4_add_cast[21][14]}}, MMul_dot_product4_add_cast[21]};
  assign MMul_dot_product4_in0_re_1[21] = (alpha_re_7[21] == 1'b1 ? alpha_im_15[21] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[21] = {MMul_dot_product4_in0_re_1[21][13], MMul_dot_product4_in0_re_1[21]};
  assign MMul_dot_product4_add_cast_3[21] = {{4{MMul_dot_product4_add_cast_2[21][14]}}, MMul_dot_product4_add_cast_2[21]};
  assign MMul_dot_product_out_im_2[21] = MMul_dot_product4_add_cast_1[21] + MMul_dot_product4_add_cast_3[21];
  assign MMul_dot_product4_in0_re[22] = (alpha_re_7[22] == 1'b1 ? alpha_re_15[22] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[22] = {MMul_dot_product4_in0_re[22][13], MMul_dot_product4_in0_re[22]};
  assign MMul_dot_product4_sub_cast_1[22] = {{4{MMul_dot_product4_sub_cast[22][14]}}, MMul_dot_product4_sub_cast[22]};
  assign MMul_dot_product4_in0_im[22] = (alpha_im_7[22] == 1'b1 ? alpha_im_15[22] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[22] = {MMul_dot_product4_in0_im[22][13], MMul_dot_product4_in0_im[22]};
  assign MMul_dot_product4_sub_cast_3[22] = {{4{MMul_dot_product4_sub_cast_2[22][14]}}, MMul_dot_product4_sub_cast_2[22]};
  assign MMul_dot_product_out_re_2[22] = MMul_dot_product4_sub_cast_1[22] - MMul_dot_product4_sub_cast_3[22];
  assign MMul_dot_product4_in0_im_1[22] = (alpha_im_7[22] == 1'b1 ? alpha_re_15[22] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[22] = {MMul_dot_product4_in0_im_1[22][13], MMul_dot_product4_in0_im_1[22]};
  assign MMul_dot_product4_add_cast_1[22] = {{4{MMul_dot_product4_add_cast[22][14]}}, MMul_dot_product4_add_cast[22]};
  assign MMul_dot_product4_in0_re_1[22] = (alpha_re_7[22] == 1'b1 ? alpha_im_15[22] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[22] = {MMul_dot_product4_in0_re_1[22][13], MMul_dot_product4_in0_re_1[22]};
  assign MMul_dot_product4_add_cast_3[22] = {{4{MMul_dot_product4_add_cast_2[22][14]}}, MMul_dot_product4_add_cast_2[22]};
  assign MMul_dot_product_out_im_2[22] = MMul_dot_product4_add_cast_1[22] + MMul_dot_product4_add_cast_3[22];
  assign MMul_dot_product4_in0_re[23] = (alpha_re_7[23] == 1'b1 ? alpha_re_15[23] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[23] = {MMul_dot_product4_in0_re[23][13], MMul_dot_product4_in0_re[23]};
  assign MMul_dot_product4_sub_cast_1[23] = {{4{MMul_dot_product4_sub_cast[23][14]}}, MMul_dot_product4_sub_cast[23]};
  assign MMul_dot_product4_in0_im[23] = (alpha_im_7[23] == 1'b1 ? alpha_im_15[23] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[23] = {MMul_dot_product4_in0_im[23][13], MMul_dot_product4_in0_im[23]};
  assign MMul_dot_product4_sub_cast_3[23] = {{4{MMul_dot_product4_sub_cast_2[23][14]}}, MMul_dot_product4_sub_cast_2[23]};
  assign MMul_dot_product_out_re_2[23] = MMul_dot_product4_sub_cast_1[23] - MMul_dot_product4_sub_cast_3[23];
  assign MMul_dot_product4_in0_im_1[23] = (alpha_im_7[23] == 1'b1 ? alpha_re_15[23] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[23] = {MMul_dot_product4_in0_im_1[23][13], MMul_dot_product4_in0_im_1[23]};
  assign MMul_dot_product4_add_cast_1[23] = {{4{MMul_dot_product4_add_cast[23][14]}}, MMul_dot_product4_add_cast[23]};
  assign MMul_dot_product4_in0_re_1[23] = (alpha_re_7[23] == 1'b1 ? alpha_im_15[23] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[23] = {MMul_dot_product4_in0_re_1[23][13], MMul_dot_product4_in0_re_1[23]};
  assign MMul_dot_product4_add_cast_3[23] = {{4{MMul_dot_product4_add_cast_2[23][14]}}, MMul_dot_product4_add_cast_2[23]};
  assign MMul_dot_product_out_im_2[23] = MMul_dot_product4_add_cast_1[23] + MMul_dot_product4_add_cast_3[23];
  assign MMul_dot_product4_in0_re[24] = (alpha_re_7[24] == 1'b1 ? alpha_re_15[24] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[24] = {MMul_dot_product4_in0_re[24][13], MMul_dot_product4_in0_re[24]};
  assign MMul_dot_product4_sub_cast_1[24] = {{4{MMul_dot_product4_sub_cast[24][14]}}, MMul_dot_product4_sub_cast[24]};
  assign MMul_dot_product4_in0_im[24] = (alpha_im_7[24] == 1'b1 ? alpha_im_15[24] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[24] = {MMul_dot_product4_in0_im[24][13], MMul_dot_product4_in0_im[24]};
  assign MMul_dot_product4_sub_cast_3[24] = {{4{MMul_dot_product4_sub_cast_2[24][14]}}, MMul_dot_product4_sub_cast_2[24]};
  assign MMul_dot_product_out_re_2[24] = MMul_dot_product4_sub_cast_1[24] - MMul_dot_product4_sub_cast_3[24];
  assign MMul_dot_product4_in0_im_1[24] = (alpha_im_7[24] == 1'b1 ? alpha_re_15[24] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[24] = {MMul_dot_product4_in0_im_1[24][13], MMul_dot_product4_in0_im_1[24]};
  assign MMul_dot_product4_add_cast_1[24] = {{4{MMul_dot_product4_add_cast[24][14]}}, MMul_dot_product4_add_cast[24]};
  assign MMul_dot_product4_in0_re_1[24] = (alpha_re_7[24] == 1'b1 ? alpha_im_15[24] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[24] = {MMul_dot_product4_in0_re_1[24][13], MMul_dot_product4_in0_re_1[24]};
  assign MMul_dot_product4_add_cast_3[24] = {{4{MMul_dot_product4_add_cast_2[24][14]}}, MMul_dot_product4_add_cast_2[24]};
  assign MMul_dot_product_out_im_2[24] = MMul_dot_product4_add_cast_1[24] + MMul_dot_product4_add_cast_3[24];
  assign MMul_dot_product4_in0_re[25] = (alpha_re_7[25] == 1'b1 ? alpha_re_15[25] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[25] = {MMul_dot_product4_in0_re[25][13], MMul_dot_product4_in0_re[25]};
  assign MMul_dot_product4_sub_cast_1[25] = {{4{MMul_dot_product4_sub_cast[25][14]}}, MMul_dot_product4_sub_cast[25]};
  assign MMul_dot_product4_in0_im[25] = (alpha_im_7[25] == 1'b1 ? alpha_im_15[25] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[25] = {MMul_dot_product4_in0_im[25][13], MMul_dot_product4_in0_im[25]};
  assign MMul_dot_product4_sub_cast_3[25] = {{4{MMul_dot_product4_sub_cast_2[25][14]}}, MMul_dot_product4_sub_cast_2[25]};
  assign MMul_dot_product_out_re_2[25] = MMul_dot_product4_sub_cast_1[25] - MMul_dot_product4_sub_cast_3[25];
  assign MMul_dot_product4_in0_im_1[25] = (alpha_im_7[25] == 1'b1 ? alpha_re_15[25] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[25] = {MMul_dot_product4_in0_im_1[25][13], MMul_dot_product4_in0_im_1[25]};
  assign MMul_dot_product4_add_cast_1[25] = {{4{MMul_dot_product4_add_cast[25][14]}}, MMul_dot_product4_add_cast[25]};
  assign MMul_dot_product4_in0_re_1[25] = (alpha_re_7[25] == 1'b1 ? alpha_im_15[25] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[25] = {MMul_dot_product4_in0_re_1[25][13], MMul_dot_product4_in0_re_1[25]};
  assign MMul_dot_product4_add_cast_3[25] = {{4{MMul_dot_product4_add_cast_2[25][14]}}, MMul_dot_product4_add_cast_2[25]};
  assign MMul_dot_product_out_im_2[25] = MMul_dot_product4_add_cast_1[25] + MMul_dot_product4_add_cast_3[25];
  assign MMul_dot_product4_in0_re[26] = (alpha_re_7[26] == 1'b1 ? alpha_re_15[26] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[26] = {MMul_dot_product4_in0_re[26][13], MMul_dot_product4_in0_re[26]};
  assign MMul_dot_product4_sub_cast_1[26] = {{4{MMul_dot_product4_sub_cast[26][14]}}, MMul_dot_product4_sub_cast[26]};
  assign MMul_dot_product4_in0_im[26] = (alpha_im_7[26] == 1'b1 ? alpha_im_15[26] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[26] = {MMul_dot_product4_in0_im[26][13], MMul_dot_product4_in0_im[26]};
  assign MMul_dot_product4_sub_cast_3[26] = {{4{MMul_dot_product4_sub_cast_2[26][14]}}, MMul_dot_product4_sub_cast_2[26]};
  assign MMul_dot_product_out_re_2[26] = MMul_dot_product4_sub_cast_1[26] - MMul_dot_product4_sub_cast_3[26];
  assign MMul_dot_product4_in0_im_1[26] = (alpha_im_7[26] == 1'b1 ? alpha_re_15[26] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[26] = {MMul_dot_product4_in0_im_1[26][13], MMul_dot_product4_in0_im_1[26]};
  assign MMul_dot_product4_add_cast_1[26] = {{4{MMul_dot_product4_add_cast[26][14]}}, MMul_dot_product4_add_cast[26]};
  assign MMul_dot_product4_in0_re_1[26] = (alpha_re_7[26] == 1'b1 ? alpha_im_15[26] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[26] = {MMul_dot_product4_in0_re_1[26][13], MMul_dot_product4_in0_re_1[26]};
  assign MMul_dot_product4_add_cast_3[26] = {{4{MMul_dot_product4_add_cast_2[26][14]}}, MMul_dot_product4_add_cast_2[26]};
  assign MMul_dot_product_out_im_2[26] = MMul_dot_product4_add_cast_1[26] + MMul_dot_product4_add_cast_3[26];
  assign MMul_dot_product4_in0_re[27] = (alpha_re_7[27] == 1'b1 ? alpha_re_15[27] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[27] = {MMul_dot_product4_in0_re[27][13], MMul_dot_product4_in0_re[27]};
  assign MMul_dot_product4_sub_cast_1[27] = {{4{MMul_dot_product4_sub_cast[27][14]}}, MMul_dot_product4_sub_cast[27]};
  assign MMul_dot_product4_in0_im[27] = (alpha_im_7[27] == 1'b1 ? alpha_im_15[27] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[27] = {MMul_dot_product4_in0_im[27][13], MMul_dot_product4_in0_im[27]};
  assign MMul_dot_product4_sub_cast_3[27] = {{4{MMul_dot_product4_sub_cast_2[27][14]}}, MMul_dot_product4_sub_cast_2[27]};
  assign MMul_dot_product_out_re_2[27] = MMul_dot_product4_sub_cast_1[27] - MMul_dot_product4_sub_cast_3[27];
  assign MMul_dot_product4_in0_im_1[27] = (alpha_im_7[27] == 1'b1 ? alpha_re_15[27] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[27] = {MMul_dot_product4_in0_im_1[27][13], MMul_dot_product4_in0_im_1[27]};
  assign MMul_dot_product4_add_cast_1[27] = {{4{MMul_dot_product4_add_cast[27][14]}}, MMul_dot_product4_add_cast[27]};
  assign MMul_dot_product4_in0_re_1[27] = (alpha_re_7[27] == 1'b1 ? alpha_im_15[27] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[27] = {MMul_dot_product4_in0_re_1[27][13], MMul_dot_product4_in0_re_1[27]};
  assign MMul_dot_product4_add_cast_3[27] = {{4{MMul_dot_product4_add_cast_2[27][14]}}, MMul_dot_product4_add_cast_2[27]};
  assign MMul_dot_product_out_im_2[27] = MMul_dot_product4_add_cast_1[27] + MMul_dot_product4_add_cast_3[27];
  assign MMul_dot_product4_in0_re[28] = (alpha_re_7[28] == 1'b1 ? alpha_re_15[28] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[28] = {MMul_dot_product4_in0_re[28][13], MMul_dot_product4_in0_re[28]};
  assign MMul_dot_product4_sub_cast_1[28] = {{4{MMul_dot_product4_sub_cast[28][14]}}, MMul_dot_product4_sub_cast[28]};
  assign MMul_dot_product4_in0_im[28] = (alpha_im_7[28] == 1'b1 ? alpha_im_15[28] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[28] = {MMul_dot_product4_in0_im[28][13], MMul_dot_product4_in0_im[28]};
  assign MMul_dot_product4_sub_cast_3[28] = {{4{MMul_dot_product4_sub_cast_2[28][14]}}, MMul_dot_product4_sub_cast_2[28]};
  assign MMul_dot_product_out_re_2[28] = MMul_dot_product4_sub_cast_1[28] - MMul_dot_product4_sub_cast_3[28];
  assign MMul_dot_product4_in0_im_1[28] = (alpha_im_7[28] == 1'b1 ? alpha_re_15[28] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[28] = {MMul_dot_product4_in0_im_1[28][13], MMul_dot_product4_in0_im_1[28]};
  assign MMul_dot_product4_add_cast_1[28] = {{4{MMul_dot_product4_add_cast[28][14]}}, MMul_dot_product4_add_cast[28]};
  assign MMul_dot_product4_in0_re_1[28] = (alpha_re_7[28] == 1'b1 ? alpha_im_15[28] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[28] = {MMul_dot_product4_in0_re_1[28][13], MMul_dot_product4_in0_re_1[28]};
  assign MMul_dot_product4_add_cast_3[28] = {{4{MMul_dot_product4_add_cast_2[28][14]}}, MMul_dot_product4_add_cast_2[28]};
  assign MMul_dot_product_out_im_2[28] = MMul_dot_product4_add_cast_1[28] + MMul_dot_product4_add_cast_3[28];
  assign MMul_dot_product4_in0_re[29] = (alpha_re_7[29] == 1'b1 ? alpha_re_15[29] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[29] = {MMul_dot_product4_in0_re[29][13], MMul_dot_product4_in0_re[29]};
  assign MMul_dot_product4_sub_cast_1[29] = {{4{MMul_dot_product4_sub_cast[29][14]}}, MMul_dot_product4_sub_cast[29]};
  assign MMul_dot_product4_in0_im[29] = (alpha_im_7[29] == 1'b1 ? alpha_im_15[29] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[29] = {MMul_dot_product4_in0_im[29][13], MMul_dot_product4_in0_im[29]};
  assign MMul_dot_product4_sub_cast_3[29] = {{4{MMul_dot_product4_sub_cast_2[29][14]}}, MMul_dot_product4_sub_cast_2[29]};
  assign MMul_dot_product_out_re_2[29] = MMul_dot_product4_sub_cast_1[29] - MMul_dot_product4_sub_cast_3[29];
  assign MMul_dot_product4_in0_im_1[29] = (alpha_im_7[29] == 1'b1 ? alpha_re_15[29] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[29] = {MMul_dot_product4_in0_im_1[29][13], MMul_dot_product4_in0_im_1[29]};
  assign MMul_dot_product4_add_cast_1[29] = {{4{MMul_dot_product4_add_cast[29][14]}}, MMul_dot_product4_add_cast[29]};
  assign MMul_dot_product4_in0_re_1[29] = (alpha_re_7[29] == 1'b1 ? alpha_im_15[29] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[29] = {MMul_dot_product4_in0_re_1[29][13], MMul_dot_product4_in0_re_1[29]};
  assign MMul_dot_product4_add_cast_3[29] = {{4{MMul_dot_product4_add_cast_2[29][14]}}, MMul_dot_product4_add_cast_2[29]};
  assign MMul_dot_product_out_im_2[29] = MMul_dot_product4_add_cast_1[29] + MMul_dot_product4_add_cast_3[29];
  assign MMul_dot_product4_in0_re[30] = (alpha_re_7[30] == 1'b1 ? alpha_re_15[30] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[30] = {MMul_dot_product4_in0_re[30][13], MMul_dot_product4_in0_re[30]};
  assign MMul_dot_product4_sub_cast_1[30] = {{4{MMul_dot_product4_sub_cast[30][14]}}, MMul_dot_product4_sub_cast[30]};
  assign MMul_dot_product4_in0_im[30] = (alpha_im_7[30] == 1'b1 ? alpha_im_15[30] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[30] = {MMul_dot_product4_in0_im[30][13], MMul_dot_product4_in0_im[30]};
  assign MMul_dot_product4_sub_cast_3[30] = {{4{MMul_dot_product4_sub_cast_2[30][14]}}, MMul_dot_product4_sub_cast_2[30]};
  assign MMul_dot_product_out_re_2[30] = MMul_dot_product4_sub_cast_1[30] - MMul_dot_product4_sub_cast_3[30];
  assign MMul_dot_product4_in0_im_1[30] = (alpha_im_7[30] == 1'b1 ? alpha_re_15[30] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[30] = {MMul_dot_product4_in0_im_1[30][13], MMul_dot_product4_in0_im_1[30]};
  assign MMul_dot_product4_add_cast_1[30] = {{4{MMul_dot_product4_add_cast[30][14]}}, MMul_dot_product4_add_cast[30]};
  assign MMul_dot_product4_in0_re_1[30] = (alpha_re_7[30] == 1'b1 ? alpha_im_15[30] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[30] = {MMul_dot_product4_in0_re_1[30][13], MMul_dot_product4_in0_re_1[30]};
  assign MMul_dot_product4_add_cast_3[30] = {{4{MMul_dot_product4_add_cast_2[30][14]}}, MMul_dot_product4_add_cast_2[30]};
  assign MMul_dot_product_out_im_2[30] = MMul_dot_product4_add_cast_1[30] + MMul_dot_product4_add_cast_3[30];
  assign MMul_dot_product4_in0_re[31] = (alpha_re_7[31] == 1'b1 ? alpha_re_15[31] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[31] = {MMul_dot_product4_in0_re[31][13], MMul_dot_product4_in0_re[31]};
  assign MMul_dot_product4_sub_cast_1[31] = {{4{MMul_dot_product4_sub_cast[31][14]}}, MMul_dot_product4_sub_cast[31]};
  assign MMul_dot_product4_in0_im[31] = (alpha_im_7[31] == 1'b1 ? alpha_im_15[31] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[31] = {MMul_dot_product4_in0_im[31][13], MMul_dot_product4_in0_im[31]};
  assign MMul_dot_product4_sub_cast_3[31] = {{4{MMul_dot_product4_sub_cast_2[31][14]}}, MMul_dot_product4_sub_cast_2[31]};
  assign MMul_dot_product_out_re_2[31] = MMul_dot_product4_sub_cast_1[31] - MMul_dot_product4_sub_cast_3[31];
  assign MMul_dot_product4_in0_im_1[31] = (alpha_im_7[31] == 1'b1 ? alpha_re_15[31] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[31] = {MMul_dot_product4_in0_im_1[31][13], MMul_dot_product4_in0_im_1[31]};
  assign MMul_dot_product4_add_cast_1[31] = {{4{MMul_dot_product4_add_cast[31][14]}}, MMul_dot_product4_add_cast[31]};
  assign MMul_dot_product4_in0_re_1[31] = (alpha_re_7[31] == 1'b1 ? alpha_im_15[31] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[31] = {MMul_dot_product4_in0_re_1[31][13], MMul_dot_product4_in0_re_1[31]};
  assign MMul_dot_product4_add_cast_3[31] = {{4{MMul_dot_product4_add_cast_2[31][14]}}, MMul_dot_product4_add_cast_2[31]};
  assign MMul_dot_product_out_im_2[31] = MMul_dot_product4_add_cast_1[31] + MMul_dot_product4_add_cast_3[31];
  assign MMul_dot_product4_in0_re[32] = (alpha_re_7[32] == 1'b1 ? alpha_re_15[32] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[32] = {MMul_dot_product4_in0_re[32][13], MMul_dot_product4_in0_re[32]};
  assign MMul_dot_product4_sub_cast_1[32] = {{4{MMul_dot_product4_sub_cast[32][14]}}, MMul_dot_product4_sub_cast[32]};
  assign MMul_dot_product4_in0_im[32] = (alpha_im_7[32] == 1'b1 ? alpha_im_15[32] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[32] = {MMul_dot_product4_in0_im[32][13], MMul_dot_product4_in0_im[32]};
  assign MMul_dot_product4_sub_cast_3[32] = {{4{MMul_dot_product4_sub_cast_2[32][14]}}, MMul_dot_product4_sub_cast_2[32]};
  assign MMul_dot_product_out_re_2[32] = MMul_dot_product4_sub_cast_1[32] - MMul_dot_product4_sub_cast_3[32];
  assign MMul_dot_product4_in0_im_1[32] = (alpha_im_7[32] == 1'b1 ? alpha_re_15[32] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[32] = {MMul_dot_product4_in0_im_1[32][13], MMul_dot_product4_in0_im_1[32]};
  assign MMul_dot_product4_add_cast_1[32] = {{4{MMul_dot_product4_add_cast[32][14]}}, MMul_dot_product4_add_cast[32]};
  assign MMul_dot_product4_in0_re_1[32] = (alpha_re_7[32] == 1'b1 ? alpha_im_15[32] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[32] = {MMul_dot_product4_in0_re_1[32][13], MMul_dot_product4_in0_re_1[32]};
  assign MMul_dot_product4_add_cast_3[32] = {{4{MMul_dot_product4_add_cast_2[32][14]}}, MMul_dot_product4_add_cast_2[32]};
  assign MMul_dot_product_out_im_2[32] = MMul_dot_product4_add_cast_1[32] + MMul_dot_product4_add_cast_3[32];
  assign MMul_dot_product4_in0_re[33] = (alpha_re_7[33] == 1'b1 ? alpha_re_15[33] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[33] = {MMul_dot_product4_in0_re[33][13], MMul_dot_product4_in0_re[33]};
  assign MMul_dot_product4_sub_cast_1[33] = {{4{MMul_dot_product4_sub_cast[33][14]}}, MMul_dot_product4_sub_cast[33]};
  assign MMul_dot_product4_in0_im[33] = (alpha_im_7[33] == 1'b1 ? alpha_im_15[33] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[33] = {MMul_dot_product4_in0_im[33][13], MMul_dot_product4_in0_im[33]};
  assign MMul_dot_product4_sub_cast_3[33] = {{4{MMul_dot_product4_sub_cast_2[33][14]}}, MMul_dot_product4_sub_cast_2[33]};
  assign MMul_dot_product_out_re_2[33] = MMul_dot_product4_sub_cast_1[33] - MMul_dot_product4_sub_cast_3[33];
  assign MMul_dot_product4_in0_im_1[33] = (alpha_im_7[33] == 1'b1 ? alpha_re_15[33] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[33] = {MMul_dot_product4_in0_im_1[33][13], MMul_dot_product4_in0_im_1[33]};
  assign MMul_dot_product4_add_cast_1[33] = {{4{MMul_dot_product4_add_cast[33][14]}}, MMul_dot_product4_add_cast[33]};
  assign MMul_dot_product4_in0_re_1[33] = (alpha_re_7[33] == 1'b1 ? alpha_im_15[33] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[33] = {MMul_dot_product4_in0_re_1[33][13], MMul_dot_product4_in0_re_1[33]};
  assign MMul_dot_product4_add_cast_3[33] = {{4{MMul_dot_product4_add_cast_2[33][14]}}, MMul_dot_product4_add_cast_2[33]};
  assign MMul_dot_product_out_im_2[33] = MMul_dot_product4_add_cast_1[33] + MMul_dot_product4_add_cast_3[33];
  assign MMul_dot_product4_in0_re[34] = (alpha_re_7[34] == 1'b1 ? alpha_re_15[34] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[34] = {MMul_dot_product4_in0_re[34][13], MMul_dot_product4_in0_re[34]};
  assign MMul_dot_product4_sub_cast_1[34] = {{4{MMul_dot_product4_sub_cast[34][14]}}, MMul_dot_product4_sub_cast[34]};
  assign MMul_dot_product4_in0_im[34] = (alpha_im_7[34] == 1'b1 ? alpha_im_15[34] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[34] = {MMul_dot_product4_in0_im[34][13], MMul_dot_product4_in0_im[34]};
  assign MMul_dot_product4_sub_cast_3[34] = {{4{MMul_dot_product4_sub_cast_2[34][14]}}, MMul_dot_product4_sub_cast_2[34]};
  assign MMul_dot_product_out_re_2[34] = MMul_dot_product4_sub_cast_1[34] - MMul_dot_product4_sub_cast_3[34];
  assign MMul_dot_product4_in0_im_1[34] = (alpha_im_7[34] == 1'b1 ? alpha_re_15[34] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[34] = {MMul_dot_product4_in0_im_1[34][13], MMul_dot_product4_in0_im_1[34]};
  assign MMul_dot_product4_add_cast_1[34] = {{4{MMul_dot_product4_add_cast[34][14]}}, MMul_dot_product4_add_cast[34]};
  assign MMul_dot_product4_in0_re_1[34] = (alpha_re_7[34] == 1'b1 ? alpha_im_15[34] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[34] = {MMul_dot_product4_in0_re_1[34][13], MMul_dot_product4_in0_re_1[34]};
  assign MMul_dot_product4_add_cast_3[34] = {{4{MMul_dot_product4_add_cast_2[34][14]}}, MMul_dot_product4_add_cast_2[34]};
  assign MMul_dot_product_out_im_2[34] = MMul_dot_product4_add_cast_1[34] + MMul_dot_product4_add_cast_3[34];
  assign MMul_dot_product4_in0_re[35] = (alpha_re_7[35] == 1'b1 ? alpha_re_15[35] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[35] = {MMul_dot_product4_in0_re[35][13], MMul_dot_product4_in0_re[35]};
  assign MMul_dot_product4_sub_cast_1[35] = {{4{MMul_dot_product4_sub_cast[35][14]}}, MMul_dot_product4_sub_cast[35]};
  assign MMul_dot_product4_in0_im[35] = (alpha_im_7[35] == 1'b1 ? alpha_im_15[35] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[35] = {MMul_dot_product4_in0_im[35][13], MMul_dot_product4_in0_im[35]};
  assign MMul_dot_product4_sub_cast_3[35] = {{4{MMul_dot_product4_sub_cast_2[35][14]}}, MMul_dot_product4_sub_cast_2[35]};
  assign MMul_dot_product_out_re_2[35] = MMul_dot_product4_sub_cast_1[35] - MMul_dot_product4_sub_cast_3[35];
  assign MMul_dot_product4_in0_im_1[35] = (alpha_im_7[35] == 1'b1 ? alpha_re_15[35] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[35] = {MMul_dot_product4_in0_im_1[35][13], MMul_dot_product4_in0_im_1[35]};
  assign MMul_dot_product4_add_cast_1[35] = {{4{MMul_dot_product4_add_cast[35][14]}}, MMul_dot_product4_add_cast[35]};
  assign MMul_dot_product4_in0_re_1[35] = (alpha_re_7[35] == 1'b1 ? alpha_im_15[35] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[35] = {MMul_dot_product4_in0_re_1[35][13], MMul_dot_product4_in0_re_1[35]};
  assign MMul_dot_product4_add_cast_3[35] = {{4{MMul_dot_product4_add_cast_2[35][14]}}, MMul_dot_product4_add_cast_2[35]};
  assign MMul_dot_product_out_im_2[35] = MMul_dot_product4_add_cast_1[35] + MMul_dot_product4_add_cast_3[35];
  assign MMul_dot_product4_in0_re[36] = (alpha_re_7[36] == 1'b1 ? alpha_re_15[36] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[36] = {MMul_dot_product4_in0_re[36][13], MMul_dot_product4_in0_re[36]};
  assign MMul_dot_product4_sub_cast_1[36] = {{4{MMul_dot_product4_sub_cast[36][14]}}, MMul_dot_product4_sub_cast[36]};
  assign MMul_dot_product4_in0_im[36] = (alpha_im_7[36] == 1'b1 ? alpha_im_15[36] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[36] = {MMul_dot_product4_in0_im[36][13], MMul_dot_product4_in0_im[36]};
  assign MMul_dot_product4_sub_cast_3[36] = {{4{MMul_dot_product4_sub_cast_2[36][14]}}, MMul_dot_product4_sub_cast_2[36]};
  assign MMul_dot_product_out_re_2[36] = MMul_dot_product4_sub_cast_1[36] - MMul_dot_product4_sub_cast_3[36];
  assign MMul_dot_product4_in0_im_1[36] = (alpha_im_7[36] == 1'b1 ? alpha_re_15[36] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[36] = {MMul_dot_product4_in0_im_1[36][13], MMul_dot_product4_in0_im_1[36]};
  assign MMul_dot_product4_add_cast_1[36] = {{4{MMul_dot_product4_add_cast[36][14]}}, MMul_dot_product4_add_cast[36]};
  assign MMul_dot_product4_in0_re_1[36] = (alpha_re_7[36] == 1'b1 ? alpha_im_15[36] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[36] = {MMul_dot_product4_in0_re_1[36][13], MMul_dot_product4_in0_re_1[36]};
  assign MMul_dot_product4_add_cast_3[36] = {{4{MMul_dot_product4_add_cast_2[36][14]}}, MMul_dot_product4_add_cast_2[36]};
  assign MMul_dot_product_out_im_2[36] = MMul_dot_product4_add_cast_1[36] + MMul_dot_product4_add_cast_3[36];
  assign MMul_dot_product4_in0_re[37] = (alpha_re_7[37] == 1'b1 ? alpha_re_15[37] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[37] = {MMul_dot_product4_in0_re[37][13], MMul_dot_product4_in0_re[37]};
  assign MMul_dot_product4_sub_cast_1[37] = {{4{MMul_dot_product4_sub_cast[37][14]}}, MMul_dot_product4_sub_cast[37]};
  assign MMul_dot_product4_in0_im[37] = (alpha_im_7[37] == 1'b1 ? alpha_im_15[37] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[37] = {MMul_dot_product4_in0_im[37][13], MMul_dot_product4_in0_im[37]};
  assign MMul_dot_product4_sub_cast_3[37] = {{4{MMul_dot_product4_sub_cast_2[37][14]}}, MMul_dot_product4_sub_cast_2[37]};
  assign MMul_dot_product_out_re_2[37] = MMul_dot_product4_sub_cast_1[37] - MMul_dot_product4_sub_cast_3[37];
  assign MMul_dot_product4_in0_im_1[37] = (alpha_im_7[37] == 1'b1 ? alpha_re_15[37] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[37] = {MMul_dot_product4_in0_im_1[37][13], MMul_dot_product4_in0_im_1[37]};
  assign MMul_dot_product4_add_cast_1[37] = {{4{MMul_dot_product4_add_cast[37][14]}}, MMul_dot_product4_add_cast[37]};
  assign MMul_dot_product4_in0_re_1[37] = (alpha_re_7[37] == 1'b1 ? alpha_im_15[37] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[37] = {MMul_dot_product4_in0_re_1[37][13], MMul_dot_product4_in0_re_1[37]};
  assign MMul_dot_product4_add_cast_3[37] = {{4{MMul_dot_product4_add_cast_2[37][14]}}, MMul_dot_product4_add_cast_2[37]};
  assign MMul_dot_product_out_im_2[37] = MMul_dot_product4_add_cast_1[37] + MMul_dot_product4_add_cast_3[37];
  assign MMul_dot_product4_in0_re[38] = (alpha_re_7[38] == 1'b1 ? alpha_re_15[38] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[38] = {MMul_dot_product4_in0_re[38][13], MMul_dot_product4_in0_re[38]};
  assign MMul_dot_product4_sub_cast_1[38] = {{4{MMul_dot_product4_sub_cast[38][14]}}, MMul_dot_product4_sub_cast[38]};
  assign MMul_dot_product4_in0_im[38] = (alpha_im_7[38] == 1'b1 ? alpha_im_15[38] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[38] = {MMul_dot_product4_in0_im[38][13], MMul_dot_product4_in0_im[38]};
  assign MMul_dot_product4_sub_cast_3[38] = {{4{MMul_dot_product4_sub_cast_2[38][14]}}, MMul_dot_product4_sub_cast_2[38]};
  assign MMul_dot_product_out_re_2[38] = MMul_dot_product4_sub_cast_1[38] - MMul_dot_product4_sub_cast_3[38];
  assign MMul_dot_product4_in0_im_1[38] = (alpha_im_7[38] == 1'b1 ? alpha_re_15[38] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[38] = {MMul_dot_product4_in0_im_1[38][13], MMul_dot_product4_in0_im_1[38]};
  assign MMul_dot_product4_add_cast_1[38] = {{4{MMul_dot_product4_add_cast[38][14]}}, MMul_dot_product4_add_cast[38]};
  assign MMul_dot_product4_in0_re_1[38] = (alpha_re_7[38] == 1'b1 ? alpha_im_15[38] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[38] = {MMul_dot_product4_in0_re_1[38][13], MMul_dot_product4_in0_re_1[38]};
  assign MMul_dot_product4_add_cast_3[38] = {{4{MMul_dot_product4_add_cast_2[38][14]}}, MMul_dot_product4_add_cast_2[38]};
  assign MMul_dot_product_out_im_2[38] = MMul_dot_product4_add_cast_1[38] + MMul_dot_product4_add_cast_3[38];
  assign MMul_dot_product4_in0_re[39] = (alpha_re_7[39] == 1'b1 ? alpha_re_15[39] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[39] = {MMul_dot_product4_in0_re[39][13], MMul_dot_product4_in0_re[39]};
  assign MMul_dot_product4_sub_cast_1[39] = {{4{MMul_dot_product4_sub_cast[39][14]}}, MMul_dot_product4_sub_cast[39]};
  assign MMul_dot_product4_in0_im[39] = (alpha_im_7[39] == 1'b1 ? alpha_im_15[39] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[39] = {MMul_dot_product4_in0_im[39][13], MMul_dot_product4_in0_im[39]};
  assign MMul_dot_product4_sub_cast_3[39] = {{4{MMul_dot_product4_sub_cast_2[39][14]}}, MMul_dot_product4_sub_cast_2[39]};
  assign MMul_dot_product_out_re_2[39] = MMul_dot_product4_sub_cast_1[39] - MMul_dot_product4_sub_cast_3[39];
  assign MMul_dot_product4_in0_im_1[39] = (alpha_im_7[39] == 1'b1 ? alpha_re_15[39] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[39] = {MMul_dot_product4_in0_im_1[39][13], MMul_dot_product4_in0_im_1[39]};
  assign MMul_dot_product4_add_cast_1[39] = {{4{MMul_dot_product4_add_cast[39][14]}}, MMul_dot_product4_add_cast[39]};
  assign MMul_dot_product4_in0_re_1[39] = (alpha_re_7[39] == 1'b1 ? alpha_im_15[39] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[39] = {MMul_dot_product4_in0_re_1[39][13], MMul_dot_product4_in0_re_1[39]};
  assign MMul_dot_product4_add_cast_3[39] = {{4{MMul_dot_product4_add_cast_2[39][14]}}, MMul_dot_product4_add_cast_2[39]};
  assign MMul_dot_product_out_im_2[39] = MMul_dot_product4_add_cast_1[39] + MMul_dot_product4_add_cast_3[39];
  assign MMul_dot_product4_in0_re[40] = (alpha_re_7[40] == 1'b1 ? alpha_re_15[40] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[40] = {MMul_dot_product4_in0_re[40][13], MMul_dot_product4_in0_re[40]};
  assign MMul_dot_product4_sub_cast_1[40] = {{4{MMul_dot_product4_sub_cast[40][14]}}, MMul_dot_product4_sub_cast[40]};
  assign MMul_dot_product4_in0_im[40] = (alpha_im_7[40] == 1'b1 ? alpha_im_15[40] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[40] = {MMul_dot_product4_in0_im[40][13], MMul_dot_product4_in0_im[40]};
  assign MMul_dot_product4_sub_cast_3[40] = {{4{MMul_dot_product4_sub_cast_2[40][14]}}, MMul_dot_product4_sub_cast_2[40]};
  assign MMul_dot_product_out_re_2[40] = MMul_dot_product4_sub_cast_1[40] - MMul_dot_product4_sub_cast_3[40];
  assign MMul_dot_product4_in0_im_1[40] = (alpha_im_7[40] == 1'b1 ? alpha_re_15[40] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[40] = {MMul_dot_product4_in0_im_1[40][13], MMul_dot_product4_in0_im_1[40]};
  assign MMul_dot_product4_add_cast_1[40] = {{4{MMul_dot_product4_add_cast[40][14]}}, MMul_dot_product4_add_cast[40]};
  assign MMul_dot_product4_in0_re_1[40] = (alpha_re_7[40] == 1'b1 ? alpha_im_15[40] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[40] = {MMul_dot_product4_in0_re_1[40][13], MMul_dot_product4_in0_re_1[40]};
  assign MMul_dot_product4_add_cast_3[40] = {{4{MMul_dot_product4_add_cast_2[40][14]}}, MMul_dot_product4_add_cast_2[40]};
  assign MMul_dot_product_out_im_2[40] = MMul_dot_product4_add_cast_1[40] + MMul_dot_product4_add_cast_3[40];
  assign MMul_dot_product4_in0_re[41] = (alpha_re_7[41] == 1'b1 ? alpha_re_15[41] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[41] = {MMul_dot_product4_in0_re[41][13], MMul_dot_product4_in0_re[41]};
  assign MMul_dot_product4_sub_cast_1[41] = {{4{MMul_dot_product4_sub_cast[41][14]}}, MMul_dot_product4_sub_cast[41]};
  assign MMul_dot_product4_in0_im[41] = (alpha_im_7[41] == 1'b1 ? alpha_im_15[41] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[41] = {MMul_dot_product4_in0_im[41][13], MMul_dot_product4_in0_im[41]};
  assign MMul_dot_product4_sub_cast_3[41] = {{4{MMul_dot_product4_sub_cast_2[41][14]}}, MMul_dot_product4_sub_cast_2[41]};
  assign MMul_dot_product_out_re_2[41] = MMul_dot_product4_sub_cast_1[41] - MMul_dot_product4_sub_cast_3[41];
  assign MMul_dot_product4_in0_im_1[41] = (alpha_im_7[41] == 1'b1 ? alpha_re_15[41] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[41] = {MMul_dot_product4_in0_im_1[41][13], MMul_dot_product4_in0_im_1[41]};
  assign MMul_dot_product4_add_cast_1[41] = {{4{MMul_dot_product4_add_cast[41][14]}}, MMul_dot_product4_add_cast[41]};
  assign MMul_dot_product4_in0_re_1[41] = (alpha_re_7[41] == 1'b1 ? alpha_im_15[41] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[41] = {MMul_dot_product4_in0_re_1[41][13], MMul_dot_product4_in0_re_1[41]};
  assign MMul_dot_product4_add_cast_3[41] = {{4{MMul_dot_product4_add_cast_2[41][14]}}, MMul_dot_product4_add_cast_2[41]};
  assign MMul_dot_product_out_im_2[41] = MMul_dot_product4_add_cast_1[41] + MMul_dot_product4_add_cast_3[41];
  assign MMul_dot_product4_in0_re[42] = (alpha_re_7[42] == 1'b1 ? alpha_re_15[42] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[42] = {MMul_dot_product4_in0_re[42][13], MMul_dot_product4_in0_re[42]};
  assign MMul_dot_product4_sub_cast_1[42] = {{4{MMul_dot_product4_sub_cast[42][14]}}, MMul_dot_product4_sub_cast[42]};
  assign MMul_dot_product4_in0_im[42] = (alpha_im_7[42] == 1'b1 ? alpha_im_15[42] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[42] = {MMul_dot_product4_in0_im[42][13], MMul_dot_product4_in0_im[42]};
  assign MMul_dot_product4_sub_cast_3[42] = {{4{MMul_dot_product4_sub_cast_2[42][14]}}, MMul_dot_product4_sub_cast_2[42]};
  assign MMul_dot_product_out_re_2[42] = MMul_dot_product4_sub_cast_1[42] - MMul_dot_product4_sub_cast_3[42];
  assign MMul_dot_product4_in0_im_1[42] = (alpha_im_7[42] == 1'b1 ? alpha_re_15[42] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[42] = {MMul_dot_product4_in0_im_1[42][13], MMul_dot_product4_in0_im_1[42]};
  assign MMul_dot_product4_add_cast_1[42] = {{4{MMul_dot_product4_add_cast[42][14]}}, MMul_dot_product4_add_cast[42]};
  assign MMul_dot_product4_in0_re_1[42] = (alpha_re_7[42] == 1'b1 ? alpha_im_15[42] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[42] = {MMul_dot_product4_in0_re_1[42][13], MMul_dot_product4_in0_re_1[42]};
  assign MMul_dot_product4_add_cast_3[42] = {{4{MMul_dot_product4_add_cast_2[42][14]}}, MMul_dot_product4_add_cast_2[42]};
  assign MMul_dot_product_out_im_2[42] = MMul_dot_product4_add_cast_1[42] + MMul_dot_product4_add_cast_3[42];
  assign MMul_dot_product4_in0_re[43] = (alpha_re_7[43] == 1'b1 ? alpha_re_15[43] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[43] = {MMul_dot_product4_in0_re[43][13], MMul_dot_product4_in0_re[43]};
  assign MMul_dot_product4_sub_cast_1[43] = {{4{MMul_dot_product4_sub_cast[43][14]}}, MMul_dot_product4_sub_cast[43]};
  assign MMul_dot_product4_in0_im[43] = (alpha_im_7[43] == 1'b1 ? alpha_im_15[43] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[43] = {MMul_dot_product4_in0_im[43][13], MMul_dot_product4_in0_im[43]};
  assign MMul_dot_product4_sub_cast_3[43] = {{4{MMul_dot_product4_sub_cast_2[43][14]}}, MMul_dot_product4_sub_cast_2[43]};
  assign MMul_dot_product_out_re_2[43] = MMul_dot_product4_sub_cast_1[43] - MMul_dot_product4_sub_cast_3[43];
  assign MMul_dot_product4_in0_im_1[43] = (alpha_im_7[43] == 1'b1 ? alpha_re_15[43] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[43] = {MMul_dot_product4_in0_im_1[43][13], MMul_dot_product4_in0_im_1[43]};
  assign MMul_dot_product4_add_cast_1[43] = {{4{MMul_dot_product4_add_cast[43][14]}}, MMul_dot_product4_add_cast[43]};
  assign MMul_dot_product4_in0_re_1[43] = (alpha_re_7[43] == 1'b1 ? alpha_im_15[43] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[43] = {MMul_dot_product4_in0_re_1[43][13], MMul_dot_product4_in0_re_1[43]};
  assign MMul_dot_product4_add_cast_3[43] = {{4{MMul_dot_product4_add_cast_2[43][14]}}, MMul_dot_product4_add_cast_2[43]};
  assign MMul_dot_product_out_im_2[43] = MMul_dot_product4_add_cast_1[43] + MMul_dot_product4_add_cast_3[43];
  assign MMul_dot_product4_in0_re[44] = (alpha_re_7[44] == 1'b1 ? alpha_re_15[44] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[44] = {MMul_dot_product4_in0_re[44][13], MMul_dot_product4_in0_re[44]};
  assign MMul_dot_product4_sub_cast_1[44] = {{4{MMul_dot_product4_sub_cast[44][14]}}, MMul_dot_product4_sub_cast[44]};
  assign MMul_dot_product4_in0_im[44] = (alpha_im_7[44] == 1'b1 ? alpha_im_15[44] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[44] = {MMul_dot_product4_in0_im[44][13], MMul_dot_product4_in0_im[44]};
  assign MMul_dot_product4_sub_cast_3[44] = {{4{MMul_dot_product4_sub_cast_2[44][14]}}, MMul_dot_product4_sub_cast_2[44]};
  assign MMul_dot_product_out_re_2[44] = MMul_dot_product4_sub_cast_1[44] - MMul_dot_product4_sub_cast_3[44];
  assign MMul_dot_product4_in0_im_1[44] = (alpha_im_7[44] == 1'b1 ? alpha_re_15[44] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[44] = {MMul_dot_product4_in0_im_1[44][13], MMul_dot_product4_in0_im_1[44]};
  assign MMul_dot_product4_add_cast_1[44] = {{4{MMul_dot_product4_add_cast[44][14]}}, MMul_dot_product4_add_cast[44]};
  assign MMul_dot_product4_in0_re_1[44] = (alpha_re_7[44] == 1'b1 ? alpha_im_15[44] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[44] = {MMul_dot_product4_in0_re_1[44][13], MMul_dot_product4_in0_re_1[44]};
  assign MMul_dot_product4_add_cast_3[44] = {{4{MMul_dot_product4_add_cast_2[44][14]}}, MMul_dot_product4_add_cast_2[44]};
  assign MMul_dot_product_out_im_2[44] = MMul_dot_product4_add_cast_1[44] + MMul_dot_product4_add_cast_3[44];
  assign MMul_dot_product4_in0_re[45] = (alpha_re_7[45] == 1'b1 ? alpha_re_15[45] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[45] = {MMul_dot_product4_in0_re[45][13], MMul_dot_product4_in0_re[45]};
  assign MMul_dot_product4_sub_cast_1[45] = {{4{MMul_dot_product4_sub_cast[45][14]}}, MMul_dot_product4_sub_cast[45]};
  assign MMul_dot_product4_in0_im[45] = (alpha_im_7[45] == 1'b1 ? alpha_im_15[45] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[45] = {MMul_dot_product4_in0_im[45][13], MMul_dot_product4_in0_im[45]};
  assign MMul_dot_product4_sub_cast_3[45] = {{4{MMul_dot_product4_sub_cast_2[45][14]}}, MMul_dot_product4_sub_cast_2[45]};
  assign MMul_dot_product_out_re_2[45] = MMul_dot_product4_sub_cast_1[45] - MMul_dot_product4_sub_cast_3[45];
  assign MMul_dot_product4_in0_im_1[45] = (alpha_im_7[45] == 1'b1 ? alpha_re_15[45] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[45] = {MMul_dot_product4_in0_im_1[45][13], MMul_dot_product4_in0_im_1[45]};
  assign MMul_dot_product4_add_cast_1[45] = {{4{MMul_dot_product4_add_cast[45][14]}}, MMul_dot_product4_add_cast[45]};
  assign MMul_dot_product4_in0_re_1[45] = (alpha_re_7[45] == 1'b1 ? alpha_im_15[45] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[45] = {MMul_dot_product4_in0_re_1[45][13], MMul_dot_product4_in0_re_1[45]};
  assign MMul_dot_product4_add_cast_3[45] = {{4{MMul_dot_product4_add_cast_2[45][14]}}, MMul_dot_product4_add_cast_2[45]};
  assign MMul_dot_product_out_im_2[45] = MMul_dot_product4_add_cast_1[45] + MMul_dot_product4_add_cast_3[45];
  assign MMul_dot_product4_in0_re[46] = (alpha_re_7[46] == 1'b1 ? alpha_re_15[46] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[46] = {MMul_dot_product4_in0_re[46][13], MMul_dot_product4_in0_re[46]};
  assign MMul_dot_product4_sub_cast_1[46] = {{4{MMul_dot_product4_sub_cast[46][14]}}, MMul_dot_product4_sub_cast[46]};
  assign MMul_dot_product4_in0_im[46] = (alpha_im_7[46] == 1'b1 ? alpha_im_15[46] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[46] = {MMul_dot_product4_in0_im[46][13], MMul_dot_product4_in0_im[46]};
  assign MMul_dot_product4_sub_cast_3[46] = {{4{MMul_dot_product4_sub_cast_2[46][14]}}, MMul_dot_product4_sub_cast_2[46]};
  assign MMul_dot_product_out_re_2[46] = MMul_dot_product4_sub_cast_1[46] - MMul_dot_product4_sub_cast_3[46];
  assign MMul_dot_product4_in0_im_1[46] = (alpha_im_7[46] == 1'b1 ? alpha_re_15[46] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[46] = {MMul_dot_product4_in0_im_1[46][13], MMul_dot_product4_in0_im_1[46]};
  assign MMul_dot_product4_add_cast_1[46] = {{4{MMul_dot_product4_add_cast[46][14]}}, MMul_dot_product4_add_cast[46]};
  assign MMul_dot_product4_in0_re_1[46] = (alpha_re_7[46] == 1'b1 ? alpha_im_15[46] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[46] = {MMul_dot_product4_in0_re_1[46][13], MMul_dot_product4_in0_re_1[46]};
  assign MMul_dot_product4_add_cast_3[46] = {{4{MMul_dot_product4_add_cast_2[46][14]}}, MMul_dot_product4_add_cast_2[46]};
  assign MMul_dot_product_out_im_2[46] = MMul_dot_product4_add_cast_1[46] + MMul_dot_product4_add_cast_3[46];
  assign MMul_dot_product4_in0_re[47] = (alpha_re_7[47] == 1'b1 ? alpha_re_15[47] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[47] = {MMul_dot_product4_in0_re[47][13], MMul_dot_product4_in0_re[47]};
  assign MMul_dot_product4_sub_cast_1[47] = {{4{MMul_dot_product4_sub_cast[47][14]}}, MMul_dot_product4_sub_cast[47]};
  assign MMul_dot_product4_in0_im[47] = (alpha_im_7[47] == 1'b1 ? alpha_im_15[47] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[47] = {MMul_dot_product4_in0_im[47][13], MMul_dot_product4_in0_im[47]};
  assign MMul_dot_product4_sub_cast_3[47] = {{4{MMul_dot_product4_sub_cast_2[47][14]}}, MMul_dot_product4_sub_cast_2[47]};
  assign MMul_dot_product_out_re_2[47] = MMul_dot_product4_sub_cast_1[47] - MMul_dot_product4_sub_cast_3[47];
  assign MMul_dot_product4_in0_im_1[47] = (alpha_im_7[47] == 1'b1 ? alpha_re_15[47] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[47] = {MMul_dot_product4_in0_im_1[47][13], MMul_dot_product4_in0_im_1[47]};
  assign MMul_dot_product4_add_cast_1[47] = {{4{MMul_dot_product4_add_cast[47][14]}}, MMul_dot_product4_add_cast[47]};
  assign MMul_dot_product4_in0_re_1[47] = (alpha_re_7[47] == 1'b1 ? alpha_im_15[47] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[47] = {MMul_dot_product4_in0_re_1[47][13], MMul_dot_product4_in0_re_1[47]};
  assign MMul_dot_product4_add_cast_3[47] = {{4{MMul_dot_product4_add_cast_2[47][14]}}, MMul_dot_product4_add_cast_2[47]};
  assign MMul_dot_product_out_im_2[47] = MMul_dot_product4_add_cast_1[47] + MMul_dot_product4_add_cast_3[47];
  assign MMul_dot_product4_in0_re[48] = (alpha_re_7[48] == 1'b1 ? alpha_re_15[48] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[48] = {MMul_dot_product4_in0_re[48][13], MMul_dot_product4_in0_re[48]};
  assign MMul_dot_product4_sub_cast_1[48] = {{4{MMul_dot_product4_sub_cast[48][14]}}, MMul_dot_product4_sub_cast[48]};
  assign MMul_dot_product4_in0_im[48] = (alpha_im_7[48] == 1'b1 ? alpha_im_15[48] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[48] = {MMul_dot_product4_in0_im[48][13], MMul_dot_product4_in0_im[48]};
  assign MMul_dot_product4_sub_cast_3[48] = {{4{MMul_dot_product4_sub_cast_2[48][14]}}, MMul_dot_product4_sub_cast_2[48]};
  assign MMul_dot_product_out_re_2[48] = MMul_dot_product4_sub_cast_1[48] - MMul_dot_product4_sub_cast_3[48];
  assign MMul_dot_product4_in0_im_1[48] = (alpha_im_7[48] == 1'b1 ? alpha_re_15[48] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[48] = {MMul_dot_product4_in0_im_1[48][13], MMul_dot_product4_in0_im_1[48]};
  assign MMul_dot_product4_add_cast_1[48] = {{4{MMul_dot_product4_add_cast[48][14]}}, MMul_dot_product4_add_cast[48]};
  assign MMul_dot_product4_in0_re_1[48] = (alpha_re_7[48] == 1'b1 ? alpha_im_15[48] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[48] = {MMul_dot_product4_in0_re_1[48][13], MMul_dot_product4_in0_re_1[48]};
  assign MMul_dot_product4_add_cast_3[48] = {{4{MMul_dot_product4_add_cast_2[48][14]}}, MMul_dot_product4_add_cast_2[48]};
  assign MMul_dot_product_out_im_2[48] = MMul_dot_product4_add_cast_1[48] + MMul_dot_product4_add_cast_3[48];
  assign MMul_dot_product4_in0_re[49] = (alpha_re_7[49] == 1'b1 ? alpha_re_15[49] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[49] = {MMul_dot_product4_in0_re[49][13], MMul_dot_product4_in0_re[49]};
  assign MMul_dot_product4_sub_cast_1[49] = {{4{MMul_dot_product4_sub_cast[49][14]}}, MMul_dot_product4_sub_cast[49]};
  assign MMul_dot_product4_in0_im[49] = (alpha_im_7[49] == 1'b1 ? alpha_im_15[49] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[49] = {MMul_dot_product4_in0_im[49][13], MMul_dot_product4_in0_im[49]};
  assign MMul_dot_product4_sub_cast_3[49] = {{4{MMul_dot_product4_sub_cast_2[49][14]}}, MMul_dot_product4_sub_cast_2[49]};
  assign MMul_dot_product_out_re_2[49] = MMul_dot_product4_sub_cast_1[49] - MMul_dot_product4_sub_cast_3[49];
  assign MMul_dot_product4_in0_im_1[49] = (alpha_im_7[49] == 1'b1 ? alpha_re_15[49] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[49] = {MMul_dot_product4_in0_im_1[49][13], MMul_dot_product4_in0_im_1[49]};
  assign MMul_dot_product4_add_cast_1[49] = {{4{MMul_dot_product4_add_cast[49][14]}}, MMul_dot_product4_add_cast[49]};
  assign MMul_dot_product4_in0_re_1[49] = (alpha_re_7[49] == 1'b1 ? alpha_im_15[49] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[49] = {MMul_dot_product4_in0_re_1[49][13], MMul_dot_product4_in0_re_1[49]};
  assign MMul_dot_product4_add_cast_3[49] = {{4{MMul_dot_product4_add_cast_2[49][14]}}, MMul_dot_product4_add_cast_2[49]};
  assign MMul_dot_product_out_im_2[49] = MMul_dot_product4_add_cast_1[49] + MMul_dot_product4_add_cast_3[49];
  assign MMul_dot_product4_in0_re[50] = (alpha_re_7[50] == 1'b1 ? alpha_re_15[50] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[50] = {MMul_dot_product4_in0_re[50][13], MMul_dot_product4_in0_re[50]};
  assign MMul_dot_product4_sub_cast_1[50] = {{4{MMul_dot_product4_sub_cast[50][14]}}, MMul_dot_product4_sub_cast[50]};
  assign MMul_dot_product4_in0_im[50] = (alpha_im_7[50] == 1'b1 ? alpha_im_15[50] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[50] = {MMul_dot_product4_in0_im[50][13], MMul_dot_product4_in0_im[50]};
  assign MMul_dot_product4_sub_cast_3[50] = {{4{MMul_dot_product4_sub_cast_2[50][14]}}, MMul_dot_product4_sub_cast_2[50]};
  assign MMul_dot_product_out_re_2[50] = MMul_dot_product4_sub_cast_1[50] - MMul_dot_product4_sub_cast_3[50];
  assign MMul_dot_product4_in0_im_1[50] = (alpha_im_7[50] == 1'b1 ? alpha_re_15[50] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[50] = {MMul_dot_product4_in0_im_1[50][13], MMul_dot_product4_in0_im_1[50]};
  assign MMul_dot_product4_add_cast_1[50] = {{4{MMul_dot_product4_add_cast[50][14]}}, MMul_dot_product4_add_cast[50]};
  assign MMul_dot_product4_in0_re_1[50] = (alpha_re_7[50] == 1'b1 ? alpha_im_15[50] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[50] = {MMul_dot_product4_in0_re_1[50][13], MMul_dot_product4_in0_re_1[50]};
  assign MMul_dot_product4_add_cast_3[50] = {{4{MMul_dot_product4_add_cast_2[50][14]}}, MMul_dot_product4_add_cast_2[50]};
  assign MMul_dot_product_out_im_2[50] = MMul_dot_product4_add_cast_1[50] + MMul_dot_product4_add_cast_3[50];
  assign MMul_dot_product4_in0_re[51] = (alpha_re_7[51] == 1'b1 ? alpha_re_15[51] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[51] = {MMul_dot_product4_in0_re[51][13], MMul_dot_product4_in0_re[51]};
  assign MMul_dot_product4_sub_cast_1[51] = {{4{MMul_dot_product4_sub_cast[51][14]}}, MMul_dot_product4_sub_cast[51]};
  assign MMul_dot_product4_in0_im[51] = (alpha_im_7[51] == 1'b1 ? alpha_im_15[51] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[51] = {MMul_dot_product4_in0_im[51][13], MMul_dot_product4_in0_im[51]};
  assign MMul_dot_product4_sub_cast_3[51] = {{4{MMul_dot_product4_sub_cast_2[51][14]}}, MMul_dot_product4_sub_cast_2[51]};
  assign MMul_dot_product_out_re_2[51] = MMul_dot_product4_sub_cast_1[51] - MMul_dot_product4_sub_cast_3[51];
  assign MMul_dot_product4_in0_im_1[51] = (alpha_im_7[51] == 1'b1 ? alpha_re_15[51] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[51] = {MMul_dot_product4_in0_im_1[51][13], MMul_dot_product4_in0_im_1[51]};
  assign MMul_dot_product4_add_cast_1[51] = {{4{MMul_dot_product4_add_cast[51][14]}}, MMul_dot_product4_add_cast[51]};
  assign MMul_dot_product4_in0_re_1[51] = (alpha_re_7[51] == 1'b1 ? alpha_im_15[51] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[51] = {MMul_dot_product4_in0_re_1[51][13], MMul_dot_product4_in0_re_1[51]};
  assign MMul_dot_product4_add_cast_3[51] = {{4{MMul_dot_product4_add_cast_2[51][14]}}, MMul_dot_product4_add_cast_2[51]};
  assign MMul_dot_product_out_im_2[51] = MMul_dot_product4_add_cast_1[51] + MMul_dot_product4_add_cast_3[51];
  assign MMul_dot_product4_in0_re[52] = (alpha_re_7[52] == 1'b1 ? alpha_re_15[52] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[52] = {MMul_dot_product4_in0_re[52][13], MMul_dot_product4_in0_re[52]};
  assign MMul_dot_product4_sub_cast_1[52] = {{4{MMul_dot_product4_sub_cast[52][14]}}, MMul_dot_product4_sub_cast[52]};
  assign MMul_dot_product4_in0_im[52] = (alpha_im_7[52] == 1'b1 ? alpha_im_15[52] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[52] = {MMul_dot_product4_in0_im[52][13], MMul_dot_product4_in0_im[52]};
  assign MMul_dot_product4_sub_cast_3[52] = {{4{MMul_dot_product4_sub_cast_2[52][14]}}, MMul_dot_product4_sub_cast_2[52]};
  assign MMul_dot_product_out_re_2[52] = MMul_dot_product4_sub_cast_1[52] - MMul_dot_product4_sub_cast_3[52];
  assign MMul_dot_product4_in0_im_1[52] = (alpha_im_7[52] == 1'b1 ? alpha_re_15[52] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[52] = {MMul_dot_product4_in0_im_1[52][13], MMul_dot_product4_in0_im_1[52]};
  assign MMul_dot_product4_add_cast_1[52] = {{4{MMul_dot_product4_add_cast[52][14]}}, MMul_dot_product4_add_cast[52]};
  assign MMul_dot_product4_in0_re_1[52] = (alpha_re_7[52] == 1'b1 ? alpha_im_15[52] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[52] = {MMul_dot_product4_in0_re_1[52][13], MMul_dot_product4_in0_re_1[52]};
  assign MMul_dot_product4_add_cast_3[52] = {{4{MMul_dot_product4_add_cast_2[52][14]}}, MMul_dot_product4_add_cast_2[52]};
  assign MMul_dot_product_out_im_2[52] = MMul_dot_product4_add_cast_1[52] + MMul_dot_product4_add_cast_3[52];
  assign MMul_dot_product4_in0_re[53] = (alpha_re_7[53] == 1'b1 ? alpha_re_15[53] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[53] = {MMul_dot_product4_in0_re[53][13], MMul_dot_product4_in0_re[53]};
  assign MMul_dot_product4_sub_cast_1[53] = {{4{MMul_dot_product4_sub_cast[53][14]}}, MMul_dot_product4_sub_cast[53]};
  assign MMul_dot_product4_in0_im[53] = (alpha_im_7[53] == 1'b1 ? alpha_im_15[53] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[53] = {MMul_dot_product4_in0_im[53][13], MMul_dot_product4_in0_im[53]};
  assign MMul_dot_product4_sub_cast_3[53] = {{4{MMul_dot_product4_sub_cast_2[53][14]}}, MMul_dot_product4_sub_cast_2[53]};
  assign MMul_dot_product_out_re_2[53] = MMul_dot_product4_sub_cast_1[53] - MMul_dot_product4_sub_cast_3[53];
  assign MMul_dot_product4_in0_im_1[53] = (alpha_im_7[53] == 1'b1 ? alpha_re_15[53] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[53] = {MMul_dot_product4_in0_im_1[53][13], MMul_dot_product4_in0_im_1[53]};
  assign MMul_dot_product4_add_cast_1[53] = {{4{MMul_dot_product4_add_cast[53][14]}}, MMul_dot_product4_add_cast[53]};
  assign MMul_dot_product4_in0_re_1[53] = (alpha_re_7[53] == 1'b1 ? alpha_im_15[53] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[53] = {MMul_dot_product4_in0_re_1[53][13], MMul_dot_product4_in0_re_1[53]};
  assign MMul_dot_product4_add_cast_3[53] = {{4{MMul_dot_product4_add_cast_2[53][14]}}, MMul_dot_product4_add_cast_2[53]};
  assign MMul_dot_product_out_im_2[53] = MMul_dot_product4_add_cast_1[53] + MMul_dot_product4_add_cast_3[53];
  assign MMul_dot_product4_in0_re[54] = (alpha_re_7[54] == 1'b1 ? alpha_re_15[54] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[54] = {MMul_dot_product4_in0_re[54][13], MMul_dot_product4_in0_re[54]};
  assign MMul_dot_product4_sub_cast_1[54] = {{4{MMul_dot_product4_sub_cast[54][14]}}, MMul_dot_product4_sub_cast[54]};
  assign MMul_dot_product4_in0_im[54] = (alpha_im_7[54] == 1'b1 ? alpha_im_15[54] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[54] = {MMul_dot_product4_in0_im[54][13], MMul_dot_product4_in0_im[54]};
  assign MMul_dot_product4_sub_cast_3[54] = {{4{MMul_dot_product4_sub_cast_2[54][14]}}, MMul_dot_product4_sub_cast_2[54]};
  assign MMul_dot_product_out_re_2[54] = MMul_dot_product4_sub_cast_1[54] - MMul_dot_product4_sub_cast_3[54];
  assign MMul_dot_product4_in0_im_1[54] = (alpha_im_7[54] == 1'b1 ? alpha_re_15[54] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[54] = {MMul_dot_product4_in0_im_1[54][13], MMul_dot_product4_in0_im_1[54]};
  assign MMul_dot_product4_add_cast_1[54] = {{4{MMul_dot_product4_add_cast[54][14]}}, MMul_dot_product4_add_cast[54]};
  assign MMul_dot_product4_in0_re_1[54] = (alpha_re_7[54] == 1'b1 ? alpha_im_15[54] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[54] = {MMul_dot_product4_in0_re_1[54][13], MMul_dot_product4_in0_re_1[54]};
  assign MMul_dot_product4_add_cast_3[54] = {{4{MMul_dot_product4_add_cast_2[54][14]}}, MMul_dot_product4_add_cast_2[54]};
  assign MMul_dot_product_out_im_2[54] = MMul_dot_product4_add_cast_1[54] + MMul_dot_product4_add_cast_3[54];
  assign MMul_dot_product4_in0_re[55] = (alpha_re_7[55] == 1'b1 ? alpha_re_15[55] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[55] = {MMul_dot_product4_in0_re[55][13], MMul_dot_product4_in0_re[55]};
  assign MMul_dot_product4_sub_cast_1[55] = {{4{MMul_dot_product4_sub_cast[55][14]}}, MMul_dot_product4_sub_cast[55]};
  assign MMul_dot_product4_in0_im[55] = (alpha_im_7[55] == 1'b1 ? alpha_im_15[55] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[55] = {MMul_dot_product4_in0_im[55][13], MMul_dot_product4_in0_im[55]};
  assign MMul_dot_product4_sub_cast_3[55] = {{4{MMul_dot_product4_sub_cast_2[55][14]}}, MMul_dot_product4_sub_cast_2[55]};
  assign MMul_dot_product_out_re_2[55] = MMul_dot_product4_sub_cast_1[55] - MMul_dot_product4_sub_cast_3[55];
  assign MMul_dot_product4_in0_im_1[55] = (alpha_im_7[55] == 1'b1 ? alpha_re_15[55] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[55] = {MMul_dot_product4_in0_im_1[55][13], MMul_dot_product4_in0_im_1[55]};
  assign MMul_dot_product4_add_cast_1[55] = {{4{MMul_dot_product4_add_cast[55][14]}}, MMul_dot_product4_add_cast[55]};
  assign MMul_dot_product4_in0_re_1[55] = (alpha_re_7[55] == 1'b1 ? alpha_im_15[55] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[55] = {MMul_dot_product4_in0_re_1[55][13], MMul_dot_product4_in0_re_1[55]};
  assign MMul_dot_product4_add_cast_3[55] = {{4{MMul_dot_product4_add_cast_2[55][14]}}, MMul_dot_product4_add_cast_2[55]};
  assign MMul_dot_product_out_im_2[55] = MMul_dot_product4_add_cast_1[55] + MMul_dot_product4_add_cast_3[55];
  assign MMul_dot_product4_in0_re[56] = (alpha_re_7[56] == 1'b1 ? alpha_re_15[56] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[56] = {MMul_dot_product4_in0_re[56][13], MMul_dot_product4_in0_re[56]};
  assign MMul_dot_product4_sub_cast_1[56] = {{4{MMul_dot_product4_sub_cast[56][14]}}, MMul_dot_product4_sub_cast[56]};
  assign MMul_dot_product4_in0_im[56] = (alpha_im_7[56] == 1'b1 ? alpha_im_15[56] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[56] = {MMul_dot_product4_in0_im[56][13], MMul_dot_product4_in0_im[56]};
  assign MMul_dot_product4_sub_cast_3[56] = {{4{MMul_dot_product4_sub_cast_2[56][14]}}, MMul_dot_product4_sub_cast_2[56]};
  assign MMul_dot_product_out_re_2[56] = MMul_dot_product4_sub_cast_1[56] - MMul_dot_product4_sub_cast_3[56];
  assign MMul_dot_product4_in0_im_1[56] = (alpha_im_7[56] == 1'b1 ? alpha_re_15[56] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[56] = {MMul_dot_product4_in0_im_1[56][13], MMul_dot_product4_in0_im_1[56]};
  assign MMul_dot_product4_add_cast_1[56] = {{4{MMul_dot_product4_add_cast[56][14]}}, MMul_dot_product4_add_cast[56]};
  assign MMul_dot_product4_in0_re_1[56] = (alpha_re_7[56] == 1'b1 ? alpha_im_15[56] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[56] = {MMul_dot_product4_in0_re_1[56][13], MMul_dot_product4_in0_re_1[56]};
  assign MMul_dot_product4_add_cast_3[56] = {{4{MMul_dot_product4_add_cast_2[56][14]}}, MMul_dot_product4_add_cast_2[56]};
  assign MMul_dot_product_out_im_2[56] = MMul_dot_product4_add_cast_1[56] + MMul_dot_product4_add_cast_3[56];
  assign MMul_dot_product4_in0_re[57] = (alpha_re_7[57] == 1'b1 ? alpha_re_15[57] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[57] = {MMul_dot_product4_in0_re[57][13], MMul_dot_product4_in0_re[57]};
  assign MMul_dot_product4_sub_cast_1[57] = {{4{MMul_dot_product4_sub_cast[57][14]}}, MMul_dot_product4_sub_cast[57]};
  assign MMul_dot_product4_in0_im[57] = (alpha_im_7[57] == 1'b1 ? alpha_im_15[57] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[57] = {MMul_dot_product4_in0_im[57][13], MMul_dot_product4_in0_im[57]};
  assign MMul_dot_product4_sub_cast_3[57] = {{4{MMul_dot_product4_sub_cast_2[57][14]}}, MMul_dot_product4_sub_cast_2[57]};
  assign MMul_dot_product_out_re_2[57] = MMul_dot_product4_sub_cast_1[57] - MMul_dot_product4_sub_cast_3[57];
  assign MMul_dot_product4_in0_im_1[57] = (alpha_im_7[57] == 1'b1 ? alpha_re_15[57] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[57] = {MMul_dot_product4_in0_im_1[57][13], MMul_dot_product4_in0_im_1[57]};
  assign MMul_dot_product4_add_cast_1[57] = {{4{MMul_dot_product4_add_cast[57][14]}}, MMul_dot_product4_add_cast[57]};
  assign MMul_dot_product4_in0_re_1[57] = (alpha_re_7[57] == 1'b1 ? alpha_im_15[57] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[57] = {MMul_dot_product4_in0_re_1[57][13], MMul_dot_product4_in0_re_1[57]};
  assign MMul_dot_product4_add_cast_3[57] = {{4{MMul_dot_product4_add_cast_2[57][14]}}, MMul_dot_product4_add_cast_2[57]};
  assign MMul_dot_product_out_im_2[57] = MMul_dot_product4_add_cast_1[57] + MMul_dot_product4_add_cast_3[57];
  assign MMul_dot_product4_in0_re[58] = (alpha_re_7[58] == 1'b1 ? alpha_re_15[58] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[58] = {MMul_dot_product4_in0_re[58][13], MMul_dot_product4_in0_re[58]};
  assign MMul_dot_product4_sub_cast_1[58] = {{4{MMul_dot_product4_sub_cast[58][14]}}, MMul_dot_product4_sub_cast[58]};
  assign MMul_dot_product4_in0_im[58] = (alpha_im_7[58] == 1'b1 ? alpha_im_15[58] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[58] = {MMul_dot_product4_in0_im[58][13], MMul_dot_product4_in0_im[58]};
  assign MMul_dot_product4_sub_cast_3[58] = {{4{MMul_dot_product4_sub_cast_2[58][14]}}, MMul_dot_product4_sub_cast_2[58]};
  assign MMul_dot_product_out_re_2[58] = MMul_dot_product4_sub_cast_1[58] - MMul_dot_product4_sub_cast_3[58];
  assign MMul_dot_product4_in0_im_1[58] = (alpha_im_7[58] == 1'b1 ? alpha_re_15[58] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[58] = {MMul_dot_product4_in0_im_1[58][13], MMul_dot_product4_in0_im_1[58]};
  assign MMul_dot_product4_add_cast_1[58] = {{4{MMul_dot_product4_add_cast[58][14]}}, MMul_dot_product4_add_cast[58]};
  assign MMul_dot_product4_in0_re_1[58] = (alpha_re_7[58] == 1'b1 ? alpha_im_15[58] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[58] = {MMul_dot_product4_in0_re_1[58][13], MMul_dot_product4_in0_re_1[58]};
  assign MMul_dot_product4_add_cast_3[58] = {{4{MMul_dot_product4_add_cast_2[58][14]}}, MMul_dot_product4_add_cast_2[58]};
  assign MMul_dot_product_out_im_2[58] = MMul_dot_product4_add_cast_1[58] + MMul_dot_product4_add_cast_3[58];
  assign MMul_dot_product4_in0_re[59] = (alpha_re_7[59] == 1'b1 ? alpha_re_15[59] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[59] = {MMul_dot_product4_in0_re[59][13], MMul_dot_product4_in0_re[59]};
  assign MMul_dot_product4_sub_cast_1[59] = {{4{MMul_dot_product4_sub_cast[59][14]}}, MMul_dot_product4_sub_cast[59]};
  assign MMul_dot_product4_in0_im[59] = (alpha_im_7[59] == 1'b1 ? alpha_im_15[59] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[59] = {MMul_dot_product4_in0_im[59][13], MMul_dot_product4_in0_im[59]};
  assign MMul_dot_product4_sub_cast_3[59] = {{4{MMul_dot_product4_sub_cast_2[59][14]}}, MMul_dot_product4_sub_cast_2[59]};
  assign MMul_dot_product_out_re_2[59] = MMul_dot_product4_sub_cast_1[59] - MMul_dot_product4_sub_cast_3[59];
  assign MMul_dot_product4_in0_im_1[59] = (alpha_im_7[59] == 1'b1 ? alpha_re_15[59] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[59] = {MMul_dot_product4_in0_im_1[59][13], MMul_dot_product4_in0_im_1[59]};
  assign MMul_dot_product4_add_cast_1[59] = {{4{MMul_dot_product4_add_cast[59][14]}}, MMul_dot_product4_add_cast[59]};
  assign MMul_dot_product4_in0_re_1[59] = (alpha_re_7[59] == 1'b1 ? alpha_im_15[59] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[59] = {MMul_dot_product4_in0_re_1[59][13], MMul_dot_product4_in0_re_1[59]};
  assign MMul_dot_product4_add_cast_3[59] = {{4{MMul_dot_product4_add_cast_2[59][14]}}, MMul_dot_product4_add_cast_2[59]};
  assign MMul_dot_product_out_im_2[59] = MMul_dot_product4_add_cast_1[59] + MMul_dot_product4_add_cast_3[59];
  assign MMul_dot_product4_in0_re[60] = (alpha_re_7[60] == 1'b1 ? alpha_re_15[60] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[60] = {MMul_dot_product4_in0_re[60][13], MMul_dot_product4_in0_re[60]};
  assign MMul_dot_product4_sub_cast_1[60] = {{4{MMul_dot_product4_sub_cast[60][14]}}, MMul_dot_product4_sub_cast[60]};
  assign MMul_dot_product4_in0_im[60] = (alpha_im_7[60] == 1'b1 ? alpha_im_15[60] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[60] = {MMul_dot_product4_in0_im[60][13], MMul_dot_product4_in0_im[60]};
  assign MMul_dot_product4_sub_cast_3[60] = {{4{MMul_dot_product4_sub_cast_2[60][14]}}, MMul_dot_product4_sub_cast_2[60]};
  assign MMul_dot_product_out_re_2[60] = MMul_dot_product4_sub_cast_1[60] - MMul_dot_product4_sub_cast_3[60];
  assign MMul_dot_product4_in0_im_1[60] = (alpha_im_7[60] == 1'b1 ? alpha_re_15[60] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[60] = {MMul_dot_product4_in0_im_1[60][13], MMul_dot_product4_in0_im_1[60]};
  assign MMul_dot_product4_add_cast_1[60] = {{4{MMul_dot_product4_add_cast[60][14]}}, MMul_dot_product4_add_cast[60]};
  assign MMul_dot_product4_in0_re_1[60] = (alpha_re_7[60] == 1'b1 ? alpha_im_15[60] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[60] = {MMul_dot_product4_in0_re_1[60][13], MMul_dot_product4_in0_re_1[60]};
  assign MMul_dot_product4_add_cast_3[60] = {{4{MMul_dot_product4_add_cast_2[60][14]}}, MMul_dot_product4_add_cast_2[60]};
  assign MMul_dot_product_out_im_2[60] = MMul_dot_product4_add_cast_1[60] + MMul_dot_product4_add_cast_3[60];
  assign MMul_dot_product4_in0_re[61] = (alpha_re_7[61] == 1'b1 ? alpha_re_15[61] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[61] = {MMul_dot_product4_in0_re[61][13], MMul_dot_product4_in0_re[61]};
  assign MMul_dot_product4_sub_cast_1[61] = {{4{MMul_dot_product4_sub_cast[61][14]}}, MMul_dot_product4_sub_cast[61]};
  assign MMul_dot_product4_in0_im[61] = (alpha_im_7[61] == 1'b1 ? alpha_im_15[61] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[61] = {MMul_dot_product4_in0_im[61][13], MMul_dot_product4_in0_im[61]};
  assign MMul_dot_product4_sub_cast_3[61] = {{4{MMul_dot_product4_sub_cast_2[61][14]}}, MMul_dot_product4_sub_cast_2[61]};
  assign MMul_dot_product_out_re_2[61] = MMul_dot_product4_sub_cast_1[61] - MMul_dot_product4_sub_cast_3[61];
  assign MMul_dot_product4_in0_im_1[61] = (alpha_im_7[61] == 1'b1 ? alpha_re_15[61] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[61] = {MMul_dot_product4_in0_im_1[61][13], MMul_dot_product4_in0_im_1[61]};
  assign MMul_dot_product4_add_cast_1[61] = {{4{MMul_dot_product4_add_cast[61][14]}}, MMul_dot_product4_add_cast[61]};
  assign MMul_dot_product4_in0_re_1[61] = (alpha_re_7[61] == 1'b1 ? alpha_im_15[61] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[61] = {MMul_dot_product4_in0_re_1[61][13], MMul_dot_product4_in0_re_1[61]};
  assign MMul_dot_product4_add_cast_3[61] = {{4{MMul_dot_product4_add_cast_2[61][14]}}, MMul_dot_product4_add_cast_2[61]};
  assign MMul_dot_product_out_im_2[61] = MMul_dot_product4_add_cast_1[61] + MMul_dot_product4_add_cast_3[61];
  assign MMul_dot_product4_in0_re[62] = (alpha_re_7[62] == 1'b1 ? alpha_re_15[62] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[62] = {MMul_dot_product4_in0_re[62][13], MMul_dot_product4_in0_re[62]};
  assign MMul_dot_product4_sub_cast_1[62] = {{4{MMul_dot_product4_sub_cast[62][14]}}, MMul_dot_product4_sub_cast[62]};
  assign MMul_dot_product4_in0_im[62] = (alpha_im_7[62] == 1'b1 ? alpha_im_15[62] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[62] = {MMul_dot_product4_in0_im[62][13], MMul_dot_product4_in0_im[62]};
  assign MMul_dot_product4_sub_cast_3[62] = {{4{MMul_dot_product4_sub_cast_2[62][14]}}, MMul_dot_product4_sub_cast_2[62]};
  assign MMul_dot_product_out_re_2[62] = MMul_dot_product4_sub_cast_1[62] - MMul_dot_product4_sub_cast_3[62];
  assign MMul_dot_product4_in0_im_1[62] = (alpha_im_7[62] == 1'b1 ? alpha_re_15[62] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[62] = {MMul_dot_product4_in0_im_1[62][13], MMul_dot_product4_in0_im_1[62]};
  assign MMul_dot_product4_add_cast_1[62] = {{4{MMul_dot_product4_add_cast[62][14]}}, MMul_dot_product4_add_cast[62]};
  assign MMul_dot_product4_in0_re_1[62] = (alpha_re_7[62] == 1'b1 ? alpha_im_15[62] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[62] = {MMul_dot_product4_in0_re_1[62][13], MMul_dot_product4_in0_re_1[62]};
  assign MMul_dot_product4_add_cast_3[62] = {{4{MMul_dot_product4_add_cast_2[62][14]}}, MMul_dot_product4_add_cast_2[62]};
  assign MMul_dot_product_out_im_2[62] = MMul_dot_product4_add_cast_1[62] + MMul_dot_product4_add_cast_3[62];
  assign MMul_dot_product4_in0_re[63] = (alpha_re_7[63] == 1'b1 ? alpha_re_15[63] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast[63] = {MMul_dot_product4_in0_re[63][13], MMul_dot_product4_in0_re[63]};
  assign MMul_dot_product4_sub_cast_1[63] = {{4{MMul_dot_product4_sub_cast[63][14]}}, MMul_dot_product4_sub_cast[63]};
  assign MMul_dot_product4_in0_im[63] = (alpha_im_7[63] == 1'b1 ? alpha_im_15[63] :
              14'sb00000000000000);
  assign MMul_dot_product4_sub_cast_2[63] = {MMul_dot_product4_in0_im[63][13], MMul_dot_product4_in0_im[63]};
  assign MMul_dot_product4_sub_cast_3[63] = {{4{MMul_dot_product4_sub_cast_2[63][14]}}, MMul_dot_product4_sub_cast_2[63]};
  assign MMul_dot_product_out_re_2[63] = MMul_dot_product4_sub_cast_1[63] - MMul_dot_product4_sub_cast_3[63];
  assign MMul_dot_product4_in0_im_1[63] = (alpha_im_7[63] == 1'b1 ? alpha_re_15[63] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast[63] = {MMul_dot_product4_in0_im_1[63][13], MMul_dot_product4_in0_im_1[63]};
  assign MMul_dot_product4_add_cast_1[63] = {{4{MMul_dot_product4_add_cast[63][14]}}, MMul_dot_product4_add_cast[63]};
  assign MMul_dot_product4_in0_re_1[63] = (alpha_re_7[63] == 1'b1 ? alpha_im_15[63] :
              14'sb00000000000000);
  assign MMul_dot_product4_add_cast_2[63] = {MMul_dot_product4_in0_re_1[63][13], MMul_dot_product4_in0_re_1[63]};
  assign MMul_dot_product4_add_cast_3[63] = {{4{MMul_dot_product4_add_cast_2[63][14]}}, MMul_dot_product4_add_cast_2[63]};
  assign MMul_dot_product_out_im_2[63] = MMul_dot_product4_add_cast_1[63] + MMul_dot_product4_add_cast_3[63];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  always_comb begin
    reshape_out_re_2[0][0] = MMul_dot_product_out_re_2[0];
    reshape_out_im_2[0][0] = MMul_dot_product_out_im_2[0];
    reshape_out_re_2[1][0] = MMul_dot_product_out_re_2[1];
    reshape_out_im_2[1][0] = MMul_dot_product_out_im_2[1];
    reshape_out_re_2[2][0] = MMul_dot_product_out_re_2[2];
    reshape_out_im_2[2][0] = MMul_dot_product_out_im_2[2];
    reshape_out_re_2[3][0] = MMul_dot_product_out_re_2[3];
    reshape_out_im_2[3][0] = MMul_dot_product_out_im_2[3];
    reshape_out_re_2[4][0] = MMul_dot_product_out_re_2[4];
    reshape_out_im_2[4][0] = MMul_dot_product_out_im_2[4];
    reshape_out_re_2[5][0] = MMul_dot_product_out_re_2[5];
    reshape_out_im_2[5][0] = MMul_dot_product_out_im_2[5];
    reshape_out_re_2[6][0] = MMul_dot_product_out_re_2[6];
    reshape_out_im_2[6][0] = MMul_dot_product_out_im_2[6];
    reshape_out_re_2[7][0] = MMul_dot_product_out_re_2[7];
    reshape_out_im_2[7][0] = MMul_dot_product_out_im_2[7];
    reshape_out_re_2[0][1] = MMul_dot_product_out_re_2[8];
    reshape_out_im_2[0][1] = MMul_dot_product_out_im_2[8];
    reshape_out_re_2[1][1] = MMul_dot_product_out_re_2[9];
    reshape_out_im_2[1][1] = MMul_dot_product_out_im_2[9];
    reshape_out_re_2[2][1] = MMul_dot_product_out_re_2[10];
    reshape_out_im_2[2][1] = MMul_dot_product_out_im_2[10];
    reshape_out_re_2[3][1] = MMul_dot_product_out_re_2[11];
    reshape_out_im_2[3][1] = MMul_dot_product_out_im_2[11];
    reshape_out_re_2[4][1] = MMul_dot_product_out_re_2[12];
    reshape_out_im_2[4][1] = MMul_dot_product_out_im_2[12];
    reshape_out_re_2[5][1] = MMul_dot_product_out_re_2[13];
    reshape_out_im_2[5][1] = MMul_dot_product_out_im_2[13];
    reshape_out_re_2[6][1] = MMul_dot_product_out_re_2[14];
    reshape_out_im_2[6][1] = MMul_dot_product_out_im_2[14];
    reshape_out_re_2[7][1] = MMul_dot_product_out_re_2[15];
    reshape_out_im_2[7][1] = MMul_dot_product_out_im_2[15];
    reshape_out_re_2[0][2] = MMul_dot_product_out_re_2[16];
    reshape_out_im_2[0][2] = MMul_dot_product_out_im_2[16];
    reshape_out_re_2[1][2] = MMul_dot_product_out_re_2[17];
    reshape_out_im_2[1][2] = MMul_dot_product_out_im_2[17];
    reshape_out_re_2[2][2] = MMul_dot_product_out_re_2[18];
    reshape_out_im_2[2][2] = MMul_dot_product_out_im_2[18];
    reshape_out_re_2[3][2] = MMul_dot_product_out_re_2[19];
    reshape_out_im_2[3][2] = MMul_dot_product_out_im_2[19];
    reshape_out_re_2[4][2] = MMul_dot_product_out_re_2[20];
    reshape_out_im_2[4][2] = MMul_dot_product_out_im_2[20];
    reshape_out_re_2[5][2] = MMul_dot_product_out_re_2[21];
    reshape_out_im_2[5][2] = MMul_dot_product_out_im_2[21];
    reshape_out_re_2[6][2] = MMul_dot_product_out_re_2[22];
    reshape_out_im_2[6][2] = MMul_dot_product_out_im_2[22];
    reshape_out_re_2[7][2] = MMul_dot_product_out_re_2[23];
    reshape_out_im_2[7][2] = MMul_dot_product_out_im_2[23];
    reshape_out_re_2[0][3] = MMul_dot_product_out_re_2[24];
    reshape_out_im_2[0][3] = MMul_dot_product_out_im_2[24];
    reshape_out_re_2[1][3] = MMul_dot_product_out_re_2[25];
    reshape_out_im_2[1][3] = MMul_dot_product_out_im_2[25];
    reshape_out_re_2[2][3] = MMul_dot_product_out_re_2[26];
    reshape_out_im_2[2][3] = MMul_dot_product_out_im_2[26];
    reshape_out_re_2[3][3] = MMul_dot_product_out_re_2[27];
    reshape_out_im_2[3][3] = MMul_dot_product_out_im_2[27];
    reshape_out_re_2[4][3] = MMul_dot_product_out_re_2[28];
    reshape_out_im_2[4][3] = MMul_dot_product_out_im_2[28];
    reshape_out_re_2[5][3] = MMul_dot_product_out_re_2[29];
    reshape_out_im_2[5][3] = MMul_dot_product_out_im_2[29];
    reshape_out_re_2[6][3] = MMul_dot_product_out_re_2[30];
    reshape_out_im_2[6][3] = MMul_dot_product_out_im_2[30];
    reshape_out_re_2[7][3] = MMul_dot_product_out_re_2[31];
    reshape_out_im_2[7][3] = MMul_dot_product_out_im_2[31];
    reshape_out_re_2[0][4] = MMul_dot_product_out_re_2[32];
    reshape_out_im_2[0][4] = MMul_dot_product_out_im_2[32];
    reshape_out_re_2[1][4] = MMul_dot_product_out_re_2[33];
    reshape_out_im_2[1][4] = MMul_dot_product_out_im_2[33];
    reshape_out_re_2[2][4] = MMul_dot_product_out_re_2[34];
    reshape_out_im_2[2][4] = MMul_dot_product_out_im_2[34];
    reshape_out_re_2[3][4] = MMul_dot_product_out_re_2[35];
    reshape_out_im_2[3][4] = MMul_dot_product_out_im_2[35];
    reshape_out_re_2[4][4] = MMul_dot_product_out_re_2[36];
    reshape_out_im_2[4][4] = MMul_dot_product_out_im_2[36];
    reshape_out_re_2[5][4] = MMul_dot_product_out_re_2[37];
    reshape_out_im_2[5][4] = MMul_dot_product_out_im_2[37];
    reshape_out_re_2[6][4] = MMul_dot_product_out_re_2[38];
    reshape_out_im_2[6][4] = MMul_dot_product_out_im_2[38];
    reshape_out_re_2[7][4] = MMul_dot_product_out_re_2[39];
    reshape_out_im_2[7][4] = MMul_dot_product_out_im_2[39];
    reshape_out_re_2[0][5] = MMul_dot_product_out_re_2[40];
    reshape_out_im_2[0][5] = MMul_dot_product_out_im_2[40];
    reshape_out_re_2[1][5] = MMul_dot_product_out_re_2[41];
    reshape_out_im_2[1][5] = MMul_dot_product_out_im_2[41];
    reshape_out_re_2[2][5] = MMul_dot_product_out_re_2[42];
    reshape_out_im_2[2][5] = MMul_dot_product_out_im_2[42];
    reshape_out_re_2[3][5] = MMul_dot_product_out_re_2[43];
    reshape_out_im_2[3][5] = MMul_dot_product_out_im_2[43];
    reshape_out_re_2[4][5] = MMul_dot_product_out_re_2[44];
    reshape_out_im_2[4][5] = MMul_dot_product_out_im_2[44];
    reshape_out_re_2[5][5] = MMul_dot_product_out_re_2[45];
    reshape_out_im_2[5][5] = MMul_dot_product_out_im_2[45];
    reshape_out_re_2[6][5] = MMul_dot_product_out_re_2[46];
    reshape_out_im_2[6][5] = MMul_dot_product_out_im_2[46];
    reshape_out_re_2[7][5] = MMul_dot_product_out_re_2[47];
    reshape_out_im_2[7][5] = MMul_dot_product_out_im_2[47];
    reshape_out_re_2[0][6] = MMul_dot_product_out_re_2[48];
    reshape_out_im_2[0][6] = MMul_dot_product_out_im_2[48];
    reshape_out_re_2[1][6] = MMul_dot_product_out_re_2[49];
    reshape_out_im_2[1][6] = MMul_dot_product_out_im_2[49];
    reshape_out_re_2[2][6] = MMul_dot_product_out_re_2[50];
    reshape_out_im_2[2][6] = MMul_dot_product_out_im_2[50];
    reshape_out_re_2[3][6] = MMul_dot_product_out_re_2[51];
    reshape_out_im_2[3][6] = MMul_dot_product_out_im_2[51];
    reshape_out_re_2[4][6] = MMul_dot_product_out_re_2[52];
    reshape_out_im_2[4][6] = MMul_dot_product_out_im_2[52];
    reshape_out_re_2[5][6] = MMul_dot_product_out_re_2[53];
    reshape_out_im_2[5][6] = MMul_dot_product_out_im_2[53];
    reshape_out_re_2[6][6] = MMul_dot_product_out_re_2[54];
    reshape_out_im_2[6][6] = MMul_dot_product_out_im_2[54];
    reshape_out_re_2[7][6] = MMul_dot_product_out_re_2[55];
    reshape_out_im_2[7][6] = MMul_dot_product_out_im_2[55];
    reshape_out_re_2[0][7] = MMul_dot_product_out_re_2[56];
    reshape_out_im_2[0][7] = MMul_dot_product_out_im_2[56];
    reshape_out_re_2[1][7] = MMul_dot_product_out_re_2[57];
    reshape_out_im_2[1][7] = MMul_dot_product_out_im_2[57];
    reshape_out_re_2[2][7] = MMul_dot_product_out_re_2[58];
    reshape_out_im_2[2][7] = MMul_dot_product_out_im_2[58];
    reshape_out_re_2[3][7] = MMul_dot_product_out_re_2[59];
    reshape_out_im_2[3][7] = MMul_dot_product_out_im_2[59];
    reshape_out_re_2[4][7] = MMul_dot_product_out_re_2[60];
    reshape_out_im_2[4][7] = MMul_dot_product_out_im_2[60];
    reshape_out_re_2[5][7] = MMul_dot_product_out_re_2[61];
    reshape_out_im_2[5][7] = MMul_dot_product_out_im_2[61];
    reshape_out_re_2[6][7] = MMul_dot_product_out_re_2[62];
    reshape_out_im_2[6][7] = MMul_dot_product_out_im_2[62];
    reshape_out_re_2[7][7] = MMul_dot_product_out_re_2[63];
    reshape_out_im_2[7][7] = MMul_dot_product_out_im_2[63];
  end

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_24[0] = reshape_out_re_2[0][0];
  assign selector_out_im_24[0] = reshape_out_im_2[0][0];
  assign selector_out_re_24[1] = reshape_out_re_2[0][1];
  assign selector_out_im_24[1] = reshape_out_im_2[0][1];
  assign selector_out_re_24[2] = reshape_out_re_2[0][2];
  assign selector_out_im_24[2] = reshape_out_im_2[0][2];
  assign selector_out_re_24[3] = reshape_out_re_2[0][3];
  assign selector_out_im_24[3] = reshape_out_im_2[0][3];
  assign selector_out_re_24[4] = reshape_out_re_2[0][4];
  assign selector_out_im_24[4] = reshape_out_im_2[0][4];
  assign selector_out_re_24[5] = reshape_out_re_2[0][5];
  assign selector_out_im_24[5] = reshape_out_im_2[0][5];
  assign selector_out_re_24[6] = reshape_out_re_2[0][6];
  assign selector_out_im_24[6] = reshape_out_im_2[0][6];
  assign selector_out_re_24[7] = reshape_out_re_2[0][7];
  assign selector_out_im_24[7] = reshape_out_im_2[0][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_25[0] = reshape_out_re_2[1][0];
  assign selector_out_im_25[0] = reshape_out_im_2[1][0];
  assign selector_out_re_25[1] = reshape_out_re_2[1][1];
  assign selector_out_im_25[1] = reshape_out_im_2[1][1];
  assign selector_out_re_25[2] = reshape_out_re_2[1][2];
  assign selector_out_im_25[2] = reshape_out_im_2[1][2];
  assign selector_out_re_25[3] = reshape_out_re_2[1][3];
  assign selector_out_im_25[3] = reshape_out_im_2[1][3];
  assign selector_out_re_25[4] = reshape_out_re_2[1][4];
  assign selector_out_im_25[4] = reshape_out_im_2[1][4];
  assign selector_out_re_25[5] = reshape_out_re_2[1][5];
  assign selector_out_im_25[5] = reshape_out_im_2[1][5];
  assign selector_out_re_25[6] = reshape_out_re_2[1][6];
  assign selector_out_im_25[6] = reshape_out_im_2[1][6];
  assign selector_out_re_25[7] = reshape_out_re_2[1][7];
  assign selector_out_im_25[7] = reshape_out_im_2[1][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_add_01_out_re_2[0] = selector_out_re_24[0] + selector_out_re_25[0];
  assign MMul_add_01_out_im_2[0] = selector_out_im_24[0] + selector_out_im_25[0];
  assign MMul_add_01_out_re_2[1] = selector_out_re_24[1] + selector_out_re_25[1];
  assign MMul_add_01_out_im_2[1] = selector_out_im_24[1] + selector_out_im_25[1];
  assign MMul_add_01_out_re_2[2] = selector_out_re_24[2] + selector_out_re_25[2];
  assign MMul_add_01_out_im_2[2] = selector_out_im_24[2] + selector_out_im_25[2];
  assign MMul_add_01_out_re_2[3] = selector_out_re_24[3] + selector_out_re_25[3];
  assign MMul_add_01_out_im_2[3] = selector_out_im_24[3] + selector_out_im_25[3];
  assign MMul_add_01_out_re_2[4] = selector_out_re_24[4] + selector_out_re_25[4];
  assign MMul_add_01_out_im_2[4] = selector_out_im_24[4] + selector_out_im_25[4];
  assign MMul_add_01_out_re_2[5] = selector_out_re_24[5] + selector_out_re_25[5];
  assign MMul_add_01_out_im_2[5] = selector_out_im_24[5] + selector_out_im_25[5];
  assign MMul_add_01_out_re_2[6] = selector_out_re_24[6] + selector_out_re_25[6];
  assign MMul_add_01_out_im_2[6] = selector_out_im_24[6] + selector_out_im_25[6];
  assign MMul_add_01_out_re_2[7] = selector_out_re_24[7] + selector_out_re_25[7];
  assign MMul_add_01_out_im_2[7] = selector_out_im_24[7] + selector_out_im_25[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_26[0] = reshape_out_re_2[2][0];
  assign selector_out_im_26[0] = reshape_out_im_2[2][0];
  assign selector_out_re_26[1] = reshape_out_re_2[2][1];
  assign selector_out_im_26[1] = reshape_out_im_2[2][1];
  assign selector_out_re_26[2] = reshape_out_re_2[2][2];
  assign selector_out_im_26[2] = reshape_out_im_2[2][2];
  assign selector_out_re_26[3] = reshape_out_re_2[2][3];
  assign selector_out_im_26[3] = reshape_out_im_2[2][3];
  assign selector_out_re_26[4] = reshape_out_re_2[2][4];
  assign selector_out_im_26[4] = reshape_out_im_2[2][4];
  assign selector_out_re_26[5] = reshape_out_re_2[2][5];
  assign selector_out_im_26[5] = reshape_out_im_2[2][5];
  assign selector_out_re_26[6] = reshape_out_re_2[2][6];
  assign selector_out_im_26[6] = reshape_out_im_2[2][6];
  assign selector_out_re_26[7] = reshape_out_re_2[2][7];
  assign selector_out_im_26[7] = reshape_out_im_2[2][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_add_12_out_re_2[0] = MMul_add_01_out_re_2[0] + selector_out_re_26[0];
  assign MMul_add_12_out_im_2[0] = MMul_add_01_out_im_2[0] + selector_out_im_26[0];
  assign MMul_add_12_out_re_2[1] = MMul_add_01_out_re_2[1] + selector_out_re_26[1];
  assign MMul_add_12_out_im_2[1] = MMul_add_01_out_im_2[1] + selector_out_im_26[1];
  assign MMul_add_12_out_re_2[2] = MMul_add_01_out_re_2[2] + selector_out_re_26[2];
  assign MMul_add_12_out_im_2[2] = MMul_add_01_out_im_2[2] + selector_out_im_26[2];
  assign MMul_add_12_out_re_2[3] = MMul_add_01_out_re_2[3] + selector_out_re_26[3];
  assign MMul_add_12_out_im_2[3] = MMul_add_01_out_im_2[3] + selector_out_im_26[3];
  assign MMul_add_12_out_re_2[4] = MMul_add_01_out_re_2[4] + selector_out_re_26[4];
  assign MMul_add_12_out_im_2[4] = MMul_add_01_out_im_2[4] + selector_out_im_26[4];
  assign MMul_add_12_out_re_2[5] = MMul_add_01_out_re_2[5] + selector_out_re_26[5];
  assign MMul_add_12_out_im_2[5] = MMul_add_01_out_im_2[5] + selector_out_im_26[5];
  assign MMul_add_12_out_re_2[6] = MMul_add_01_out_re_2[6] + selector_out_re_26[6];
  assign MMul_add_12_out_im_2[6] = MMul_add_01_out_im_2[6] + selector_out_im_26[6];
  assign MMul_add_12_out_re_2[7] = MMul_add_01_out_re_2[7] + selector_out_re_26[7];
  assign MMul_add_12_out_im_2[7] = MMul_add_01_out_im_2[7] + selector_out_im_26[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_27[0] = reshape_out_re_2[3][0];
  assign selector_out_im_27[0] = reshape_out_im_2[3][0];
  assign selector_out_re_27[1] = reshape_out_re_2[3][1];
  assign selector_out_im_27[1] = reshape_out_im_2[3][1];
  assign selector_out_re_27[2] = reshape_out_re_2[3][2];
  assign selector_out_im_27[2] = reshape_out_im_2[3][2];
  assign selector_out_re_27[3] = reshape_out_re_2[3][3];
  assign selector_out_im_27[3] = reshape_out_im_2[3][3];
  assign selector_out_re_27[4] = reshape_out_re_2[3][4];
  assign selector_out_im_27[4] = reshape_out_im_2[3][4];
  assign selector_out_re_27[5] = reshape_out_re_2[3][5];
  assign selector_out_im_27[5] = reshape_out_im_2[3][5];
  assign selector_out_re_27[6] = reshape_out_re_2[3][6];
  assign selector_out_im_27[6] = reshape_out_im_2[3][6];
  assign selector_out_re_27[7] = reshape_out_re_2[3][7];
  assign selector_out_im_27[7] = reshape_out_im_2[3][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_add_23_out_re_2[0] = MMul_add_12_out_re_2[0] + selector_out_re_27[0];
  assign MMul_add_23_out_im_2[0] = MMul_add_12_out_im_2[0] + selector_out_im_27[0];
  assign MMul_add_23_out_re_2[1] = MMul_add_12_out_re_2[1] + selector_out_re_27[1];
  assign MMul_add_23_out_im_2[1] = MMul_add_12_out_im_2[1] + selector_out_im_27[1];
  assign MMul_add_23_out_re_2[2] = MMul_add_12_out_re_2[2] + selector_out_re_27[2];
  assign MMul_add_23_out_im_2[2] = MMul_add_12_out_im_2[2] + selector_out_im_27[2];
  assign MMul_add_23_out_re_2[3] = MMul_add_12_out_re_2[3] + selector_out_re_27[3];
  assign MMul_add_23_out_im_2[3] = MMul_add_12_out_im_2[3] + selector_out_im_27[3];
  assign MMul_add_23_out_re_2[4] = MMul_add_12_out_re_2[4] + selector_out_re_27[4];
  assign MMul_add_23_out_im_2[4] = MMul_add_12_out_im_2[4] + selector_out_im_27[4];
  assign MMul_add_23_out_re_2[5] = MMul_add_12_out_re_2[5] + selector_out_re_27[5];
  assign MMul_add_23_out_im_2[5] = MMul_add_12_out_im_2[5] + selector_out_im_27[5];
  assign MMul_add_23_out_re_2[6] = MMul_add_12_out_re_2[6] + selector_out_re_27[6];
  assign MMul_add_23_out_im_2[6] = MMul_add_12_out_im_2[6] + selector_out_im_27[6];
  assign MMul_add_23_out_re_2[7] = MMul_add_12_out_re_2[7] + selector_out_re_27[7];
  assign MMul_add_23_out_im_2[7] = MMul_add_12_out_im_2[7] + selector_out_im_27[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_28[0] = reshape_out_re_2[4][0];
  assign selector_out_im_28[0] = reshape_out_im_2[4][0];
  assign selector_out_re_28[1] = reshape_out_re_2[4][1];
  assign selector_out_im_28[1] = reshape_out_im_2[4][1];
  assign selector_out_re_28[2] = reshape_out_re_2[4][2];
  assign selector_out_im_28[2] = reshape_out_im_2[4][2];
  assign selector_out_re_28[3] = reshape_out_re_2[4][3];
  assign selector_out_im_28[3] = reshape_out_im_2[4][3];
  assign selector_out_re_28[4] = reshape_out_re_2[4][4];
  assign selector_out_im_28[4] = reshape_out_im_2[4][4];
  assign selector_out_re_28[5] = reshape_out_re_2[4][5];
  assign selector_out_im_28[5] = reshape_out_im_2[4][5];
  assign selector_out_re_28[6] = reshape_out_re_2[4][6];
  assign selector_out_im_28[6] = reshape_out_im_2[4][6];
  assign selector_out_re_28[7] = reshape_out_re_2[4][7];
  assign selector_out_im_28[7] = reshape_out_im_2[4][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_add_34_out_re_2[0] = MMul_add_23_out_re_2[0] + selector_out_re_28[0];
  assign MMul_add_34_out_im_2[0] = MMul_add_23_out_im_2[0] + selector_out_im_28[0];
  assign MMul_add_34_out_re_2[1] = MMul_add_23_out_re_2[1] + selector_out_re_28[1];
  assign MMul_add_34_out_im_2[1] = MMul_add_23_out_im_2[1] + selector_out_im_28[1];
  assign MMul_add_34_out_re_2[2] = MMul_add_23_out_re_2[2] + selector_out_re_28[2];
  assign MMul_add_34_out_im_2[2] = MMul_add_23_out_im_2[2] + selector_out_im_28[2];
  assign MMul_add_34_out_re_2[3] = MMul_add_23_out_re_2[3] + selector_out_re_28[3];
  assign MMul_add_34_out_im_2[3] = MMul_add_23_out_im_2[3] + selector_out_im_28[3];
  assign MMul_add_34_out_re_2[4] = MMul_add_23_out_re_2[4] + selector_out_re_28[4];
  assign MMul_add_34_out_im_2[4] = MMul_add_23_out_im_2[4] + selector_out_im_28[4];
  assign MMul_add_34_out_re_2[5] = MMul_add_23_out_re_2[5] + selector_out_re_28[5];
  assign MMul_add_34_out_im_2[5] = MMul_add_23_out_im_2[5] + selector_out_im_28[5];
  assign MMul_add_34_out_re_2[6] = MMul_add_23_out_re_2[6] + selector_out_re_28[6];
  assign MMul_add_34_out_im_2[6] = MMul_add_23_out_im_2[6] + selector_out_im_28[6];
  assign MMul_add_34_out_re_2[7] = MMul_add_23_out_re_2[7] + selector_out_re_28[7];
  assign MMul_add_34_out_im_2[7] = MMul_add_23_out_im_2[7] + selector_out_im_28[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_29[0] = reshape_out_re_2[5][0];
  assign selector_out_im_29[0] = reshape_out_im_2[5][0];
  assign selector_out_re_29[1] = reshape_out_re_2[5][1];
  assign selector_out_im_29[1] = reshape_out_im_2[5][1];
  assign selector_out_re_29[2] = reshape_out_re_2[5][2];
  assign selector_out_im_29[2] = reshape_out_im_2[5][2];
  assign selector_out_re_29[3] = reshape_out_re_2[5][3];
  assign selector_out_im_29[3] = reshape_out_im_2[5][3];
  assign selector_out_re_29[4] = reshape_out_re_2[5][4];
  assign selector_out_im_29[4] = reshape_out_im_2[5][4];
  assign selector_out_re_29[5] = reshape_out_re_2[5][5];
  assign selector_out_im_29[5] = reshape_out_im_2[5][5];
  assign selector_out_re_29[6] = reshape_out_re_2[5][6];
  assign selector_out_im_29[6] = reshape_out_im_2[5][6];
  assign selector_out_re_29[7] = reshape_out_re_2[5][7];
  assign selector_out_im_29[7] = reshape_out_im_2[5][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_add_45_out_re_2[0] = MMul_add_34_out_re_2[0] + selector_out_re_29[0];
  assign MMul_add_45_out_im_2[0] = MMul_add_34_out_im_2[0] + selector_out_im_29[0];
  assign MMul_add_45_out_re_2[1] = MMul_add_34_out_re_2[1] + selector_out_re_29[1];
  assign MMul_add_45_out_im_2[1] = MMul_add_34_out_im_2[1] + selector_out_im_29[1];
  assign MMul_add_45_out_re_2[2] = MMul_add_34_out_re_2[2] + selector_out_re_29[2];
  assign MMul_add_45_out_im_2[2] = MMul_add_34_out_im_2[2] + selector_out_im_29[2];
  assign MMul_add_45_out_re_2[3] = MMul_add_34_out_re_2[3] + selector_out_re_29[3];
  assign MMul_add_45_out_im_2[3] = MMul_add_34_out_im_2[3] + selector_out_im_29[3];
  assign MMul_add_45_out_re_2[4] = MMul_add_34_out_re_2[4] + selector_out_re_29[4];
  assign MMul_add_45_out_im_2[4] = MMul_add_34_out_im_2[4] + selector_out_im_29[4];
  assign MMul_add_45_out_re_2[5] = MMul_add_34_out_re_2[5] + selector_out_re_29[5];
  assign MMul_add_45_out_im_2[5] = MMul_add_34_out_im_2[5] + selector_out_im_29[5];
  assign MMul_add_45_out_re_2[6] = MMul_add_34_out_re_2[6] + selector_out_re_29[6];
  assign MMul_add_45_out_im_2[6] = MMul_add_34_out_im_2[6] + selector_out_im_29[6];
  assign MMul_add_45_out_re_2[7] = MMul_add_34_out_re_2[7] + selector_out_re_29[7];
  assign MMul_add_45_out_im_2[7] = MMul_add_34_out_im_2[7] + selector_out_im_29[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_30[0] = reshape_out_re_2[6][0];
  assign selector_out_im_30[0] = reshape_out_im_2[6][0];
  assign selector_out_re_30[1] = reshape_out_re_2[6][1];
  assign selector_out_im_30[1] = reshape_out_im_2[6][1];
  assign selector_out_re_30[2] = reshape_out_re_2[6][2];
  assign selector_out_im_30[2] = reshape_out_im_2[6][2];
  assign selector_out_re_30[3] = reshape_out_re_2[6][3];
  assign selector_out_im_30[3] = reshape_out_im_2[6][3];
  assign selector_out_re_30[4] = reshape_out_re_2[6][4];
  assign selector_out_im_30[4] = reshape_out_im_2[6][4];
  assign selector_out_re_30[5] = reshape_out_re_2[6][5];
  assign selector_out_im_30[5] = reshape_out_im_2[6][5];
  assign selector_out_re_30[6] = reshape_out_re_2[6][6];
  assign selector_out_im_30[6] = reshape_out_im_2[6][6];
  assign selector_out_re_30[7] = reshape_out_re_2[6][7];
  assign selector_out_im_30[7] = reshape_out_im_2[6][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign MMul_add_56_out_re_2[0] = MMul_add_45_out_re_2[0] + selector_out_re_30[0];
  assign MMul_add_56_out_im_2[0] = MMul_add_45_out_im_2[0] + selector_out_im_30[0];
  assign MMul_add_56_out_re_2[1] = MMul_add_45_out_re_2[1] + selector_out_re_30[1];
  assign MMul_add_56_out_im_2[1] = MMul_add_45_out_im_2[1] + selector_out_im_30[1];
  assign MMul_add_56_out_re_2[2] = MMul_add_45_out_re_2[2] + selector_out_re_30[2];
  assign MMul_add_56_out_im_2[2] = MMul_add_45_out_im_2[2] + selector_out_im_30[2];
  assign MMul_add_56_out_re_2[3] = MMul_add_45_out_re_2[3] + selector_out_re_30[3];
  assign MMul_add_56_out_im_2[3] = MMul_add_45_out_im_2[3] + selector_out_im_30[3];
  assign MMul_add_56_out_re_2[4] = MMul_add_45_out_re_2[4] + selector_out_re_30[4];
  assign MMul_add_56_out_im_2[4] = MMul_add_45_out_im_2[4] + selector_out_im_30[4];
  assign MMul_add_56_out_re_2[5] = MMul_add_45_out_re_2[5] + selector_out_re_30[5];
  assign MMul_add_56_out_im_2[5] = MMul_add_45_out_im_2[5] + selector_out_im_30[5];
  assign MMul_add_56_out_re_2[6] = MMul_add_45_out_re_2[6] + selector_out_re_30[6];
  assign MMul_add_56_out_im_2[6] = MMul_add_45_out_im_2[6] + selector_out_im_30[6];
  assign MMul_add_56_out_re_2[7] = MMul_add_45_out_re_2[7] + selector_out_re_30[7];
  assign MMul_add_56_out_im_2[7] = MMul_add_45_out_im_2[7] + selector_out_im_30[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign selector_out_re_31[0] = reshape_out_re_2[7][0];
  assign selector_out_im_31[0] = reshape_out_im_2[7][0];
  assign selector_out_re_31[1] = reshape_out_re_2[7][1];
  assign selector_out_im_31[1] = reshape_out_im_2[7][1];
  assign selector_out_re_31[2] = reshape_out_re_2[7][2];
  assign selector_out_im_31[2] = reshape_out_im_2[7][2];
  assign selector_out_re_31[3] = reshape_out_re_2[7][3];
  assign selector_out_im_31[3] = reshape_out_im_2[7][3];
  assign selector_out_re_31[4] = reshape_out_re_2[7][4];
  assign selector_out_im_31[4] = reshape_out_im_2[7][4];
  assign selector_out_re_31[5] = reshape_out_re_2[7][5];
  assign selector_out_im_31[5] = reshape_out_im_2[7][5];
  assign selector_out_re_31[6] = reshape_out_re_2[7][6];
  assign selector_out_im_31[6] = reshape_out_im_2[7][6];
  assign selector_out_re_31[7] = reshape_out_re_2[7][7];
  assign selector_out_im_31[7] = reshape_out_im_2[7][7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign alpha_re_16[0] = MMul_add_56_out_re_2[0] + selector_out_re_31[0];
  assign alpha_im_16[0] = MMul_add_56_out_im_2[0] + selector_out_im_31[0];
  assign alpha_re_16[1] = MMul_add_56_out_re_2[1] + selector_out_re_31[1];
  assign alpha_im_16[1] = MMul_add_56_out_im_2[1] + selector_out_im_31[1];
  assign alpha_re_16[2] = MMul_add_56_out_re_2[2] + selector_out_re_31[2];
  assign alpha_im_16[2] = MMul_add_56_out_im_2[2] + selector_out_im_31[2];
  assign alpha_re_16[3] = MMul_add_56_out_re_2[3] + selector_out_re_31[3];
  assign alpha_im_16[3] = MMul_add_56_out_im_2[3] + selector_out_im_31[3];
  assign alpha_re_16[4] = MMul_add_56_out_re_2[4] + selector_out_re_31[4];
  assign alpha_im_16[4] = MMul_add_56_out_im_2[4] + selector_out_im_31[4];
  assign alpha_re_16[5] = MMul_add_56_out_re_2[5] + selector_out_re_31[5];
  assign alpha_im_16[5] = MMul_add_56_out_im_2[5] + selector_out_im_31[5];
  assign alpha_re_16[6] = MMul_add_56_out_re_2[6] + selector_out_re_31[6];
  assign alpha_im_16[6] = MMul_add_56_out_im_2[6] + selector_out_im_31[6];
  assign alpha_re_16[7] = MMul_add_56_out_re_2[7] + selector_out_re_31[7];
  assign alpha_im_16[7] = MMul_add_56_out_im_2[7] + selector_out_im_31[7];

  // Step 3: Apply controlled R3 between qubit 1 and qubit 3
  // Controlled phase shift on qubit 1 and 3
  assign out0_re_2[0] = alpha_re_16[0];
  assign out0_im_2[0] = alpha_im_16[0];
  assign out0_re_2[1] = alpha_re_16[1];
  assign out0_im_2[1] = alpha_im_16[1];
  assign out0_re_2[2] = alpha_re_16[2];
  assign out0_im_2[2] = alpha_im_16[2];
  assign out0_re_2[3] = alpha_re_16[3];
  assign out0_im_2[3] = alpha_im_16[3];
  assign out0_re_2[4] = alpha_re_16[4];
  assign out0_im_2[4] = alpha_im_16[4];
  assign out0_re_2[5] = alpha_re_16[5];
  assign out0_im_2[5] = alpha_im_16[5];
  assign out0_re_2[6] = alpha_re_16[6];
  assign out0_im_2[6] = alpha_im_16[6];
  assign out0_re_2[7] = alpha_re_16[7];
  assign out0_im_2[7] = alpha_im_16[7];

  assign state_after_CR3_13_re[0] = out0_re_2[0][13:0];
  assign state_after_CR3_13_im[0] = out0_im_2[0][13:0];
  assign state_after_CR3_13_re[1] = out0_re_2[1][13:0];
  assign state_after_CR3_13_im[1] = out0_im_2[1][13:0];
  assign state_after_CR3_13_re[2] = out0_re_2[2][13:0];
  assign state_after_CR3_13_im[2] = out0_im_2[2][13:0];
  assign state_after_CR3_13_re[3] = out0_re_2[3][13:0];
  assign state_after_CR3_13_im[3] = out0_im_2[3][13:0];
  assign state_after_CR3_13_re[4] = out0_re_2[4][13:0];
  assign state_after_CR3_13_im[4] = out0_im_2[4][13:0];
  assign state_after_CR3_13_re[5] = out0_re_2[5][13:0];
  assign state_after_CR3_13_im[5] = out0_im_2[5][13:0];
  assign state_after_CR3_13_re[6] = out0_re_2[6][13:0];
  assign state_after_CR3_13_im[6] = out0_im_2[6][13:0];
  assign state_after_CR3_13_re[7] = out0_re_2[7][13:0];
  assign state_after_CR3_13_im[7] = out0_im_2[7][13:0];

  assign selector_out_re_32[0] = state_after_CR3_13_re[0];
  assign selector_out_re_32[1] = state_after_CR3_13_re[1];
  assign selector_out_re_32[2] = state_after_CR3_13_re[2];
  assign selector_out_re_32[3] = state_after_CR3_13_re[3];
  assign selector_out_re_32[4] = state_after_CR3_13_re[4];
  assign selector_out_re_32[5] = state_after_CR3_13_re[5];
  assign selector_out_re_32[6] = state_after_CR3_13_re[6];
  assign selector_out_re_32[7] = state_after_CR3_13_re[7];
  assign selector_out_re_32[8] = state_after_CR3_13_re[0];
  assign selector_out_re_32[9] = state_after_CR3_13_re[1];
  assign selector_out_re_32[10] = state_after_CR3_13_re[2];
  assign selector_out_re_32[11] = state_after_CR3_13_re[3];
  assign selector_out_re_32[12] = state_after_CR3_13_re[4];
  assign selector_out_re_32[13] = state_after_CR3_13_re[5];
  assign selector_out_re_32[14] = state_after_CR3_13_re[6];
  assign selector_out_re_32[15] = state_after_CR3_13_re[7];
  assign selector_out_re_32[16] = state_after_CR3_13_re[0];
  assign selector_out_re_32[17] = state_after_CR3_13_re[1];
  assign selector_out_re_32[18] = state_after_CR3_13_re[2];
  assign selector_out_re_32[19] = state_after_CR3_13_re[3];
  assign selector_out_re_32[20] = state_after_CR3_13_re[4];
  assign selector_out_re_32[21] = state_after_CR3_13_re[5];
  assign selector_out_re_32[22] = state_after_CR3_13_re[6];
  assign selector_out_re_32[23] = state_after_CR3_13_re[7];
  assign selector_out_re_32[24] = state_after_CR3_13_re[0];
  assign selector_out_re_32[25] = state_after_CR3_13_re[1];
  assign selector_out_re_32[26] = state_after_CR3_13_re[2];
  assign selector_out_re_32[27] = state_after_CR3_13_re[3];
  assign selector_out_re_32[28] = state_after_CR3_13_re[4];
  assign selector_out_re_32[29] = state_after_CR3_13_re[5];
  assign selector_out_re_32[30] = state_after_CR3_13_re[6];
  assign selector_out_re_32[31] = state_after_CR3_13_re[7];
  assign selector_out_re_32[32] = state_after_CR3_13_re[0];
  assign selector_out_re_32[33] = state_after_CR3_13_re[1];
  assign selector_out_re_32[34] = state_after_CR3_13_re[2];
  assign selector_out_re_32[35] = state_after_CR3_13_re[3];
  assign selector_out_re_32[36] = state_after_CR3_13_re[4];
  assign selector_out_re_32[37] = state_after_CR3_13_re[5];
  assign selector_out_re_32[38] = state_after_CR3_13_re[6];
  assign selector_out_re_32[39] = state_after_CR3_13_re[7];
  assign selector_out_re_32[40] = state_after_CR3_13_re[0];
  assign selector_out_re_32[41] = state_after_CR3_13_re[1];
  assign selector_out_re_32[42] = state_after_CR3_13_re[2];
  assign selector_out_re_32[43] = state_after_CR3_13_re[3];
  assign selector_out_re_32[44] = state_after_CR3_13_re[4];
  assign selector_out_re_32[45] = state_after_CR3_13_re[5];
  assign selector_out_re_32[46] = state_after_CR3_13_re[6];
  assign selector_out_re_32[47] = state_after_CR3_13_re[7];
  assign selector_out_re_32[48] = state_after_CR3_13_re[0];
  assign selector_out_re_32[49] = state_after_CR3_13_re[1];
  assign selector_out_re_32[50] = state_after_CR3_13_re[2];
  assign selector_out_re_32[51] = state_after_CR3_13_re[3];
  assign selector_out_re_32[52] = state_after_CR3_13_re[4];
  assign selector_out_re_32[53] = state_after_CR3_13_re[5];
  assign selector_out_re_32[54] = state_after_CR3_13_re[6];
  assign selector_out_re_32[55] = state_after_CR3_13_re[7];
  assign selector_out_re_32[56] = state_after_CR3_13_re[0];
  assign selector_out_re_32[57] = state_after_CR3_13_re[1];
  assign selector_out_re_32[58] = state_after_CR3_13_re[2];
  assign selector_out_re_32[59] = state_after_CR3_13_re[3];
  assign selector_out_re_32[60] = state_after_CR3_13_re[4];
  assign selector_out_re_32[61] = state_after_CR3_13_re[5];
  assign selector_out_re_32[62] = state_after_CR3_13_re[6];
  assign selector_out_re_32[63] = state_after_CR3_13_re[7];

  assign selector_out_im_32[0] = state_after_CR3_13_im[0];
  assign selector_out_im_32[1] = state_after_CR3_13_im[1];
  assign selector_out_im_32[2] = state_after_CR3_13_im[2];
  assign selector_out_im_32[3] = state_after_CR3_13_im[3];
  assign selector_out_im_32[4] = state_after_CR3_13_im[4];
  assign selector_out_im_32[5] = state_after_CR3_13_im[5];
  assign selector_out_im_32[6] = state_after_CR3_13_im[6];
  assign selector_out_im_32[7] = state_after_CR3_13_im[7];
  assign selector_out_im_32[8] = state_after_CR3_13_im[0];
  assign selector_out_im_32[9] = state_after_CR3_13_im[1];
  assign selector_out_im_32[10] = state_after_CR3_13_im[2];
  assign selector_out_im_32[11] = state_after_CR3_13_im[3];
  assign selector_out_im_32[12] = state_after_CR3_13_im[4];
  assign selector_out_im_32[13] = state_after_CR3_13_im[5];
  assign selector_out_im_32[14] = state_after_CR3_13_im[6];
  assign selector_out_im_32[15] = state_after_CR3_13_im[7];
  assign selector_out_im_32[16] = state_after_CR3_13_im[0];
  assign selector_out_im_32[17] = state_after_CR3_13_im[1];
  assign selector_out_im_32[18] = state_after_CR3_13_im[2];
  assign selector_out_im_32[19] = state_after_CR3_13_im[3];
  assign selector_out_im_32[20] = state_after_CR3_13_im[4];
  assign selector_out_im_32[21] = state_after_CR3_13_im[5];
  assign selector_out_im_32[22] = state_after_CR3_13_im[6];
  assign selector_out_im_32[23] = state_after_CR3_13_im[7];
  assign selector_out_im_32[24] = state_after_CR3_13_im[0];
  assign selector_out_im_32[25] = state_after_CR3_13_im[1];
  assign selector_out_im_32[26] = state_after_CR3_13_im[2];
  assign selector_out_im_32[27] = state_after_CR3_13_im[3];
  assign selector_out_im_32[28] = state_after_CR3_13_im[4];
  assign selector_out_im_32[29] = state_after_CR3_13_im[5];
  assign selector_out_im_32[30] = state_after_CR3_13_im[6];
  assign selector_out_im_32[31] = state_after_CR3_13_im[7];
  assign selector_out_im_32[32] = state_after_CR3_13_im[0];
  assign selector_out_im_32[33] = state_after_CR3_13_im[1];
  assign selector_out_im_32[34] = state_after_CR3_13_im[2];
  assign selector_out_im_32[35] = state_after_CR3_13_im[3];
  assign selector_out_im_32[36] = state_after_CR3_13_im[4];
  assign selector_out_im_32[37] = state_after_CR3_13_im[5];
  assign selector_out_im_32[38] = state_after_CR3_13_im[6];
  assign selector_out_im_32[39] = state_after_CR3_13_im[7];
  assign selector_out_im_32[40] = state_after_CR3_13_im[0];
  assign selector_out_im_32[41] = state_after_CR3_13_im[1];
  assign selector_out_im_32[42] = state_after_CR3_13_im[2];
  assign selector_out_im_32[43] = state_after_CR3_13_im[3];
  assign selector_out_im_32[44] = state_after_CR3_13_im[4];
  assign selector_out_im_32[45] = state_after_CR3_13_im[5];
  assign selector_out_im_32[46] = state_after_CR3_13_im[6];
  assign selector_out_im_32[47] = state_after_CR3_13_im[7];
  assign selector_out_im_32[48] = state_after_CR3_13_im[0];
  assign selector_out_im_32[49] = state_after_CR3_13_im[1];
  assign selector_out_im_32[50] = state_after_CR3_13_im[2];
  assign selector_out_im_32[51] = state_after_CR3_13_im[3];
  assign selector_out_im_32[52] = state_after_CR3_13_im[4];
  assign selector_out_im_32[53] = state_after_CR3_13_im[5];
  assign selector_out_im_32[54] = state_after_CR3_13_im[6];
  assign selector_out_im_32[55] = state_after_CR3_13_im[7];
  assign selector_out_im_32[56] = state_after_CR3_13_im[0];
  assign selector_out_im_32[57] = state_after_CR3_13_im[1];
  assign selector_out_im_32[58] = state_after_CR3_13_im[2];
  assign selector_out_im_32[59] = state_after_CR3_13_im[3];
  assign selector_out_im_32[60] = state_after_CR3_13_im[4];
  assign selector_out_im_32[61] = state_after_CR3_13_im[5];
  assign selector_out_im_32[62] = state_after_CR3_13_im[6];
  assign selector_out_im_32[63] = state_after_CR3_13_im[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign alpha_re_17[0] = selector_out_re_32[0];
  assign alpha_im_17[0] = selector_out_im_32[0];
  assign alpha_re_17[1] = selector_out_re_32[1];
  assign alpha_im_17[1] = selector_out_im_32[1];
  assign alpha_re_17[2] = selector_out_re_32[2];
  assign alpha_im_17[2] = selector_out_im_32[2];
  assign alpha_re_17[3] = selector_out_re_32[3];
  assign alpha_im_17[3] = selector_out_im_32[3];
  assign alpha_re_17[4] = selector_out_re_32[4];
  assign alpha_im_17[4] = selector_out_im_32[4];
  assign alpha_re_17[5] = selector_out_re_32[5];
  assign alpha_im_17[5] = selector_out_im_32[5];
  assign alpha_re_17[6] = selector_out_re_32[6];
  assign alpha_im_17[6] = selector_out_im_32[6];
  assign alpha_re_17[7] = selector_out_re_32[7];
  assign alpha_im_17[7] = selector_out_im_32[7];
  assign alpha_re_17[8] = selector_out_re_32[8];
  assign alpha_im_17[8] = selector_out_im_32[8];
  assign alpha_re_17[9] = selector_out_re_32[9];
  assign alpha_im_17[9] = selector_out_im_32[9];
  assign alpha_re_17[10] = selector_out_re_32[10];
  assign alpha_im_17[10] = selector_out_im_32[10];
  assign alpha_re_17[11] = selector_out_re_32[11];
  assign alpha_im_17[11] = selector_out_im_32[11];
  assign alpha_re_17[12] = selector_out_re_32[12];
  assign alpha_im_17[12] = selector_out_im_32[12];
  assign alpha_re_17[13] = selector_out_re_32[13];
  assign alpha_im_17[13] = selector_out_im_32[13];
  assign alpha_re_17[14] = selector_out_re_32[14];
  assign alpha_im_17[14] = selector_out_im_32[14];
  assign alpha_re_17[15] = selector_out_re_32[15];
  assign alpha_im_17[15] = selector_out_im_32[15];
  assign alpha_re_17[16] = selector_out_re_32[16];
  assign alpha_im_17[16] = selector_out_im_32[16];
  assign alpha_re_17[17] = selector_out_re_32[17];
  assign alpha_im_17[17] = selector_out_im_32[17];
  assign alpha_re_17[18] = selector_out_re_32[18];
  assign alpha_im_17[18] = selector_out_im_32[18];
  assign alpha_re_17[19] = selector_out_re_32[19];
  assign alpha_im_17[19] = selector_out_im_32[19];
  assign alpha_re_17[20] = selector_out_re_32[20];
  assign alpha_im_17[20] = selector_out_im_32[20];
  assign alpha_re_17[21] = selector_out_re_32[21];
  assign alpha_im_17[21] = selector_out_im_32[21];
  assign alpha_re_17[22] = selector_out_re_32[22];
  assign alpha_im_17[22] = selector_out_im_32[22];
  assign alpha_re_17[23] = selector_out_re_32[23];
  assign alpha_im_17[23] = selector_out_im_32[23];
  assign alpha_re_17[24] = selector_out_re_32[24];
  assign alpha_im_17[24] = selector_out_im_32[24];
  assign alpha_re_17[25] = selector_out_re_32[25];
  assign alpha_im_17[25] = selector_out_im_32[25];
  assign alpha_re_17[26] = selector_out_re_32[26];
  assign alpha_im_17[26] = selector_out_im_32[26];
  assign alpha_re_17[27] = selector_out_re_32[27];
  assign alpha_im_17[27] = selector_out_im_32[27];
  assign alpha_re_17[28] = selector_out_re_32[28];
  assign alpha_im_17[28] = selector_out_im_32[28];
  assign alpha_re_17[29] = selector_out_re_32[29];
  assign alpha_im_17[29] = selector_out_im_32[29];
  assign alpha_re_17[30] = selector_out_re_32[30];
  assign alpha_im_17[30] = selector_out_im_32[30];
  assign alpha_re_17[31] = selector_out_re_32[31];
  assign alpha_im_17[31] = selector_out_im_32[31];
  assign alpha_re_17[32] = selector_out_re_32[32];
  assign alpha_im_17[32] = selector_out_im_32[32];
  assign alpha_re_17[33] = selector_out_re_32[33];
  assign alpha_im_17[33] = selector_out_im_32[33];
  assign alpha_re_17[34] = selector_out_re_32[34];
  assign alpha_im_17[34] = selector_out_im_32[34];
  assign alpha_re_17[35] = selector_out_re_32[35];
  assign alpha_im_17[35] = selector_out_im_32[35];
  assign alpha_re_17[36] = selector_out_re_32[36];
  assign alpha_im_17[36] = selector_out_im_32[36];
  assign alpha_re_17[37] = selector_out_re_32[37];
  assign alpha_im_17[37] = selector_out_im_32[37];
  assign alpha_re_17[38] = selector_out_re_32[38];
  assign alpha_im_17[38] = selector_out_im_32[38];
  assign alpha_re_17[39] = selector_out_re_32[39];
  assign alpha_im_17[39] = selector_out_im_32[39];
  assign alpha_re_17[40] = selector_out_re_32[40];
  assign alpha_im_17[40] = selector_out_im_32[40];
  assign alpha_re_17[41] = selector_out_re_32[41];
  assign alpha_im_17[41] = selector_out_im_32[41];
  assign alpha_re_17[42] = selector_out_re_32[42];
  assign alpha_im_17[42] = selector_out_im_32[42];
  assign alpha_re_17[43] = selector_out_re_32[43];
  assign alpha_im_17[43] = selector_out_im_32[43];
  assign alpha_re_17[44] = selector_out_re_32[44];
  assign alpha_im_17[44] = selector_out_im_32[44];
  assign alpha_re_17[45] = selector_out_re_32[45];
  assign alpha_im_17[45] = selector_out_im_32[45];
  assign alpha_re_17[46] = selector_out_re_32[46];
  assign alpha_im_17[46] = selector_out_im_32[46];
  assign alpha_re_17[47] = selector_out_re_32[47];
  assign alpha_im_17[47] = selector_out_im_32[47];
  assign alpha_re_17[48] = selector_out_re_32[48];
  assign alpha_im_17[48] = selector_out_im_32[48];
  assign alpha_re_17[49] = selector_out_re_32[49];
  assign alpha_im_17[49] = selector_out_im_32[49];
  assign alpha_re_17[50] = selector_out_re_32[50];
  assign alpha_im_17[50] = selector_out_im_32[50];
  assign alpha_re_17[51] = selector_out_re_32[51];
  assign alpha_im_17[51] = selector_out_im_32[51];
  assign alpha_re_17[52] = selector_out_re_32[52];
  assign alpha_im_17[52] = selector_out_im_32[52];
  assign alpha_re_17[53] = selector_out_re_32[53];
  assign alpha_im_17[53] = selector_out_im_32[53];
  assign alpha_re_17[54] = selector_out_re_32[54];
  assign alpha_im_17[54] = selector_out_im_32[54];
  assign alpha_re_17[55] = selector_out_re_32[55];
  assign alpha_im_17[55] = selector_out_im_32[55];
  assign alpha_re_17[56] = selector_out_re_32[56];
  assign alpha_im_17[56] = selector_out_im_32[56];
  assign alpha_re_17[57] = selector_out_re_32[57];
  assign alpha_im_17[57] = selector_out_im_32[57];
  assign alpha_re_17[58] = selector_out_re_32[58];
  assign alpha_im_17[58] = selector_out_im_32[58];
  assign alpha_re_17[59] = selector_out_re_32[59];
  assign alpha_im_17[59] = selector_out_im_32[59];
  assign alpha_re_17[60] = selector_out_re_32[60];
  assign alpha_im_17[60] = selector_out_im_32[60];
  assign alpha_re_17[61] = selector_out_re_32[61];
  assign alpha_im_17[61] = selector_out_im_32[61];
  assign alpha_re_17[62] = selector_out_re_32[62];
  assign alpha_im_17[62] = selector_out_im_32[62];
  assign alpha_re_17[63] = selector_out_re_32[63];
  assign alpha_im_17[63] = selector_out_im_32[63];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_dot_product3_mul_temp[0] = alpha_re_5[0] * alpha_re_17[0];
  assign MMul_dot_product3_sub_cast[0] = {{4{MMul_dot_product3_mul_temp[0][27]}}, MMul_dot_product3_mul_temp[0]};
  assign MMul_dot_product3_mul_temp_1[0] = alpha_im_5[0] * alpha_im_17[0];
  assign MMul_dot_product3_sub_cast_1[0] = {{4{MMul_dot_product3_mul_temp_1[0][27]}}, MMul_dot_product3_mul_temp_1[0]};
  assign MMul_dot_product_out_re_3[0] = MMul_dot_product3_sub_cast[0] - MMul_dot_product3_sub_cast_1[0];
  assign MMul_dot_product3_mul_temp_2[0] = alpha_im_5[0] * alpha_re_17[0];
  assign MMul_dot_product3_add_cast[0] = {{4{MMul_dot_product3_mul_temp_2[0][27]}}, MMul_dot_product3_mul_temp_2[0]};
  assign MMul_dot_product3_mul_temp_3[0] = alpha_re_5[0] * alpha_im_17[0];
  assign MMul_dot_product3_add_cast_1[0] = {{4{MMul_dot_product3_mul_temp_3[0][27]}}, MMul_dot_product3_mul_temp_3[0]};
  assign MMul_dot_product_out_im_3[0] = MMul_dot_product3_add_cast[0] + MMul_dot_product3_add_cast_1[0];
  assign MMul_dot_product3_mul_temp[1] = alpha_re_5[1] * alpha_re_17[1];
  assign MMul_dot_product3_sub_cast[1] = {{4{MMul_dot_product3_mul_temp[1][27]}}, MMul_dot_product3_mul_temp[1]};
  assign MMul_dot_product3_mul_temp_1[1] = alpha_im_5[1] * alpha_im_17[1];
  assign MMul_dot_product3_sub_cast_1[1] = {{4{MMul_dot_product3_mul_temp_1[1][27]}}, MMul_dot_product3_mul_temp_1[1]};
  assign MMul_dot_product_out_re_3[1] = MMul_dot_product3_sub_cast[1] - MMul_dot_product3_sub_cast_1[1];
  assign MMul_dot_product3_mul_temp_2[1] = alpha_im_5[1] * alpha_re_17[1];
  assign MMul_dot_product3_add_cast[1] = {{4{MMul_dot_product3_mul_temp_2[1][27]}}, MMul_dot_product3_mul_temp_2[1]};
  assign MMul_dot_product3_mul_temp_3[1] = alpha_re_5[1] * alpha_im_17[1];
  assign MMul_dot_product3_add_cast_1[1] = {{4{MMul_dot_product3_mul_temp_3[1][27]}}, MMul_dot_product3_mul_temp_3[1]};
  assign MMul_dot_product_out_im_3[1] = MMul_dot_product3_add_cast[1] + MMul_dot_product3_add_cast_1[1];
  assign MMul_dot_product3_mul_temp[2] = alpha_re_5[2] * alpha_re_17[2];
  assign MMul_dot_product3_sub_cast[2] = {{4{MMul_dot_product3_mul_temp[2][27]}}, MMul_dot_product3_mul_temp[2]};
  assign MMul_dot_product3_mul_temp_1[2] = alpha_im_5[2] * alpha_im_17[2];
  assign MMul_dot_product3_sub_cast_1[2] = {{4{MMul_dot_product3_mul_temp_1[2][27]}}, MMul_dot_product3_mul_temp_1[2]};
  assign MMul_dot_product_out_re_3[2] = MMul_dot_product3_sub_cast[2] - MMul_dot_product3_sub_cast_1[2];
  assign MMul_dot_product3_mul_temp_2[2] = alpha_im_5[2] * alpha_re_17[2];
  assign MMul_dot_product3_add_cast[2] = {{4{MMul_dot_product3_mul_temp_2[2][27]}}, MMul_dot_product3_mul_temp_2[2]};
  assign MMul_dot_product3_mul_temp_3[2] = alpha_re_5[2] * alpha_im_17[2];
  assign MMul_dot_product3_add_cast_1[2] = {{4{MMul_dot_product3_mul_temp_3[2][27]}}, MMul_dot_product3_mul_temp_3[2]};
  assign MMul_dot_product_out_im_3[2] = MMul_dot_product3_add_cast[2] + MMul_dot_product3_add_cast_1[2];
  assign MMul_dot_product3_mul_temp[3] = alpha_re_5[3] * alpha_re_17[3];
  assign MMul_dot_product3_sub_cast[3] = {{4{MMul_dot_product3_mul_temp[3][27]}}, MMul_dot_product3_mul_temp[3]};
  assign MMul_dot_product3_mul_temp_1[3] = alpha_im_5[3] * alpha_im_17[3];
  assign MMul_dot_product3_sub_cast_1[3] = {{4{MMul_dot_product3_mul_temp_1[3][27]}}, MMul_dot_product3_mul_temp_1[3]};
  assign MMul_dot_product_out_re_3[3] = MMul_dot_product3_sub_cast[3] - MMul_dot_product3_sub_cast_1[3];
  assign MMul_dot_product3_mul_temp_2[3] = alpha_im_5[3] * alpha_re_17[3];
  assign MMul_dot_product3_add_cast[3] = {{4{MMul_dot_product3_mul_temp_2[3][27]}}, MMul_dot_product3_mul_temp_2[3]};
  assign MMul_dot_product3_mul_temp_3[3] = alpha_re_5[3] * alpha_im_17[3];
  assign MMul_dot_product3_add_cast_1[3] = {{4{MMul_dot_product3_mul_temp_3[3][27]}}, MMul_dot_product3_mul_temp_3[3]};
  assign MMul_dot_product_out_im_3[3] = MMul_dot_product3_add_cast[3] + MMul_dot_product3_add_cast_1[3];
  assign MMul_dot_product3_mul_temp[4] = alpha_re_5[4] * alpha_re_17[4];
  assign MMul_dot_product3_sub_cast[4] = {{4{MMul_dot_product3_mul_temp[4][27]}}, MMul_dot_product3_mul_temp[4]};
  assign MMul_dot_product3_mul_temp_1[4] = alpha_im_5[4] * alpha_im_17[4];
  assign MMul_dot_product3_sub_cast_1[4] = {{4{MMul_dot_product3_mul_temp_1[4][27]}}, MMul_dot_product3_mul_temp_1[4]};
  assign MMul_dot_product_out_re_3[4] = MMul_dot_product3_sub_cast[4] - MMul_dot_product3_sub_cast_1[4];
  assign MMul_dot_product3_mul_temp_2[4] = alpha_im_5[4] * alpha_re_17[4];
  assign MMul_dot_product3_add_cast[4] = {{4{MMul_dot_product3_mul_temp_2[4][27]}}, MMul_dot_product3_mul_temp_2[4]};
  assign MMul_dot_product3_mul_temp_3[4] = alpha_re_5[4] * alpha_im_17[4];
  assign MMul_dot_product3_add_cast_1[4] = {{4{MMul_dot_product3_mul_temp_3[4][27]}}, MMul_dot_product3_mul_temp_3[4]};
  assign MMul_dot_product_out_im_3[4] = MMul_dot_product3_add_cast[4] + MMul_dot_product3_add_cast_1[4];
  assign MMul_dot_product3_mul_temp[5] = alpha_re_5[5] * alpha_re_17[5];
  assign MMul_dot_product3_sub_cast[5] = {{4{MMul_dot_product3_mul_temp[5][27]}}, MMul_dot_product3_mul_temp[5]};
  assign MMul_dot_product3_mul_temp_1[5] = alpha_im_5[5] * alpha_im_17[5];
  assign MMul_dot_product3_sub_cast_1[5] = {{4{MMul_dot_product3_mul_temp_1[5][27]}}, MMul_dot_product3_mul_temp_1[5]};
  assign MMul_dot_product_out_re_3[5] = MMul_dot_product3_sub_cast[5] - MMul_dot_product3_sub_cast_1[5];
  assign MMul_dot_product3_mul_temp_2[5] = alpha_im_5[5] * alpha_re_17[5];
  assign MMul_dot_product3_add_cast[5] = {{4{MMul_dot_product3_mul_temp_2[5][27]}}, MMul_dot_product3_mul_temp_2[5]};
  assign MMul_dot_product3_mul_temp_3[5] = alpha_re_5[5] * alpha_im_17[5];
  assign MMul_dot_product3_add_cast_1[5] = {{4{MMul_dot_product3_mul_temp_3[5][27]}}, MMul_dot_product3_mul_temp_3[5]};
  assign MMul_dot_product_out_im_3[5] = MMul_dot_product3_add_cast[5] + MMul_dot_product3_add_cast_1[5];
  assign MMul_dot_product3_mul_temp[6] = alpha_re_5[6] * alpha_re_17[6];
  assign MMul_dot_product3_sub_cast[6] = {{4{MMul_dot_product3_mul_temp[6][27]}}, MMul_dot_product3_mul_temp[6]};
  assign MMul_dot_product3_mul_temp_1[6] = alpha_im_5[6] * alpha_im_17[6];
  assign MMul_dot_product3_sub_cast_1[6] = {{4{MMul_dot_product3_mul_temp_1[6][27]}}, MMul_dot_product3_mul_temp_1[6]};
  assign MMul_dot_product_out_re_3[6] = MMul_dot_product3_sub_cast[6] - MMul_dot_product3_sub_cast_1[6];
  assign MMul_dot_product3_mul_temp_2[6] = alpha_im_5[6] * alpha_re_17[6];
  assign MMul_dot_product3_add_cast[6] = {{4{MMul_dot_product3_mul_temp_2[6][27]}}, MMul_dot_product3_mul_temp_2[6]};
  assign MMul_dot_product3_mul_temp_3[6] = alpha_re_5[6] * alpha_im_17[6];
  assign MMul_dot_product3_add_cast_1[6] = {{4{MMul_dot_product3_mul_temp_3[6][27]}}, MMul_dot_product3_mul_temp_3[6]};
  assign MMul_dot_product_out_im_3[6] = MMul_dot_product3_add_cast[6] + MMul_dot_product3_add_cast_1[6];
  assign MMul_dot_product3_mul_temp[7] = alpha_re_5[7] * alpha_re_17[7];
  assign MMul_dot_product3_sub_cast[7] = {{4{MMul_dot_product3_mul_temp[7][27]}}, MMul_dot_product3_mul_temp[7]};
  assign MMul_dot_product3_mul_temp_1[7] = alpha_im_5[7] * alpha_im_17[7];
  assign MMul_dot_product3_sub_cast_1[7] = {{4{MMul_dot_product3_mul_temp_1[7][27]}}, MMul_dot_product3_mul_temp_1[7]};
  assign MMul_dot_product_out_re_3[7] = MMul_dot_product3_sub_cast[7] - MMul_dot_product3_sub_cast_1[7];
  assign MMul_dot_product3_mul_temp_2[7] = alpha_im_5[7] * alpha_re_17[7];
  assign MMul_dot_product3_add_cast[7] = {{4{MMul_dot_product3_mul_temp_2[7][27]}}, MMul_dot_product3_mul_temp_2[7]};
  assign MMul_dot_product3_mul_temp_3[7] = alpha_re_5[7] * alpha_im_17[7];
  assign MMul_dot_product3_add_cast_1[7] = {{4{MMul_dot_product3_mul_temp_3[7][27]}}, MMul_dot_product3_mul_temp_3[7]};
  assign MMul_dot_product_out_im_3[7] = MMul_dot_product3_add_cast[7] + MMul_dot_product3_add_cast_1[7];
  assign MMul_dot_product3_mul_temp[8] = alpha_re_5[8] * alpha_re_17[8];
  assign MMul_dot_product3_sub_cast[8] = {{4{MMul_dot_product3_mul_temp[8][27]}}, MMul_dot_product3_mul_temp[8]};
  assign MMul_dot_product3_mul_temp_1[8] = alpha_im_5[8] * alpha_im_17[8];
  assign MMul_dot_product3_sub_cast_1[8] = {{4{MMul_dot_product3_mul_temp_1[8][27]}}, MMul_dot_product3_mul_temp_1[8]};
  assign MMul_dot_product_out_re_3[8] = MMul_dot_product3_sub_cast[8] - MMul_dot_product3_sub_cast_1[8];
  assign MMul_dot_product3_mul_temp_2[8] = alpha_im_5[8] * alpha_re_17[8];
  assign MMul_dot_product3_add_cast[8] = {{4{MMul_dot_product3_mul_temp_2[8][27]}}, MMul_dot_product3_mul_temp_2[8]};
  assign MMul_dot_product3_mul_temp_3[8] = alpha_re_5[8] * alpha_im_17[8];
  assign MMul_dot_product3_add_cast_1[8] = {{4{MMul_dot_product3_mul_temp_3[8][27]}}, MMul_dot_product3_mul_temp_3[8]};
  assign MMul_dot_product_out_im_3[8] = MMul_dot_product3_add_cast[8] + MMul_dot_product3_add_cast_1[8];
  assign MMul_dot_product3_mul_temp[9] = alpha_re_5[9] * alpha_re_17[9];
  assign MMul_dot_product3_sub_cast[9] = {{4{MMul_dot_product3_mul_temp[9][27]}}, MMul_dot_product3_mul_temp[9]};
  assign MMul_dot_product3_mul_temp_1[9] = alpha_im_5[9] * alpha_im_17[9];
  assign MMul_dot_product3_sub_cast_1[9] = {{4{MMul_dot_product3_mul_temp_1[9][27]}}, MMul_dot_product3_mul_temp_1[9]};
  assign MMul_dot_product_out_re_3[9] = MMul_dot_product3_sub_cast[9] - MMul_dot_product3_sub_cast_1[9];
  assign MMul_dot_product3_mul_temp_2[9] = alpha_im_5[9] * alpha_re_17[9];
  assign MMul_dot_product3_add_cast[9] = {{4{MMul_dot_product3_mul_temp_2[9][27]}}, MMul_dot_product3_mul_temp_2[9]};
  assign MMul_dot_product3_mul_temp_3[9] = alpha_re_5[9] * alpha_im_17[9];
  assign MMul_dot_product3_add_cast_1[9] = {{4{MMul_dot_product3_mul_temp_3[9][27]}}, MMul_dot_product3_mul_temp_3[9]};
  assign MMul_dot_product_out_im_3[9] = MMul_dot_product3_add_cast[9] + MMul_dot_product3_add_cast_1[9];
  assign MMul_dot_product3_mul_temp[10] = alpha_re_5[10] * alpha_re_17[10];
  assign MMul_dot_product3_sub_cast[10] = {{4{MMul_dot_product3_mul_temp[10][27]}}, MMul_dot_product3_mul_temp[10]};
  assign MMul_dot_product3_mul_temp_1[10] = alpha_im_5[10] * alpha_im_17[10];
  assign MMul_dot_product3_sub_cast_1[10] = {{4{MMul_dot_product3_mul_temp_1[10][27]}}, MMul_dot_product3_mul_temp_1[10]};
  assign MMul_dot_product_out_re_3[10] = MMul_dot_product3_sub_cast[10] - MMul_dot_product3_sub_cast_1[10];
  assign MMul_dot_product3_mul_temp_2[10] = alpha_im_5[10] * alpha_re_17[10];
  assign MMul_dot_product3_add_cast[10] = {{4{MMul_dot_product3_mul_temp_2[10][27]}}, MMul_dot_product3_mul_temp_2[10]};
  assign MMul_dot_product3_mul_temp_3[10] = alpha_re_5[10] * alpha_im_17[10];
  assign MMul_dot_product3_add_cast_1[10] = {{4{MMul_dot_product3_mul_temp_3[10][27]}}, MMul_dot_product3_mul_temp_3[10]};
  assign MMul_dot_product_out_im_3[10] = MMul_dot_product3_add_cast[10] + MMul_dot_product3_add_cast_1[10];
  assign MMul_dot_product3_mul_temp[11] = alpha_re_5[11] * alpha_re_17[11];
  assign MMul_dot_product3_sub_cast[11] = {{4{MMul_dot_product3_mul_temp[11][27]}}, MMul_dot_product3_mul_temp[11]};
  assign MMul_dot_product3_mul_temp_1[11] = alpha_im_5[11] * alpha_im_17[11];
  assign MMul_dot_product3_sub_cast_1[11] = {{4{MMul_dot_product3_mul_temp_1[11][27]}}, MMul_dot_product3_mul_temp_1[11]};
  assign MMul_dot_product_out_re_3[11] = MMul_dot_product3_sub_cast[11] - MMul_dot_product3_sub_cast_1[11];
  assign MMul_dot_product3_mul_temp_2[11] = alpha_im_5[11] * alpha_re_17[11];
  assign MMul_dot_product3_add_cast[11] = {{4{MMul_dot_product3_mul_temp_2[11][27]}}, MMul_dot_product3_mul_temp_2[11]};
  assign MMul_dot_product3_mul_temp_3[11] = alpha_re_5[11] * alpha_im_17[11];
  assign MMul_dot_product3_add_cast_1[11] = {{4{MMul_dot_product3_mul_temp_3[11][27]}}, MMul_dot_product3_mul_temp_3[11]};
  assign MMul_dot_product_out_im_3[11] = MMul_dot_product3_add_cast[11] + MMul_dot_product3_add_cast_1[11];
  assign MMul_dot_product3_mul_temp[12] = alpha_re_5[12] * alpha_re_17[12];
  assign MMul_dot_product3_sub_cast[12] = {{4{MMul_dot_product3_mul_temp[12][27]}}, MMul_dot_product3_mul_temp[12]};
  assign MMul_dot_product3_mul_temp_1[12] = alpha_im_5[12] * alpha_im_17[12];
  assign MMul_dot_product3_sub_cast_1[12] = {{4{MMul_dot_product3_mul_temp_1[12][27]}}, MMul_dot_product3_mul_temp_1[12]};
  assign MMul_dot_product_out_re_3[12] = MMul_dot_product3_sub_cast[12] - MMul_dot_product3_sub_cast_1[12];
  assign MMul_dot_product3_mul_temp_2[12] = alpha_im_5[12] * alpha_re_17[12];
  assign MMul_dot_product3_add_cast[12] = {{4{MMul_dot_product3_mul_temp_2[12][27]}}, MMul_dot_product3_mul_temp_2[12]};
  assign MMul_dot_product3_mul_temp_3[12] = alpha_re_5[12] * alpha_im_17[12];
  assign MMul_dot_product3_add_cast_1[12] = {{4{MMul_dot_product3_mul_temp_3[12][27]}}, MMul_dot_product3_mul_temp_3[12]};
  assign MMul_dot_product_out_im_3[12] = MMul_dot_product3_add_cast[12] + MMul_dot_product3_add_cast_1[12];
  assign MMul_dot_product3_mul_temp[13] = alpha_re_5[13] * alpha_re_17[13];
  assign MMul_dot_product3_sub_cast[13] = {{4{MMul_dot_product3_mul_temp[13][27]}}, MMul_dot_product3_mul_temp[13]};
  assign MMul_dot_product3_mul_temp_1[13] = alpha_im_5[13] * alpha_im_17[13];
  assign MMul_dot_product3_sub_cast_1[13] = {{4{MMul_dot_product3_mul_temp_1[13][27]}}, MMul_dot_product3_mul_temp_1[13]};
  assign MMul_dot_product_out_re_3[13] = MMul_dot_product3_sub_cast[13] - MMul_dot_product3_sub_cast_1[13];
  assign MMul_dot_product3_mul_temp_2[13] = alpha_im_5[13] * alpha_re_17[13];
  assign MMul_dot_product3_add_cast[13] = {{4{MMul_dot_product3_mul_temp_2[13][27]}}, MMul_dot_product3_mul_temp_2[13]};
  assign MMul_dot_product3_mul_temp_3[13] = alpha_re_5[13] * alpha_im_17[13];
  assign MMul_dot_product3_add_cast_1[13] = {{4{MMul_dot_product3_mul_temp_3[13][27]}}, MMul_dot_product3_mul_temp_3[13]};
  assign MMul_dot_product_out_im_3[13] = MMul_dot_product3_add_cast[13] + MMul_dot_product3_add_cast_1[13];
  assign MMul_dot_product3_mul_temp[14] = alpha_re_5[14] * alpha_re_17[14];
  assign MMul_dot_product3_sub_cast[14] = {{4{MMul_dot_product3_mul_temp[14][27]}}, MMul_dot_product3_mul_temp[14]};
  assign MMul_dot_product3_mul_temp_1[14] = alpha_im_5[14] * alpha_im_17[14];
  assign MMul_dot_product3_sub_cast_1[14] = {{4{MMul_dot_product3_mul_temp_1[14][27]}}, MMul_dot_product3_mul_temp_1[14]};
  assign MMul_dot_product_out_re_3[14] = MMul_dot_product3_sub_cast[14] - MMul_dot_product3_sub_cast_1[14];
  assign MMul_dot_product3_mul_temp_2[14] = alpha_im_5[14] * alpha_re_17[14];
  assign MMul_dot_product3_add_cast[14] = {{4{MMul_dot_product3_mul_temp_2[14][27]}}, MMul_dot_product3_mul_temp_2[14]};
  assign MMul_dot_product3_mul_temp_3[14] = alpha_re_5[14] * alpha_im_17[14];
  assign MMul_dot_product3_add_cast_1[14] = {{4{MMul_dot_product3_mul_temp_3[14][27]}}, MMul_dot_product3_mul_temp_3[14]};
  assign MMul_dot_product_out_im_3[14] = MMul_dot_product3_add_cast[14] + MMul_dot_product3_add_cast_1[14];
  assign MMul_dot_product3_mul_temp[15] = alpha_re_5[15] * alpha_re_17[15];
  assign MMul_dot_product3_sub_cast[15] = {{4{MMul_dot_product3_mul_temp[15][27]}}, MMul_dot_product3_mul_temp[15]};
  assign MMul_dot_product3_mul_temp_1[15] = alpha_im_5[15] * alpha_im_17[15];
  assign MMul_dot_product3_sub_cast_1[15] = {{4{MMul_dot_product3_mul_temp_1[15][27]}}, MMul_dot_product3_mul_temp_1[15]};
  assign MMul_dot_product_out_re_3[15] = MMul_dot_product3_sub_cast[15] - MMul_dot_product3_sub_cast_1[15];
  assign MMul_dot_product3_mul_temp_2[15] = alpha_im_5[15] * alpha_re_17[15];
  assign MMul_dot_product3_add_cast[15] = {{4{MMul_dot_product3_mul_temp_2[15][27]}}, MMul_dot_product3_mul_temp_2[15]};
  assign MMul_dot_product3_mul_temp_3[15] = alpha_re_5[15] * alpha_im_17[15];
  assign MMul_dot_product3_add_cast_1[15] = {{4{MMul_dot_product3_mul_temp_3[15][27]}}, MMul_dot_product3_mul_temp_3[15]};
  assign MMul_dot_product_out_im_3[15] = MMul_dot_product3_add_cast[15] + MMul_dot_product3_add_cast_1[15];
  assign MMul_dot_product3_mul_temp[16] = alpha_re_5[16] * alpha_re_17[16];
  assign MMul_dot_product3_sub_cast[16] = {{4{MMul_dot_product3_mul_temp[16][27]}}, MMul_dot_product3_mul_temp[16]};
  assign MMul_dot_product3_mul_temp_1[16] = alpha_im_5[16] * alpha_im_17[16];
  assign MMul_dot_product3_sub_cast_1[16] = {{4{MMul_dot_product3_mul_temp_1[16][27]}}, MMul_dot_product3_mul_temp_1[16]};
  assign MMul_dot_product_out_re_3[16] = MMul_dot_product3_sub_cast[16] - MMul_dot_product3_sub_cast_1[16];
  assign MMul_dot_product3_mul_temp_2[16] = alpha_im_5[16] * alpha_re_17[16];
  assign MMul_dot_product3_add_cast[16] = {{4{MMul_dot_product3_mul_temp_2[16][27]}}, MMul_dot_product3_mul_temp_2[16]};
  assign MMul_dot_product3_mul_temp_3[16] = alpha_re_5[16] * alpha_im_17[16];
  assign MMul_dot_product3_add_cast_1[16] = {{4{MMul_dot_product3_mul_temp_3[16][27]}}, MMul_dot_product3_mul_temp_3[16]};
  assign MMul_dot_product_out_im_3[16] = MMul_dot_product3_add_cast[16] + MMul_dot_product3_add_cast_1[16];
  assign MMul_dot_product3_mul_temp[17] = alpha_re_5[17] * alpha_re_17[17];
  assign MMul_dot_product3_sub_cast[17] = {{4{MMul_dot_product3_mul_temp[17][27]}}, MMul_dot_product3_mul_temp[17]};
  assign MMul_dot_product3_mul_temp_1[17] = alpha_im_5[17] * alpha_im_17[17];
  assign MMul_dot_product3_sub_cast_1[17] = {{4{MMul_dot_product3_mul_temp_1[17][27]}}, MMul_dot_product3_mul_temp_1[17]};
  assign MMul_dot_product_out_re_3[17] = MMul_dot_product3_sub_cast[17] - MMul_dot_product3_sub_cast_1[17];
  assign MMul_dot_product3_mul_temp_2[17] = alpha_im_5[17] * alpha_re_17[17];
  assign MMul_dot_product3_add_cast[17] = {{4{MMul_dot_product3_mul_temp_2[17][27]}}, MMul_dot_product3_mul_temp_2[17]};
  assign MMul_dot_product3_mul_temp_3[17] = alpha_re_5[17] * alpha_im_17[17];
  assign MMul_dot_product3_add_cast_1[17] = {{4{MMul_dot_product3_mul_temp_3[17][27]}}, MMul_dot_product3_mul_temp_3[17]};
  assign MMul_dot_product_out_im_3[17] = MMul_dot_product3_add_cast[17] + MMul_dot_product3_add_cast_1[17];
  assign MMul_dot_product3_mul_temp[18] = alpha_re_5[18] * alpha_re_17[18];
  assign MMul_dot_product3_sub_cast[18] = {{4{MMul_dot_product3_mul_temp[18][27]}}, MMul_dot_product3_mul_temp[18]};
  assign MMul_dot_product3_mul_temp_1[18] = alpha_im_5[18] * alpha_im_17[18];
  assign MMul_dot_product3_sub_cast_1[18] = {{4{MMul_dot_product3_mul_temp_1[18][27]}}, MMul_dot_product3_mul_temp_1[18]};
  assign MMul_dot_product_out_re_3[18] = MMul_dot_product3_sub_cast[18] - MMul_dot_product3_sub_cast_1[18];
  assign MMul_dot_product3_mul_temp_2[18] = alpha_im_5[18] * alpha_re_17[18];
  assign MMul_dot_product3_add_cast[18] = {{4{MMul_dot_product3_mul_temp_2[18][27]}}, MMul_dot_product3_mul_temp_2[18]};
  assign MMul_dot_product3_mul_temp_3[18] = alpha_re_5[18] * alpha_im_17[18];
  assign MMul_dot_product3_add_cast_1[18] = {{4{MMul_dot_product3_mul_temp_3[18][27]}}, MMul_dot_product3_mul_temp_3[18]};
  assign MMul_dot_product_out_im_3[18] = MMul_dot_product3_add_cast[18] + MMul_dot_product3_add_cast_1[18];
  assign MMul_dot_product3_mul_temp[19] = alpha_re_5[19] * alpha_re_17[19];
  assign MMul_dot_product3_sub_cast[19] = {{4{MMul_dot_product3_mul_temp[19][27]}}, MMul_dot_product3_mul_temp[19]};
  assign MMul_dot_product3_mul_temp_1[19] = alpha_im_5[19] * alpha_im_17[19];
  assign MMul_dot_product3_sub_cast_1[19] = {{4{MMul_dot_product3_mul_temp_1[19][27]}}, MMul_dot_product3_mul_temp_1[19]};
  assign MMul_dot_product_out_re_3[19] = MMul_dot_product3_sub_cast[19] - MMul_dot_product3_sub_cast_1[19];
  assign MMul_dot_product3_mul_temp_2[19] = alpha_im_5[19] * alpha_re_17[19];
  assign MMul_dot_product3_add_cast[19] = {{4{MMul_dot_product3_mul_temp_2[19][27]}}, MMul_dot_product3_mul_temp_2[19]};
  assign MMul_dot_product3_mul_temp_3[19] = alpha_re_5[19] * alpha_im_17[19];
  assign MMul_dot_product3_add_cast_1[19] = {{4{MMul_dot_product3_mul_temp_3[19][27]}}, MMul_dot_product3_mul_temp_3[19]};
  assign MMul_dot_product_out_im_3[19] = MMul_dot_product3_add_cast[19] + MMul_dot_product3_add_cast_1[19];
  assign MMul_dot_product3_mul_temp[20] = alpha_re_5[20] * alpha_re_17[20];
  assign MMul_dot_product3_sub_cast[20] = {{4{MMul_dot_product3_mul_temp[20][27]}}, MMul_dot_product3_mul_temp[20]};
  assign MMul_dot_product3_mul_temp_1[20] = alpha_im_5[20] * alpha_im_17[20];
  assign MMul_dot_product3_sub_cast_1[20] = {{4{MMul_dot_product3_mul_temp_1[20][27]}}, MMul_dot_product3_mul_temp_1[20]};
  assign MMul_dot_product_out_re_3[20] = MMul_dot_product3_sub_cast[20] - MMul_dot_product3_sub_cast_1[20];
  assign MMul_dot_product3_mul_temp_2[20] = alpha_im_5[20] * alpha_re_17[20];
  assign MMul_dot_product3_add_cast[20] = {{4{MMul_dot_product3_mul_temp_2[20][27]}}, MMul_dot_product3_mul_temp_2[20]};
  assign MMul_dot_product3_mul_temp_3[20] = alpha_re_5[20] * alpha_im_17[20];
  assign MMul_dot_product3_add_cast_1[20] = {{4{MMul_dot_product3_mul_temp_3[20][27]}}, MMul_dot_product3_mul_temp_3[20]};
  assign MMul_dot_product_out_im_3[20] = MMul_dot_product3_add_cast[20] + MMul_dot_product3_add_cast_1[20];
  assign MMul_dot_product3_mul_temp[21] = alpha_re_5[21] * alpha_re_17[21];
  assign MMul_dot_product3_sub_cast[21] = {{4{MMul_dot_product3_mul_temp[21][27]}}, MMul_dot_product3_mul_temp[21]};
  assign MMul_dot_product3_mul_temp_1[21] = alpha_im_5[21] * alpha_im_17[21];
  assign MMul_dot_product3_sub_cast_1[21] = {{4{MMul_dot_product3_mul_temp_1[21][27]}}, MMul_dot_product3_mul_temp_1[21]};
  assign MMul_dot_product_out_re_3[21] = MMul_dot_product3_sub_cast[21] - MMul_dot_product3_sub_cast_1[21];
  assign MMul_dot_product3_mul_temp_2[21] = alpha_im_5[21] * alpha_re_17[21];
  assign MMul_dot_product3_add_cast[21] = {{4{MMul_dot_product3_mul_temp_2[21][27]}}, MMul_dot_product3_mul_temp_2[21]};
  assign MMul_dot_product3_mul_temp_3[21] = alpha_re_5[21] * alpha_im_17[21];
  assign MMul_dot_product3_add_cast_1[21] = {{4{MMul_dot_product3_mul_temp_3[21][27]}}, MMul_dot_product3_mul_temp_3[21]};
  assign MMul_dot_product_out_im_3[21] = MMul_dot_product3_add_cast[21] + MMul_dot_product3_add_cast_1[21];
  assign MMul_dot_product3_mul_temp[22] = alpha_re_5[22] * alpha_re_17[22];
  assign MMul_dot_product3_sub_cast[22] = {{4{MMul_dot_product3_mul_temp[22][27]}}, MMul_dot_product3_mul_temp[22]};
  assign MMul_dot_product3_mul_temp_1[22] = alpha_im_5[22] * alpha_im_17[22];
  assign MMul_dot_product3_sub_cast_1[22] = {{4{MMul_dot_product3_mul_temp_1[22][27]}}, MMul_dot_product3_mul_temp_1[22]};
  assign MMul_dot_product_out_re_3[22] = MMul_dot_product3_sub_cast[22] - MMul_dot_product3_sub_cast_1[22];
  assign MMul_dot_product3_mul_temp_2[22] = alpha_im_5[22] * alpha_re_17[22];
  assign MMul_dot_product3_add_cast[22] = {{4{MMul_dot_product3_mul_temp_2[22][27]}}, MMul_dot_product3_mul_temp_2[22]};
  assign MMul_dot_product3_mul_temp_3[22] = alpha_re_5[22] * alpha_im_17[22];
  assign MMul_dot_product3_add_cast_1[22] = {{4{MMul_dot_product3_mul_temp_3[22][27]}}, MMul_dot_product3_mul_temp_3[22]};
  assign MMul_dot_product_out_im_3[22] = MMul_dot_product3_add_cast[22] + MMul_dot_product3_add_cast_1[22];
  assign MMul_dot_product3_mul_temp[23] = alpha_re_5[23] * alpha_re_17[23];
  assign MMul_dot_product3_sub_cast[23] = {{4{MMul_dot_product3_mul_temp[23][27]}}, MMul_dot_product3_mul_temp[23]};
  assign MMul_dot_product3_mul_temp_1[23] = alpha_im_5[23] * alpha_im_17[23];
  assign MMul_dot_product3_sub_cast_1[23] = {{4{MMul_dot_product3_mul_temp_1[23][27]}}, MMul_dot_product3_mul_temp_1[23]};
  assign MMul_dot_product_out_re_3[23] = MMul_dot_product3_sub_cast[23] - MMul_dot_product3_sub_cast_1[23];
  assign MMul_dot_product3_mul_temp_2[23] = alpha_im_5[23] * alpha_re_17[23];
  assign MMul_dot_product3_add_cast[23] = {{4{MMul_dot_product3_mul_temp_2[23][27]}}, MMul_dot_product3_mul_temp_2[23]};
  assign MMul_dot_product3_mul_temp_3[23] = alpha_re_5[23] * alpha_im_17[23];
  assign MMul_dot_product3_add_cast_1[23] = {{4{MMul_dot_product3_mul_temp_3[23][27]}}, MMul_dot_product3_mul_temp_3[23]};
  assign MMul_dot_product_out_im_3[23] = MMul_dot_product3_add_cast[23] + MMul_dot_product3_add_cast_1[23];
  assign MMul_dot_product3_mul_temp[24] = alpha_re_5[24] * alpha_re_17[24];
  assign MMul_dot_product3_sub_cast[24] = {{4{MMul_dot_product3_mul_temp[24][27]}}, MMul_dot_product3_mul_temp[24]};
  assign MMul_dot_product3_mul_temp_1[24] = alpha_im_5[24] * alpha_im_17[24];
  assign MMul_dot_product3_sub_cast_1[24] = {{4{MMul_dot_product3_mul_temp_1[24][27]}}, MMul_dot_product3_mul_temp_1[24]};
  assign MMul_dot_product_out_re_3[24] = MMul_dot_product3_sub_cast[24] - MMul_dot_product3_sub_cast_1[24];
  assign MMul_dot_product3_mul_temp_2[24] = alpha_im_5[24] * alpha_re_17[24];
  assign MMul_dot_product3_add_cast[24] = {{4{MMul_dot_product3_mul_temp_2[24][27]}}, MMul_dot_product3_mul_temp_2[24]};
  assign MMul_dot_product3_mul_temp_3[24] = alpha_re_5[24] * alpha_im_17[24];
  assign MMul_dot_product3_add_cast_1[24] = {{4{MMul_dot_product3_mul_temp_3[24][27]}}, MMul_dot_product3_mul_temp_3[24]};
  assign MMul_dot_product_out_im_3[24] = MMul_dot_product3_add_cast[24] + MMul_dot_product3_add_cast_1[24];
  assign MMul_dot_product3_mul_temp[25] = alpha_re_5[25] * alpha_re_17[25];
  assign MMul_dot_product3_sub_cast[25] = {{4{MMul_dot_product3_mul_temp[25][27]}}, MMul_dot_product3_mul_temp[25]};
  assign MMul_dot_product3_mul_temp_1[25] = alpha_im_5[25] * alpha_im_17[25];
  assign MMul_dot_product3_sub_cast_1[25] = {{4{MMul_dot_product3_mul_temp_1[25][27]}}, MMul_dot_product3_mul_temp_1[25]};
  assign MMul_dot_product_out_re_3[25] = MMul_dot_product3_sub_cast[25] - MMul_dot_product3_sub_cast_1[25];
  assign MMul_dot_product3_mul_temp_2[25] = alpha_im_5[25] * alpha_re_17[25];
  assign MMul_dot_product3_add_cast[25] = {{4{MMul_dot_product3_mul_temp_2[25][27]}}, MMul_dot_product3_mul_temp_2[25]};
  assign MMul_dot_product3_mul_temp_3[25] = alpha_re_5[25] * alpha_im_17[25];
  assign MMul_dot_product3_add_cast_1[25] = {{4{MMul_dot_product3_mul_temp_3[25][27]}}, MMul_dot_product3_mul_temp_3[25]};
  assign MMul_dot_product_out_im_3[25] = MMul_dot_product3_add_cast[25] + MMul_dot_product3_add_cast_1[25];
  assign MMul_dot_product3_mul_temp[26] = alpha_re_5[26] * alpha_re_17[26];
  assign MMul_dot_product3_sub_cast[26] = {{4{MMul_dot_product3_mul_temp[26][27]}}, MMul_dot_product3_mul_temp[26]};
  assign MMul_dot_product3_mul_temp_1[26] = alpha_im_5[26] * alpha_im_17[26];
  assign MMul_dot_product3_sub_cast_1[26] = {{4{MMul_dot_product3_mul_temp_1[26][27]}}, MMul_dot_product3_mul_temp_1[26]};
  assign MMul_dot_product_out_re_3[26] = MMul_dot_product3_sub_cast[26] - MMul_dot_product3_sub_cast_1[26];
  assign MMul_dot_product3_mul_temp_2[26] = alpha_im_5[26] * alpha_re_17[26];
  assign MMul_dot_product3_add_cast[26] = {{4{MMul_dot_product3_mul_temp_2[26][27]}}, MMul_dot_product3_mul_temp_2[26]};
  assign MMul_dot_product3_mul_temp_3[26] = alpha_re_5[26] * alpha_im_17[26];
  assign MMul_dot_product3_add_cast_1[26] = {{4{MMul_dot_product3_mul_temp_3[26][27]}}, MMul_dot_product3_mul_temp_3[26]};
  assign MMul_dot_product_out_im_3[26] = MMul_dot_product3_add_cast[26] + MMul_dot_product3_add_cast_1[26];
  assign MMul_dot_product3_mul_temp[27] = alpha_re_5[27] * alpha_re_17[27];
  assign MMul_dot_product3_sub_cast[27] = {{4{MMul_dot_product3_mul_temp[27][27]}}, MMul_dot_product3_mul_temp[27]};
  assign MMul_dot_product3_mul_temp_1[27] = alpha_im_5[27] * alpha_im_17[27];
  assign MMul_dot_product3_sub_cast_1[27] = {{4{MMul_dot_product3_mul_temp_1[27][27]}}, MMul_dot_product3_mul_temp_1[27]};
  assign MMul_dot_product_out_re_3[27] = MMul_dot_product3_sub_cast[27] - MMul_dot_product3_sub_cast_1[27];
  assign MMul_dot_product3_mul_temp_2[27] = alpha_im_5[27] * alpha_re_17[27];
  assign MMul_dot_product3_add_cast[27] = {{4{MMul_dot_product3_mul_temp_2[27][27]}}, MMul_dot_product3_mul_temp_2[27]};
  assign MMul_dot_product3_mul_temp_3[27] = alpha_re_5[27] * alpha_im_17[27];
  assign MMul_dot_product3_add_cast_1[27] = {{4{MMul_dot_product3_mul_temp_3[27][27]}}, MMul_dot_product3_mul_temp_3[27]};
  assign MMul_dot_product_out_im_3[27] = MMul_dot_product3_add_cast[27] + MMul_dot_product3_add_cast_1[27];
  assign MMul_dot_product3_mul_temp[28] = alpha_re_5[28] * alpha_re_17[28];
  assign MMul_dot_product3_sub_cast[28] = {{4{MMul_dot_product3_mul_temp[28][27]}}, MMul_dot_product3_mul_temp[28]};
  assign MMul_dot_product3_mul_temp_1[28] = alpha_im_5[28] * alpha_im_17[28];
  assign MMul_dot_product3_sub_cast_1[28] = {{4{MMul_dot_product3_mul_temp_1[28][27]}}, MMul_dot_product3_mul_temp_1[28]};
  assign MMul_dot_product_out_re_3[28] = MMul_dot_product3_sub_cast[28] - MMul_dot_product3_sub_cast_1[28];
  assign MMul_dot_product3_mul_temp_2[28] = alpha_im_5[28] * alpha_re_17[28];
  assign MMul_dot_product3_add_cast[28] = {{4{MMul_dot_product3_mul_temp_2[28][27]}}, MMul_dot_product3_mul_temp_2[28]};
  assign MMul_dot_product3_mul_temp_3[28] = alpha_re_5[28] * alpha_im_17[28];
  assign MMul_dot_product3_add_cast_1[28] = {{4{MMul_dot_product3_mul_temp_3[28][27]}}, MMul_dot_product3_mul_temp_3[28]};
  assign MMul_dot_product_out_im_3[28] = MMul_dot_product3_add_cast[28] + MMul_dot_product3_add_cast_1[28];
  assign MMul_dot_product3_mul_temp[29] = alpha_re_5[29] * alpha_re_17[29];
  assign MMul_dot_product3_sub_cast[29] = {{4{MMul_dot_product3_mul_temp[29][27]}}, MMul_dot_product3_mul_temp[29]};
  assign MMul_dot_product3_mul_temp_1[29] = alpha_im_5[29] * alpha_im_17[29];
  assign MMul_dot_product3_sub_cast_1[29] = {{4{MMul_dot_product3_mul_temp_1[29][27]}}, MMul_dot_product3_mul_temp_1[29]};
  assign MMul_dot_product_out_re_3[29] = MMul_dot_product3_sub_cast[29] - MMul_dot_product3_sub_cast_1[29];
  assign MMul_dot_product3_mul_temp_2[29] = alpha_im_5[29] * alpha_re_17[29];
  assign MMul_dot_product3_add_cast[29] = {{4{MMul_dot_product3_mul_temp_2[29][27]}}, MMul_dot_product3_mul_temp_2[29]};
  assign MMul_dot_product3_mul_temp_3[29] = alpha_re_5[29] * alpha_im_17[29];
  assign MMul_dot_product3_add_cast_1[29] = {{4{MMul_dot_product3_mul_temp_3[29][27]}}, MMul_dot_product3_mul_temp_3[29]};
  assign MMul_dot_product_out_im_3[29] = MMul_dot_product3_add_cast[29] + MMul_dot_product3_add_cast_1[29];
  assign MMul_dot_product3_mul_temp[30] = alpha_re_5[30] * alpha_re_17[30];
  assign MMul_dot_product3_sub_cast[30] = {{4{MMul_dot_product3_mul_temp[30][27]}}, MMul_dot_product3_mul_temp[30]};
  assign MMul_dot_product3_mul_temp_1[30] = alpha_im_5[30] * alpha_im_17[30];
  assign MMul_dot_product3_sub_cast_1[30] = {{4{MMul_dot_product3_mul_temp_1[30][27]}}, MMul_dot_product3_mul_temp_1[30]};
  assign MMul_dot_product_out_re_3[30] = MMul_dot_product3_sub_cast[30] - MMul_dot_product3_sub_cast_1[30];
  assign MMul_dot_product3_mul_temp_2[30] = alpha_im_5[30] * alpha_re_17[30];
  assign MMul_dot_product3_add_cast[30] = {{4{MMul_dot_product3_mul_temp_2[30][27]}}, MMul_dot_product3_mul_temp_2[30]};
  assign MMul_dot_product3_mul_temp_3[30] = alpha_re_5[30] * alpha_im_17[30];
  assign MMul_dot_product3_add_cast_1[30] = {{4{MMul_dot_product3_mul_temp_3[30][27]}}, MMul_dot_product3_mul_temp_3[30]};
  assign MMul_dot_product_out_im_3[30] = MMul_dot_product3_add_cast[30] + MMul_dot_product3_add_cast_1[30];
  assign MMul_dot_product3_mul_temp[31] = alpha_re_5[31] * alpha_re_17[31];
  assign MMul_dot_product3_sub_cast[31] = {{4{MMul_dot_product3_mul_temp[31][27]}}, MMul_dot_product3_mul_temp[31]};
  assign MMul_dot_product3_mul_temp_1[31] = alpha_im_5[31] * alpha_im_17[31];
  assign MMul_dot_product3_sub_cast_1[31] = {{4{MMul_dot_product3_mul_temp_1[31][27]}}, MMul_dot_product3_mul_temp_1[31]};
  assign MMul_dot_product_out_re_3[31] = MMul_dot_product3_sub_cast[31] - MMul_dot_product3_sub_cast_1[31];
  assign MMul_dot_product3_mul_temp_2[31] = alpha_im_5[31] * alpha_re_17[31];
  assign MMul_dot_product3_add_cast[31] = {{4{MMul_dot_product3_mul_temp_2[31][27]}}, MMul_dot_product3_mul_temp_2[31]};
  assign MMul_dot_product3_mul_temp_3[31] = alpha_re_5[31] * alpha_im_17[31];
  assign MMul_dot_product3_add_cast_1[31] = {{4{MMul_dot_product3_mul_temp_3[31][27]}}, MMul_dot_product3_mul_temp_3[31]};
  assign MMul_dot_product_out_im_3[31] = MMul_dot_product3_add_cast[31] + MMul_dot_product3_add_cast_1[31];
  assign MMul_dot_product3_mul_temp[32] = alpha_re_5[32] * alpha_re_17[32];
  assign MMul_dot_product3_sub_cast[32] = {{4{MMul_dot_product3_mul_temp[32][27]}}, MMul_dot_product3_mul_temp[32]};
  assign MMul_dot_product3_mul_temp_1[32] = alpha_im_5[32] * alpha_im_17[32];
  assign MMul_dot_product3_sub_cast_1[32] = {{4{MMul_dot_product3_mul_temp_1[32][27]}}, MMul_dot_product3_mul_temp_1[32]};
  assign MMul_dot_product_out_re_3[32] = MMul_dot_product3_sub_cast[32] - MMul_dot_product3_sub_cast_1[32];
  assign MMul_dot_product3_mul_temp_2[32] = alpha_im_5[32] * alpha_re_17[32];
  assign MMul_dot_product3_add_cast[32] = {{4{MMul_dot_product3_mul_temp_2[32][27]}}, MMul_dot_product3_mul_temp_2[32]};
  assign MMul_dot_product3_mul_temp_3[32] = alpha_re_5[32] * alpha_im_17[32];
  assign MMul_dot_product3_add_cast_1[32] = {{4{MMul_dot_product3_mul_temp_3[32][27]}}, MMul_dot_product3_mul_temp_3[32]};
  assign MMul_dot_product_out_im_3[32] = MMul_dot_product3_add_cast[32] + MMul_dot_product3_add_cast_1[32];
  assign MMul_dot_product3_mul_temp[33] = alpha_re_5[33] * alpha_re_17[33];
  assign MMul_dot_product3_sub_cast[33] = {{4{MMul_dot_product3_mul_temp[33][27]}}, MMul_dot_product3_mul_temp[33]};
  assign MMul_dot_product3_mul_temp_1[33] = alpha_im_5[33] * alpha_im_17[33];
  assign MMul_dot_product3_sub_cast_1[33] = {{4{MMul_dot_product3_mul_temp_1[33][27]}}, MMul_dot_product3_mul_temp_1[33]};
  assign MMul_dot_product_out_re_3[33] = MMul_dot_product3_sub_cast[33] - MMul_dot_product3_sub_cast_1[33];
  assign MMul_dot_product3_mul_temp_2[33] = alpha_im_5[33] * alpha_re_17[33];
  assign MMul_dot_product3_add_cast[33] = {{4{MMul_dot_product3_mul_temp_2[33][27]}}, MMul_dot_product3_mul_temp_2[33]};
  assign MMul_dot_product3_mul_temp_3[33] = alpha_re_5[33] * alpha_im_17[33];
  assign MMul_dot_product3_add_cast_1[33] = {{4{MMul_dot_product3_mul_temp_3[33][27]}}, MMul_dot_product3_mul_temp_3[33]};
  assign MMul_dot_product_out_im_3[33] = MMul_dot_product3_add_cast[33] + MMul_dot_product3_add_cast_1[33];
  assign MMul_dot_product3_mul_temp[34] = alpha_re_5[34] * alpha_re_17[34];
  assign MMul_dot_product3_sub_cast[34] = {{4{MMul_dot_product3_mul_temp[34][27]}}, MMul_dot_product3_mul_temp[34]};
  assign MMul_dot_product3_mul_temp_1[34] = alpha_im_5[34] * alpha_im_17[34];
  assign MMul_dot_product3_sub_cast_1[34] = {{4{MMul_dot_product3_mul_temp_1[34][27]}}, MMul_dot_product3_mul_temp_1[34]};
  assign MMul_dot_product_out_re_3[34] = MMul_dot_product3_sub_cast[34] - MMul_dot_product3_sub_cast_1[34];
  assign MMul_dot_product3_mul_temp_2[34] = alpha_im_5[34] * alpha_re_17[34];
  assign MMul_dot_product3_add_cast[34] = {{4{MMul_dot_product3_mul_temp_2[34][27]}}, MMul_dot_product3_mul_temp_2[34]};
  assign MMul_dot_product3_mul_temp_3[34] = alpha_re_5[34] * alpha_im_17[34];
  assign MMul_dot_product3_add_cast_1[34] = {{4{MMul_dot_product3_mul_temp_3[34][27]}}, MMul_dot_product3_mul_temp_3[34]};
  assign MMul_dot_product_out_im_3[34] = MMul_dot_product3_add_cast[34] + MMul_dot_product3_add_cast_1[34];
  assign MMul_dot_product3_mul_temp[35] = alpha_re_5[35] * alpha_re_17[35];
  assign MMul_dot_product3_sub_cast[35] = {{4{MMul_dot_product3_mul_temp[35][27]}}, MMul_dot_product3_mul_temp[35]};
  assign MMul_dot_product3_mul_temp_1[35] = alpha_im_5[35] * alpha_im_17[35];
  assign MMul_dot_product3_sub_cast_1[35] = {{4{MMul_dot_product3_mul_temp_1[35][27]}}, MMul_dot_product3_mul_temp_1[35]};
  assign MMul_dot_product_out_re_3[35] = MMul_dot_product3_sub_cast[35] - MMul_dot_product3_sub_cast_1[35];
  assign MMul_dot_product3_mul_temp_2[35] = alpha_im_5[35] * alpha_re_17[35];
  assign MMul_dot_product3_add_cast[35] = {{4{MMul_dot_product3_mul_temp_2[35][27]}}, MMul_dot_product3_mul_temp_2[35]};
  assign MMul_dot_product3_mul_temp_3[35] = alpha_re_5[35] * alpha_im_17[35];
  assign MMul_dot_product3_add_cast_1[35] = {{4{MMul_dot_product3_mul_temp_3[35][27]}}, MMul_dot_product3_mul_temp_3[35]};
  assign MMul_dot_product_out_im_3[35] = MMul_dot_product3_add_cast[35] + MMul_dot_product3_add_cast_1[35];
  assign MMul_dot_product3_mul_temp[36] = alpha_re_5[36] * alpha_re_17[36];
  assign MMul_dot_product3_sub_cast[36] = {{4{MMul_dot_product3_mul_temp[36][27]}}, MMul_dot_product3_mul_temp[36]};
  assign MMul_dot_product3_mul_temp_1[36] = alpha_im_5[36] * alpha_im_17[36];
  assign MMul_dot_product3_sub_cast_1[36] = {{4{MMul_dot_product3_mul_temp_1[36][27]}}, MMul_dot_product3_mul_temp_1[36]};
  assign MMul_dot_product_out_re_3[36] = MMul_dot_product3_sub_cast[36] - MMul_dot_product3_sub_cast_1[36];
  assign MMul_dot_product3_mul_temp_2[36] = alpha_im_5[36] * alpha_re_17[36];
  assign MMul_dot_product3_add_cast[36] = {{4{MMul_dot_product3_mul_temp_2[36][27]}}, MMul_dot_product3_mul_temp_2[36]};
  assign MMul_dot_product3_mul_temp_3[36] = alpha_re_5[36] * alpha_im_17[36];
  assign MMul_dot_product3_add_cast_1[36] = {{4{MMul_dot_product3_mul_temp_3[36][27]}}, MMul_dot_product3_mul_temp_3[36]};
  assign MMul_dot_product_out_im_3[36] = MMul_dot_product3_add_cast[36] + MMul_dot_product3_add_cast_1[36];
  assign MMul_dot_product3_mul_temp[37] = alpha_re_5[37] * alpha_re_17[37];
  assign MMul_dot_product3_sub_cast[37] = {{4{MMul_dot_product3_mul_temp[37][27]}}, MMul_dot_product3_mul_temp[37]};
  assign MMul_dot_product3_mul_temp_1[37] = alpha_im_5[37] * alpha_im_17[37];
  assign MMul_dot_product3_sub_cast_1[37] = {{4{MMul_dot_product3_mul_temp_1[37][27]}}, MMul_dot_product3_mul_temp_1[37]};
  assign MMul_dot_product_out_re_3[37] = MMul_dot_product3_sub_cast[37] - MMul_dot_product3_sub_cast_1[37];
  assign MMul_dot_product3_mul_temp_2[37] = alpha_im_5[37] * alpha_re_17[37];
  assign MMul_dot_product3_add_cast[37] = {{4{MMul_dot_product3_mul_temp_2[37][27]}}, MMul_dot_product3_mul_temp_2[37]};
  assign MMul_dot_product3_mul_temp_3[37] = alpha_re_5[37] * alpha_im_17[37];
  assign MMul_dot_product3_add_cast_1[37] = {{4{MMul_dot_product3_mul_temp_3[37][27]}}, MMul_dot_product3_mul_temp_3[37]};
  assign MMul_dot_product_out_im_3[37] = MMul_dot_product3_add_cast[37] + MMul_dot_product3_add_cast_1[37];
  assign MMul_dot_product3_mul_temp[38] = alpha_re_5[38] * alpha_re_17[38];
  assign MMul_dot_product3_sub_cast[38] = {{4{MMul_dot_product3_mul_temp[38][27]}}, MMul_dot_product3_mul_temp[38]};
  assign MMul_dot_product3_mul_temp_1[38] = alpha_im_5[38] * alpha_im_17[38];
  assign MMul_dot_product3_sub_cast_1[38] = {{4{MMul_dot_product3_mul_temp_1[38][27]}}, MMul_dot_product3_mul_temp_1[38]};
  assign MMul_dot_product_out_re_3[38] = MMul_dot_product3_sub_cast[38] - MMul_dot_product3_sub_cast_1[38];
  assign MMul_dot_product3_mul_temp_2[38] = alpha_im_5[38] * alpha_re_17[38];
  assign MMul_dot_product3_add_cast[38] = {{4{MMul_dot_product3_mul_temp_2[38][27]}}, MMul_dot_product3_mul_temp_2[38]};
  assign MMul_dot_product3_mul_temp_3[38] = alpha_re_5[38] * alpha_im_17[38];
  assign MMul_dot_product3_add_cast_1[38] = {{4{MMul_dot_product3_mul_temp_3[38][27]}}, MMul_dot_product3_mul_temp_3[38]};
  assign MMul_dot_product_out_im_3[38] = MMul_dot_product3_add_cast[38] + MMul_dot_product3_add_cast_1[38];
  assign MMul_dot_product3_mul_temp[39] = alpha_re_5[39] * alpha_re_17[39];
  assign MMul_dot_product3_sub_cast[39] = {{4{MMul_dot_product3_mul_temp[39][27]}}, MMul_dot_product3_mul_temp[39]};
  assign MMul_dot_product3_mul_temp_1[39] = alpha_im_5[39] * alpha_im_17[39];
  assign MMul_dot_product3_sub_cast_1[39] = {{4{MMul_dot_product3_mul_temp_1[39][27]}}, MMul_dot_product3_mul_temp_1[39]};
  assign MMul_dot_product_out_re_3[39] = MMul_dot_product3_sub_cast[39] - MMul_dot_product3_sub_cast_1[39];
  assign MMul_dot_product3_mul_temp_2[39] = alpha_im_5[39] * alpha_re_17[39];
  assign MMul_dot_product3_add_cast[39] = {{4{MMul_dot_product3_mul_temp_2[39][27]}}, MMul_dot_product3_mul_temp_2[39]};
  assign MMul_dot_product3_mul_temp_3[39] = alpha_re_5[39] * alpha_im_17[39];
  assign MMul_dot_product3_add_cast_1[39] = {{4{MMul_dot_product3_mul_temp_3[39][27]}}, MMul_dot_product3_mul_temp_3[39]};
  assign MMul_dot_product_out_im_3[39] = MMul_dot_product3_add_cast[39] + MMul_dot_product3_add_cast_1[39];
  assign MMul_dot_product3_mul_temp[40] = alpha_re_5[40] * alpha_re_17[40];
  assign MMul_dot_product3_sub_cast[40] = {{4{MMul_dot_product3_mul_temp[40][27]}}, MMul_dot_product3_mul_temp[40]};
  assign MMul_dot_product3_mul_temp_1[40] = alpha_im_5[40] * alpha_im_17[40];
  assign MMul_dot_product3_sub_cast_1[40] = {{4{MMul_dot_product3_mul_temp_1[40][27]}}, MMul_dot_product3_mul_temp_1[40]};
  assign MMul_dot_product_out_re_3[40] = MMul_dot_product3_sub_cast[40] - MMul_dot_product3_sub_cast_1[40];
  assign MMul_dot_product3_mul_temp_2[40] = alpha_im_5[40] * alpha_re_17[40];
  assign MMul_dot_product3_add_cast[40] = {{4{MMul_dot_product3_mul_temp_2[40][27]}}, MMul_dot_product3_mul_temp_2[40]};
  assign MMul_dot_product3_mul_temp_3[40] = alpha_re_5[40] * alpha_im_17[40];
  assign MMul_dot_product3_add_cast_1[40] = {{4{MMul_dot_product3_mul_temp_3[40][27]}}, MMul_dot_product3_mul_temp_3[40]};
  assign MMul_dot_product_out_im_3[40] = MMul_dot_product3_add_cast[40] + MMul_dot_product3_add_cast_1[40];
  assign MMul_dot_product3_mul_temp[41] = alpha_re_5[41] * alpha_re_17[41];
  assign MMul_dot_product3_sub_cast[41] = {{4{MMul_dot_product3_mul_temp[41][27]}}, MMul_dot_product3_mul_temp[41]};
  assign MMul_dot_product3_mul_temp_1[41] = alpha_im_5[41] * alpha_im_17[41];
  assign MMul_dot_product3_sub_cast_1[41] = {{4{MMul_dot_product3_mul_temp_1[41][27]}}, MMul_dot_product3_mul_temp_1[41]};
  assign MMul_dot_product_out_re_3[41] = MMul_dot_product3_sub_cast[41] - MMul_dot_product3_sub_cast_1[41];
  assign MMul_dot_product3_mul_temp_2[41] = alpha_im_5[41] * alpha_re_17[41];
  assign MMul_dot_product3_add_cast[41] = {{4{MMul_dot_product3_mul_temp_2[41][27]}}, MMul_dot_product3_mul_temp_2[41]};
  assign MMul_dot_product3_mul_temp_3[41] = alpha_re_5[41] * alpha_im_17[41];
  assign MMul_dot_product3_add_cast_1[41] = {{4{MMul_dot_product3_mul_temp_3[41][27]}}, MMul_dot_product3_mul_temp_3[41]};
  assign MMul_dot_product_out_im_3[41] = MMul_dot_product3_add_cast[41] + MMul_dot_product3_add_cast_1[41];
  assign MMul_dot_product3_mul_temp[42] = alpha_re_5[42] * alpha_re_17[42];
  assign MMul_dot_product3_sub_cast[42] = {{4{MMul_dot_product3_mul_temp[42][27]}}, MMul_dot_product3_mul_temp[42]};
  assign MMul_dot_product3_mul_temp_1[42] = alpha_im_5[42] * alpha_im_17[42];
  assign MMul_dot_product3_sub_cast_1[42] = {{4{MMul_dot_product3_mul_temp_1[42][27]}}, MMul_dot_product3_mul_temp_1[42]};
  assign MMul_dot_product_out_re_3[42] = MMul_dot_product3_sub_cast[42] - MMul_dot_product3_sub_cast_1[42];
  assign MMul_dot_product3_mul_temp_2[42] = alpha_im_5[42] * alpha_re_17[42];
  assign MMul_dot_product3_add_cast[42] = {{4{MMul_dot_product3_mul_temp_2[42][27]}}, MMul_dot_product3_mul_temp_2[42]};
  assign MMul_dot_product3_mul_temp_3[42] = alpha_re_5[42] * alpha_im_17[42];
  assign MMul_dot_product3_add_cast_1[42] = {{4{MMul_dot_product3_mul_temp_3[42][27]}}, MMul_dot_product3_mul_temp_3[42]};
  assign MMul_dot_product_out_im_3[42] = MMul_dot_product3_add_cast[42] + MMul_dot_product3_add_cast_1[42];
  assign MMul_dot_product3_mul_temp[43] = alpha_re_5[43] * alpha_re_17[43];
  assign MMul_dot_product3_sub_cast[43] = {{4{MMul_dot_product3_mul_temp[43][27]}}, MMul_dot_product3_mul_temp[43]};
  assign MMul_dot_product3_mul_temp_1[43] = alpha_im_5[43] * alpha_im_17[43];
  assign MMul_dot_product3_sub_cast_1[43] = {{4{MMul_dot_product3_mul_temp_1[43][27]}}, MMul_dot_product3_mul_temp_1[43]};
  assign MMul_dot_product_out_re_3[43] = MMul_dot_product3_sub_cast[43] - MMul_dot_product3_sub_cast_1[43];
  assign MMul_dot_product3_mul_temp_2[43] = alpha_im_5[43] * alpha_re_17[43];
  assign MMul_dot_product3_add_cast[43] = {{4{MMul_dot_product3_mul_temp_2[43][27]}}, MMul_dot_product3_mul_temp_2[43]};
  assign MMul_dot_product3_mul_temp_3[43] = alpha_re_5[43] * alpha_im_17[43];
  assign MMul_dot_product3_add_cast_1[43] = {{4{MMul_dot_product3_mul_temp_3[43][27]}}, MMul_dot_product3_mul_temp_3[43]};
  assign MMul_dot_product_out_im_3[43] = MMul_dot_product3_add_cast[43] + MMul_dot_product3_add_cast_1[43];
  assign MMul_dot_product3_mul_temp[44] = alpha_re_5[44] * alpha_re_17[44];
  assign MMul_dot_product3_sub_cast[44] = {{4{MMul_dot_product3_mul_temp[44][27]}}, MMul_dot_product3_mul_temp[44]};
  assign MMul_dot_product3_mul_temp_1[44] = alpha_im_5[44] * alpha_im_17[44];
  assign MMul_dot_product3_sub_cast_1[44] = {{4{MMul_dot_product3_mul_temp_1[44][27]}}, MMul_dot_product3_mul_temp_1[44]};
  assign MMul_dot_product_out_re_3[44] = MMul_dot_product3_sub_cast[44] - MMul_dot_product3_sub_cast_1[44];
  assign MMul_dot_product3_mul_temp_2[44] = alpha_im_5[44] * alpha_re_17[44];
  assign MMul_dot_product3_add_cast[44] = {{4{MMul_dot_product3_mul_temp_2[44][27]}}, MMul_dot_product3_mul_temp_2[44]};
  assign MMul_dot_product3_mul_temp_3[44] = alpha_re_5[44] * alpha_im_17[44];
  assign MMul_dot_product3_add_cast_1[44] = {{4{MMul_dot_product3_mul_temp_3[44][27]}}, MMul_dot_product3_mul_temp_3[44]};
  assign MMul_dot_product_out_im_3[44] = MMul_dot_product3_add_cast[44] + MMul_dot_product3_add_cast_1[44];
  assign MMul_dot_product3_mul_temp[45] = alpha_re_5[45] * alpha_re_17[45];
  assign MMul_dot_product3_sub_cast[45] = {{4{MMul_dot_product3_mul_temp[45][27]}}, MMul_dot_product3_mul_temp[45]};
  assign MMul_dot_product3_mul_temp_1[45] = alpha_im_5[45] * alpha_im_17[45];
  assign MMul_dot_product3_sub_cast_1[45] = {{4{MMul_dot_product3_mul_temp_1[45][27]}}, MMul_dot_product3_mul_temp_1[45]};
  assign MMul_dot_product_out_re_3[45] = MMul_dot_product3_sub_cast[45] - MMul_dot_product3_sub_cast_1[45];
  assign MMul_dot_product3_mul_temp_2[45] = alpha_im_5[45] * alpha_re_17[45];
  assign MMul_dot_product3_add_cast[45] = {{4{MMul_dot_product3_mul_temp_2[45][27]}}, MMul_dot_product3_mul_temp_2[45]};
  assign MMul_dot_product3_mul_temp_3[45] = alpha_re_5[45] * alpha_im_17[45];
  assign MMul_dot_product3_add_cast_1[45] = {{4{MMul_dot_product3_mul_temp_3[45][27]}}, MMul_dot_product3_mul_temp_3[45]};
  assign MMul_dot_product_out_im_3[45] = MMul_dot_product3_add_cast[45] + MMul_dot_product3_add_cast_1[45];
  assign MMul_dot_product3_mul_temp[46] = alpha_re_5[46] * alpha_re_17[46];
  assign MMul_dot_product3_sub_cast[46] = {{4{MMul_dot_product3_mul_temp[46][27]}}, MMul_dot_product3_mul_temp[46]};
  assign MMul_dot_product3_mul_temp_1[46] = alpha_im_5[46] * alpha_im_17[46];
  assign MMul_dot_product3_sub_cast_1[46] = {{4{MMul_dot_product3_mul_temp_1[46][27]}}, MMul_dot_product3_mul_temp_1[46]};
  assign MMul_dot_product_out_re_3[46] = MMul_dot_product3_sub_cast[46] - MMul_dot_product3_sub_cast_1[46];
  assign MMul_dot_product3_mul_temp_2[46] = alpha_im_5[46] * alpha_re_17[46];
  assign MMul_dot_product3_add_cast[46] = {{4{MMul_dot_product3_mul_temp_2[46][27]}}, MMul_dot_product3_mul_temp_2[46]};
  assign MMul_dot_product3_mul_temp_3[46] = alpha_re_5[46] * alpha_im_17[46];
  assign MMul_dot_product3_add_cast_1[46] = {{4{MMul_dot_product3_mul_temp_3[46][27]}}, MMul_dot_product3_mul_temp_3[46]};
  assign MMul_dot_product_out_im_3[46] = MMul_dot_product3_add_cast[46] + MMul_dot_product3_add_cast_1[46];
  assign MMul_dot_product3_mul_temp[47] = alpha_re_5[47] * alpha_re_17[47];
  assign MMul_dot_product3_sub_cast[47] = {{4{MMul_dot_product3_mul_temp[47][27]}}, MMul_dot_product3_mul_temp[47]};
  assign MMul_dot_product3_mul_temp_1[47] = alpha_im_5[47] * alpha_im_17[47];
  assign MMul_dot_product3_sub_cast_1[47] = {{4{MMul_dot_product3_mul_temp_1[47][27]}}, MMul_dot_product3_mul_temp_1[47]};
  assign MMul_dot_product_out_re_3[47] = MMul_dot_product3_sub_cast[47] - MMul_dot_product3_sub_cast_1[47];
  assign MMul_dot_product3_mul_temp_2[47] = alpha_im_5[47] * alpha_re_17[47];
  assign MMul_dot_product3_add_cast[47] = {{4{MMul_dot_product3_mul_temp_2[47][27]}}, MMul_dot_product3_mul_temp_2[47]};
  assign MMul_dot_product3_mul_temp_3[47] = alpha_re_5[47] * alpha_im_17[47];
  assign MMul_dot_product3_add_cast_1[47] = {{4{MMul_dot_product3_mul_temp_3[47][27]}}, MMul_dot_product3_mul_temp_3[47]};
  assign MMul_dot_product_out_im_3[47] = MMul_dot_product3_add_cast[47] + MMul_dot_product3_add_cast_1[47];
  assign MMul_dot_product3_mul_temp[48] = alpha_re_5[48] * alpha_re_17[48];
  assign MMul_dot_product3_sub_cast[48] = {{4{MMul_dot_product3_mul_temp[48][27]}}, MMul_dot_product3_mul_temp[48]};
  assign MMul_dot_product3_mul_temp_1[48] = alpha_im_5[48] * alpha_im_17[48];
  assign MMul_dot_product3_sub_cast_1[48] = {{4{MMul_dot_product3_mul_temp_1[48][27]}}, MMul_dot_product3_mul_temp_1[48]};
  assign MMul_dot_product_out_re_3[48] = MMul_dot_product3_sub_cast[48] - MMul_dot_product3_sub_cast_1[48];
  assign MMul_dot_product3_mul_temp_2[48] = alpha_im_5[48] * alpha_re_17[48];
  assign MMul_dot_product3_add_cast[48] = {{4{MMul_dot_product3_mul_temp_2[48][27]}}, MMul_dot_product3_mul_temp_2[48]};
  assign MMul_dot_product3_mul_temp_3[48] = alpha_re_5[48] * alpha_im_17[48];
  assign MMul_dot_product3_add_cast_1[48] = {{4{MMul_dot_product3_mul_temp_3[48][27]}}, MMul_dot_product3_mul_temp_3[48]};
  assign MMul_dot_product_out_im_3[48] = MMul_dot_product3_add_cast[48] + MMul_dot_product3_add_cast_1[48];
  assign MMul_dot_product3_mul_temp[49] = alpha_re_5[49] * alpha_re_17[49];
  assign MMul_dot_product3_sub_cast[49] = {{4{MMul_dot_product3_mul_temp[49][27]}}, MMul_dot_product3_mul_temp[49]};
  assign MMul_dot_product3_mul_temp_1[49] = alpha_im_5[49] * alpha_im_17[49];
  assign MMul_dot_product3_sub_cast_1[49] = {{4{MMul_dot_product3_mul_temp_1[49][27]}}, MMul_dot_product3_mul_temp_1[49]};
  assign MMul_dot_product_out_re_3[49] = MMul_dot_product3_sub_cast[49] - MMul_dot_product3_sub_cast_1[49];
  assign MMul_dot_product3_mul_temp_2[49] = alpha_im_5[49] * alpha_re_17[49];
  assign MMul_dot_product3_add_cast[49] = {{4{MMul_dot_product3_mul_temp_2[49][27]}}, MMul_dot_product3_mul_temp_2[49]};
  assign MMul_dot_product3_mul_temp_3[49] = alpha_re_5[49] * alpha_im_17[49];
  assign MMul_dot_product3_add_cast_1[49] = {{4{MMul_dot_product3_mul_temp_3[49][27]}}, MMul_dot_product3_mul_temp_3[49]};
  assign MMul_dot_product_out_im_3[49] = MMul_dot_product3_add_cast[49] + MMul_dot_product3_add_cast_1[49];
  assign MMul_dot_product3_mul_temp[50] = alpha_re_5[50] * alpha_re_17[50];
  assign MMul_dot_product3_sub_cast[50] = {{4{MMul_dot_product3_mul_temp[50][27]}}, MMul_dot_product3_mul_temp[50]};
  assign MMul_dot_product3_mul_temp_1[50] = alpha_im_5[50] * alpha_im_17[50];
  assign MMul_dot_product3_sub_cast_1[50] = {{4{MMul_dot_product3_mul_temp_1[50][27]}}, MMul_dot_product3_mul_temp_1[50]};
  assign MMul_dot_product_out_re_3[50] = MMul_dot_product3_sub_cast[50] - MMul_dot_product3_sub_cast_1[50];
  assign MMul_dot_product3_mul_temp_2[50] = alpha_im_5[50] * alpha_re_17[50];
  assign MMul_dot_product3_add_cast[50] = {{4{MMul_dot_product3_mul_temp_2[50][27]}}, MMul_dot_product3_mul_temp_2[50]};
  assign MMul_dot_product3_mul_temp_3[50] = alpha_re_5[50] * alpha_im_17[50];
  assign MMul_dot_product3_add_cast_1[50] = {{4{MMul_dot_product3_mul_temp_3[50][27]}}, MMul_dot_product3_mul_temp_3[50]};
  assign MMul_dot_product_out_im_3[50] = MMul_dot_product3_add_cast[50] + MMul_dot_product3_add_cast_1[50];
  assign MMul_dot_product3_mul_temp[51] = alpha_re_5[51] * alpha_re_17[51];
  assign MMul_dot_product3_sub_cast[51] = {{4{MMul_dot_product3_mul_temp[51][27]}}, MMul_dot_product3_mul_temp[51]};
  assign MMul_dot_product3_mul_temp_1[51] = alpha_im_5[51] * alpha_im_17[51];
  assign MMul_dot_product3_sub_cast_1[51] = {{4{MMul_dot_product3_mul_temp_1[51][27]}}, MMul_dot_product3_mul_temp_1[51]};
  assign MMul_dot_product_out_re_3[51] = MMul_dot_product3_sub_cast[51] - MMul_dot_product3_sub_cast_1[51];
  assign MMul_dot_product3_mul_temp_2[51] = alpha_im_5[51] * alpha_re_17[51];
  assign MMul_dot_product3_add_cast[51] = {{4{MMul_dot_product3_mul_temp_2[51][27]}}, MMul_dot_product3_mul_temp_2[51]};
  assign MMul_dot_product3_mul_temp_3[51] = alpha_re_5[51] * alpha_im_17[51];
  assign MMul_dot_product3_add_cast_1[51] = {{4{MMul_dot_product3_mul_temp_3[51][27]}}, MMul_dot_product3_mul_temp_3[51]};
  assign MMul_dot_product_out_im_3[51] = MMul_dot_product3_add_cast[51] + MMul_dot_product3_add_cast_1[51];
  assign MMul_dot_product3_mul_temp[52] = alpha_re_5[52] * alpha_re_17[52];
  assign MMul_dot_product3_sub_cast[52] = {{4{MMul_dot_product3_mul_temp[52][27]}}, MMul_dot_product3_mul_temp[52]};
  assign MMul_dot_product3_mul_temp_1[52] = alpha_im_5[52] * alpha_im_17[52];
  assign MMul_dot_product3_sub_cast_1[52] = {{4{MMul_dot_product3_mul_temp_1[52][27]}}, MMul_dot_product3_mul_temp_1[52]};
  assign MMul_dot_product_out_re_3[52] = MMul_dot_product3_sub_cast[52] - MMul_dot_product3_sub_cast_1[52];
  assign MMul_dot_product3_mul_temp_2[52] = alpha_im_5[52] * alpha_re_17[52];
  assign MMul_dot_product3_add_cast[52] = {{4{MMul_dot_product3_mul_temp_2[52][27]}}, MMul_dot_product3_mul_temp_2[52]};
  assign MMul_dot_product3_mul_temp_3[52] = alpha_re_5[52] * alpha_im_17[52];
  assign MMul_dot_product3_add_cast_1[52] = {{4{MMul_dot_product3_mul_temp_3[52][27]}}, MMul_dot_product3_mul_temp_3[52]};
  assign MMul_dot_product_out_im_3[52] = MMul_dot_product3_add_cast[52] + MMul_dot_product3_add_cast_1[52];
  assign MMul_dot_product3_mul_temp[53] = alpha_re_5[53] * alpha_re_17[53];
  assign MMul_dot_product3_sub_cast[53] = {{4{MMul_dot_product3_mul_temp[53][27]}}, MMul_dot_product3_mul_temp[53]};
  assign MMul_dot_product3_mul_temp_1[53] = alpha_im_5[53] * alpha_im_17[53];
  assign MMul_dot_product3_sub_cast_1[53] = {{4{MMul_dot_product3_mul_temp_1[53][27]}}, MMul_dot_product3_mul_temp_1[53]};
  assign MMul_dot_product_out_re_3[53] = MMul_dot_product3_sub_cast[53] - MMul_dot_product3_sub_cast_1[53];
  assign MMul_dot_product3_mul_temp_2[53] = alpha_im_5[53] * alpha_re_17[53];
  assign MMul_dot_product3_add_cast[53] = {{4{MMul_dot_product3_mul_temp_2[53][27]}}, MMul_dot_product3_mul_temp_2[53]};
  assign MMul_dot_product3_mul_temp_3[53] = alpha_re_5[53] * alpha_im_17[53];
  assign MMul_dot_product3_add_cast_1[53] = {{4{MMul_dot_product3_mul_temp_3[53][27]}}, MMul_dot_product3_mul_temp_3[53]};
  assign MMul_dot_product_out_im_3[53] = MMul_dot_product3_add_cast[53] + MMul_dot_product3_add_cast_1[53];
  assign MMul_dot_product3_mul_temp[54] = alpha_re_5[54] * alpha_re_17[54];
  assign MMul_dot_product3_sub_cast[54] = {{4{MMul_dot_product3_mul_temp[54][27]}}, MMul_dot_product3_mul_temp[54]};
  assign MMul_dot_product3_mul_temp_1[54] = alpha_im_5[54] * alpha_im_17[54];
  assign MMul_dot_product3_sub_cast_1[54] = {{4{MMul_dot_product3_mul_temp_1[54][27]}}, MMul_dot_product3_mul_temp_1[54]};
  assign MMul_dot_product_out_re_3[54] = MMul_dot_product3_sub_cast[54] - MMul_dot_product3_sub_cast_1[54];
  assign MMul_dot_product3_mul_temp_2[54] = alpha_im_5[54] * alpha_re_17[54];
  assign MMul_dot_product3_add_cast[54] = {{4{MMul_dot_product3_mul_temp_2[54][27]}}, MMul_dot_product3_mul_temp_2[54]};
  assign MMul_dot_product3_mul_temp_3[54] = alpha_re_5[54] * alpha_im_17[54];
  assign MMul_dot_product3_add_cast_1[54] = {{4{MMul_dot_product3_mul_temp_3[54][27]}}, MMul_dot_product3_mul_temp_3[54]};
  assign MMul_dot_product_out_im_3[54] = MMul_dot_product3_add_cast[54] + MMul_dot_product3_add_cast_1[54];
  assign MMul_dot_product3_mul_temp[55] = alpha_re_5[55] * alpha_re_17[55];
  assign MMul_dot_product3_sub_cast[55] = {{4{MMul_dot_product3_mul_temp[55][27]}}, MMul_dot_product3_mul_temp[55]};
  assign MMul_dot_product3_mul_temp_1[55] = alpha_im_5[55] * alpha_im_17[55];
  assign MMul_dot_product3_sub_cast_1[55] = {{4{MMul_dot_product3_mul_temp_1[55][27]}}, MMul_dot_product3_mul_temp_1[55]};
  assign MMul_dot_product_out_re_3[55] = MMul_dot_product3_sub_cast[55] - MMul_dot_product3_sub_cast_1[55];
  assign MMul_dot_product3_mul_temp_2[55] = alpha_im_5[55] * alpha_re_17[55];
  assign MMul_dot_product3_add_cast[55] = {{4{MMul_dot_product3_mul_temp_2[55][27]}}, MMul_dot_product3_mul_temp_2[55]};
  assign MMul_dot_product3_mul_temp_3[55] = alpha_re_5[55] * alpha_im_17[55];
  assign MMul_dot_product3_add_cast_1[55] = {{4{MMul_dot_product3_mul_temp_3[55][27]}}, MMul_dot_product3_mul_temp_3[55]};
  assign MMul_dot_product_out_im_3[55] = MMul_dot_product3_add_cast[55] + MMul_dot_product3_add_cast_1[55];
  assign MMul_dot_product3_mul_temp[56] = alpha_re_5[56] * alpha_re_17[56];
  assign MMul_dot_product3_sub_cast[56] = {{4{MMul_dot_product3_mul_temp[56][27]}}, MMul_dot_product3_mul_temp[56]};
  assign MMul_dot_product3_mul_temp_1[56] = alpha_im_5[56] * alpha_im_17[56];
  assign MMul_dot_product3_sub_cast_1[56] = {{4{MMul_dot_product3_mul_temp_1[56][27]}}, MMul_dot_product3_mul_temp_1[56]};
  assign MMul_dot_product_out_re_3[56] = MMul_dot_product3_sub_cast[56] - MMul_dot_product3_sub_cast_1[56];
  assign MMul_dot_product3_mul_temp_2[56] = alpha_im_5[56] * alpha_re_17[56];
  assign MMul_dot_product3_add_cast[56] = {{4{MMul_dot_product3_mul_temp_2[56][27]}}, MMul_dot_product3_mul_temp_2[56]};
  assign MMul_dot_product3_mul_temp_3[56] = alpha_re_5[56] * alpha_im_17[56];
  assign MMul_dot_product3_add_cast_1[56] = {{4{MMul_dot_product3_mul_temp_3[56][27]}}, MMul_dot_product3_mul_temp_3[56]};
  assign MMul_dot_product_out_im_3[56] = MMul_dot_product3_add_cast[56] + MMul_dot_product3_add_cast_1[56];
  assign MMul_dot_product3_mul_temp[57] = alpha_re_5[57] * alpha_re_17[57];
  assign MMul_dot_product3_sub_cast[57] = {{4{MMul_dot_product3_mul_temp[57][27]}}, MMul_dot_product3_mul_temp[57]};
  assign MMul_dot_product3_mul_temp_1[57] = alpha_im_5[57] * alpha_im_17[57];
  assign MMul_dot_product3_sub_cast_1[57] = {{4{MMul_dot_product3_mul_temp_1[57][27]}}, MMul_dot_product3_mul_temp_1[57]};
  assign MMul_dot_product_out_re_3[57] = MMul_dot_product3_sub_cast[57] - MMul_dot_product3_sub_cast_1[57];
  assign MMul_dot_product3_mul_temp_2[57] = alpha_im_5[57] * alpha_re_17[57];
  assign MMul_dot_product3_add_cast[57] = {{4{MMul_dot_product3_mul_temp_2[57][27]}}, MMul_dot_product3_mul_temp_2[57]};
  assign MMul_dot_product3_mul_temp_3[57] = alpha_re_5[57] * alpha_im_17[57];
  assign MMul_dot_product3_add_cast_1[57] = {{4{MMul_dot_product3_mul_temp_3[57][27]}}, MMul_dot_product3_mul_temp_3[57]};
  assign MMul_dot_product_out_im_3[57] = MMul_dot_product3_add_cast[57] + MMul_dot_product3_add_cast_1[57];
  assign MMul_dot_product3_mul_temp[58] = alpha_re_5[58] * alpha_re_17[58];
  assign MMul_dot_product3_sub_cast[58] = {{4{MMul_dot_product3_mul_temp[58][27]}}, MMul_dot_product3_mul_temp[58]};
  assign MMul_dot_product3_mul_temp_1[58] = alpha_im_5[58] * alpha_im_17[58];
  assign MMul_dot_product3_sub_cast_1[58] = {{4{MMul_dot_product3_mul_temp_1[58][27]}}, MMul_dot_product3_mul_temp_1[58]};
  assign MMul_dot_product_out_re_3[58] = MMul_dot_product3_sub_cast[58] - MMul_dot_product3_sub_cast_1[58];
  assign MMul_dot_product3_mul_temp_2[58] = alpha_im_5[58] * alpha_re_17[58];
  assign MMul_dot_product3_add_cast[58] = {{4{MMul_dot_product3_mul_temp_2[58][27]}}, MMul_dot_product3_mul_temp_2[58]};
  assign MMul_dot_product3_mul_temp_3[58] = alpha_re_5[58] * alpha_im_17[58];
  assign MMul_dot_product3_add_cast_1[58] = {{4{MMul_dot_product3_mul_temp_3[58][27]}}, MMul_dot_product3_mul_temp_3[58]};
  assign MMul_dot_product_out_im_3[58] = MMul_dot_product3_add_cast[58] + MMul_dot_product3_add_cast_1[58];
  assign MMul_dot_product3_mul_temp[59] = alpha_re_5[59] * alpha_re_17[59];
  assign MMul_dot_product3_sub_cast[59] = {{4{MMul_dot_product3_mul_temp[59][27]}}, MMul_dot_product3_mul_temp[59]};
  assign MMul_dot_product3_mul_temp_1[59] = alpha_im_5[59] * alpha_im_17[59];
  assign MMul_dot_product3_sub_cast_1[59] = {{4{MMul_dot_product3_mul_temp_1[59][27]}}, MMul_dot_product3_mul_temp_1[59]};
  assign MMul_dot_product_out_re_3[59] = MMul_dot_product3_sub_cast[59] - MMul_dot_product3_sub_cast_1[59];
  assign MMul_dot_product3_mul_temp_2[59] = alpha_im_5[59] * alpha_re_17[59];
  assign MMul_dot_product3_add_cast[59] = {{4{MMul_dot_product3_mul_temp_2[59][27]}}, MMul_dot_product3_mul_temp_2[59]};
  assign MMul_dot_product3_mul_temp_3[59] = alpha_re_5[59] * alpha_im_17[59];
  assign MMul_dot_product3_add_cast_1[59] = {{4{MMul_dot_product3_mul_temp_3[59][27]}}, MMul_dot_product3_mul_temp_3[59]};
  assign MMul_dot_product_out_im_3[59] = MMul_dot_product3_add_cast[59] + MMul_dot_product3_add_cast_1[59];
  assign MMul_dot_product3_mul_temp[60] = alpha_re_5[60] * alpha_re_17[60];
  assign MMul_dot_product3_sub_cast[60] = {{4{MMul_dot_product3_mul_temp[60][27]}}, MMul_dot_product3_mul_temp[60]};
  assign MMul_dot_product3_mul_temp_1[60] = alpha_im_5[60] * alpha_im_17[60];
  assign MMul_dot_product3_sub_cast_1[60] = {{4{MMul_dot_product3_mul_temp_1[60][27]}}, MMul_dot_product3_mul_temp_1[60]};
  assign MMul_dot_product_out_re_3[60] = MMul_dot_product3_sub_cast[60] - MMul_dot_product3_sub_cast_1[60];
  assign MMul_dot_product3_mul_temp_2[60] = alpha_im_5[60] * alpha_re_17[60];
  assign MMul_dot_product3_add_cast[60] = {{4{MMul_dot_product3_mul_temp_2[60][27]}}, MMul_dot_product3_mul_temp_2[60]};
  assign MMul_dot_product3_mul_temp_3[60] = alpha_re_5[60] * alpha_im_17[60];
  assign MMul_dot_product3_add_cast_1[60] = {{4{MMul_dot_product3_mul_temp_3[60][27]}}, MMul_dot_product3_mul_temp_3[60]};
  assign MMul_dot_product_out_im_3[60] = MMul_dot_product3_add_cast[60] + MMul_dot_product3_add_cast_1[60];
  assign MMul_dot_product3_mul_temp[61] = alpha_re_5[61] * alpha_re_17[61];
  assign MMul_dot_product3_sub_cast[61] = {{4{MMul_dot_product3_mul_temp[61][27]}}, MMul_dot_product3_mul_temp[61]};
  assign MMul_dot_product3_mul_temp_1[61] = alpha_im_5[61] * alpha_im_17[61];
  assign MMul_dot_product3_sub_cast_1[61] = {{4{MMul_dot_product3_mul_temp_1[61][27]}}, MMul_dot_product3_mul_temp_1[61]};
  assign MMul_dot_product_out_re_3[61] = MMul_dot_product3_sub_cast[61] - MMul_dot_product3_sub_cast_1[61];
  assign MMul_dot_product3_mul_temp_2[61] = alpha_im_5[61] * alpha_re_17[61];
  assign MMul_dot_product3_add_cast[61] = {{4{MMul_dot_product3_mul_temp_2[61][27]}}, MMul_dot_product3_mul_temp_2[61]};
  assign MMul_dot_product3_mul_temp_3[61] = alpha_re_5[61] * alpha_im_17[61];
  assign MMul_dot_product3_add_cast_1[61] = {{4{MMul_dot_product3_mul_temp_3[61][27]}}, MMul_dot_product3_mul_temp_3[61]};
  assign MMul_dot_product_out_im_3[61] = MMul_dot_product3_add_cast[61] + MMul_dot_product3_add_cast_1[61];
  assign MMul_dot_product3_mul_temp[62] = alpha_re_5[62] * alpha_re_17[62];
  assign MMul_dot_product3_sub_cast[62] = {{4{MMul_dot_product3_mul_temp[62][27]}}, MMul_dot_product3_mul_temp[62]};
  assign MMul_dot_product3_mul_temp_1[62] = alpha_im_5[62] * alpha_im_17[62];
  assign MMul_dot_product3_sub_cast_1[62] = {{4{MMul_dot_product3_mul_temp_1[62][27]}}, MMul_dot_product3_mul_temp_1[62]};
  assign MMul_dot_product_out_re_3[62] = MMul_dot_product3_sub_cast[62] - MMul_dot_product3_sub_cast_1[62];
  assign MMul_dot_product3_mul_temp_2[62] = alpha_im_5[62] * alpha_re_17[62];
  assign MMul_dot_product3_add_cast[62] = {{4{MMul_dot_product3_mul_temp_2[62][27]}}, MMul_dot_product3_mul_temp_2[62]};
  assign MMul_dot_product3_mul_temp_3[62] = alpha_re_5[62] * alpha_im_17[62];
  assign MMul_dot_product3_add_cast_1[62] = {{4{MMul_dot_product3_mul_temp_3[62][27]}}, MMul_dot_product3_mul_temp_3[62]};
  assign MMul_dot_product_out_im_3[62] = MMul_dot_product3_add_cast[62] + MMul_dot_product3_add_cast_1[62];
  assign MMul_dot_product3_mul_temp[63] = alpha_re_5[63] * alpha_re_17[63];
  assign MMul_dot_product3_sub_cast[63] = {{4{MMul_dot_product3_mul_temp[63][27]}}, MMul_dot_product3_mul_temp[63]};
  assign MMul_dot_product3_mul_temp_1[63] = alpha_im_5[63] * alpha_im_17[63];
  assign MMul_dot_product3_sub_cast_1[63] = {{4{MMul_dot_product3_mul_temp_1[63][27]}}, MMul_dot_product3_mul_temp_1[63]};
  assign MMul_dot_product_out_re_3[63] = MMul_dot_product3_sub_cast[63] - MMul_dot_product3_sub_cast_1[63];
  assign MMul_dot_product3_mul_temp_2[63] = alpha_im_5[63] * alpha_re_17[63];
  assign MMul_dot_product3_add_cast[63] = {{4{MMul_dot_product3_mul_temp_2[63][27]}}, MMul_dot_product3_mul_temp_2[63]};
  assign MMul_dot_product3_mul_temp_3[63] = alpha_re_5[63] * alpha_im_17[63];
  assign MMul_dot_product3_add_cast_1[63] = {{4{MMul_dot_product3_mul_temp_3[63][27]}}, MMul_dot_product3_mul_temp_3[63]};
  assign MMul_dot_product_out_im_3[63] = MMul_dot_product3_add_cast[63] + MMul_dot_product3_add_cast_1[63];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  always_comb begin
    reshape_out_re_3[0][0] = MMul_dot_product_out_re_3[0];
    reshape_out_im_3[0][0] = MMul_dot_product_out_im_3[0];
    reshape_out_re_3[1][0] = MMul_dot_product_out_re_3[1];
    reshape_out_im_3[1][0] = MMul_dot_product_out_im_3[1];
    reshape_out_re_3[2][0] = MMul_dot_product_out_re_3[2];
    reshape_out_im_3[2][0] = MMul_dot_product_out_im_3[2];
    reshape_out_re_3[3][0] = MMul_dot_product_out_re_3[3];
    reshape_out_im_3[3][0] = MMul_dot_product_out_im_3[3];
    reshape_out_re_3[4][0] = MMul_dot_product_out_re_3[4];
    reshape_out_im_3[4][0] = MMul_dot_product_out_im_3[4];
    reshape_out_re_3[5][0] = MMul_dot_product_out_re_3[5];
    reshape_out_im_3[5][0] = MMul_dot_product_out_im_3[5];
    reshape_out_re_3[6][0] = MMul_dot_product_out_re_3[6];
    reshape_out_im_3[6][0] = MMul_dot_product_out_im_3[6];
    reshape_out_re_3[7][0] = MMul_dot_product_out_re_3[7];
    reshape_out_im_3[7][0] = MMul_dot_product_out_im_3[7];
    reshape_out_re_3[0][1] = MMul_dot_product_out_re_3[8];
    reshape_out_im_3[0][1] = MMul_dot_product_out_im_3[8];
    reshape_out_re_3[1][1] = MMul_dot_product_out_re_3[9];
    reshape_out_im_3[1][1] = MMul_dot_product_out_im_3[9];
    reshape_out_re_3[2][1] = MMul_dot_product_out_re_3[10];
    reshape_out_im_3[2][1] = MMul_dot_product_out_im_3[10];
    reshape_out_re_3[3][1] = MMul_dot_product_out_re_3[11];
    reshape_out_im_3[3][1] = MMul_dot_product_out_im_3[11];
    reshape_out_re_3[4][1] = MMul_dot_product_out_re_3[12];
    reshape_out_im_3[4][1] = MMul_dot_product_out_im_3[12];
    reshape_out_re_3[5][1] = MMul_dot_product_out_re_3[13];
    reshape_out_im_3[5][1] = MMul_dot_product_out_im_3[13];
    reshape_out_re_3[6][1] = MMul_dot_product_out_re_3[14];
    reshape_out_im_3[6][1] = MMul_dot_product_out_im_3[14];
    reshape_out_re_3[7][1] = MMul_dot_product_out_re_3[15];
    reshape_out_im_3[7][1] = MMul_dot_product_out_im_3[15];
    reshape_out_re_3[0][2] = MMul_dot_product_out_re_3[16];
    reshape_out_im_3[0][2] = MMul_dot_product_out_im_3[16];
    reshape_out_re_3[1][2] = MMul_dot_product_out_re_3[17];
    reshape_out_im_3[1][2] = MMul_dot_product_out_im_3[17];
    reshape_out_re_3[2][2] = MMul_dot_product_out_re_3[18];
    reshape_out_im_3[2][2] = MMul_dot_product_out_im_3[18];
    reshape_out_re_3[3][2] = MMul_dot_product_out_re_3[19];
    reshape_out_im_3[3][2] = MMul_dot_product_out_im_3[19];
    reshape_out_re_3[4][2] = MMul_dot_product_out_re_3[20];
    reshape_out_im_3[4][2] = MMul_dot_product_out_im_3[20];
    reshape_out_re_3[5][2] = MMul_dot_product_out_re_3[21];
    reshape_out_im_3[5][2] = MMul_dot_product_out_im_3[21];
    reshape_out_re_3[6][2] = MMul_dot_product_out_re_3[22];
    reshape_out_im_3[6][2] = MMul_dot_product_out_im_3[22];
    reshape_out_re_3[7][2] = MMul_dot_product_out_re_3[23];
    reshape_out_im_3[7][2] = MMul_dot_product_out_im_3[23];
    reshape_out_re_3[0][3] = MMul_dot_product_out_re_3[24];
    reshape_out_im_3[0][3] = MMul_dot_product_out_im_3[24];
    reshape_out_re_3[1][3] = MMul_dot_product_out_re_3[25];
    reshape_out_im_3[1][3] = MMul_dot_product_out_im_3[25];
    reshape_out_re_3[2][3] = MMul_dot_product_out_re_3[26];
    reshape_out_im_3[2][3] = MMul_dot_product_out_im_3[26];
    reshape_out_re_3[3][3] = MMul_dot_product_out_re_3[27];
    reshape_out_im_3[3][3] = MMul_dot_product_out_im_3[27];
    reshape_out_re_3[4][3] = MMul_dot_product_out_re_3[28];
    reshape_out_im_3[4][3] = MMul_dot_product_out_im_3[28];
    reshape_out_re_3[5][3] = MMul_dot_product_out_re_3[29];
    reshape_out_im_3[5][3] = MMul_dot_product_out_im_3[29];
    reshape_out_re_3[6][3] = MMul_dot_product_out_re_3[30];
    reshape_out_im_3[6][3] = MMul_dot_product_out_im_3[30];
    reshape_out_re_3[7][3] = MMul_dot_product_out_re_3[31];
    reshape_out_im_3[7][3] = MMul_dot_product_out_im_3[31];
    reshape_out_re_3[0][4] = MMul_dot_product_out_re_3[32];
    reshape_out_im_3[0][4] = MMul_dot_product_out_im_3[32];
    reshape_out_re_3[1][4] = MMul_dot_product_out_re_3[33];
    reshape_out_im_3[1][4] = MMul_dot_product_out_im_3[33];
    reshape_out_re_3[2][4] = MMul_dot_product_out_re_3[34];
    reshape_out_im_3[2][4] = MMul_dot_product_out_im_3[34];
    reshape_out_re_3[3][4] = MMul_dot_product_out_re_3[35];
    reshape_out_im_3[3][4] = MMul_dot_product_out_im_3[35];
    reshape_out_re_3[4][4] = MMul_dot_product_out_re_3[36];
    reshape_out_im_3[4][4] = MMul_dot_product_out_im_3[36];
    reshape_out_re_3[5][4] = MMul_dot_product_out_re_3[37];
    reshape_out_im_3[5][4] = MMul_dot_product_out_im_3[37];
    reshape_out_re_3[6][4] = MMul_dot_product_out_re_3[38];
    reshape_out_im_3[6][4] = MMul_dot_product_out_im_3[38];
    reshape_out_re_3[7][4] = MMul_dot_product_out_re_3[39];
    reshape_out_im_3[7][4] = MMul_dot_product_out_im_3[39];
    reshape_out_re_3[0][5] = MMul_dot_product_out_re_3[40];
    reshape_out_im_3[0][5] = MMul_dot_product_out_im_3[40];
    reshape_out_re_3[1][5] = MMul_dot_product_out_re_3[41];
    reshape_out_im_3[1][5] = MMul_dot_product_out_im_3[41];
    reshape_out_re_3[2][5] = MMul_dot_product_out_re_3[42];
    reshape_out_im_3[2][5] = MMul_dot_product_out_im_3[42];
    reshape_out_re_3[3][5] = MMul_dot_product_out_re_3[43];
    reshape_out_im_3[3][5] = MMul_dot_product_out_im_3[43];
    reshape_out_re_3[4][5] = MMul_dot_product_out_re_3[44];
    reshape_out_im_3[4][5] = MMul_dot_product_out_im_3[44];
    reshape_out_re_3[5][5] = MMul_dot_product_out_re_3[45];
    reshape_out_im_3[5][5] = MMul_dot_product_out_im_3[45];
    reshape_out_re_3[6][5] = MMul_dot_product_out_re_3[46];
    reshape_out_im_3[6][5] = MMul_dot_product_out_im_3[46];
    reshape_out_re_3[7][5] = MMul_dot_product_out_re_3[47];
    reshape_out_im_3[7][5] = MMul_dot_product_out_im_3[47];
    reshape_out_re_3[0][6] = MMul_dot_product_out_re_3[48];
    reshape_out_im_3[0][6] = MMul_dot_product_out_im_3[48];
    reshape_out_re_3[1][6] = MMul_dot_product_out_re_3[49];
    reshape_out_im_3[1][6] = MMul_dot_product_out_im_3[49];
    reshape_out_re_3[2][6] = MMul_dot_product_out_re_3[50];
    reshape_out_im_3[2][6] = MMul_dot_product_out_im_3[50];
    reshape_out_re_3[3][6] = MMul_dot_product_out_re_3[51];
    reshape_out_im_3[3][6] = MMul_dot_product_out_im_3[51];
    reshape_out_re_3[4][6] = MMul_dot_product_out_re_3[52];
    reshape_out_im_3[4][6] = MMul_dot_product_out_im_3[52];
    reshape_out_re_3[5][6] = MMul_dot_product_out_re_3[53];
    reshape_out_im_3[5][6] = MMul_dot_product_out_im_3[53];
    reshape_out_re_3[6][6] = MMul_dot_product_out_re_3[54];
    reshape_out_im_3[6][6] = MMul_dot_product_out_im_3[54];
    reshape_out_re_3[7][6] = MMul_dot_product_out_re_3[55];
    reshape_out_im_3[7][6] = MMul_dot_product_out_im_3[55];
    reshape_out_re_3[0][7] = MMul_dot_product_out_re_3[56];
    reshape_out_im_3[0][7] = MMul_dot_product_out_im_3[56];
    reshape_out_re_3[1][7] = MMul_dot_product_out_re_3[57];
    reshape_out_im_3[1][7] = MMul_dot_product_out_im_3[57];
    reshape_out_re_3[2][7] = MMul_dot_product_out_re_3[58];
    reshape_out_im_3[2][7] = MMul_dot_product_out_im_3[58];
    reshape_out_re_3[3][7] = MMul_dot_product_out_re_3[59];
    reshape_out_im_3[3][7] = MMul_dot_product_out_im_3[59];
    reshape_out_re_3[4][7] = MMul_dot_product_out_re_3[60];
    reshape_out_im_3[4][7] = MMul_dot_product_out_im_3[60];
    reshape_out_re_3[5][7] = MMul_dot_product_out_re_3[61];
    reshape_out_im_3[5][7] = MMul_dot_product_out_im_3[61];
    reshape_out_re_3[6][7] = MMul_dot_product_out_re_3[62];
    reshape_out_im_3[6][7] = MMul_dot_product_out_im_3[62];
    reshape_out_re_3[7][7] = MMul_dot_product_out_re_3[63];
    reshape_out_im_3[7][7] = MMul_dot_product_out_im_3[63];
  end

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_33[0] = reshape_out_re_3[0][0];
  assign selector_out_im_33[0] = reshape_out_im_3[0][0];
  assign selector_out_re_33[1] = reshape_out_re_3[0][1];
  assign selector_out_im_33[1] = reshape_out_im_3[0][1];
  assign selector_out_re_33[2] = reshape_out_re_3[0][2];
  assign selector_out_im_33[2] = reshape_out_im_3[0][2];
  assign selector_out_re_33[3] = reshape_out_re_3[0][3];
  assign selector_out_im_33[3] = reshape_out_im_3[0][3];
  assign selector_out_re_33[4] = reshape_out_re_3[0][4];
  assign selector_out_im_33[4] = reshape_out_im_3[0][4];
  assign selector_out_re_33[5] = reshape_out_re_3[0][5];
  assign selector_out_im_33[5] = reshape_out_im_3[0][5];
  assign selector_out_re_33[6] = reshape_out_re_3[0][6];
  assign selector_out_im_33[6] = reshape_out_im_3[0][6];
  assign selector_out_re_33[7] = reshape_out_re_3[0][7];
  assign selector_out_im_33[7] = reshape_out_im_3[0][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_34[0] = reshape_out_re_3[1][0];
  assign selector_out_im_34[0] = reshape_out_im_3[1][0];
  assign selector_out_re_34[1] = reshape_out_re_3[1][1];
  assign selector_out_im_34[1] = reshape_out_im_3[1][1];
  assign selector_out_re_34[2] = reshape_out_re_3[1][2];
  assign selector_out_im_34[2] = reshape_out_im_3[1][2];
  assign selector_out_re_34[3] = reshape_out_re_3[1][3];
  assign selector_out_im_34[3] = reshape_out_im_3[1][3];
  assign selector_out_re_34[4] = reshape_out_re_3[1][4];
  assign selector_out_im_34[4] = reshape_out_im_3[1][4];
  assign selector_out_re_34[5] = reshape_out_re_3[1][5];
  assign selector_out_im_34[5] = reshape_out_im_3[1][5];
  assign selector_out_re_34[6] = reshape_out_re_3[1][6];
  assign selector_out_im_34[6] = reshape_out_im_3[1][6];
  assign selector_out_re_34[7] = reshape_out_re_3[1][7];
  assign selector_out_im_34[7] = reshape_out_im_3[1][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_add_01_out_re_3[0] = selector_out_re_33[0] + selector_out_re_34[0];
  assign MMul_add_01_out_im_3[0] = selector_out_im_33[0] + selector_out_im_34[0];
  assign MMul_add_01_out_re_3[1] = selector_out_re_33[1] + selector_out_re_34[1];
  assign MMul_add_01_out_im_3[1] = selector_out_im_33[1] + selector_out_im_34[1];
  assign MMul_add_01_out_re_3[2] = selector_out_re_33[2] + selector_out_re_34[2];
  assign MMul_add_01_out_im_3[2] = selector_out_im_33[2] + selector_out_im_34[2];
  assign MMul_add_01_out_re_3[3] = selector_out_re_33[3] + selector_out_re_34[3];
  assign MMul_add_01_out_im_3[3] = selector_out_im_33[3] + selector_out_im_34[3];
  assign MMul_add_01_out_re_3[4] = selector_out_re_33[4] + selector_out_re_34[4];
  assign MMul_add_01_out_im_3[4] = selector_out_im_33[4] + selector_out_im_34[4];
  assign MMul_add_01_out_re_3[5] = selector_out_re_33[5] + selector_out_re_34[5];
  assign MMul_add_01_out_im_3[5] = selector_out_im_33[5] + selector_out_im_34[5];
  assign MMul_add_01_out_re_3[6] = selector_out_re_33[6] + selector_out_re_34[6];
  assign MMul_add_01_out_im_3[6] = selector_out_im_33[6] + selector_out_im_34[6];
  assign MMul_add_01_out_re_3[7] = selector_out_re_33[7] + selector_out_re_34[7];
  assign MMul_add_01_out_im_3[7] = selector_out_im_33[7] + selector_out_im_34[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_35[0] = reshape_out_re_3[2][0];
  assign selector_out_im_35[0] = reshape_out_im_3[2][0];
  assign selector_out_re_35[1] = reshape_out_re_3[2][1];
  assign selector_out_im_35[1] = reshape_out_im_3[2][1];
  assign selector_out_re_35[2] = reshape_out_re_3[2][2];
  assign selector_out_im_35[2] = reshape_out_im_3[2][2];
  assign selector_out_re_35[3] = reshape_out_re_3[2][3];
  assign selector_out_im_35[3] = reshape_out_im_3[2][3];
  assign selector_out_re_35[4] = reshape_out_re_3[2][4];
  assign selector_out_im_35[4] = reshape_out_im_3[2][4];
  assign selector_out_re_35[5] = reshape_out_re_3[2][5];
  assign selector_out_im_35[5] = reshape_out_im_3[2][5];
  assign selector_out_re_35[6] = reshape_out_re_3[2][6];
  assign selector_out_im_35[6] = reshape_out_im_3[2][6];
  assign selector_out_re_35[7] = reshape_out_re_3[2][7];
  assign selector_out_im_35[7] = reshape_out_im_3[2][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_add_12_out_re_3[0] = MMul_add_01_out_re_3[0] + selector_out_re_35[0];
  assign MMul_add_12_out_im_3[0] = MMul_add_01_out_im_3[0] + selector_out_im_35[0];
  assign MMul_add_12_out_re_3[1] = MMul_add_01_out_re_3[1] + selector_out_re_35[1];
  assign MMul_add_12_out_im_3[1] = MMul_add_01_out_im_3[1] + selector_out_im_35[1];
  assign MMul_add_12_out_re_3[2] = MMul_add_01_out_re_3[2] + selector_out_re_35[2];
  assign MMul_add_12_out_im_3[2] = MMul_add_01_out_im_3[2] + selector_out_im_35[2];
  assign MMul_add_12_out_re_3[3] = MMul_add_01_out_re_3[3] + selector_out_re_35[3];
  assign MMul_add_12_out_im_3[3] = MMul_add_01_out_im_3[3] + selector_out_im_35[3];
  assign MMul_add_12_out_re_3[4] = MMul_add_01_out_re_3[4] + selector_out_re_35[4];
  assign MMul_add_12_out_im_3[4] = MMul_add_01_out_im_3[4] + selector_out_im_35[4];
  assign MMul_add_12_out_re_3[5] = MMul_add_01_out_re_3[5] + selector_out_re_35[5];
  assign MMul_add_12_out_im_3[5] = MMul_add_01_out_im_3[5] + selector_out_im_35[5];
  assign MMul_add_12_out_re_3[6] = MMul_add_01_out_re_3[6] + selector_out_re_35[6];
  assign MMul_add_12_out_im_3[6] = MMul_add_01_out_im_3[6] + selector_out_im_35[6];
  assign MMul_add_12_out_re_3[7] = MMul_add_01_out_re_3[7] + selector_out_re_35[7];
  assign MMul_add_12_out_im_3[7] = MMul_add_01_out_im_3[7] + selector_out_im_35[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_36[0] = reshape_out_re_3[3][0];
  assign selector_out_im_36[0] = reshape_out_im_3[3][0];
  assign selector_out_re_36[1] = reshape_out_re_3[3][1];
  assign selector_out_im_36[1] = reshape_out_im_3[3][1];
  assign selector_out_re_36[2] = reshape_out_re_3[3][2];
  assign selector_out_im_36[2] = reshape_out_im_3[3][2];
  assign selector_out_re_36[3] = reshape_out_re_3[3][3];
  assign selector_out_im_36[3] = reshape_out_im_3[3][3];
  assign selector_out_re_36[4] = reshape_out_re_3[3][4];
  assign selector_out_im_36[4] = reshape_out_im_3[3][4];
  assign selector_out_re_36[5] = reshape_out_re_3[3][5];
  assign selector_out_im_36[5] = reshape_out_im_3[3][5];
  assign selector_out_re_36[6] = reshape_out_re_3[3][6];
  assign selector_out_im_36[6] = reshape_out_im_3[3][6];
  assign selector_out_re_36[7] = reshape_out_re_3[3][7];
  assign selector_out_im_36[7] = reshape_out_im_3[3][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_add_23_out_re_3[0] = MMul_add_12_out_re_3[0] + selector_out_re_36[0];
  assign MMul_add_23_out_im_3[0] = MMul_add_12_out_im_3[0] + selector_out_im_36[0];
  assign MMul_add_23_out_re_3[1] = MMul_add_12_out_re_3[1] + selector_out_re_36[1];
  assign MMul_add_23_out_im_3[1] = MMul_add_12_out_im_3[1] + selector_out_im_36[1];
  assign MMul_add_23_out_re_3[2] = MMul_add_12_out_re_3[2] + selector_out_re_36[2];
  assign MMul_add_23_out_im_3[2] = MMul_add_12_out_im_3[2] + selector_out_im_36[2];
  assign MMul_add_23_out_re_3[3] = MMul_add_12_out_re_3[3] + selector_out_re_36[3];
  assign MMul_add_23_out_im_3[3] = MMul_add_12_out_im_3[3] + selector_out_im_36[3];
  assign MMul_add_23_out_re_3[4] = MMul_add_12_out_re_3[4] + selector_out_re_36[4];
  assign MMul_add_23_out_im_3[4] = MMul_add_12_out_im_3[4] + selector_out_im_36[4];
  assign MMul_add_23_out_re_3[5] = MMul_add_12_out_re_3[5] + selector_out_re_36[5];
  assign MMul_add_23_out_im_3[5] = MMul_add_12_out_im_3[5] + selector_out_im_36[5];
  assign MMul_add_23_out_re_3[6] = MMul_add_12_out_re_3[6] + selector_out_re_36[6];
  assign MMul_add_23_out_im_3[6] = MMul_add_12_out_im_3[6] + selector_out_im_36[6];
  assign MMul_add_23_out_re_3[7] = MMul_add_12_out_re_3[7] + selector_out_re_36[7];
  assign MMul_add_23_out_im_3[7] = MMul_add_12_out_im_3[7] + selector_out_im_36[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_37[0] = reshape_out_re_3[4][0];
  assign selector_out_im_37[0] = reshape_out_im_3[4][0];
  assign selector_out_re_37[1] = reshape_out_re_3[4][1];
  assign selector_out_im_37[1] = reshape_out_im_3[4][1];
  assign selector_out_re_37[2] = reshape_out_re_3[4][2];
  assign selector_out_im_37[2] = reshape_out_im_3[4][2];
  assign selector_out_re_37[3] = reshape_out_re_3[4][3];
  assign selector_out_im_37[3] = reshape_out_im_3[4][3];
  assign selector_out_re_37[4] = reshape_out_re_3[4][4];
  assign selector_out_im_37[4] = reshape_out_im_3[4][4];
  assign selector_out_re_37[5] = reshape_out_re_3[4][5];
  assign selector_out_im_37[5] = reshape_out_im_3[4][5];
  assign selector_out_re_37[6] = reshape_out_re_3[4][6];
  assign selector_out_im_37[6] = reshape_out_im_3[4][6];
  assign selector_out_re_37[7] = reshape_out_re_3[4][7];
  assign selector_out_im_37[7] = reshape_out_im_3[4][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_add_34_out_re_3[0] = MMul_add_23_out_re_3[0] + selector_out_re_37[0];
  assign MMul_add_34_out_im_3[0] = MMul_add_23_out_im_3[0] + selector_out_im_37[0];
  assign MMul_add_34_out_re_3[1] = MMul_add_23_out_re_3[1] + selector_out_re_37[1];
  assign MMul_add_34_out_im_3[1] = MMul_add_23_out_im_3[1] + selector_out_im_37[1];
  assign MMul_add_34_out_re_3[2] = MMul_add_23_out_re_3[2] + selector_out_re_37[2];
  assign MMul_add_34_out_im_3[2] = MMul_add_23_out_im_3[2] + selector_out_im_37[2];
  assign MMul_add_34_out_re_3[3] = MMul_add_23_out_re_3[3] + selector_out_re_37[3];
  assign MMul_add_34_out_im_3[3] = MMul_add_23_out_im_3[3] + selector_out_im_37[3];
  assign MMul_add_34_out_re_3[4] = MMul_add_23_out_re_3[4] + selector_out_re_37[4];
  assign MMul_add_34_out_im_3[4] = MMul_add_23_out_im_3[4] + selector_out_im_37[4];
  assign MMul_add_34_out_re_3[5] = MMul_add_23_out_re_3[5] + selector_out_re_37[5];
  assign MMul_add_34_out_im_3[5] = MMul_add_23_out_im_3[5] + selector_out_im_37[5];
  assign MMul_add_34_out_re_3[6] = MMul_add_23_out_re_3[6] + selector_out_re_37[6];
  assign MMul_add_34_out_im_3[6] = MMul_add_23_out_im_3[6] + selector_out_im_37[6];
  assign MMul_add_34_out_re_3[7] = MMul_add_23_out_re_3[7] + selector_out_re_37[7];
  assign MMul_add_34_out_im_3[7] = MMul_add_23_out_im_3[7] + selector_out_im_37[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_38[0] = reshape_out_re_3[5][0];
  assign selector_out_im_38[0] = reshape_out_im_3[5][0];
  assign selector_out_re_38[1] = reshape_out_re_3[5][1];
  assign selector_out_im_38[1] = reshape_out_im_3[5][1];
  assign selector_out_re_38[2] = reshape_out_re_3[5][2];
  assign selector_out_im_38[2] = reshape_out_im_3[5][2];
  assign selector_out_re_38[3] = reshape_out_re_3[5][3];
  assign selector_out_im_38[3] = reshape_out_im_3[5][3];
  assign selector_out_re_38[4] = reshape_out_re_3[5][4];
  assign selector_out_im_38[4] = reshape_out_im_3[5][4];
  assign selector_out_re_38[5] = reshape_out_re_3[5][5];
  assign selector_out_im_38[5] = reshape_out_im_3[5][5];
  assign selector_out_re_38[6] = reshape_out_re_3[5][6];
  assign selector_out_im_38[6] = reshape_out_im_3[5][6];
  assign selector_out_re_38[7] = reshape_out_re_3[5][7];
  assign selector_out_im_38[7] = reshape_out_im_3[5][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_add_45_out_re_3[0] = MMul_add_34_out_re_3[0] + selector_out_re_38[0];
  assign MMul_add_45_out_im_3[0] = MMul_add_34_out_im_3[0] + selector_out_im_38[0];
  assign MMul_add_45_out_re_3[1] = MMul_add_34_out_re_3[1] + selector_out_re_38[1];
  assign MMul_add_45_out_im_3[1] = MMul_add_34_out_im_3[1] + selector_out_im_38[1];
  assign MMul_add_45_out_re_3[2] = MMul_add_34_out_re_3[2] + selector_out_re_38[2];
  assign MMul_add_45_out_im_3[2] = MMul_add_34_out_im_3[2] + selector_out_im_38[2];
  assign MMul_add_45_out_re_3[3] = MMul_add_34_out_re_3[3] + selector_out_re_38[3];
  assign MMul_add_45_out_im_3[3] = MMul_add_34_out_im_3[3] + selector_out_im_38[3];
  assign MMul_add_45_out_re_3[4] = MMul_add_34_out_re_3[4] + selector_out_re_38[4];
  assign MMul_add_45_out_im_3[4] = MMul_add_34_out_im_3[4] + selector_out_im_38[4];
  assign MMul_add_45_out_re_3[5] = MMul_add_34_out_re_3[5] + selector_out_re_38[5];
  assign MMul_add_45_out_im_3[5] = MMul_add_34_out_im_3[5] + selector_out_im_38[5];
  assign MMul_add_45_out_re_3[6] = MMul_add_34_out_re_3[6] + selector_out_re_38[6];
  assign MMul_add_45_out_im_3[6] = MMul_add_34_out_im_3[6] + selector_out_im_38[6];
  assign MMul_add_45_out_re_3[7] = MMul_add_34_out_re_3[7] + selector_out_re_38[7];
  assign MMul_add_45_out_im_3[7] = MMul_add_34_out_im_3[7] + selector_out_im_38[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_39[0] = reshape_out_re_3[6][0];
  assign selector_out_im_39[0] = reshape_out_im_3[6][0];
  assign selector_out_re_39[1] = reshape_out_re_3[6][1];
  assign selector_out_im_39[1] = reshape_out_im_3[6][1];
  assign selector_out_re_39[2] = reshape_out_re_3[6][2];
  assign selector_out_im_39[2] = reshape_out_im_3[6][2];
  assign selector_out_re_39[3] = reshape_out_re_3[6][3];
  assign selector_out_im_39[3] = reshape_out_im_3[6][3];
  assign selector_out_re_39[4] = reshape_out_re_3[6][4];
  assign selector_out_im_39[4] = reshape_out_im_3[6][4];
  assign selector_out_re_39[5] = reshape_out_re_3[6][5];
  assign selector_out_im_39[5] = reshape_out_im_3[6][5];
  assign selector_out_re_39[6] = reshape_out_re_3[6][6];
  assign selector_out_im_39[6] = reshape_out_im_3[6][6];
  assign selector_out_re_39[7] = reshape_out_re_3[6][7];
  assign selector_out_im_39[7] = reshape_out_im_3[6][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign MMul_add_56_out_re_3[0] = MMul_add_45_out_re_3[0] + selector_out_re_39[0];
  assign MMul_add_56_out_im_3[0] = MMul_add_45_out_im_3[0] + selector_out_im_39[0];
  assign MMul_add_56_out_re_3[1] = MMul_add_45_out_re_3[1] + selector_out_re_39[1];
  assign MMul_add_56_out_im_3[1] = MMul_add_45_out_im_3[1] + selector_out_im_39[1];
  assign MMul_add_56_out_re_3[2] = MMul_add_45_out_re_3[2] + selector_out_re_39[2];
  assign MMul_add_56_out_im_3[2] = MMul_add_45_out_im_3[2] + selector_out_im_39[2];
  assign MMul_add_56_out_re_3[3] = MMul_add_45_out_re_3[3] + selector_out_re_39[3];
  assign MMul_add_56_out_im_3[3] = MMul_add_45_out_im_3[3] + selector_out_im_39[3];
  assign MMul_add_56_out_re_3[4] = MMul_add_45_out_re_3[4] + selector_out_re_39[4];
  assign MMul_add_56_out_im_3[4] = MMul_add_45_out_im_3[4] + selector_out_im_39[4];
  assign MMul_add_56_out_re_3[5] = MMul_add_45_out_re_3[5] + selector_out_re_39[5];
  assign MMul_add_56_out_im_3[5] = MMul_add_45_out_im_3[5] + selector_out_im_39[5];
  assign MMul_add_56_out_re_3[6] = MMul_add_45_out_re_3[6] + selector_out_re_39[6];
  assign MMul_add_56_out_im_3[6] = MMul_add_45_out_im_3[6] + selector_out_im_39[6];
  assign MMul_add_56_out_re_3[7] = MMul_add_45_out_re_3[7] + selector_out_re_39[7];
  assign MMul_add_56_out_im_3[7] = MMul_add_45_out_im_3[7] + selector_out_im_39[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign selector_out_re_40[0] = reshape_out_re_3[7][0];
  assign selector_out_im_40[0] = reshape_out_im_3[7][0];
  assign selector_out_re_40[1] = reshape_out_re_3[7][1];
  assign selector_out_im_40[1] = reshape_out_im_3[7][1];
  assign selector_out_re_40[2] = reshape_out_re_3[7][2];
  assign selector_out_im_40[2] = reshape_out_im_3[7][2];
  assign selector_out_re_40[3] = reshape_out_re_3[7][3];
  assign selector_out_im_40[3] = reshape_out_im_3[7][3];
  assign selector_out_re_40[4] = reshape_out_re_3[7][4];
  assign selector_out_im_40[4] = reshape_out_im_3[7][4];
  assign selector_out_re_40[5] = reshape_out_re_3[7][5];
  assign selector_out_im_40[5] = reshape_out_im_3[7][5];
  assign selector_out_re_40[6] = reshape_out_re_3[7][6];
  assign selector_out_im_40[6] = reshape_out_im_3[7][6];
  assign selector_out_re_40[7] = reshape_out_re_3[7][7];
  assign selector_out_im_40[7] = reshape_out_im_3[7][7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign alpha_re_18[0] = MMul_add_56_out_re_3[0] + selector_out_re_40[0];
  assign alpha_im_18[0] = MMul_add_56_out_im_3[0] + selector_out_im_40[0];
  assign alpha_re_18[1] = MMul_add_56_out_re_3[1] + selector_out_re_40[1];
  assign alpha_im_18[1] = MMul_add_56_out_im_3[1] + selector_out_im_40[1];
  assign alpha_re_18[2] = MMul_add_56_out_re_3[2] + selector_out_re_40[2];
  assign alpha_im_18[2] = MMul_add_56_out_im_3[2] + selector_out_im_40[2];
  assign alpha_re_18[3] = MMul_add_56_out_re_3[3] + selector_out_re_40[3];
  assign alpha_im_18[3] = MMul_add_56_out_im_3[3] + selector_out_im_40[3];
  assign alpha_re_18[4] = MMul_add_56_out_re_3[4] + selector_out_re_40[4];
  assign alpha_im_18[4] = MMul_add_56_out_im_3[4] + selector_out_im_40[4];
  assign alpha_re_18[5] = MMul_add_56_out_re_3[5] + selector_out_re_40[5];
  assign alpha_im_18[5] = MMul_add_56_out_im_3[5] + selector_out_im_40[5];
  assign alpha_re_18[6] = MMul_add_56_out_re_3[6] + selector_out_re_40[6];
  assign alpha_im_18[6] = MMul_add_56_out_im_3[6] + selector_out_im_40[6];
  assign alpha_re_18[7] = MMul_add_56_out_re_3[7] + selector_out_re_40[7];
  assign alpha_im_18[7] = MMul_add_56_out_im_3[7] + selector_out_im_40[7];

  // Step 4: Apply Hadamard to the second qubit
  // H2 = tensor_product(I, H, I);  % Apply H to the second qubit
  // Initialize intermediate matrix AB for I ⊗ H (4x4 matrix)
  // Manually expand the tensor product I ⊗ H
  // Initialize result matrix for (I ⊗ H) ⊗ I, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ H) ⊗ I
  // Final result for I \otimes H \otimes I, with H applied to the second qubit
  assign out0_re_3[0] = alpha_re_18[0];
  assign out0_im_3[0] = alpha_im_18[0];
  assign out0_re_3[1] = alpha_re_18[1];
  assign out0_im_3[1] = alpha_im_18[1];
  assign out0_re_3[2] = alpha_re_18[2];
  assign out0_im_3[2] = alpha_im_18[2];
  assign out0_re_3[3] = alpha_re_18[3];
  assign out0_im_3[3] = alpha_im_18[3];
  assign out0_re_3[4] = alpha_re_18[4];
  assign out0_im_3[4] = alpha_im_18[4];
  assign out0_re_3[5] = alpha_re_18[5];
  assign out0_im_3[5] = alpha_im_18[5];
  assign out0_re_3[6] = alpha_re_18[6];
  assign out0_im_3[6] = alpha_im_18[6];
  assign out0_re_3[7] = alpha_re_18[7];
  assign out0_im_3[7] = alpha_im_18[7];

  assign state_after_H2_re[0] = out0_re_3[0][26:13];
  assign state_after_H2_im[0] = out0_im_3[0][26:13];
  assign state_after_H2_re[1] = out0_re_3[1][26:13];
  assign state_after_H2_im[1] = out0_im_3[1][26:13];
  assign state_after_H2_re[2] = out0_re_3[2][26:13];
  assign state_after_H2_im[2] = out0_im_3[2][26:13];
  assign state_after_H2_re[3] = out0_re_3[3][26:13];
  assign state_after_H2_im[3] = out0_im_3[3][26:13];
  assign state_after_H2_re[4] = out0_re_3[4][26:13];
  assign state_after_H2_im[4] = out0_im_3[4][26:13];
  assign state_after_H2_re[5] = out0_re_3[5][26:13];
  assign state_after_H2_im[5] = out0_im_3[5][26:13];
  assign state_after_H2_re[6] = out0_re_3[6][26:13];
  assign state_after_H2_im[6] = out0_im_3[6][26:13];
  assign state_after_H2_re[7] = out0_re_3[7][26:13];
  assign state_after_H2_im[7] = out0_im_3[7][26:13];

  assign selector_out_re_41[0] = state_after_H2_re[0];
  assign selector_out_re_41[1] = state_after_H2_re[1];
  assign selector_out_re_41[2] = state_after_H2_re[2];
  assign selector_out_re_41[3] = state_after_H2_re[3];
  assign selector_out_re_41[4] = state_after_H2_re[4];
  assign selector_out_re_41[5] = state_after_H2_re[5];
  assign selector_out_re_41[6] = state_after_H2_re[6];
  assign selector_out_re_41[7] = state_after_H2_re[7];
  assign selector_out_re_41[8] = state_after_H2_re[0];
  assign selector_out_re_41[9] = state_after_H2_re[1];
  assign selector_out_re_41[10] = state_after_H2_re[2];
  assign selector_out_re_41[11] = state_after_H2_re[3];
  assign selector_out_re_41[12] = state_after_H2_re[4];
  assign selector_out_re_41[13] = state_after_H2_re[5];
  assign selector_out_re_41[14] = state_after_H2_re[6];
  assign selector_out_re_41[15] = state_after_H2_re[7];
  assign selector_out_re_41[16] = state_after_H2_re[0];
  assign selector_out_re_41[17] = state_after_H2_re[1];
  assign selector_out_re_41[18] = state_after_H2_re[2];
  assign selector_out_re_41[19] = state_after_H2_re[3];
  assign selector_out_re_41[20] = state_after_H2_re[4];
  assign selector_out_re_41[21] = state_after_H2_re[5];
  assign selector_out_re_41[22] = state_after_H2_re[6];
  assign selector_out_re_41[23] = state_after_H2_re[7];
  assign selector_out_re_41[24] = state_after_H2_re[0];
  assign selector_out_re_41[25] = state_after_H2_re[1];
  assign selector_out_re_41[26] = state_after_H2_re[2];
  assign selector_out_re_41[27] = state_after_H2_re[3];
  assign selector_out_re_41[28] = state_after_H2_re[4];
  assign selector_out_re_41[29] = state_after_H2_re[5];
  assign selector_out_re_41[30] = state_after_H2_re[6];
  assign selector_out_re_41[31] = state_after_H2_re[7];
  assign selector_out_re_41[32] = state_after_H2_re[0];
  assign selector_out_re_41[33] = state_after_H2_re[1];
  assign selector_out_re_41[34] = state_after_H2_re[2];
  assign selector_out_re_41[35] = state_after_H2_re[3];
  assign selector_out_re_41[36] = state_after_H2_re[4];
  assign selector_out_re_41[37] = state_after_H2_re[5];
  assign selector_out_re_41[38] = state_after_H2_re[6];
  assign selector_out_re_41[39] = state_after_H2_re[7];
  assign selector_out_re_41[40] = state_after_H2_re[0];
  assign selector_out_re_41[41] = state_after_H2_re[1];
  assign selector_out_re_41[42] = state_after_H2_re[2];
  assign selector_out_re_41[43] = state_after_H2_re[3];
  assign selector_out_re_41[44] = state_after_H2_re[4];
  assign selector_out_re_41[45] = state_after_H2_re[5];
  assign selector_out_re_41[46] = state_after_H2_re[6];
  assign selector_out_re_41[47] = state_after_H2_re[7];
  assign selector_out_re_41[48] = state_after_H2_re[0];
  assign selector_out_re_41[49] = state_after_H2_re[1];
  assign selector_out_re_41[50] = state_after_H2_re[2];
  assign selector_out_re_41[51] = state_after_H2_re[3];
  assign selector_out_re_41[52] = state_after_H2_re[4];
  assign selector_out_re_41[53] = state_after_H2_re[5];
  assign selector_out_re_41[54] = state_after_H2_re[6];
  assign selector_out_re_41[55] = state_after_H2_re[7];
  assign selector_out_re_41[56] = state_after_H2_re[0];
  assign selector_out_re_41[57] = state_after_H2_re[1];
  assign selector_out_re_41[58] = state_after_H2_re[2];
  assign selector_out_re_41[59] = state_after_H2_re[3];
  assign selector_out_re_41[60] = state_after_H2_re[4];
  assign selector_out_re_41[61] = state_after_H2_re[5];
  assign selector_out_re_41[62] = state_after_H2_re[6];
  assign selector_out_re_41[63] = state_after_H2_re[7];

  assign selector_out_im_41[0] = state_after_H2_im[0];
  assign selector_out_im_41[1] = state_after_H2_im[1];
  assign selector_out_im_41[2] = state_after_H2_im[2];
  assign selector_out_im_41[3] = state_after_H2_im[3];
  assign selector_out_im_41[4] = state_after_H2_im[4];
  assign selector_out_im_41[5] = state_after_H2_im[5];
  assign selector_out_im_41[6] = state_after_H2_im[6];
  assign selector_out_im_41[7] = state_after_H2_im[7];
  assign selector_out_im_41[8] = state_after_H2_im[0];
  assign selector_out_im_41[9] = state_after_H2_im[1];
  assign selector_out_im_41[10] = state_after_H2_im[2];
  assign selector_out_im_41[11] = state_after_H2_im[3];
  assign selector_out_im_41[12] = state_after_H2_im[4];
  assign selector_out_im_41[13] = state_after_H2_im[5];
  assign selector_out_im_41[14] = state_after_H2_im[6];
  assign selector_out_im_41[15] = state_after_H2_im[7];
  assign selector_out_im_41[16] = state_after_H2_im[0];
  assign selector_out_im_41[17] = state_after_H2_im[1];
  assign selector_out_im_41[18] = state_after_H2_im[2];
  assign selector_out_im_41[19] = state_after_H2_im[3];
  assign selector_out_im_41[20] = state_after_H2_im[4];
  assign selector_out_im_41[21] = state_after_H2_im[5];
  assign selector_out_im_41[22] = state_after_H2_im[6];
  assign selector_out_im_41[23] = state_after_H2_im[7];
  assign selector_out_im_41[24] = state_after_H2_im[0];
  assign selector_out_im_41[25] = state_after_H2_im[1];
  assign selector_out_im_41[26] = state_after_H2_im[2];
  assign selector_out_im_41[27] = state_after_H2_im[3];
  assign selector_out_im_41[28] = state_after_H2_im[4];
  assign selector_out_im_41[29] = state_after_H2_im[5];
  assign selector_out_im_41[30] = state_after_H2_im[6];
  assign selector_out_im_41[31] = state_after_H2_im[7];
  assign selector_out_im_41[32] = state_after_H2_im[0];
  assign selector_out_im_41[33] = state_after_H2_im[1];
  assign selector_out_im_41[34] = state_after_H2_im[2];
  assign selector_out_im_41[35] = state_after_H2_im[3];
  assign selector_out_im_41[36] = state_after_H2_im[4];
  assign selector_out_im_41[37] = state_after_H2_im[5];
  assign selector_out_im_41[38] = state_after_H2_im[6];
  assign selector_out_im_41[39] = state_after_H2_im[7];
  assign selector_out_im_41[40] = state_after_H2_im[0];
  assign selector_out_im_41[41] = state_after_H2_im[1];
  assign selector_out_im_41[42] = state_after_H2_im[2];
  assign selector_out_im_41[43] = state_after_H2_im[3];
  assign selector_out_im_41[44] = state_after_H2_im[4];
  assign selector_out_im_41[45] = state_after_H2_im[5];
  assign selector_out_im_41[46] = state_after_H2_im[6];
  assign selector_out_im_41[47] = state_after_H2_im[7];
  assign selector_out_im_41[48] = state_after_H2_im[0];
  assign selector_out_im_41[49] = state_after_H2_im[1];
  assign selector_out_im_41[50] = state_after_H2_im[2];
  assign selector_out_im_41[51] = state_after_H2_im[3];
  assign selector_out_im_41[52] = state_after_H2_im[4];
  assign selector_out_im_41[53] = state_after_H2_im[5];
  assign selector_out_im_41[54] = state_after_H2_im[6];
  assign selector_out_im_41[55] = state_after_H2_im[7];
  assign selector_out_im_41[56] = state_after_H2_im[0];
  assign selector_out_im_41[57] = state_after_H2_im[1];
  assign selector_out_im_41[58] = state_after_H2_im[2];
  assign selector_out_im_41[59] = state_after_H2_im[3];
  assign selector_out_im_41[60] = state_after_H2_im[4];
  assign selector_out_im_41[61] = state_after_H2_im[5];
  assign selector_out_im_41[62] = state_after_H2_im[6];
  assign selector_out_im_41[63] = state_after_H2_im[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign alpha_re_19[0] = selector_out_re_41[0];
  assign alpha_im_19[0] = selector_out_im_41[0];
  assign alpha_re_19[1] = selector_out_re_41[1];
  assign alpha_im_19[1] = selector_out_im_41[1];
  assign alpha_re_19[2] = selector_out_re_41[2];
  assign alpha_im_19[2] = selector_out_im_41[2];
  assign alpha_re_19[3] = selector_out_re_41[3];
  assign alpha_im_19[3] = selector_out_im_41[3];
  assign alpha_re_19[4] = selector_out_re_41[4];
  assign alpha_im_19[4] = selector_out_im_41[4];
  assign alpha_re_19[5] = selector_out_re_41[5];
  assign alpha_im_19[5] = selector_out_im_41[5];
  assign alpha_re_19[6] = selector_out_re_41[6];
  assign alpha_im_19[6] = selector_out_im_41[6];
  assign alpha_re_19[7] = selector_out_re_41[7];
  assign alpha_im_19[7] = selector_out_im_41[7];
  assign alpha_re_19[8] = selector_out_re_41[8];
  assign alpha_im_19[8] = selector_out_im_41[8];
  assign alpha_re_19[9] = selector_out_re_41[9];
  assign alpha_im_19[9] = selector_out_im_41[9];
  assign alpha_re_19[10] = selector_out_re_41[10];
  assign alpha_im_19[10] = selector_out_im_41[10];
  assign alpha_re_19[11] = selector_out_re_41[11];
  assign alpha_im_19[11] = selector_out_im_41[11];
  assign alpha_re_19[12] = selector_out_re_41[12];
  assign alpha_im_19[12] = selector_out_im_41[12];
  assign alpha_re_19[13] = selector_out_re_41[13];
  assign alpha_im_19[13] = selector_out_im_41[13];
  assign alpha_re_19[14] = selector_out_re_41[14];
  assign alpha_im_19[14] = selector_out_im_41[14];
  assign alpha_re_19[15] = selector_out_re_41[15];
  assign alpha_im_19[15] = selector_out_im_41[15];
  assign alpha_re_19[16] = selector_out_re_41[16];
  assign alpha_im_19[16] = selector_out_im_41[16];
  assign alpha_re_19[17] = selector_out_re_41[17];
  assign alpha_im_19[17] = selector_out_im_41[17];
  assign alpha_re_19[18] = selector_out_re_41[18];
  assign alpha_im_19[18] = selector_out_im_41[18];
  assign alpha_re_19[19] = selector_out_re_41[19];
  assign alpha_im_19[19] = selector_out_im_41[19];
  assign alpha_re_19[20] = selector_out_re_41[20];
  assign alpha_im_19[20] = selector_out_im_41[20];
  assign alpha_re_19[21] = selector_out_re_41[21];
  assign alpha_im_19[21] = selector_out_im_41[21];
  assign alpha_re_19[22] = selector_out_re_41[22];
  assign alpha_im_19[22] = selector_out_im_41[22];
  assign alpha_re_19[23] = selector_out_re_41[23];
  assign alpha_im_19[23] = selector_out_im_41[23];
  assign alpha_re_19[24] = selector_out_re_41[24];
  assign alpha_im_19[24] = selector_out_im_41[24];
  assign alpha_re_19[25] = selector_out_re_41[25];
  assign alpha_im_19[25] = selector_out_im_41[25];
  assign alpha_re_19[26] = selector_out_re_41[26];
  assign alpha_im_19[26] = selector_out_im_41[26];
  assign alpha_re_19[27] = selector_out_re_41[27];
  assign alpha_im_19[27] = selector_out_im_41[27];
  assign alpha_re_19[28] = selector_out_re_41[28];
  assign alpha_im_19[28] = selector_out_im_41[28];
  assign alpha_re_19[29] = selector_out_re_41[29];
  assign alpha_im_19[29] = selector_out_im_41[29];
  assign alpha_re_19[30] = selector_out_re_41[30];
  assign alpha_im_19[30] = selector_out_im_41[30];
  assign alpha_re_19[31] = selector_out_re_41[31];
  assign alpha_im_19[31] = selector_out_im_41[31];
  assign alpha_re_19[32] = selector_out_re_41[32];
  assign alpha_im_19[32] = selector_out_im_41[32];
  assign alpha_re_19[33] = selector_out_re_41[33];
  assign alpha_im_19[33] = selector_out_im_41[33];
  assign alpha_re_19[34] = selector_out_re_41[34];
  assign alpha_im_19[34] = selector_out_im_41[34];
  assign alpha_re_19[35] = selector_out_re_41[35];
  assign alpha_im_19[35] = selector_out_im_41[35];
  assign alpha_re_19[36] = selector_out_re_41[36];
  assign alpha_im_19[36] = selector_out_im_41[36];
  assign alpha_re_19[37] = selector_out_re_41[37];
  assign alpha_im_19[37] = selector_out_im_41[37];
  assign alpha_re_19[38] = selector_out_re_41[38];
  assign alpha_im_19[38] = selector_out_im_41[38];
  assign alpha_re_19[39] = selector_out_re_41[39];
  assign alpha_im_19[39] = selector_out_im_41[39];
  assign alpha_re_19[40] = selector_out_re_41[40];
  assign alpha_im_19[40] = selector_out_im_41[40];
  assign alpha_re_19[41] = selector_out_re_41[41];
  assign alpha_im_19[41] = selector_out_im_41[41];
  assign alpha_re_19[42] = selector_out_re_41[42];
  assign alpha_im_19[42] = selector_out_im_41[42];
  assign alpha_re_19[43] = selector_out_re_41[43];
  assign alpha_im_19[43] = selector_out_im_41[43];
  assign alpha_re_19[44] = selector_out_re_41[44];
  assign alpha_im_19[44] = selector_out_im_41[44];
  assign alpha_re_19[45] = selector_out_re_41[45];
  assign alpha_im_19[45] = selector_out_im_41[45];
  assign alpha_re_19[46] = selector_out_re_41[46];
  assign alpha_im_19[46] = selector_out_im_41[46];
  assign alpha_re_19[47] = selector_out_re_41[47];
  assign alpha_im_19[47] = selector_out_im_41[47];
  assign alpha_re_19[48] = selector_out_re_41[48];
  assign alpha_im_19[48] = selector_out_im_41[48];
  assign alpha_re_19[49] = selector_out_re_41[49];
  assign alpha_im_19[49] = selector_out_im_41[49];
  assign alpha_re_19[50] = selector_out_re_41[50];
  assign alpha_im_19[50] = selector_out_im_41[50];
  assign alpha_re_19[51] = selector_out_re_41[51];
  assign alpha_im_19[51] = selector_out_im_41[51];
  assign alpha_re_19[52] = selector_out_re_41[52];
  assign alpha_im_19[52] = selector_out_im_41[52];
  assign alpha_re_19[53] = selector_out_re_41[53];
  assign alpha_im_19[53] = selector_out_im_41[53];
  assign alpha_re_19[54] = selector_out_re_41[54];
  assign alpha_im_19[54] = selector_out_im_41[54];
  assign alpha_re_19[55] = selector_out_re_41[55];
  assign alpha_im_19[55] = selector_out_im_41[55];
  assign alpha_re_19[56] = selector_out_re_41[56];
  assign alpha_im_19[56] = selector_out_im_41[56];
  assign alpha_re_19[57] = selector_out_re_41[57];
  assign alpha_im_19[57] = selector_out_im_41[57];
  assign alpha_re_19[58] = selector_out_re_41[58];
  assign alpha_im_19[58] = selector_out_im_41[58];
  assign alpha_re_19[59] = selector_out_re_41[59];
  assign alpha_im_19[59] = selector_out_im_41[59];
  assign alpha_re_19[60] = selector_out_re_41[60];
  assign alpha_im_19[60] = selector_out_im_41[60];
  assign alpha_re_19[61] = selector_out_re_41[61];
  assign alpha_im_19[61] = selector_out_im_41[61];
  assign alpha_re_19[62] = selector_out_re_41[62];
  assign alpha_im_19[62] = selector_out_im_41[62];
  assign alpha_re_19[63] = selector_out_re_41[63];
  assign alpha_im_19[63] = selector_out_im_41[63];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_dot_product2_in0_re[0] = (alpha_re_3[0] == 1'b1 ? alpha_re_19[0] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[0] = {MMul_dot_product2_in0_re[0][13], MMul_dot_product2_in0_re[0]};
  assign MMul_dot_product2_sub_cast_1[0] = {{4{MMul_dot_product2_sub_cast[0][14]}}, MMul_dot_product2_sub_cast[0]};
  assign MMul_dot_product2_in0_im[0] = (alpha_im_3[0] == 1'b1 ? alpha_im_19[0] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[0] = {MMul_dot_product2_in0_im[0][13], MMul_dot_product2_in0_im[0]};
  assign MMul_dot_product2_sub_cast_3[0] = {{4{MMul_dot_product2_sub_cast_2[0][14]}}, MMul_dot_product2_sub_cast_2[0]};
  assign MMul_dot_product_out_re_4[0] = MMul_dot_product2_sub_cast_1[0] - MMul_dot_product2_sub_cast_3[0];
  assign MMul_dot_product2_in0_im_1[0] = (alpha_im_3[0] == 1'b1 ? alpha_re_19[0] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[0] = {MMul_dot_product2_in0_im_1[0][13], MMul_dot_product2_in0_im_1[0]};
  assign MMul_dot_product2_add_cast_1[0] = {{4{MMul_dot_product2_add_cast[0][14]}}, MMul_dot_product2_add_cast[0]};
  assign MMul_dot_product2_in0_re_1[0] = (alpha_re_3[0] == 1'b1 ? alpha_im_19[0] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[0] = {MMul_dot_product2_in0_re_1[0][13], MMul_dot_product2_in0_re_1[0]};
  assign MMul_dot_product2_add_cast_3[0] = {{4{MMul_dot_product2_add_cast_2[0][14]}}, MMul_dot_product2_add_cast_2[0]};
  assign MMul_dot_product_out_im_4[0] = MMul_dot_product2_add_cast_1[0] + MMul_dot_product2_add_cast_3[0];
  assign MMul_dot_product2_in0_re[1] = (alpha_re_3[1] == 1'b1 ? alpha_re_19[1] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[1] = {MMul_dot_product2_in0_re[1][13], MMul_dot_product2_in0_re[1]};
  assign MMul_dot_product2_sub_cast_1[1] = {{4{MMul_dot_product2_sub_cast[1][14]}}, MMul_dot_product2_sub_cast[1]};
  assign MMul_dot_product2_in0_im[1] = (alpha_im_3[1] == 1'b1 ? alpha_im_19[1] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[1] = {MMul_dot_product2_in0_im[1][13], MMul_dot_product2_in0_im[1]};
  assign MMul_dot_product2_sub_cast_3[1] = {{4{MMul_dot_product2_sub_cast_2[1][14]}}, MMul_dot_product2_sub_cast_2[1]};
  assign MMul_dot_product_out_re_4[1] = MMul_dot_product2_sub_cast_1[1] - MMul_dot_product2_sub_cast_3[1];
  assign MMul_dot_product2_in0_im_1[1] = (alpha_im_3[1] == 1'b1 ? alpha_re_19[1] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[1] = {MMul_dot_product2_in0_im_1[1][13], MMul_dot_product2_in0_im_1[1]};
  assign MMul_dot_product2_add_cast_1[1] = {{4{MMul_dot_product2_add_cast[1][14]}}, MMul_dot_product2_add_cast[1]};
  assign MMul_dot_product2_in0_re_1[1] = (alpha_re_3[1] == 1'b1 ? alpha_im_19[1] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[1] = {MMul_dot_product2_in0_re_1[1][13], MMul_dot_product2_in0_re_1[1]};
  assign MMul_dot_product2_add_cast_3[1] = {{4{MMul_dot_product2_add_cast_2[1][14]}}, MMul_dot_product2_add_cast_2[1]};
  assign MMul_dot_product_out_im_4[1] = MMul_dot_product2_add_cast_1[1] + MMul_dot_product2_add_cast_3[1];
  assign MMul_dot_product2_in0_re[2] = (alpha_re_3[2] == 1'b1 ? alpha_re_19[2] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[2] = {MMul_dot_product2_in0_re[2][13], MMul_dot_product2_in0_re[2]};
  assign MMul_dot_product2_sub_cast_1[2] = {{4{MMul_dot_product2_sub_cast[2][14]}}, MMul_dot_product2_sub_cast[2]};
  assign MMul_dot_product2_in0_im[2] = (alpha_im_3[2] == 1'b1 ? alpha_im_19[2] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[2] = {MMul_dot_product2_in0_im[2][13], MMul_dot_product2_in0_im[2]};
  assign MMul_dot_product2_sub_cast_3[2] = {{4{MMul_dot_product2_sub_cast_2[2][14]}}, MMul_dot_product2_sub_cast_2[2]};
  assign MMul_dot_product_out_re_4[2] = MMul_dot_product2_sub_cast_1[2] - MMul_dot_product2_sub_cast_3[2];
  assign MMul_dot_product2_in0_im_1[2] = (alpha_im_3[2] == 1'b1 ? alpha_re_19[2] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[2] = {MMul_dot_product2_in0_im_1[2][13], MMul_dot_product2_in0_im_1[2]};
  assign MMul_dot_product2_add_cast_1[2] = {{4{MMul_dot_product2_add_cast[2][14]}}, MMul_dot_product2_add_cast[2]};
  assign MMul_dot_product2_in0_re_1[2] = (alpha_re_3[2] == 1'b1 ? alpha_im_19[2] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[2] = {MMul_dot_product2_in0_re_1[2][13], MMul_dot_product2_in0_re_1[2]};
  assign MMul_dot_product2_add_cast_3[2] = {{4{MMul_dot_product2_add_cast_2[2][14]}}, MMul_dot_product2_add_cast_2[2]};
  assign MMul_dot_product_out_im_4[2] = MMul_dot_product2_add_cast_1[2] + MMul_dot_product2_add_cast_3[2];
  assign MMul_dot_product2_in0_re[3] = (alpha_re_3[3] == 1'b1 ? alpha_re_19[3] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[3] = {MMul_dot_product2_in0_re[3][13], MMul_dot_product2_in0_re[3]};
  assign MMul_dot_product2_sub_cast_1[3] = {{4{MMul_dot_product2_sub_cast[3][14]}}, MMul_dot_product2_sub_cast[3]};
  assign MMul_dot_product2_in0_im[3] = (alpha_im_3[3] == 1'b1 ? alpha_im_19[3] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[3] = {MMul_dot_product2_in0_im[3][13], MMul_dot_product2_in0_im[3]};
  assign MMul_dot_product2_sub_cast_3[3] = {{4{MMul_dot_product2_sub_cast_2[3][14]}}, MMul_dot_product2_sub_cast_2[3]};
  assign MMul_dot_product_out_re_4[3] = MMul_dot_product2_sub_cast_1[3] - MMul_dot_product2_sub_cast_3[3];
  assign MMul_dot_product2_in0_im_1[3] = (alpha_im_3[3] == 1'b1 ? alpha_re_19[3] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[3] = {MMul_dot_product2_in0_im_1[3][13], MMul_dot_product2_in0_im_1[3]};
  assign MMul_dot_product2_add_cast_1[3] = {{4{MMul_dot_product2_add_cast[3][14]}}, MMul_dot_product2_add_cast[3]};
  assign MMul_dot_product2_in0_re_1[3] = (alpha_re_3[3] == 1'b1 ? alpha_im_19[3] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[3] = {MMul_dot_product2_in0_re_1[3][13], MMul_dot_product2_in0_re_1[3]};
  assign MMul_dot_product2_add_cast_3[3] = {{4{MMul_dot_product2_add_cast_2[3][14]}}, MMul_dot_product2_add_cast_2[3]};
  assign MMul_dot_product_out_im_4[3] = MMul_dot_product2_add_cast_1[3] + MMul_dot_product2_add_cast_3[3];
  assign MMul_dot_product2_in0_re[4] = (alpha_re_3[4] == 1'b1 ? alpha_re_19[4] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[4] = {MMul_dot_product2_in0_re[4][13], MMul_dot_product2_in0_re[4]};
  assign MMul_dot_product2_sub_cast_1[4] = {{4{MMul_dot_product2_sub_cast[4][14]}}, MMul_dot_product2_sub_cast[4]};
  assign MMul_dot_product2_in0_im[4] = (alpha_im_3[4] == 1'b1 ? alpha_im_19[4] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[4] = {MMul_dot_product2_in0_im[4][13], MMul_dot_product2_in0_im[4]};
  assign MMul_dot_product2_sub_cast_3[4] = {{4{MMul_dot_product2_sub_cast_2[4][14]}}, MMul_dot_product2_sub_cast_2[4]};
  assign MMul_dot_product_out_re_4[4] = MMul_dot_product2_sub_cast_1[4] - MMul_dot_product2_sub_cast_3[4];
  assign MMul_dot_product2_in0_im_1[4] = (alpha_im_3[4] == 1'b1 ? alpha_re_19[4] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[4] = {MMul_dot_product2_in0_im_1[4][13], MMul_dot_product2_in0_im_1[4]};
  assign MMul_dot_product2_add_cast_1[4] = {{4{MMul_dot_product2_add_cast[4][14]}}, MMul_dot_product2_add_cast[4]};
  assign MMul_dot_product2_in0_re_1[4] = (alpha_re_3[4] == 1'b1 ? alpha_im_19[4] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[4] = {MMul_dot_product2_in0_re_1[4][13], MMul_dot_product2_in0_re_1[4]};
  assign MMul_dot_product2_add_cast_3[4] = {{4{MMul_dot_product2_add_cast_2[4][14]}}, MMul_dot_product2_add_cast_2[4]};
  assign MMul_dot_product_out_im_4[4] = MMul_dot_product2_add_cast_1[4] + MMul_dot_product2_add_cast_3[4];
  assign MMul_dot_product2_in0_re[5] = (alpha_re_3[5] == 1'b1 ? alpha_re_19[5] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[5] = {MMul_dot_product2_in0_re[5][13], MMul_dot_product2_in0_re[5]};
  assign MMul_dot_product2_sub_cast_1[5] = {{4{MMul_dot_product2_sub_cast[5][14]}}, MMul_dot_product2_sub_cast[5]};
  assign MMul_dot_product2_in0_im[5] = (alpha_im_3[5] == 1'b1 ? alpha_im_19[5] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[5] = {MMul_dot_product2_in0_im[5][13], MMul_dot_product2_in0_im[5]};
  assign MMul_dot_product2_sub_cast_3[5] = {{4{MMul_dot_product2_sub_cast_2[5][14]}}, MMul_dot_product2_sub_cast_2[5]};
  assign MMul_dot_product_out_re_4[5] = MMul_dot_product2_sub_cast_1[5] - MMul_dot_product2_sub_cast_3[5];
  assign MMul_dot_product2_in0_im_1[5] = (alpha_im_3[5] == 1'b1 ? alpha_re_19[5] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[5] = {MMul_dot_product2_in0_im_1[5][13], MMul_dot_product2_in0_im_1[5]};
  assign MMul_dot_product2_add_cast_1[5] = {{4{MMul_dot_product2_add_cast[5][14]}}, MMul_dot_product2_add_cast[5]};
  assign MMul_dot_product2_in0_re_1[5] = (alpha_re_3[5] == 1'b1 ? alpha_im_19[5] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[5] = {MMul_dot_product2_in0_re_1[5][13], MMul_dot_product2_in0_re_1[5]};
  assign MMul_dot_product2_add_cast_3[5] = {{4{MMul_dot_product2_add_cast_2[5][14]}}, MMul_dot_product2_add_cast_2[5]};
  assign MMul_dot_product_out_im_4[5] = MMul_dot_product2_add_cast_1[5] + MMul_dot_product2_add_cast_3[5];
  assign MMul_dot_product2_in0_re[6] = (alpha_re_3[6] == 1'b1 ? alpha_re_19[6] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[6] = {MMul_dot_product2_in0_re[6][13], MMul_dot_product2_in0_re[6]};
  assign MMul_dot_product2_sub_cast_1[6] = {{4{MMul_dot_product2_sub_cast[6][14]}}, MMul_dot_product2_sub_cast[6]};
  assign MMul_dot_product2_in0_im[6] = (alpha_im_3[6] == 1'b1 ? alpha_im_19[6] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[6] = {MMul_dot_product2_in0_im[6][13], MMul_dot_product2_in0_im[6]};
  assign MMul_dot_product2_sub_cast_3[6] = {{4{MMul_dot_product2_sub_cast_2[6][14]}}, MMul_dot_product2_sub_cast_2[6]};
  assign MMul_dot_product_out_re_4[6] = MMul_dot_product2_sub_cast_1[6] - MMul_dot_product2_sub_cast_3[6];
  assign MMul_dot_product2_in0_im_1[6] = (alpha_im_3[6] == 1'b1 ? alpha_re_19[6] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[6] = {MMul_dot_product2_in0_im_1[6][13], MMul_dot_product2_in0_im_1[6]};
  assign MMul_dot_product2_add_cast_1[6] = {{4{MMul_dot_product2_add_cast[6][14]}}, MMul_dot_product2_add_cast[6]};
  assign MMul_dot_product2_in0_re_1[6] = (alpha_re_3[6] == 1'b1 ? alpha_im_19[6] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[6] = {MMul_dot_product2_in0_re_1[6][13], MMul_dot_product2_in0_re_1[6]};
  assign MMul_dot_product2_add_cast_3[6] = {{4{MMul_dot_product2_add_cast_2[6][14]}}, MMul_dot_product2_add_cast_2[6]};
  assign MMul_dot_product_out_im_4[6] = MMul_dot_product2_add_cast_1[6] + MMul_dot_product2_add_cast_3[6];
  assign MMul_dot_product2_in0_re[7] = (alpha_re_3[7] == 1'b1 ? alpha_re_19[7] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[7] = {MMul_dot_product2_in0_re[7][13], MMul_dot_product2_in0_re[7]};
  assign MMul_dot_product2_sub_cast_1[7] = {{4{MMul_dot_product2_sub_cast[7][14]}}, MMul_dot_product2_sub_cast[7]};
  assign MMul_dot_product2_in0_im[7] = (alpha_im_3[7] == 1'b1 ? alpha_im_19[7] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[7] = {MMul_dot_product2_in0_im[7][13], MMul_dot_product2_in0_im[7]};
  assign MMul_dot_product2_sub_cast_3[7] = {{4{MMul_dot_product2_sub_cast_2[7][14]}}, MMul_dot_product2_sub_cast_2[7]};
  assign MMul_dot_product_out_re_4[7] = MMul_dot_product2_sub_cast_1[7] - MMul_dot_product2_sub_cast_3[7];
  assign MMul_dot_product2_in0_im_1[7] = (alpha_im_3[7] == 1'b1 ? alpha_re_19[7] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[7] = {MMul_dot_product2_in0_im_1[7][13], MMul_dot_product2_in0_im_1[7]};
  assign MMul_dot_product2_add_cast_1[7] = {{4{MMul_dot_product2_add_cast[7][14]}}, MMul_dot_product2_add_cast[7]};
  assign MMul_dot_product2_in0_re_1[7] = (alpha_re_3[7] == 1'b1 ? alpha_im_19[7] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[7] = {MMul_dot_product2_in0_re_1[7][13], MMul_dot_product2_in0_re_1[7]};
  assign MMul_dot_product2_add_cast_3[7] = {{4{MMul_dot_product2_add_cast_2[7][14]}}, MMul_dot_product2_add_cast_2[7]};
  assign MMul_dot_product_out_im_4[7] = MMul_dot_product2_add_cast_1[7] + MMul_dot_product2_add_cast_3[7];
  assign MMul_dot_product2_in0_re[8] = (alpha_re_3[8] == 1'b1 ? alpha_re_19[8] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[8] = {MMul_dot_product2_in0_re[8][13], MMul_dot_product2_in0_re[8]};
  assign MMul_dot_product2_sub_cast_1[8] = {{4{MMul_dot_product2_sub_cast[8][14]}}, MMul_dot_product2_sub_cast[8]};
  assign MMul_dot_product2_in0_im[8] = (alpha_im_3[8] == 1'b1 ? alpha_im_19[8] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[8] = {MMul_dot_product2_in0_im[8][13], MMul_dot_product2_in0_im[8]};
  assign MMul_dot_product2_sub_cast_3[8] = {{4{MMul_dot_product2_sub_cast_2[8][14]}}, MMul_dot_product2_sub_cast_2[8]};
  assign MMul_dot_product_out_re_4[8] = MMul_dot_product2_sub_cast_1[8] - MMul_dot_product2_sub_cast_3[8];
  assign MMul_dot_product2_in0_im_1[8] = (alpha_im_3[8] == 1'b1 ? alpha_re_19[8] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[8] = {MMul_dot_product2_in0_im_1[8][13], MMul_dot_product2_in0_im_1[8]};
  assign MMul_dot_product2_add_cast_1[8] = {{4{MMul_dot_product2_add_cast[8][14]}}, MMul_dot_product2_add_cast[8]};
  assign MMul_dot_product2_in0_re_1[8] = (alpha_re_3[8] == 1'b1 ? alpha_im_19[8] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[8] = {MMul_dot_product2_in0_re_1[8][13], MMul_dot_product2_in0_re_1[8]};
  assign MMul_dot_product2_add_cast_3[8] = {{4{MMul_dot_product2_add_cast_2[8][14]}}, MMul_dot_product2_add_cast_2[8]};
  assign MMul_dot_product_out_im_4[8] = MMul_dot_product2_add_cast_1[8] + MMul_dot_product2_add_cast_3[8];
  assign MMul_dot_product2_in0_re[9] = (alpha_re_3[9] == 1'b1 ? alpha_re_19[9] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[9] = {MMul_dot_product2_in0_re[9][13], MMul_dot_product2_in0_re[9]};
  assign MMul_dot_product2_sub_cast_1[9] = {{4{MMul_dot_product2_sub_cast[9][14]}}, MMul_dot_product2_sub_cast[9]};
  assign MMul_dot_product2_in0_im[9] = (alpha_im_3[9] == 1'b1 ? alpha_im_19[9] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[9] = {MMul_dot_product2_in0_im[9][13], MMul_dot_product2_in0_im[9]};
  assign MMul_dot_product2_sub_cast_3[9] = {{4{MMul_dot_product2_sub_cast_2[9][14]}}, MMul_dot_product2_sub_cast_2[9]};
  assign MMul_dot_product_out_re_4[9] = MMul_dot_product2_sub_cast_1[9] - MMul_dot_product2_sub_cast_3[9];
  assign MMul_dot_product2_in0_im_1[9] = (alpha_im_3[9] == 1'b1 ? alpha_re_19[9] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[9] = {MMul_dot_product2_in0_im_1[9][13], MMul_dot_product2_in0_im_1[9]};
  assign MMul_dot_product2_add_cast_1[9] = {{4{MMul_dot_product2_add_cast[9][14]}}, MMul_dot_product2_add_cast[9]};
  assign MMul_dot_product2_in0_re_1[9] = (alpha_re_3[9] == 1'b1 ? alpha_im_19[9] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[9] = {MMul_dot_product2_in0_re_1[9][13], MMul_dot_product2_in0_re_1[9]};
  assign MMul_dot_product2_add_cast_3[9] = {{4{MMul_dot_product2_add_cast_2[9][14]}}, MMul_dot_product2_add_cast_2[9]};
  assign MMul_dot_product_out_im_4[9] = MMul_dot_product2_add_cast_1[9] + MMul_dot_product2_add_cast_3[9];
  assign MMul_dot_product2_in0_re[10] = (alpha_re_3[10] == 1'b1 ? alpha_re_19[10] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[10] = {MMul_dot_product2_in0_re[10][13], MMul_dot_product2_in0_re[10]};
  assign MMul_dot_product2_sub_cast_1[10] = {{4{MMul_dot_product2_sub_cast[10][14]}}, MMul_dot_product2_sub_cast[10]};
  assign MMul_dot_product2_in0_im[10] = (alpha_im_3[10] == 1'b1 ? alpha_im_19[10] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[10] = {MMul_dot_product2_in0_im[10][13], MMul_dot_product2_in0_im[10]};
  assign MMul_dot_product2_sub_cast_3[10] = {{4{MMul_dot_product2_sub_cast_2[10][14]}}, MMul_dot_product2_sub_cast_2[10]};
  assign MMul_dot_product_out_re_4[10] = MMul_dot_product2_sub_cast_1[10] - MMul_dot_product2_sub_cast_3[10];
  assign MMul_dot_product2_in0_im_1[10] = (alpha_im_3[10] == 1'b1 ? alpha_re_19[10] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[10] = {MMul_dot_product2_in0_im_1[10][13], MMul_dot_product2_in0_im_1[10]};
  assign MMul_dot_product2_add_cast_1[10] = {{4{MMul_dot_product2_add_cast[10][14]}}, MMul_dot_product2_add_cast[10]};
  assign MMul_dot_product2_in0_re_1[10] = (alpha_re_3[10] == 1'b1 ? alpha_im_19[10] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[10] = {MMul_dot_product2_in0_re_1[10][13], MMul_dot_product2_in0_re_1[10]};
  assign MMul_dot_product2_add_cast_3[10] = {{4{MMul_dot_product2_add_cast_2[10][14]}}, MMul_dot_product2_add_cast_2[10]};
  assign MMul_dot_product_out_im_4[10] = MMul_dot_product2_add_cast_1[10] + MMul_dot_product2_add_cast_3[10];
  assign MMul_dot_product2_in0_re[11] = (alpha_re_3[11] == 1'b1 ? alpha_re_19[11] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[11] = {MMul_dot_product2_in0_re[11][13], MMul_dot_product2_in0_re[11]};
  assign MMul_dot_product2_sub_cast_1[11] = {{4{MMul_dot_product2_sub_cast[11][14]}}, MMul_dot_product2_sub_cast[11]};
  assign MMul_dot_product2_in0_im[11] = (alpha_im_3[11] == 1'b1 ? alpha_im_19[11] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[11] = {MMul_dot_product2_in0_im[11][13], MMul_dot_product2_in0_im[11]};
  assign MMul_dot_product2_sub_cast_3[11] = {{4{MMul_dot_product2_sub_cast_2[11][14]}}, MMul_dot_product2_sub_cast_2[11]};
  assign MMul_dot_product_out_re_4[11] = MMul_dot_product2_sub_cast_1[11] - MMul_dot_product2_sub_cast_3[11];
  assign MMul_dot_product2_in0_im_1[11] = (alpha_im_3[11] == 1'b1 ? alpha_re_19[11] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[11] = {MMul_dot_product2_in0_im_1[11][13], MMul_dot_product2_in0_im_1[11]};
  assign MMul_dot_product2_add_cast_1[11] = {{4{MMul_dot_product2_add_cast[11][14]}}, MMul_dot_product2_add_cast[11]};
  assign MMul_dot_product2_in0_re_1[11] = (alpha_re_3[11] == 1'b1 ? alpha_im_19[11] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[11] = {MMul_dot_product2_in0_re_1[11][13], MMul_dot_product2_in0_re_1[11]};
  assign MMul_dot_product2_add_cast_3[11] = {{4{MMul_dot_product2_add_cast_2[11][14]}}, MMul_dot_product2_add_cast_2[11]};
  assign MMul_dot_product_out_im_4[11] = MMul_dot_product2_add_cast_1[11] + MMul_dot_product2_add_cast_3[11];
  assign MMul_dot_product2_in0_re[12] = (alpha_re_3[12] == 1'b1 ? alpha_re_19[12] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[12] = {MMul_dot_product2_in0_re[12][13], MMul_dot_product2_in0_re[12]};
  assign MMul_dot_product2_sub_cast_1[12] = {{4{MMul_dot_product2_sub_cast[12][14]}}, MMul_dot_product2_sub_cast[12]};
  assign MMul_dot_product2_in0_im[12] = (alpha_im_3[12] == 1'b1 ? alpha_im_19[12] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[12] = {MMul_dot_product2_in0_im[12][13], MMul_dot_product2_in0_im[12]};
  assign MMul_dot_product2_sub_cast_3[12] = {{4{MMul_dot_product2_sub_cast_2[12][14]}}, MMul_dot_product2_sub_cast_2[12]};
  assign MMul_dot_product_out_re_4[12] = MMul_dot_product2_sub_cast_1[12] - MMul_dot_product2_sub_cast_3[12];
  assign MMul_dot_product2_in0_im_1[12] = (alpha_im_3[12] == 1'b1 ? alpha_re_19[12] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[12] = {MMul_dot_product2_in0_im_1[12][13], MMul_dot_product2_in0_im_1[12]};
  assign MMul_dot_product2_add_cast_1[12] = {{4{MMul_dot_product2_add_cast[12][14]}}, MMul_dot_product2_add_cast[12]};
  assign MMul_dot_product2_in0_re_1[12] = (alpha_re_3[12] == 1'b1 ? alpha_im_19[12] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[12] = {MMul_dot_product2_in0_re_1[12][13], MMul_dot_product2_in0_re_1[12]};
  assign MMul_dot_product2_add_cast_3[12] = {{4{MMul_dot_product2_add_cast_2[12][14]}}, MMul_dot_product2_add_cast_2[12]};
  assign MMul_dot_product_out_im_4[12] = MMul_dot_product2_add_cast_1[12] + MMul_dot_product2_add_cast_3[12];
  assign MMul_dot_product2_in0_re[13] = (alpha_re_3[13] == 1'b1 ? alpha_re_19[13] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[13] = {MMul_dot_product2_in0_re[13][13], MMul_dot_product2_in0_re[13]};
  assign MMul_dot_product2_sub_cast_1[13] = {{4{MMul_dot_product2_sub_cast[13][14]}}, MMul_dot_product2_sub_cast[13]};
  assign MMul_dot_product2_in0_im[13] = (alpha_im_3[13] == 1'b1 ? alpha_im_19[13] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[13] = {MMul_dot_product2_in0_im[13][13], MMul_dot_product2_in0_im[13]};
  assign MMul_dot_product2_sub_cast_3[13] = {{4{MMul_dot_product2_sub_cast_2[13][14]}}, MMul_dot_product2_sub_cast_2[13]};
  assign MMul_dot_product_out_re_4[13] = MMul_dot_product2_sub_cast_1[13] - MMul_dot_product2_sub_cast_3[13];
  assign MMul_dot_product2_in0_im_1[13] = (alpha_im_3[13] == 1'b1 ? alpha_re_19[13] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[13] = {MMul_dot_product2_in0_im_1[13][13], MMul_dot_product2_in0_im_1[13]};
  assign MMul_dot_product2_add_cast_1[13] = {{4{MMul_dot_product2_add_cast[13][14]}}, MMul_dot_product2_add_cast[13]};
  assign MMul_dot_product2_in0_re_1[13] = (alpha_re_3[13] == 1'b1 ? alpha_im_19[13] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[13] = {MMul_dot_product2_in0_re_1[13][13], MMul_dot_product2_in0_re_1[13]};
  assign MMul_dot_product2_add_cast_3[13] = {{4{MMul_dot_product2_add_cast_2[13][14]}}, MMul_dot_product2_add_cast_2[13]};
  assign MMul_dot_product_out_im_4[13] = MMul_dot_product2_add_cast_1[13] + MMul_dot_product2_add_cast_3[13];
  assign MMul_dot_product2_in0_re[14] = (alpha_re_3[14] == 1'b1 ? alpha_re_19[14] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[14] = {MMul_dot_product2_in0_re[14][13], MMul_dot_product2_in0_re[14]};
  assign MMul_dot_product2_sub_cast_1[14] = {{4{MMul_dot_product2_sub_cast[14][14]}}, MMul_dot_product2_sub_cast[14]};
  assign MMul_dot_product2_in0_im[14] = (alpha_im_3[14] == 1'b1 ? alpha_im_19[14] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[14] = {MMul_dot_product2_in0_im[14][13], MMul_dot_product2_in0_im[14]};
  assign MMul_dot_product2_sub_cast_3[14] = {{4{MMul_dot_product2_sub_cast_2[14][14]}}, MMul_dot_product2_sub_cast_2[14]};
  assign MMul_dot_product_out_re_4[14] = MMul_dot_product2_sub_cast_1[14] - MMul_dot_product2_sub_cast_3[14];
  assign MMul_dot_product2_in0_im_1[14] = (alpha_im_3[14] == 1'b1 ? alpha_re_19[14] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[14] = {MMul_dot_product2_in0_im_1[14][13], MMul_dot_product2_in0_im_1[14]};
  assign MMul_dot_product2_add_cast_1[14] = {{4{MMul_dot_product2_add_cast[14][14]}}, MMul_dot_product2_add_cast[14]};
  assign MMul_dot_product2_in0_re_1[14] = (alpha_re_3[14] == 1'b1 ? alpha_im_19[14] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[14] = {MMul_dot_product2_in0_re_1[14][13], MMul_dot_product2_in0_re_1[14]};
  assign MMul_dot_product2_add_cast_3[14] = {{4{MMul_dot_product2_add_cast_2[14][14]}}, MMul_dot_product2_add_cast_2[14]};
  assign MMul_dot_product_out_im_4[14] = MMul_dot_product2_add_cast_1[14] + MMul_dot_product2_add_cast_3[14];
  assign MMul_dot_product2_in0_re[15] = (alpha_re_3[15] == 1'b1 ? alpha_re_19[15] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[15] = {MMul_dot_product2_in0_re[15][13], MMul_dot_product2_in0_re[15]};
  assign MMul_dot_product2_sub_cast_1[15] = {{4{MMul_dot_product2_sub_cast[15][14]}}, MMul_dot_product2_sub_cast[15]};
  assign MMul_dot_product2_in0_im[15] = (alpha_im_3[15] == 1'b1 ? alpha_im_19[15] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[15] = {MMul_dot_product2_in0_im[15][13], MMul_dot_product2_in0_im[15]};
  assign MMul_dot_product2_sub_cast_3[15] = {{4{MMul_dot_product2_sub_cast_2[15][14]}}, MMul_dot_product2_sub_cast_2[15]};
  assign MMul_dot_product_out_re_4[15] = MMul_dot_product2_sub_cast_1[15] - MMul_dot_product2_sub_cast_3[15];
  assign MMul_dot_product2_in0_im_1[15] = (alpha_im_3[15] == 1'b1 ? alpha_re_19[15] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[15] = {MMul_dot_product2_in0_im_1[15][13], MMul_dot_product2_in0_im_1[15]};
  assign MMul_dot_product2_add_cast_1[15] = {{4{MMul_dot_product2_add_cast[15][14]}}, MMul_dot_product2_add_cast[15]};
  assign MMul_dot_product2_in0_re_1[15] = (alpha_re_3[15] == 1'b1 ? alpha_im_19[15] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[15] = {MMul_dot_product2_in0_re_1[15][13], MMul_dot_product2_in0_re_1[15]};
  assign MMul_dot_product2_add_cast_3[15] = {{4{MMul_dot_product2_add_cast_2[15][14]}}, MMul_dot_product2_add_cast_2[15]};
  assign MMul_dot_product_out_im_4[15] = MMul_dot_product2_add_cast_1[15] + MMul_dot_product2_add_cast_3[15];
  assign MMul_dot_product2_in0_re[16] = (alpha_re_3[16] == 1'b1 ? alpha_re_19[16] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[16] = {MMul_dot_product2_in0_re[16][13], MMul_dot_product2_in0_re[16]};
  assign MMul_dot_product2_sub_cast_1[16] = {{4{MMul_dot_product2_sub_cast[16][14]}}, MMul_dot_product2_sub_cast[16]};
  assign MMul_dot_product2_in0_im[16] = (alpha_im_3[16] == 1'b1 ? alpha_im_19[16] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[16] = {MMul_dot_product2_in0_im[16][13], MMul_dot_product2_in0_im[16]};
  assign MMul_dot_product2_sub_cast_3[16] = {{4{MMul_dot_product2_sub_cast_2[16][14]}}, MMul_dot_product2_sub_cast_2[16]};
  assign MMul_dot_product_out_re_4[16] = MMul_dot_product2_sub_cast_1[16] - MMul_dot_product2_sub_cast_3[16];
  assign MMul_dot_product2_in0_im_1[16] = (alpha_im_3[16] == 1'b1 ? alpha_re_19[16] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[16] = {MMul_dot_product2_in0_im_1[16][13], MMul_dot_product2_in0_im_1[16]};
  assign MMul_dot_product2_add_cast_1[16] = {{4{MMul_dot_product2_add_cast[16][14]}}, MMul_dot_product2_add_cast[16]};
  assign MMul_dot_product2_in0_re_1[16] = (alpha_re_3[16] == 1'b1 ? alpha_im_19[16] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[16] = {MMul_dot_product2_in0_re_1[16][13], MMul_dot_product2_in0_re_1[16]};
  assign MMul_dot_product2_add_cast_3[16] = {{4{MMul_dot_product2_add_cast_2[16][14]}}, MMul_dot_product2_add_cast_2[16]};
  assign MMul_dot_product_out_im_4[16] = MMul_dot_product2_add_cast_1[16] + MMul_dot_product2_add_cast_3[16];
  assign MMul_dot_product2_in0_re[17] = (alpha_re_3[17] == 1'b1 ? alpha_re_19[17] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[17] = {MMul_dot_product2_in0_re[17][13], MMul_dot_product2_in0_re[17]};
  assign MMul_dot_product2_sub_cast_1[17] = {{4{MMul_dot_product2_sub_cast[17][14]}}, MMul_dot_product2_sub_cast[17]};
  assign MMul_dot_product2_in0_im[17] = (alpha_im_3[17] == 1'b1 ? alpha_im_19[17] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[17] = {MMul_dot_product2_in0_im[17][13], MMul_dot_product2_in0_im[17]};
  assign MMul_dot_product2_sub_cast_3[17] = {{4{MMul_dot_product2_sub_cast_2[17][14]}}, MMul_dot_product2_sub_cast_2[17]};
  assign MMul_dot_product_out_re_4[17] = MMul_dot_product2_sub_cast_1[17] - MMul_dot_product2_sub_cast_3[17];
  assign MMul_dot_product2_in0_im_1[17] = (alpha_im_3[17] == 1'b1 ? alpha_re_19[17] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[17] = {MMul_dot_product2_in0_im_1[17][13], MMul_dot_product2_in0_im_1[17]};
  assign MMul_dot_product2_add_cast_1[17] = {{4{MMul_dot_product2_add_cast[17][14]}}, MMul_dot_product2_add_cast[17]};
  assign MMul_dot_product2_in0_re_1[17] = (alpha_re_3[17] == 1'b1 ? alpha_im_19[17] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[17] = {MMul_dot_product2_in0_re_1[17][13], MMul_dot_product2_in0_re_1[17]};
  assign MMul_dot_product2_add_cast_3[17] = {{4{MMul_dot_product2_add_cast_2[17][14]}}, MMul_dot_product2_add_cast_2[17]};
  assign MMul_dot_product_out_im_4[17] = MMul_dot_product2_add_cast_1[17] + MMul_dot_product2_add_cast_3[17];
  assign MMul_dot_product2_in0_re[18] = (alpha_re_3[18] == 1'b1 ? alpha_re_19[18] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[18] = {MMul_dot_product2_in0_re[18][13], MMul_dot_product2_in0_re[18]};
  assign MMul_dot_product2_sub_cast_1[18] = {{4{MMul_dot_product2_sub_cast[18][14]}}, MMul_dot_product2_sub_cast[18]};
  assign MMul_dot_product2_in0_im[18] = (alpha_im_3[18] == 1'b1 ? alpha_im_19[18] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[18] = {MMul_dot_product2_in0_im[18][13], MMul_dot_product2_in0_im[18]};
  assign MMul_dot_product2_sub_cast_3[18] = {{4{MMul_dot_product2_sub_cast_2[18][14]}}, MMul_dot_product2_sub_cast_2[18]};
  assign MMul_dot_product_out_re_4[18] = MMul_dot_product2_sub_cast_1[18] - MMul_dot_product2_sub_cast_3[18];
  assign MMul_dot_product2_in0_im_1[18] = (alpha_im_3[18] == 1'b1 ? alpha_re_19[18] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[18] = {MMul_dot_product2_in0_im_1[18][13], MMul_dot_product2_in0_im_1[18]};
  assign MMul_dot_product2_add_cast_1[18] = {{4{MMul_dot_product2_add_cast[18][14]}}, MMul_dot_product2_add_cast[18]};
  assign MMul_dot_product2_in0_re_1[18] = (alpha_re_3[18] == 1'b1 ? alpha_im_19[18] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[18] = {MMul_dot_product2_in0_re_1[18][13], MMul_dot_product2_in0_re_1[18]};
  assign MMul_dot_product2_add_cast_3[18] = {{4{MMul_dot_product2_add_cast_2[18][14]}}, MMul_dot_product2_add_cast_2[18]};
  assign MMul_dot_product_out_im_4[18] = MMul_dot_product2_add_cast_1[18] + MMul_dot_product2_add_cast_3[18];
  assign MMul_dot_product2_in0_re[19] = (alpha_re_3[19] == 1'b1 ? alpha_re_19[19] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[19] = {MMul_dot_product2_in0_re[19][13], MMul_dot_product2_in0_re[19]};
  assign MMul_dot_product2_sub_cast_1[19] = {{4{MMul_dot_product2_sub_cast[19][14]}}, MMul_dot_product2_sub_cast[19]};
  assign MMul_dot_product2_in0_im[19] = (alpha_im_3[19] == 1'b1 ? alpha_im_19[19] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[19] = {MMul_dot_product2_in0_im[19][13], MMul_dot_product2_in0_im[19]};
  assign MMul_dot_product2_sub_cast_3[19] = {{4{MMul_dot_product2_sub_cast_2[19][14]}}, MMul_dot_product2_sub_cast_2[19]};
  assign MMul_dot_product_out_re_4[19] = MMul_dot_product2_sub_cast_1[19] - MMul_dot_product2_sub_cast_3[19];
  assign MMul_dot_product2_in0_im_1[19] = (alpha_im_3[19] == 1'b1 ? alpha_re_19[19] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[19] = {MMul_dot_product2_in0_im_1[19][13], MMul_dot_product2_in0_im_1[19]};
  assign MMul_dot_product2_add_cast_1[19] = {{4{MMul_dot_product2_add_cast[19][14]}}, MMul_dot_product2_add_cast[19]};
  assign MMul_dot_product2_in0_re_1[19] = (alpha_re_3[19] == 1'b1 ? alpha_im_19[19] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[19] = {MMul_dot_product2_in0_re_1[19][13], MMul_dot_product2_in0_re_1[19]};
  assign MMul_dot_product2_add_cast_3[19] = {{4{MMul_dot_product2_add_cast_2[19][14]}}, MMul_dot_product2_add_cast_2[19]};
  assign MMul_dot_product_out_im_4[19] = MMul_dot_product2_add_cast_1[19] + MMul_dot_product2_add_cast_3[19];
  assign MMul_dot_product2_in0_re[20] = (alpha_re_3[20] == 1'b1 ? alpha_re_19[20] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[20] = {MMul_dot_product2_in0_re[20][13], MMul_dot_product2_in0_re[20]};
  assign MMul_dot_product2_sub_cast_1[20] = {{4{MMul_dot_product2_sub_cast[20][14]}}, MMul_dot_product2_sub_cast[20]};
  assign MMul_dot_product2_in0_im[20] = (alpha_im_3[20] == 1'b1 ? alpha_im_19[20] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[20] = {MMul_dot_product2_in0_im[20][13], MMul_dot_product2_in0_im[20]};
  assign MMul_dot_product2_sub_cast_3[20] = {{4{MMul_dot_product2_sub_cast_2[20][14]}}, MMul_dot_product2_sub_cast_2[20]};
  assign MMul_dot_product_out_re_4[20] = MMul_dot_product2_sub_cast_1[20] - MMul_dot_product2_sub_cast_3[20];
  assign MMul_dot_product2_in0_im_1[20] = (alpha_im_3[20] == 1'b1 ? alpha_re_19[20] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[20] = {MMul_dot_product2_in0_im_1[20][13], MMul_dot_product2_in0_im_1[20]};
  assign MMul_dot_product2_add_cast_1[20] = {{4{MMul_dot_product2_add_cast[20][14]}}, MMul_dot_product2_add_cast[20]};
  assign MMul_dot_product2_in0_re_1[20] = (alpha_re_3[20] == 1'b1 ? alpha_im_19[20] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[20] = {MMul_dot_product2_in0_re_1[20][13], MMul_dot_product2_in0_re_1[20]};
  assign MMul_dot_product2_add_cast_3[20] = {{4{MMul_dot_product2_add_cast_2[20][14]}}, MMul_dot_product2_add_cast_2[20]};
  assign MMul_dot_product_out_im_4[20] = MMul_dot_product2_add_cast_1[20] + MMul_dot_product2_add_cast_3[20];
  assign MMul_dot_product2_in0_re[21] = (alpha_re_3[21] == 1'b1 ? alpha_re_19[21] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[21] = {MMul_dot_product2_in0_re[21][13], MMul_dot_product2_in0_re[21]};
  assign MMul_dot_product2_sub_cast_1[21] = {{4{MMul_dot_product2_sub_cast[21][14]}}, MMul_dot_product2_sub_cast[21]};
  assign MMul_dot_product2_in0_im[21] = (alpha_im_3[21] == 1'b1 ? alpha_im_19[21] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[21] = {MMul_dot_product2_in0_im[21][13], MMul_dot_product2_in0_im[21]};
  assign MMul_dot_product2_sub_cast_3[21] = {{4{MMul_dot_product2_sub_cast_2[21][14]}}, MMul_dot_product2_sub_cast_2[21]};
  assign MMul_dot_product_out_re_4[21] = MMul_dot_product2_sub_cast_1[21] - MMul_dot_product2_sub_cast_3[21];
  assign MMul_dot_product2_in0_im_1[21] = (alpha_im_3[21] == 1'b1 ? alpha_re_19[21] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[21] = {MMul_dot_product2_in0_im_1[21][13], MMul_dot_product2_in0_im_1[21]};
  assign MMul_dot_product2_add_cast_1[21] = {{4{MMul_dot_product2_add_cast[21][14]}}, MMul_dot_product2_add_cast[21]};
  assign MMul_dot_product2_in0_re_1[21] = (alpha_re_3[21] == 1'b1 ? alpha_im_19[21] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[21] = {MMul_dot_product2_in0_re_1[21][13], MMul_dot_product2_in0_re_1[21]};
  assign MMul_dot_product2_add_cast_3[21] = {{4{MMul_dot_product2_add_cast_2[21][14]}}, MMul_dot_product2_add_cast_2[21]};
  assign MMul_dot_product_out_im_4[21] = MMul_dot_product2_add_cast_1[21] + MMul_dot_product2_add_cast_3[21];
  assign MMul_dot_product2_in0_re[22] = (alpha_re_3[22] == 1'b1 ? alpha_re_19[22] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[22] = {MMul_dot_product2_in0_re[22][13], MMul_dot_product2_in0_re[22]};
  assign MMul_dot_product2_sub_cast_1[22] = {{4{MMul_dot_product2_sub_cast[22][14]}}, MMul_dot_product2_sub_cast[22]};
  assign MMul_dot_product2_in0_im[22] = (alpha_im_3[22] == 1'b1 ? alpha_im_19[22] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[22] = {MMul_dot_product2_in0_im[22][13], MMul_dot_product2_in0_im[22]};
  assign MMul_dot_product2_sub_cast_3[22] = {{4{MMul_dot_product2_sub_cast_2[22][14]}}, MMul_dot_product2_sub_cast_2[22]};
  assign MMul_dot_product_out_re_4[22] = MMul_dot_product2_sub_cast_1[22] - MMul_dot_product2_sub_cast_3[22];
  assign MMul_dot_product2_in0_im_1[22] = (alpha_im_3[22] == 1'b1 ? alpha_re_19[22] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[22] = {MMul_dot_product2_in0_im_1[22][13], MMul_dot_product2_in0_im_1[22]};
  assign MMul_dot_product2_add_cast_1[22] = {{4{MMul_dot_product2_add_cast[22][14]}}, MMul_dot_product2_add_cast[22]};
  assign MMul_dot_product2_in0_re_1[22] = (alpha_re_3[22] == 1'b1 ? alpha_im_19[22] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[22] = {MMul_dot_product2_in0_re_1[22][13], MMul_dot_product2_in0_re_1[22]};
  assign MMul_dot_product2_add_cast_3[22] = {{4{MMul_dot_product2_add_cast_2[22][14]}}, MMul_dot_product2_add_cast_2[22]};
  assign MMul_dot_product_out_im_4[22] = MMul_dot_product2_add_cast_1[22] + MMul_dot_product2_add_cast_3[22];
  assign MMul_dot_product2_in0_re[23] = (alpha_re_3[23] == 1'b1 ? alpha_re_19[23] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[23] = {MMul_dot_product2_in0_re[23][13], MMul_dot_product2_in0_re[23]};
  assign MMul_dot_product2_sub_cast_1[23] = {{4{MMul_dot_product2_sub_cast[23][14]}}, MMul_dot_product2_sub_cast[23]};
  assign MMul_dot_product2_in0_im[23] = (alpha_im_3[23] == 1'b1 ? alpha_im_19[23] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[23] = {MMul_dot_product2_in0_im[23][13], MMul_dot_product2_in0_im[23]};
  assign MMul_dot_product2_sub_cast_3[23] = {{4{MMul_dot_product2_sub_cast_2[23][14]}}, MMul_dot_product2_sub_cast_2[23]};
  assign MMul_dot_product_out_re_4[23] = MMul_dot_product2_sub_cast_1[23] - MMul_dot_product2_sub_cast_3[23];
  assign MMul_dot_product2_in0_im_1[23] = (alpha_im_3[23] == 1'b1 ? alpha_re_19[23] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[23] = {MMul_dot_product2_in0_im_1[23][13], MMul_dot_product2_in0_im_1[23]};
  assign MMul_dot_product2_add_cast_1[23] = {{4{MMul_dot_product2_add_cast[23][14]}}, MMul_dot_product2_add_cast[23]};
  assign MMul_dot_product2_in0_re_1[23] = (alpha_re_3[23] == 1'b1 ? alpha_im_19[23] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[23] = {MMul_dot_product2_in0_re_1[23][13], MMul_dot_product2_in0_re_1[23]};
  assign MMul_dot_product2_add_cast_3[23] = {{4{MMul_dot_product2_add_cast_2[23][14]}}, MMul_dot_product2_add_cast_2[23]};
  assign MMul_dot_product_out_im_4[23] = MMul_dot_product2_add_cast_1[23] + MMul_dot_product2_add_cast_3[23];
  assign MMul_dot_product2_in0_re[24] = (alpha_re_3[24] == 1'b1 ? alpha_re_19[24] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[24] = {MMul_dot_product2_in0_re[24][13], MMul_dot_product2_in0_re[24]};
  assign MMul_dot_product2_sub_cast_1[24] = {{4{MMul_dot_product2_sub_cast[24][14]}}, MMul_dot_product2_sub_cast[24]};
  assign MMul_dot_product2_in0_im[24] = (alpha_im_3[24] == 1'b1 ? alpha_im_19[24] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[24] = {MMul_dot_product2_in0_im[24][13], MMul_dot_product2_in0_im[24]};
  assign MMul_dot_product2_sub_cast_3[24] = {{4{MMul_dot_product2_sub_cast_2[24][14]}}, MMul_dot_product2_sub_cast_2[24]};
  assign MMul_dot_product_out_re_4[24] = MMul_dot_product2_sub_cast_1[24] - MMul_dot_product2_sub_cast_3[24];
  assign MMul_dot_product2_in0_im_1[24] = (alpha_im_3[24] == 1'b1 ? alpha_re_19[24] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[24] = {MMul_dot_product2_in0_im_1[24][13], MMul_dot_product2_in0_im_1[24]};
  assign MMul_dot_product2_add_cast_1[24] = {{4{MMul_dot_product2_add_cast[24][14]}}, MMul_dot_product2_add_cast[24]};
  assign MMul_dot_product2_in0_re_1[24] = (alpha_re_3[24] == 1'b1 ? alpha_im_19[24] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[24] = {MMul_dot_product2_in0_re_1[24][13], MMul_dot_product2_in0_re_1[24]};
  assign MMul_dot_product2_add_cast_3[24] = {{4{MMul_dot_product2_add_cast_2[24][14]}}, MMul_dot_product2_add_cast_2[24]};
  assign MMul_dot_product_out_im_4[24] = MMul_dot_product2_add_cast_1[24] + MMul_dot_product2_add_cast_3[24];
  assign MMul_dot_product2_in0_re[25] = (alpha_re_3[25] == 1'b1 ? alpha_re_19[25] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[25] = {MMul_dot_product2_in0_re[25][13], MMul_dot_product2_in0_re[25]};
  assign MMul_dot_product2_sub_cast_1[25] = {{4{MMul_dot_product2_sub_cast[25][14]}}, MMul_dot_product2_sub_cast[25]};
  assign MMul_dot_product2_in0_im[25] = (alpha_im_3[25] == 1'b1 ? alpha_im_19[25] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[25] = {MMul_dot_product2_in0_im[25][13], MMul_dot_product2_in0_im[25]};
  assign MMul_dot_product2_sub_cast_3[25] = {{4{MMul_dot_product2_sub_cast_2[25][14]}}, MMul_dot_product2_sub_cast_2[25]};
  assign MMul_dot_product_out_re_4[25] = MMul_dot_product2_sub_cast_1[25] - MMul_dot_product2_sub_cast_3[25];
  assign MMul_dot_product2_in0_im_1[25] = (alpha_im_3[25] == 1'b1 ? alpha_re_19[25] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[25] = {MMul_dot_product2_in0_im_1[25][13], MMul_dot_product2_in0_im_1[25]};
  assign MMul_dot_product2_add_cast_1[25] = {{4{MMul_dot_product2_add_cast[25][14]}}, MMul_dot_product2_add_cast[25]};
  assign MMul_dot_product2_in0_re_1[25] = (alpha_re_3[25] == 1'b1 ? alpha_im_19[25] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[25] = {MMul_dot_product2_in0_re_1[25][13], MMul_dot_product2_in0_re_1[25]};
  assign MMul_dot_product2_add_cast_3[25] = {{4{MMul_dot_product2_add_cast_2[25][14]}}, MMul_dot_product2_add_cast_2[25]};
  assign MMul_dot_product_out_im_4[25] = MMul_dot_product2_add_cast_1[25] + MMul_dot_product2_add_cast_3[25];
  assign MMul_dot_product2_in0_re[26] = (alpha_re_3[26] == 1'b1 ? alpha_re_19[26] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[26] = {MMul_dot_product2_in0_re[26][13], MMul_dot_product2_in0_re[26]};
  assign MMul_dot_product2_sub_cast_1[26] = {{4{MMul_dot_product2_sub_cast[26][14]}}, MMul_dot_product2_sub_cast[26]};
  assign MMul_dot_product2_in0_im[26] = (alpha_im_3[26] == 1'b1 ? alpha_im_19[26] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[26] = {MMul_dot_product2_in0_im[26][13], MMul_dot_product2_in0_im[26]};
  assign MMul_dot_product2_sub_cast_3[26] = {{4{MMul_dot_product2_sub_cast_2[26][14]}}, MMul_dot_product2_sub_cast_2[26]};
  assign MMul_dot_product_out_re_4[26] = MMul_dot_product2_sub_cast_1[26] - MMul_dot_product2_sub_cast_3[26];
  assign MMul_dot_product2_in0_im_1[26] = (alpha_im_3[26] == 1'b1 ? alpha_re_19[26] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[26] = {MMul_dot_product2_in0_im_1[26][13], MMul_dot_product2_in0_im_1[26]};
  assign MMul_dot_product2_add_cast_1[26] = {{4{MMul_dot_product2_add_cast[26][14]}}, MMul_dot_product2_add_cast[26]};
  assign MMul_dot_product2_in0_re_1[26] = (alpha_re_3[26] == 1'b1 ? alpha_im_19[26] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[26] = {MMul_dot_product2_in0_re_1[26][13], MMul_dot_product2_in0_re_1[26]};
  assign MMul_dot_product2_add_cast_3[26] = {{4{MMul_dot_product2_add_cast_2[26][14]}}, MMul_dot_product2_add_cast_2[26]};
  assign MMul_dot_product_out_im_4[26] = MMul_dot_product2_add_cast_1[26] + MMul_dot_product2_add_cast_3[26];
  assign MMul_dot_product2_in0_re[27] = (alpha_re_3[27] == 1'b1 ? alpha_re_19[27] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[27] = {MMul_dot_product2_in0_re[27][13], MMul_dot_product2_in0_re[27]};
  assign MMul_dot_product2_sub_cast_1[27] = {{4{MMul_dot_product2_sub_cast[27][14]}}, MMul_dot_product2_sub_cast[27]};
  assign MMul_dot_product2_in0_im[27] = (alpha_im_3[27] == 1'b1 ? alpha_im_19[27] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[27] = {MMul_dot_product2_in0_im[27][13], MMul_dot_product2_in0_im[27]};
  assign MMul_dot_product2_sub_cast_3[27] = {{4{MMul_dot_product2_sub_cast_2[27][14]}}, MMul_dot_product2_sub_cast_2[27]};
  assign MMul_dot_product_out_re_4[27] = MMul_dot_product2_sub_cast_1[27] - MMul_dot_product2_sub_cast_3[27];
  assign MMul_dot_product2_in0_im_1[27] = (alpha_im_3[27] == 1'b1 ? alpha_re_19[27] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[27] = {MMul_dot_product2_in0_im_1[27][13], MMul_dot_product2_in0_im_1[27]};
  assign MMul_dot_product2_add_cast_1[27] = {{4{MMul_dot_product2_add_cast[27][14]}}, MMul_dot_product2_add_cast[27]};
  assign MMul_dot_product2_in0_re_1[27] = (alpha_re_3[27] == 1'b1 ? alpha_im_19[27] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[27] = {MMul_dot_product2_in0_re_1[27][13], MMul_dot_product2_in0_re_1[27]};
  assign MMul_dot_product2_add_cast_3[27] = {{4{MMul_dot_product2_add_cast_2[27][14]}}, MMul_dot_product2_add_cast_2[27]};
  assign MMul_dot_product_out_im_4[27] = MMul_dot_product2_add_cast_1[27] + MMul_dot_product2_add_cast_3[27];
  assign MMul_dot_product2_in0_re[28] = (alpha_re_3[28] == 1'b1 ? alpha_re_19[28] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[28] = {MMul_dot_product2_in0_re[28][13], MMul_dot_product2_in0_re[28]};
  assign MMul_dot_product2_sub_cast_1[28] = {{4{MMul_dot_product2_sub_cast[28][14]}}, MMul_dot_product2_sub_cast[28]};
  assign MMul_dot_product2_in0_im[28] = (alpha_im_3[28] == 1'b1 ? alpha_im_19[28] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[28] = {MMul_dot_product2_in0_im[28][13], MMul_dot_product2_in0_im[28]};
  assign MMul_dot_product2_sub_cast_3[28] = {{4{MMul_dot_product2_sub_cast_2[28][14]}}, MMul_dot_product2_sub_cast_2[28]};
  assign MMul_dot_product_out_re_4[28] = MMul_dot_product2_sub_cast_1[28] - MMul_dot_product2_sub_cast_3[28];
  assign MMul_dot_product2_in0_im_1[28] = (alpha_im_3[28] == 1'b1 ? alpha_re_19[28] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[28] = {MMul_dot_product2_in0_im_1[28][13], MMul_dot_product2_in0_im_1[28]};
  assign MMul_dot_product2_add_cast_1[28] = {{4{MMul_dot_product2_add_cast[28][14]}}, MMul_dot_product2_add_cast[28]};
  assign MMul_dot_product2_in0_re_1[28] = (alpha_re_3[28] == 1'b1 ? alpha_im_19[28] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[28] = {MMul_dot_product2_in0_re_1[28][13], MMul_dot_product2_in0_re_1[28]};
  assign MMul_dot_product2_add_cast_3[28] = {{4{MMul_dot_product2_add_cast_2[28][14]}}, MMul_dot_product2_add_cast_2[28]};
  assign MMul_dot_product_out_im_4[28] = MMul_dot_product2_add_cast_1[28] + MMul_dot_product2_add_cast_3[28];
  assign MMul_dot_product2_in0_re[29] = (alpha_re_3[29] == 1'b1 ? alpha_re_19[29] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[29] = {MMul_dot_product2_in0_re[29][13], MMul_dot_product2_in0_re[29]};
  assign MMul_dot_product2_sub_cast_1[29] = {{4{MMul_dot_product2_sub_cast[29][14]}}, MMul_dot_product2_sub_cast[29]};
  assign MMul_dot_product2_in0_im[29] = (alpha_im_3[29] == 1'b1 ? alpha_im_19[29] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[29] = {MMul_dot_product2_in0_im[29][13], MMul_dot_product2_in0_im[29]};
  assign MMul_dot_product2_sub_cast_3[29] = {{4{MMul_dot_product2_sub_cast_2[29][14]}}, MMul_dot_product2_sub_cast_2[29]};
  assign MMul_dot_product_out_re_4[29] = MMul_dot_product2_sub_cast_1[29] - MMul_dot_product2_sub_cast_3[29];
  assign MMul_dot_product2_in0_im_1[29] = (alpha_im_3[29] == 1'b1 ? alpha_re_19[29] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[29] = {MMul_dot_product2_in0_im_1[29][13], MMul_dot_product2_in0_im_1[29]};
  assign MMul_dot_product2_add_cast_1[29] = {{4{MMul_dot_product2_add_cast[29][14]}}, MMul_dot_product2_add_cast[29]};
  assign MMul_dot_product2_in0_re_1[29] = (alpha_re_3[29] == 1'b1 ? alpha_im_19[29] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[29] = {MMul_dot_product2_in0_re_1[29][13], MMul_dot_product2_in0_re_1[29]};
  assign MMul_dot_product2_add_cast_3[29] = {{4{MMul_dot_product2_add_cast_2[29][14]}}, MMul_dot_product2_add_cast_2[29]};
  assign MMul_dot_product_out_im_4[29] = MMul_dot_product2_add_cast_1[29] + MMul_dot_product2_add_cast_3[29];
  assign MMul_dot_product2_in0_re[30] = (alpha_re_3[30] == 1'b1 ? alpha_re_19[30] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[30] = {MMul_dot_product2_in0_re[30][13], MMul_dot_product2_in0_re[30]};
  assign MMul_dot_product2_sub_cast_1[30] = {{4{MMul_dot_product2_sub_cast[30][14]}}, MMul_dot_product2_sub_cast[30]};
  assign MMul_dot_product2_in0_im[30] = (alpha_im_3[30] == 1'b1 ? alpha_im_19[30] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[30] = {MMul_dot_product2_in0_im[30][13], MMul_dot_product2_in0_im[30]};
  assign MMul_dot_product2_sub_cast_3[30] = {{4{MMul_dot_product2_sub_cast_2[30][14]}}, MMul_dot_product2_sub_cast_2[30]};
  assign MMul_dot_product_out_re_4[30] = MMul_dot_product2_sub_cast_1[30] - MMul_dot_product2_sub_cast_3[30];
  assign MMul_dot_product2_in0_im_1[30] = (alpha_im_3[30] == 1'b1 ? alpha_re_19[30] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[30] = {MMul_dot_product2_in0_im_1[30][13], MMul_dot_product2_in0_im_1[30]};
  assign MMul_dot_product2_add_cast_1[30] = {{4{MMul_dot_product2_add_cast[30][14]}}, MMul_dot_product2_add_cast[30]};
  assign MMul_dot_product2_in0_re_1[30] = (alpha_re_3[30] == 1'b1 ? alpha_im_19[30] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[30] = {MMul_dot_product2_in0_re_1[30][13], MMul_dot_product2_in0_re_1[30]};
  assign MMul_dot_product2_add_cast_3[30] = {{4{MMul_dot_product2_add_cast_2[30][14]}}, MMul_dot_product2_add_cast_2[30]};
  assign MMul_dot_product_out_im_4[30] = MMul_dot_product2_add_cast_1[30] + MMul_dot_product2_add_cast_3[30];
  assign MMul_dot_product2_in0_re[31] = (alpha_re_3[31] == 1'b1 ? alpha_re_19[31] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[31] = {MMul_dot_product2_in0_re[31][13], MMul_dot_product2_in0_re[31]};
  assign MMul_dot_product2_sub_cast_1[31] = {{4{MMul_dot_product2_sub_cast[31][14]}}, MMul_dot_product2_sub_cast[31]};
  assign MMul_dot_product2_in0_im[31] = (alpha_im_3[31] == 1'b1 ? alpha_im_19[31] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[31] = {MMul_dot_product2_in0_im[31][13], MMul_dot_product2_in0_im[31]};
  assign MMul_dot_product2_sub_cast_3[31] = {{4{MMul_dot_product2_sub_cast_2[31][14]}}, MMul_dot_product2_sub_cast_2[31]};
  assign MMul_dot_product_out_re_4[31] = MMul_dot_product2_sub_cast_1[31] - MMul_dot_product2_sub_cast_3[31];
  assign MMul_dot_product2_in0_im_1[31] = (alpha_im_3[31] == 1'b1 ? alpha_re_19[31] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[31] = {MMul_dot_product2_in0_im_1[31][13], MMul_dot_product2_in0_im_1[31]};
  assign MMul_dot_product2_add_cast_1[31] = {{4{MMul_dot_product2_add_cast[31][14]}}, MMul_dot_product2_add_cast[31]};
  assign MMul_dot_product2_in0_re_1[31] = (alpha_re_3[31] == 1'b1 ? alpha_im_19[31] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[31] = {MMul_dot_product2_in0_re_1[31][13], MMul_dot_product2_in0_re_1[31]};
  assign MMul_dot_product2_add_cast_3[31] = {{4{MMul_dot_product2_add_cast_2[31][14]}}, MMul_dot_product2_add_cast_2[31]};
  assign MMul_dot_product_out_im_4[31] = MMul_dot_product2_add_cast_1[31] + MMul_dot_product2_add_cast_3[31];
  assign MMul_dot_product2_in0_re[32] = (alpha_re_3[32] == 1'b1 ? alpha_re_19[32] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[32] = {MMul_dot_product2_in0_re[32][13], MMul_dot_product2_in0_re[32]};
  assign MMul_dot_product2_sub_cast_1[32] = {{4{MMul_dot_product2_sub_cast[32][14]}}, MMul_dot_product2_sub_cast[32]};
  assign MMul_dot_product2_in0_im[32] = (alpha_im_3[32] == 1'b1 ? alpha_im_19[32] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[32] = {MMul_dot_product2_in0_im[32][13], MMul_dot_product2_in0_im[32]};
  assign MMul_dot_product2_sub_cast_3[32] = {{4{MMul_dot_product2_sub_cast_2[32][14]}}, MMul_dot_product2_sub_cast_2[32]};
  assign MMul_dot_product_out_re_4[32] = MMul_dot_product2_sub_cast_1[32] - MMul_dot_product2_sub_cast_3[32];
  assign MMul_dot_product2_in0_im_1[32] = (alpha_im_3[32] == 1'b1 ? alpha_re_19[32] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[32] = {MMul_dot_product2_in0_im_1[32][13], MMul_dot_product2_in0_im_1[32]};
  assign MMul_dot_product2_add_cast_1[32] = {{4{MMul_dot_product2_add_cast[32][14]}}, MMul_dot_product2_add_cast[32]};
  assign MMul_dot_product2_in0_re_1[32] = (alpha_re_3[32] == 1'b1 ? alpha_im_19[32] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[32] = {MMul_dot_product2_in0_re_1[32][13], MMul_dot_product2_in0_re_1[32]};
  assign MMul_dot_product2_add_cast_3[32] = {{4{MMul_dot_product2_add_cast_2[32][14]}}, MMul_dot_product2_add_cast_2[32]};
  assign MMul_dot_product_out_im_4[32] = MMul_dot_product2_add_cast_1[32] + MMul_dot_product2_add_cast_3[32];
  assign MMul_dot_product2_in0_re[33] = (alpha_re_3[33] == 1'b1 ? alpha_re_19[33] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[33] = {MMul_dot_product2_in0_re[33][13], MMul_dot_product2_in0_re[33]};
  assign MMul_dot_product2_sub_cast_1[33] = {{4{MMul_dot_product2_sub_cast[33][14]}}, MMul_dot_product2_sub_cast[33]};
  assign MMul_dot_product2_in0_im[33] = (alpha_im_3[33] == 1'b1 ? alpha_im_19[33] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[33] = {MMul_dot_product2_in0_im[33][13], MMul_dot_product2_in0_im[33]};
  assign MMul_dot_product2_sub_cast_3[33] = {{4{MMul_dot_product2_sub_cast_2[33][14]}}, MMul_dot_product2_sub_cast_2[33]};
  assign MMul_dot_product_out_re_4[33] = MMul_dot_product2_sub_cast_1[33] - MMul_dot_product2_sub_cast_3[33];
  assign MMul_dot_product2_in0_im_1[33] = (alpha_im_3[33] == 1'b1 ? alpha_re_19[33] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[33] = {MMul_dot_product2_in0_im_1[33][13], MMul_dot_product2_in0_im_1[33]};
  assign MMul_dot_product2_add_cast_1[33] = {{4{MMul_dot_product2_add_cast[33][14]}}, MMul_dot_product2_add_cast[33]};
  assign MMul_dot_product2_in0_re_1[33] = (alpha_re_3[33] == 1'b1 ? alpha_im_19[33] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[33] = {MMul_dot_product2_in0_re_1[33][13], MMul_dot_product2_in0_re_1[33]};
  assign MMul_dot_product2_add_cast_3[33] = {{4{MMul_dot_product2_add_cast_2[33][14]}}, MMul_dot_product2_add_cast_2[33]};
  assign MMul_dot_product_out_im_4[33] = MMul_dot_product2_add_cast_1[33] + MMul_dot_product2_add_cast_3[33];
  assign MMul_dot_product2_in0_re[34] = (alpha_re_3[34] == 1'b1 ? alpha_re_19[34] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[34] = {MMul_dot_product2_in0_re[34][13], MMul_dot_product2_in0_re[34]};
  assign MMul_dot_product2_sub_cast_1[34] = {{4{MMul_dot_product2_sub_cast[34][14]}}, MMul_dot_product2_sub_cast[34]};
  assign MMul_dot_product2_in0_im[34] = (alpha_im_3[34] == 1'b1 ? alpha_im_19[34] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[34] = {MMul_dot_product2_in0_im[34][13], MMul_dot_product2_in0_im[34]};
  assign MMul_dot_product2_sub_cast_3[34] = {{4{MMul_dot_product2_sub_cast_2[34][14]}}, MMul_dot_product2_sub_cast_2[34]};
  assign MMul_dot_product_out_re_4[34] = MMul_dot_product2_sub_cast_1[34] - MMul_dot_product2_sub_cast_3[34];
  assign MMul_dot_product2_in0_im_1[34] = (alpha_im_3[34] == 1'b1 ? alpha_re_19[34] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[34] = {MMul_dot_product2_in0_im_1[34][13], MMul_dot_product2_in0_im_1[34]};
  assign MMul_dot_product2_add_cast_1[34] = {{4{MMul_dot_product2_add_cast[34][14]}}, MMul_dot_product2_add_cast[34]};
  assign MMul_dot_product2_in0_re_1[34] = (alpha_re_3[34] == 1'b1 ? alpha_im_19[34] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[34] = {MMul_dot_product2_in0_re_1[34][13], MMul_dot_product2_in0_re_1[34]};
  assign MMul_dot_product2_add_cast_3[34] = {{4{MMul_dot_product2_add_cast_2[34][14]}}, MMul_dot_product2_add_cast_2[34]};
  assign MMul_dot_product_out_im_4[34] = MMul_dot_product2_add_cast_1[34] + MMul_dot_product2_add_cast_3[34];
  assign MMul_dot_product2_in0_re[35] = (alpha_re_3[35] == 1'b1 ? alpha_re_19[35] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[35] = {MMul_dot_product2_in0_re[35][13], MMul_dot_product2_in0_re[35]};
  assign MMul_dot_product2_sub_cast_1[35] = {{4{MMul_dot_product2_sub_cast[35][14]}}, MMul_dot_product2_sub_cast[35]};
  assign MMul_dot_product2_in0_im[35] = (alpha_im_3[35] == 1'b1 ? alpha_im_19[35] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[35] = {MMul_dot_product2_in0_im[35][13], MMul_dot_product2_in0_im[35]};
  assign MMul_dot_product2_sub_cast_3[35] = {{4{MMul_dot_product2_sub_cast_2[35][14]}}, MMul_dot_product2_sub_cast_2[35]};
  assign MMul_dot_product_out_re_4[35] = MMul_dot_product2_sub_cast_1[35] - MMul_dot_product2_sub_cast_3[35];
  assign MMul_dot_product2_in0_im_1[35] = (alpha_im_3[35] == 1'b1 ? alpha_re_19[35] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[35] = {MMul_dot_product2_in0_im_1[35][13], MMul_dot_product2_in0_im_1[35]};
  assign MMul_dot_product2_add_cast_1[35] = {{4{MMul_dot_product2_add_cast[35][14]}}, MMul_dot_product2_add_cast[35]};
  assign MMul_dot_product2_in0_re_1[35] = (alpha_re_3[35] == 1'b1 ? alpha_im_19[35] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[35] = {MMul_dot_product2_in0_re_1[35][13], MMul_dot_product2_in0_re_1[35]};
  assign MMul_dot_product2_add_cast_3[35] = {{4{MMul_dot_product2_add_cast_2[35][14]}}, MMul_dot_product2_add_cast_2[35]};
  assign MMul_dot_product_out_im_4[35] = MMul_dot_product2_add_cast_1[35] + MMul_dot_product2_add_cast_3[35];
  assign MMul_dot_product2_in0_re[36] = (alpha_re_3[36] == 1'b1 ? alpha_re_19[36] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[36] = {MMul_dot_product2_in0_re[36][13], MMul_dot_product2_in0_re[36]};
  assign MMul_dot_product2_sub_cast_1[36] = {{4{MMul_dot_product2_sub_cast[36][14]}}, MMul_dot_product2_sub_cast[36]};
  assign MMul_dot_product2_in0_im[36] = (alpha_im_3[36] == 1'b1 ? alpha_im_19[36] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[36] = {MMul_dot_product2_in0_im[36][13], MMul_dot_product2_in0_im[36]};
  assign MMul_dot_product2_sub_cast_3[36] = {{4{MMul_dot_product2_sub_cast_2[36][14]}}, MMul_dot_product2_sub_cast_2[36]};
  assign MMul_dot_product_out_re_4[36] = MMul_dot_product2_sub_cast_1[36] - MMul_dot_product2_sub_cast_3[36];
  assign MMul_dot_product2_in0_im_1[36] = (alpha_im_3[36] == 1'b1 ? alpha_re_19[36] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[36] = {MMul_dot_product2_in0_im_1[36][13], MMul_dot_product2_in0_im_1[36]};
  assign MMul_dot_product2_add_cast_1[36] = {{4{MMul_dot_product2_add_cast[36][14]}}, MMul_dot_product2_add_cast[36]};
  assign MMul_dot_product2_in0_re_1[36] = (alpha_re_3[36] == 1'b1 ? alpha_im_19[36] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[36] = {MMul_dot_product2_in0_re_1[36][13], MMul_dot_product2_in0_re_1[36]};
  assign MMul_dot_product2_add_cast_3[36] = {{4{MMul_dot_product2_add_cast_2[36][14]}}, MMul_dot_product2_add_cast_2[36]};
  assign MMul_dot_product_out_im_4[36] = MMul_dot_product2_add_cast_1[36] + MMul_dot_product2_add_cast_3[36];
  assign MMul_dot_product2_in0_re[37] = (alpha_re_3[37] == 1'b1 ? alpha_re_19[37] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[37] = {MMul_dot_product2_in0_re[37][13], MMul_dot_product2_in0_re[37]};
  assign MMul_dot_product2_sub_cast_1[37] = {{4{MMul_dot_product2_sub_cast[37][14]}}, MMul_dot_product2_sub_cast[37]};
  assign MMul_dot_product2_in0_im[37] = (alpha_im_3[37] == 1'b1 ? alpha_im_19[37] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[37] = {MMul_dot_product2_in0_im[37][13], MMul_dot_product2_in0_im[37]};
  assign MMul_dot_product2_sub_cast_3[37] = {{4{MMul_dot_product2_sub_cast_2[37][14]}}, MMul_dot_product2_sub_cast_2[37]};
  assign MMul_dot_product_out_re_4[37] = MMul_dot_product2_sub_cast_1[37] - MMul_dot_product2_sub_cast_3[37];
  assign MMul_dot_product2_in0_im_1[37] = (alpha_im_3[37] == 1'b1 ? alpha_re_19[37] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[37] = {MMul_dot_product2_in0_im_1[37][13], MMul_dot_product2_in0_im_1[37]};
  assign MMul_dot_product2_add_cast_1[37] = {{4{MMul_dot_product2_add_cast[37][14]}}, MMul_dot_product2_add_cast[37]};
  assign MMul_dot_product2_in0_re_1[37] = (alpha_re_3[37] == 1'b1 ? alpha_im_19[37] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[37] = {MMul_dot_product2_in0_re_1[37][13], MMul_dot_product2_in0_re_1[37]};
  assign MMul_dot_product2_add_cast_3[37] = {{4{MMul_dot_product2_add_cast_2[37][14]}}, MMul_dot_product2_add_cast_2[37]};
  assign MMul_dot_product_out_im_4[37] = MMul_dot_product2_add_cast_1[37] + MMul_dot_product2_add_cast_3[37];
  assign MMul_dot_product2_in0_re[38] = (alpha_re_3[38] == 1'b1 ? alpha_re_19[38] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[38] = {MMul_dot_product2_in0_re[38][13], MMul_dot_product2_in0_re[38]};
  assign MMul_dot_product2_sub_cast_1[38] = {{4{MMul_dot_product2_sub_cast[38][14]}}, MMul_dot_product2_sub_cast[38]};
  assign MMul_dot_product2_in0_im[38] = (alpha_im_3[38] == 1'b1 ? alpha_im_19[38] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[38] = {MMul_dot_product2_in0_im[38][13], MMul_dot_product2_in0_im[38]};
  assign MMul_dot_product2_sub_cast_3[38] = {{4{MMul_dot_product2_sub_cast_2[38][14]}}, MMul_dot_product2_sub_cast_2[38]};
  assign MMul_dot_product_out_re_4[38] = MMul_dot_product2_sub_cast_1[38] - MMul_dot_product2_sub_cast_3[38];
  assign MMul_dot_product2_in0_im_1[38] = (alpha_im_3[38] == 1'b1 ? alpha_re_19[38] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[38] = {MMul_dot_product2_in0_im_1[38][13], MMul_dot_product2_in0_im_1[38]};
  assign MMul_dot_product2_add_cast_1[38] = {{4{MMul_dot_product2_add_cast[38][14]}}, MMul_dot_product2_add_cast[38]};
  assign MMul_dot_product2_in0_re_1[38] = (alpha_re_3[38] == 1'b1 ? alpha_im_19[38] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[38] = {MMul_dot_product2_in0_re_1[38][13], MMul_dot_product2_in0_re_1[38]};
  assign MMul_dot_product2_add_cast_3[38] = {{4{MMul_dot_product2_add_cast_2[38][14]}}, MMul_dot_product2_add_cast_2[38]};
  assign MMul_dot_product_out_im_4[38] = MMul_dot_product2_add_cast_1[38] + MMul_dot_product2_add_cast_3[38];
  assign MMul_dot_product2_in0_re[39] = (alpha_re_3[39] == 1'b1 ? alpha_re_19[39] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[39] = {MMul_dot_product2_in0_re[39][13], MMul_dot_product2_in0_re[39]};
  assign MMul_dot_product2_sub_cast_1[39] = {{4{MMul_dot_product2_sub_cast[39][14]}}, MMul_dot_product2_sub_cast[39]};
  assign MMul_dot_product2_in0_im[39] = (alpha_im_3[39] == 1'b1 ? alpha_im_19[39] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[39] = {MMul_dot_product2_in0_im[39][13], MMul_dot_product2_in0_im[39]};
  assign MMul_dot_product2_sub_cast_3[39] = {{4{MMul_dot_product2_sub_cast_2[39][14]}}, MMul_dot_product2_sub_cast_2[39]};
  assign MMul_dot_product_out_re_4[39] = MMul_dot_product2_sub_cast_1[39] - MMul_dot_product2_sub_cast_3[39];
  assign MMul_dot_product2_in0_im_1[39] = (alpha_im_3[39] == 1'b1 ? alpha_re_19[39] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[39] = {MMul_dot_product2_in0_im_1[39][13], MMul_dot_product2_in0_im_1[39]};
  assign MMul_dot_product2_add_cast_1[39] = {{4{MMul_dot_product2_add_cast[39][14]}}, MMul_dot_product2_add_cast[39]};
  assign MMul_dot_product2_in0_re_1[39] = (alpha_re_3[39] == 1'b1 ? alpha_im_19[39] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[39] = {MMul_dot_product2_in0_re_1[39][13], MMul_dot_product2_in0_re_1[39]};
  assign MMul_dot_product2_add_cast_3[39] = {{4{MMul_dot_product2_add_cast_2[39][14]}}, MMul_dot_product2_add_cast_2[39]};
  assign MMul_dot_product_out_im_4[39] = MMul_dot_product2_add_cast_1[39] + MMul_dot_product2_add_cast_3[39];
  assign MMul_dot_product2_in0_re[40] = (alpha_re_3[40] == 1'b1 ? alpha_re_19[40] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[40] = {MMul_dot_product2_in0_re[40][13], MMul_dot_product2_in0_re[40]};
  assign MMul_dot_product2_sub_cast_1[40] = {{4{MMul_dot_product2_sub_cast[40][14]}}, MMul_dot_product2_sub_cast[40]};
  assign MMul_dot_product2_in0_im[40] = (alpha_im_3[40] == 1'b1 ? alpha_im_19[40] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[40] = {MMul_dot_product2_in0_im[40][13], MMul_dot_product2_in0_im[40]};
  assign MMul_dot_product2_sub_cast_3[40] = {{4{MMul_dot_product2_sub_cast_2[40][14]}}, MMul_dot_product2_sub_cast_2[40]};
  assign MMul_dot_product_out_re_4[40] = MMul_dot_product2_sub_cast_1[40] - MMul_dot_product2_sub_cast_3[40];
  assign MMul_dot_product2_in0_im_1[40] = (alpha_im_3[40] == 1'b1 ? alpha_re_19[40] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[40] = {MMul_dot_product2_in0_im_1[40][13], MMul_dot_product2_in0_im_1[40]};
  assign MMul_dot_product2_add_cast_1[40] = {{4{MMul_dot_product2_add_cast[40][14]}}, MMul_dot_product2_add_cast[40]};
  assign MMul_dot_product2_in0_re_1[40] = (alpha_re_3[40] == 1'b1 ? alpha_im_19[40] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[40] = {MMul_dot_product2_in0_re_1[40][13], MMul_dot_product2_in0_re_1[40]};
  assign MMul_dot_product2_add_cast_3[40] = {{4{MMul_dot_product2_add_cast_2[40][14]}}, MMul_dot_product2_add_cast_2[40]};
  assign MMul_dot_product_out_im_4[40] = MMul_dot_product2_add_cast_1[40] + MMul_dot_product2_add_cast_3[40];
  assign MMul_dot_product2_in0_re[41] = (alpha_re_3[41] == 1'b1 ? alpha_re_19[41] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[41] = {MMul_dot_product2_in0_re[41][13], MMul_dot_product2_in0_re[41]};
  assign MMul_dot_product2_sub_cast_1[41] = {{4{MMul_dot_product2_sub_cast[41][14]}}, MMul_dot_product2_sub_cast[41]};
  assign MMul_dot_product2_in0_im[41] = (alpha_im_3[41] == 1'b1 ? alpha_im_19[41] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[41] = {MMul_dot_product2_in0_im[41][13], MMul_dot_product2_in0_im[41]};
  assign MMul_dot_product2_sub_cast_3[41] = {{4{MMul_dot_product2_sub_cast_2[41][14]}}, MMul_dot_product2_sub_cast_2[41]};
  assign MMul_dot_product_out_re_4[41] = MMul_dot_product2_sub_cast_1[41] - MMul_dot_product2_sub_cast_3[41];
  assign MMul_dot_product2_in0_im_1[41] = (alpha_im_3[41] == 1'b1 ? alpha_re_19[41] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[41] = {MMul_dot_product2_in0_im_1[41][13], MMul_dot_product2_in0_im_1[41]};
  assign MMul_dot_product2_add_cast_1[41] = {{4{MMul_dot_product2_add_cast[41][14]}}, MMul_dot_product2_add_cast[41]};
  assign MMul_dot_product2_in0_re_1[41] = (alpha_re_3[41] == 1'b1 ? alpha_im_19[41] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[41] = {MMul_dot_product2_in0_re_1[41][13], MMul_dot_product2_in0_re_1[41]};
  assign MMul_dot_product2_add_cast_3[41] = {{4{MMul_dot_product2_add_cast_2[41][14]}}, MMul_dot_product2_add_cast_2[41]};
  assign MMul_dot_product_out_im_4[41] = MMul_dot_product2_add_cast_1[41] + MMul_dot_product2_add_cast_3[41];
  assign MMul_dot_product2_in0_re[42] = (alpha_re_3[42] == 1'b1 ? alpha_re_19[42] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[42] = {MMul_dot_product2_in0_re[42][13], MMul_dot_product2_in0_re[42]};
  assign MMul_dot_product2_sub_cast_1[42] = {{4{MMul_dot_product2_sub_cast[42][14]}}, MMul_dot_product2_sub_cast[42]};
  assign MMul_dot_product2_in0_im[42] = (alpha_im_3[42] == 1'b1 ? alpha_im_19[42] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[42] = {MMul_dot_product2_in0_im[42][13], MMul_dot_product2_in0_im[42]};
  assign MMul_dot_product2_sub_cast_3[42] = {{4{MMul_dot_product2_sub_cast_2[42][14]}}, MMul_dot_product2_sub_cast_2[42]};
  assign MMul_dot_product_out_re_4[42] = MMul_dot_product2_sub_cast_1[42] - MMul_dot_product2_sub_cast_3[42];
  assign MMul_dot_product2_in0_im_1[42] = (alpha_im_3[42] == 1'b1 ? alpha_re_19[42] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[42] = {MMul_dot_product2_in0_im_1[42][13], MMul_dot_product2_in0_im_1[42]};
  assign MMul_dot_product2_add_cast_1[42] = {{4{MMul_dot_product2_add_cast[42][14]}}, MMul_dot_product2_add_cast[42]};
  assign MMul_dot_product2_in0_re_1[42] = (alpha_re_3[42] == 1'b1 ? alpha_im_19[42] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[42] = {MMul_dot_product2_in0_re_1[42][13], MMul_dot_product2_in0_re_1[42]};
  assign MMul_dot_product2_add_cast_3[42] = {{4{MMul_dot_product2_add_cast_2[42][14]}}, MMul_dot_product2_add_cast_2[42]};
  assign MMul_dot_product_out_im_4[42] = MMul_dot_product2_add_cast_1[42] + MMul_dot_product2_add_cast_3[42];
  assign MMul_dot_product2_in0_re[43] = (alpha_re_3[43] == 1'b1 ? alpha_re_19[43] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[43] = {MMul_dot_product2_in0_re[43][13], MMul_dot_product2_in0_re[43]};
  assign MMul_dot_product2_sub_cast_1[43] = {{4{MMul_dot_product2_sub_cast[43][14]}}, MMul_dot_product2_sub_cast[43]};
  assign MMul_dot_product2_in0_im[43] = (alpha_im_3[43] == 1'b1 ? alpha_im_19[43] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[43] = {MMul_dot_product2_in0_im[43][13], MMul_dot_product2_in0_im[43]};
  assign MMul_dot_product2_sub_cast_3[43] = {{4{MMul_dot_product2_sub_cast_2[43][14]}}, MMul_dot_product2_sub_cast_2[43]};
  assign MMul_dot_product_out_re_4[43] = MMul_dot_product2_sub_cast_1[43] - MMul_dot_product2_sub_cast_3[43];
  assign MMul_dot_product2_in0_im_1[43] = (alpha_im_3[43] == 1'b1 ? alpha_re_19[43] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[43] = {MMul_dot_product2_in0_im_1[43][13], MMul_dot_product2_in0_im_1[43]};
  assign MMul_dot_product2_add_cast_1[43] = {{4{MMul_dot_product2_add_cast[43][14]}}, MMul_dot_product2_add_cast[43]};
  assign MMul_dot_product2_in0_re_1[43] = (alpha_re_3[43] == 1'b1 ? alpha_im_19[43] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[43] = {MMul_dot_product2_in0_re_1[43][13], MMul_dot_product2_in0_re_1[43]};
  assign MMul_dot_product2_add_cast_3[43] = {{4{MMul_dot_product2_add_cast_2[43][14]}}, MMul_dot_product2_add_cast_2[43]};
  assign MMul_dot_product_out_im_4[43] = MMul_dot_product2_add_cast_1[43] + MMul_dot_product2_add_cast_3[43];
  assign MMul_dot_product2_in0_re[44] = (alpha_re_3[44] == 1'b1 ? alpha_re_19[44] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[44] = {MMul_dot_product2_in0_re[44][13], MMul_dot_product2_in0_re[44]};
  assign MMul_dot_product2_sub_cast_1[44] = {{4{MMul_dot_product2_sub_cast[44][14]}}, MMul_dot_product2_sub_cast[44]};
  assign MMul_dot_product2_in0_im[44] = (alpha_im_3[44] == 1'b1 ? alpha_im_19[44] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[44] = {MMul_dot_product2_in0_im[44][13], MMul_dot_product2_in0_im[44]};
  assign MMul_dot_product2_sub_cast_3[44] = {{4{MMul_dot_product2_sub_cast_2[44][14]}}, MMul_dot_product2_sub_cast_2[44]};
  assign MMul_dot_product_out_re_4[44] = MMul_dot_product2_sub_cast_1[44] - MMul_dot_product2_sub_cast_3[44];
  assign MMul_dot_product2_in0_im_1[44] = (alpha_im_3[44] == 1'b1 ? alpha_re_19[44] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[44] = {MMul_dot_product2_in0_im_1[44][13], MMul_dot_product2_in0_im_1[44]};
  assign MMul_dot_product2_add_cast_1[44] = {{4{MMul_dot_product2_add_cast[44][14]}}, MMul_dot_product2_add_cast[44]};
  assign MMul_dot_product2_in0_re_1[44] = (alpha_re_3[44] == 1'b1 ? alpha_im_19[44] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[44] = {MMul_dot_product2_in0_re_1[44][13], MMul_dot_product2_in0_re_1[44]};
  assign MMul_dot_product2_add_cast_3[44] = {{4{MMul_dot_product2_add_cast_2[44][14]}}, MMul_dot_product2_add_cast_2[44]};
  assign MMul_dot_product_out_im_4[44] = MMul_dot_product2_add_cast_1[44] + MMul_dot_product2_add_cast_3[44];
  assign MMul_dot_product2_in0_re[45] = (alpha_re_3[45] == 1'b1 ? alpha_re_19[45] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[45] = {MMul_dot_product2_in0_re[45][13], MMul_dot_product2_in0_re[45]};
  assign MMul_dot_product2_sub_cast_1[45] = {{4{MMul_dot_product2_sub_cast[45][14]}}, MMul_dot_product2_sub_cast[45]};
  assign MMul_dot_product2_in0_im[45] = (alpha_im_3[45] == 1'b1 ? alpha_im_19[45] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[45] = {MMul_dot_product2_in0_im[45][13], MMul_dot_product2_in0_im[45]};
  assign MMul_dot_product2_sub_cast_3[45] = {{4{MMul_dot_product2_sub_cast_2[45][14]}}, MMul_dot_product2_sub_cast_2[45]};
  assign MMul_dot_product_out_re_4[45] = MMul_dot_product2_sub_cast_1[45] - MMul_dot_product2_sub_cast_3[45];
  assign MMul_dot_product2_in0_im_1[45] = (alpha_im_3[45] == 1'b1 ? alpha_re_19[45] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[45] = {MMul_dot_product2_in0_im_1[45][13], MMul_dot_product2_in0_im_1[45]};
  assign MMul_dot_product2_add_cast_1[45] = {{4{MMul_dot_product2_add_cast[45][14]}}, MMul_dot_product2_add_cast[45]};
  assign MMul_dot_product2_in0_re_1[45] = (alpha_re_3[45] == 1'b1 ? alpha_im_19[45] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[45] = {MMul_dot_product2_in0_re_1[45][13], MMul_dot_product2_in0_re_1[45]};
  assign MMul_dot_product2_add_cast_3[45] = {{4{MMul_dot_product2_add_cast_2[45][14]}}, MMul_dot_product2_add_cast_2[45]};
  assign MMul_dot_product_out_im_4[45] = MMul_dot_product2_add_cast_1[45] + MMul_dot_product2_add_cast_3[45];
  assign MMul_dot_product2_in0_re[46] = (alpha_re_3[46] == 1'b1 ? alpha_re_19[46] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[46] = {MMul_dot_product2_in0_re[46][13], MMul_dot_product2_in0_re[46]};
  assign MMul_dot_product2_sub_cast_1[46] = {{4{MMul_dot_product2_sub_cast[46][14]}}, MMul_dot_product2_sub_cast[46]};
  assign MMul_dot_product2_in0_im[46] = (alpha_im_3[46] == 1'b1 ? alpha_im_19[46] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[46] = {MMul_dot_product2_in0_im[46][13], MMul_dot_product2_in0_im[46]};
  assign MMul_dot_product2_sub_cast_3[46] = {{4{MMul_dot_product2_sub_cast_2[46][14]}}, MMul_dot_product2_sub_cast_2[46]};
  assign MMul_dot_product_out_re_4[46] = MMul_dot_product2_sub_cast_1[46] - MMul_dot_product2_sub_cast_3[46];
  assign MMul_dot_product2_in0_im_1[46] = (alpha_im_3[46] == 1'b1 ? alpha_re_19[46] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[46] = {MMul_dot_product2_in0_im_1[46][13], MMul_dot_product2_in0_im_1[46]};
  assign MMul_dot_product2_add_cast_1[46] = {{4{MMul_dot_product2_add_cast[46][14]}}, MMul_dot_product2_add_cast[46]};
  assign MMul_dot_product2_in0_re_1[46] = (alpha_re_3[46] == 1'b1 ? alpha_im_19[46] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[46] = {MMul_dot_product2_in0_re_1[46][13], MMul_dot_product2_in0_re_1[46]};
  assign MMul_dot_product2_add_cast_3[46] = {{4{MMul_dot_product2_add_cast_2[46][14]}}, MMul_dot_product2_add_cast_2[46]};
  assign MMul_dot_product_out_im_4[46] = MMul_dot_product2_add_cast_1[46] + MMul_dot_product2_add_cast_3[46];
  assign MMul_dot_product2_in0_re[47] = (alpha_re_3[47] == 1'b1 ? alpha_re_19[47] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[47] = {MMul_dot_product2_in0_re[47][13], MMul_dot_product2_in0_re[47]};
  assign MMul_dot_product2_sub_cast_1[47] = {{4{MMul_dot_product2_sub_cast[47][14]}}, MMul_dot_product2_sub_cast[47]};
  assign MMul_dot_product2_in0_im[47] = (alpha_im_3[47] == 1'b1 ? alpha_im_19[47] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[47] = {MMul_dot_product2_in0_im[47][13], MMul_dot_product2_in0_im[47]};
  assign MMul_dot_product2_sub_cast_3[47] = {{4{MMul_dot_product2_sub_cast_2[47][14]}}, MMul_dot_product2_sub_cast_2[47]};
  assign MMul_dot_product_out_re_4[47] = MMul_dot_product2_sub_cast_1[47] - MMul_dot_product2_sub_cast_3[47];
  assign MMul_dot_product2_in0_im_1[47] = (alpha_im_3[47] == 1'b1 ? alpha_re_19[47] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[47] = {MMul_dot_product2_in0_im_1[47][13], MMul_dot_product2_in0_im_1[47]};
  assign MMul_dot_product2_add_cast_1[47] = {{4{MMul_dot_product2_add_cast[47][14]}}, MMul_dot_product2_add_cast[47]};
  assign MMul_dot_product2_in0_re_1[47] = (alpha_re_3[47] == 1'b1 ? alpha_im_19[47] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[47] = {MMul_dot_product2_in0_re_1[47][13], MMul_dot_product2_in0_re_1[47]};
  assign MMul_dot_product2_add_cast_3[47] = {{4{MMul_dot_product2_add_cast_2[47][14]}}, MMul_dot_product2_add_cast_2[47]};
  assign MMul_dot_product_out_im_4[47] = MMul_dot_product2_add_cast_1[47] + MMul_dot_product2_add_cast_3[47];
  assign MMul_dot_product2_in0_re[48] = (alpha_re_3[48] == 1'b1 ? alpha_re_19[48] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[48] = {MMul_dot_product2_in0_re[48][13], MMul_dot_product2_in0_re[48]};
  assign MMul_dot_product2_sub_cast_1[48] = {{4{MMul_dot_product2_sub_cast[48][14]}}, MMul_dot_product2_sub_cast[48]};
  assign MMul_dot_product2_in0_im[48] = (alpha_im_3[48] == 1'b1 ? alpha_im_19[48] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[48] = {MMul_dot_product2_in0_im[48][13], MMul_dot_product2_in0_im[48]};
  assign MMul_dot_product2_sub_cast_3[48] = {{4{MMul_dot_product2_sub_cast_2[48][14]}}, MMul_dot_product2_sub_cast_2[48]};
  assign MMul_dot_product_out_re_4[48] = MMul_dot_product2_sub_cast_1[48] - MMul_dot_product2_sub_cast_3[48];
  assign MMul_dot_product2_in0_im_1[48] = (alpha_im_3[48] == 1'b1 ? alpha_re_19[48] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[48] = {MMul_dot_product2_in0_im_1[48][13], MMul_dot_product2_in0_im_1[48]};
  assign MMul_dot_product2_add_cast_1[48] = {{4{MMul_dot_product2_add_cast[48][14]}}, MMul_dot_product2_add_cast[48]};
  assign MMul_dot_product2_in0_re_1[48] = (alpha_re_3[48] == 1'b1 ? alpha_im_19[48] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[48] = {MMul_dot_product2_in0_re_1[48][13], MMul_dot_product2_in0_re_1[48]};
  assign MMul_dot_product2_add_cast_3[48] = {{4{MMul_dot_product2_add_cast_2[48][14]}}, MMul_dot_product2_add_cast_2[48]};
  assign MMul_dot_product_out_im_4[48] = MMul_dot_product2_add_cast_1[48] + MMul_dot_product2_add_cast_3[48];
  assign MMul_dot_product2_in0_re[49] = (alpha_re_3[49] == 1'b1 ? alpha_re_19[49] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[49] = {MMul_dot_product2_in0_re[49][13], MMul_dot_product2_in0_re[49]};
  assign MMul_dot_product2_sub_cast_1[49] = {{4{MMul_dot_product2_sub_cast[49][14]}}, MMul_dot_product2_sub_cast[49]};
  assign MMul_dot_product2_in0_im[49] = (alpha_im_3[49] == 1'b1 ? alpha_im_19[49] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[49] = {MMul_dot_product2_in0_im[49][13], MMul_dot_product2_in0_im[49]};
  assign MMul_dot_product2_sub_cast_3[49] = {{4{MMul_dot_product2_sub_cast_2[49][14]}}, MMul_dot_product2_sub_cast_2[49]};
  assign MMul_dot_product_out_re_4[49] = MMul_dot_product2_sub_cast_1[49] - MMul_dot_product2_sub_cast_3[49];
  assign MMul_dot_product2_in0_im_1[49] = (alpha_im_3[49] == 1'b1 ? alpha_re_19[49] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[49] = {MMul_dot_product2_in0_im_1[49][13], MMul_dot_product2_in0_im_1[49]};
  assign MMul_dot_product2_add_cast_1[49] = {{4{MMul_dot_product2_add_cast[49][14]}}, MMul_dot_product2_add_cast[49]};
  assign MMul_dot_product2_in0_re_1[49] = (alpha_re_3[49] == 1'b1 ? alpha_im_19[49] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[49] = {MMul_dot_product2_in0_re_1[49][13], MMul_dot_product2_in0_re_1[49]};
  assign MMul_dot_product2_add_cast_3[49] = {{4{MMul_dot_product2_add_cast_2[49][14]}}, MMul_dot_product2_add_cast_2[49]};
  assign MMul_dot_product_out_im_4[49] = MMul_dot_product2_add_cast_1[49] + MMul_dot_product2_add_cast_3[49];
  assign MMul_dot_product2_in0_re[50] = (alpha_re_3[50] == 1'b1 ? alpha_re_19[50] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[50] = {MMul_dot_product2_in0_re[50][13], MMul_dot_product2_in0_re[50]};
  assign MMul_dot_product2_sub_cast_1[50] = {{4{MMul_dot_product2_sub_cast[50][14]}}, MMul_dot_product2_sub_cast[50]};
  assign MMul_dot_product2_in0_im[50] = (alpha_im_3[50] == 1'b1 ? alpha_im_19[50] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[50] = {MMul_dot_product2_in0_im[50][13], MMul_dot_product2_in0_im[50]};
  assign MMul_dot_product2_sub_cast_3[50] = {{4{MMul_dot_product2_sub_cast_2[50][14]}}, MMul_dot_product2_sub_cast_2[50]};
  assign MMul_dot_product_out_re_4[50] = MMul_dot_product2_sub_cast_1[50] - MMul_dot_product2_sub_cast_3[50];
  assign MMul_dot_product2_in0_im_1[50] = (alpha_im_3[50] == 1'b1 ? alpha_re_19[50] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[50] = {MMul_dot_product2_in0_im_1[50][13], MMul_dot_product2_in0_im_1[50]};
  assign MMul_dot_product2_add_cast_1[50] = {{4{MMul_dot_product2_add_cast[50][14]}}, MMul_dot_product2_add_cast[50]};
  assign MMul_dot_product2_in0_re_1[50] = (alpha_re_3[50] == 1'b1 ? alpha_im_19[50] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[50] = {MMul_dot_product2_in0_re_1[50][13], MMul_dot_product2_in0_re_1[50]};
  assign MMul_dot_product2_add_cast_3[50] = {{4{MMul_dot_product2_add_cast_2[50][14]}}, MMul_dot_product2_add_cast_2[50]};
  assign MMul_dot_product_out_im_4[50] = MMul_dot_product2_add_cast_1[50] + MMul_dot_product2_add_cast_3[50];
  assign MMul_dot_product2_in0_re[51] = (alpha_re_3[51] == 1'b1 ? alpha_re_19[51] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[51] = {MMul_dot_product2_in0_re[51][13], MMul_dot_product2_in0_re[51]};
  assign MMul_dot_product2_sub_cast_1[51] = {{4{MMul_dot_product2_sub_cast[51][14]}}, MMul_dot_product2_sub_cast[51]};
  assign MMul_dot_product2_in0_im[51] = (alpha_im_3[51] == 1'b1 ? alpha_im_19[51] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[51] = {MMul_dot_product2_in0_im[51][13], MMul_dot_product2_in0_im[51]};
  assign MMul_dot_product2_sub_cast_3[51] = {{4{MMul_dot_product2_sub_cast_2[51][14]}}, MMul_dot_product2_sub_cast_2[51]};
  assign MMul_dot_product_out_re_4[51] = MMul_dot_product2_sub_cast_1[51] - MMul_dot_product2_sub_cast_3[51];
  assign MMul_dot_product2_in0_im_1[51] = (alpha_im_3[51] == 1'b1 ? alpha_re_19[51] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[51] = {MMul_dot_product2_in0_im_1[51][13], MMul_dot_product2_in0_im_1[51]};
  assign MMul_dot_product2_add_cast_1[51] = {{4{MMul_dot_product2_add_cast[51][14]}}, MMul_dot_product2_add_cast[51]};
  assign MMul_dot_product2_in0_re_1[51] = (alpha_re_3[51] == 1'b1 ? alpha_im_19[51] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[51] = {MMul_dot_product2_in0_re_1[51][13], MMul_dot_product2_in0_re_1[51]};
  assign MMul_dot_product2_add_cast_3[51] = {{4{MMul_dot_product2_add_cast_2[51][14]}}, MMul_dot_product2_add_cast_2[51]};
  assign MMul_dot_product_out_im_4[51] = MMul_dot_product2_add_cast_1[51] + MMul_dot_product2_add_cast_3[51];
  assign MMul_dot_product2_in0_re[52] = (alpha_re_3[52] == 1'b1 ? alpha_re_19[52] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[52] = {MMul_dot_product2_in0_re[52][13], MMul_dot_product2_in0_re[52]};
  assign MMul_dot_product2_sub_cast_1[52] = {{4{MMul_dot_product2_sub_cast[52][14]}}, MMul_dot_product2_sub_cast[52]};
  assign MMul_dot_product2_in0_im[52] = (alpha_im_3[52] == 1'b1 ? alpha_im_19[52] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[52] = {MMul_dot_product2_in0_im[52][13], MMul_dot_product2_in0_im[52]};
  assign MMul_dot_product2_sub_cast_3[52] = {{4{MMul_dot_product2_sub_cast_2[52][14]}}, MMul_dot_product2_sub_cast_2[52]};
  assign MMul_dot_product_out_re_4[52] = MMul_dot_product2_sub_cast_1[52] - MMul_dot_product2_sub_cast_3[52];
  assign MMul_dot_product2_in0_im_1[52] = (alpha_im_3[52] == 1'b1 ? alpha_re_19[52] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[52] = {MMul_dot_product2_in0_im_1[52][13], MMul_dot_product2_in0_im_1[52]};
  assign MMul_dot_product2_add_cast_1[52] = {{4{MMul_dot_product2_add_cast[52][14]}}, MMul_dot_product2_add_cast[52]};
  assign MMul_dot_product2_in0_re_1[52] = (alpha_re_3[52] == 1'b1 ? alpha_im_19[52] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[52] = {MMul_dot_product2_in0_re_1[52][13], MMul_dot_product2_in0_re_1[52]};
  assign MMul_dot_product2_add_cast_3[52] = {{4{MMul_dot_product2_add_cast_2[52][14]}}, MMul_dot_product2_add_cast_2[52]};
  assign MMul_dot_product_out_im_4[52] = MMul_dot_product2_add_cast_1[52] + MMul_dot_product2_add_cast_3[52];
  assign MMul_dot_product2_in0_re[53] = (alpha_re_3[53] == 1'b1 ? alpha_re_19[53] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[53] = {MMul_dot_product2_in0_re[53][13], MMul_dot_product2_in0_re[53]};
  assign MMul_dot_product2_sub_cast_1[53] = {{4{MMul_dot_product2_sub_cast[53][14]}}, MMul_dot_product2_sub_cast[53]};
  assign MMul_dot_product2_in0_im[53] = (alpha_im_3[53] == 1'b1 ? alpha_im_19[53] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[53] = {MMul_dot_product2_in0_im[53][13], MMul_dot_product2_in0_im[53]};
  assign MMul_dot_product2_sub_cast_3[53] = {{4{MMul_dot_product2_sub_cast_2[53][14]}}, MMul_dot_product2_sub_cast_2[53]};
  assign MMul_dot_product_out_re_4[53] = MMul_dot_product2_sub_cast_1[53] - MMul_dot_product2_sub_cast_3[53];
  assign MMul_dot_product2_in0_im_1[53] = (alpha_im_3[53] == 1'b1 ? alpha_re_19[53] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[53] = {MMul_dot_product2_in0_im_1[53][13], MMul_dot_product2_in0_im_1[53]};
  assign MMul_dot_product2_add_cast_1[53] = {{4{MMul_dot_product2_add_cast[53][14]}}, MMul_dot_product2_add_cast[53]};
  assign MMul_dot_product2_in0_re_1[53] = (alpha_re_3[53] == 1'b1 ? alpha_im_19[53] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[53] = {MMul_dot_product2_in0_re_1[53][13], MMul_dot_product2_in0_re_1[53]};
  assign MMul_dot_product2_add_cast_3[53] = {{4{MMul_dot_product2_add_cast_2[53][14]}}, MMul_dot_product2_add_cast_2[53]};
  assign MMul_dot_product_out_im_4[53] = MMul_dot_product2_add_cast_1[53] + MMul_dot_product2_add_cast_3[53];
  assign MMul_dot_product2_in0_re[54] = (alpha_re_3[54] == 1'b1 ? alpha_re_19[54] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[54] = {MMul_dot_product2_in0_re[54][13], MMul_dot_product2_in0_re[54]};
  assign MMul_dot_product2_sub_cast_1[54] = {{4{MMul_dot_product2_sub_cast[54][14]}}, MMul_dot_product2_sub_cast[54]};
  assign MMul_dot_product2_in0_im[54] = (alpha_im_3[54] == 1'b1 ? alpha_im_19[54] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[54] = {MMul_dot_product2_in0_im[54][13], MMul_dot_product2_in0_im[54]};
  assign MMul_dot_product2_sub_cast_3[54] = {{4{MMul_dot_product2_sub_cast_2[54][14]}}, MMul_dot_product2_sub_cast_2[54]};
  assign MMul_dot_product_out_re_4[54] = MMul_dot_product2_sub_cast_1[54] - MMul_dot_product2_sub_cast_3[54];
  assign MMul_dot_product2_in0_im_1[54] = (alpha_im_3[54] == 1'b1 ? alpha_re_19[54] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[54] = {MMul_dot_product2_in0_im_1[54][13], MMul_dot_product2_in0_im_1[54]};
  assign MMul_dot_product2_add_cast_1[54] = {{4{MMul_dot_product2_add_cast[54][14]}}, MMul_dot_product2_add_cast[54]};
  assign MMul_dot_product2_in0_re_1[54] = (alpha_re_3[54] == 1'b1 ? alpha_im_19[54] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[54] = {MMul_dot_product2_in0_re_1[54][13], MMul_dot_product2_in0_re_1[54]};
  assign MMul_dot_product2_add_cast_3[54] = {{4{MMul_dot_product2_add_cast_2[54][14]}}, MMul_dot_product2_add_cast_2[54]};
  assign MMul_dot_product_out_im_4[54] = MMul_dot_product2_add_cast_1[54] + MMul_dot_product2_add_cast_3[54];
  assign MMul_dot_product2_in0_re[55] = (alpha_re_3[55] == 1'b1 ? alpha_re_19[55] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[55] = {MMul_dot_product2_in0_re[55][13], MMul_dot_product2_in0_re[55]};
  assign MMul_dot_product2_sub_cast_1[55] = {{4{MMul_dot_product2_sub_cast[55][14]}}, MMul_dot_product2_sub_cast[55]};
  assign MMul_dot_product2_in0_im[55] = (alpha_im_3[55] == 1'b1 ? alpha_im_19[55] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[55] = {MMul_dot_product2_in0_im[55][13], MMul_dot_product2_in0_im[55]};
  assign MMul_dot_product2_sub_cast_3[55] = {{4{MMul_dot_product2_sub_cast_2[55][14]}}, MMul_dot_product2_sub_cast_2[55]};
  assign MMul_dot_product_out_re_4[55] = MMul_dot_product2_sub_cast_1[55] - MMul_dot_product2_sub_cast_3[55];
  assign MMul_dot_product2_in0_im_1[55] = (alpha_im_3[55] == 1'b1 ? alpha_re_19[55] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[55] = {MMul_dot_product2_in0_im_1[55][13], MMul_dot_product2_in0_im_1[55]};
  assign MMul_dot_product2_add_cast_1[55] = {{4{MMul_dot_product2_add_cast[55][14]}}, MMul_dot_product2_add_cast[55]};
  assign MMul_dot_product2_in0_re_1[55] = (alpha_re_3[55] == 1'b1 ? alpha_im_19[55] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[55] = {MMul_dot_product2_in0_re_1[55][13], MMul_dot_product2_in0_re_1[55]};
  assign MMul_dot_product2_add_cast_3[55] = {{4{MMul_dot_product2_add_cast_2[55][14]}}, MMul_dot_product2_add_cast_2[55]};
  assign MMul_dot_product_out_im_4[55] = MMul_dot_product2_add_cast_1[55] + MMul_dot_product2_add_cast_3[55];
  assign MMul_dot_product2_in0_re[56] = (alpha_re_3[56] == 1'b1 ? alpha_re_19[56] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[56] = {MMul_dot_product2_in0_re[56][13], MMul_dot_product2_in0_re[56]};
  assign MMul_dot_product2_sub_cast_1[56] = {{4{MMul_dot_product2_sub_cast[56][14]}}, MMul_dot_product2_sub_cast[56]};
  assign MMul_dot_product2_in0_im[56] = (alpha_im_3[56] == 1'b1 ? alpha_im_19[56] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[56] = {MMul_dot_product2_in0_im[56][13], MMul_dot_product2_in0_im[56]};
  assign MMul_dot_product2_sub_cast_3[56] = {{4{MMul_dot_product2_sub_cast_2[56][14]}}, MMul_dot_product2_sub_cast_2[56]};
  assign MMul_dot_product_out_re_4[56] = MMul_dot_product2_sub_cast_1[56] - MMul_dot_product2_sub_cast_3[56];
  assign MMul_dot_product2_in0_im_1[56] = (alpha_im_3[56] == 1'b1 ? alpha_re_19[56] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[56] = {MMul_dot_product2_in0_im_1[56][13], MMul_dot_product2_in0_im_1[56]};
  assign MMul_dot_product2_add_cast_1[56] = {{4{MMul_dot_product2_add_cast[56][14]}}, MMul_dot_product2_add_cast[56]};
  assign MMul_dot_product2_in0_re_1[56] = (alpha_re_3[56] == 1'b1 ? alpha_im_19[56] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[56] = {MMul_dot_product2_in0_re_1[56][13], MMul_dot_product2_in0_re_1[56]};
  assign MMul_dot_product2_add_cast_3[56] = {{4{MMul_dot_product2_add_cast_2[56][14]}}, MMul_dot_product2_add_cast_2[56]};
  assign MMul_dot_product_out_im_4[56] = MMul_dot_product2_add_cast_1[56] + MMul_dot_product2_add_cast_3[56];
  assign MMul_dot_product2_in0_re[57] = (alpha_re_3[57] == 1'b1 ? alpha_re_19[57] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[57] = {MMul_dot_product2_in0_re[57][13], MMul_dot_product2_in0_re[57]};
  assign MMul_dot_product2_sub_cast_1[57] = {{4{MMul_dot_product2_sub_cast[57][14]}}, MMul_dot_product2_sub_cast[57]};
  assign MMul_dot_product2_in0_im[57] = (alpha_im_3[57] == 1'b1 ? alpha_im_19[57] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[57] = {MMul_dot_product2_in0_im[57][13], MMul_dot_product2_in0_im[57]};
  assign MMul_dot_product2_sub_cast_3[57] = {{4{MMul_dot_product2_sub_cast_2[57][14]}}, MMul_dot_product2_sub_cast_2[57]};
  assign MMul_dot_product_out_re_4[57] = MMul_dot_product2_sub_cast_1[57] - MMul_dot_product2_sub_cast_3[57];
  assign MMul_dot_product2_in0_im_1[57] = (alpha_im_3[57] == 1'b1 ? alpha_re_19[57] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[57] = {MMul_dot_product2_in0_im_1[57][13], MMul_dot_product2_in0_im_1[57]};
  assign MMul_dot_product2_add_cast_1[57] = {{4{MMul_dot_product2_add_cast[57][14]}}, MMul_dot_product2_add_cast[57]};
  assign MMul_dot_product2_in0_re_1[57] = (alpha_re_3[57] == 1'b1 ? alpha_im_19[57] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[57] = {MMul_dot_product2_in0_re_1[57][13], MMul_dot_product2_in0_re_1[57]};
  assign MMul_dot_product2_add_cast_3[57] = {{4{MMul_dot_product2_add_cast_2[57][14]}}, MMul_dot_product2_add_cast_2[57]};
  assign MMul_dot_product_out_im_4[57] = MMul_dot_product2_add_cast_1[57] + MMul_dot_product2_add_cast_3[57];
  assign MMul_dot_product2_in0_re[58] = (alpha_re_3[58] == 1'b1 ? alpha_re_19[58] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[58] = {MMul_dot_product2_in0_re[58][13], MMul_dot_product2_in0_re[58]};
  assign MMul_dot_product2_sub_cast_1[58] = {{4{MMul_dot_product2_sub_cast[58][14]}}, MMul_dot_product2_sub_cast[58]};
  assign MMul_dot_product2_in0_im[58] = (alpha_im_3[58] == 1'b1 ? alpha_im_19[58] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[58] = {MMul_dot_product2_in0_im[58][13], MMul_dot_product2_in0_im[58]};
  assign MMul_dot_product2_sub_cast_3[58] = {{4{MMul_dot_product2_sub_cast_2[58][14]}}, MMul_dot_product2_sub_cast_2[58]};
  assign MMul_dot_product_out_re_4[58] = MMul_dot_product2_sub_cast_1[58] - MMul_dot_product2_sub_cast_3[58];
  assign MMul_dot_product2_in0_im_1[58] = (alpha_im_3[58] == 1'b1 ? alpha_re_19[58] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[58] = {MMul_dot_product2_in0_im_1[58][13], MMul_dot_product2_in0_im_1[58]};
  assign MMul_dot_product2_add_cast_1[58] = {{4{MMul_dot_product2_add_cast[58][14]}}, MMul_dot_product2_add_cast[58]};
  assign MMul_dot_product2_in0_re_1[58] = (alpha_re_3[58] == 1'b1 ? alpha_im_19[58] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[58] = {MMul_dot_product2_in0_re_1[58][13], MMul_dot_product2_in0_re_1[58]};
  assign MMul_dot_product2_add_cast_3[58] = {{4{MMul_dot_product2_add_cast_2[58][14]}}, MMul_dot_product2_add_cast_2[58]};
  assign MMul_dot_product_out_im_4[58] = MMul_dot_product2_add_cast_1[58] + MMul_dot_product2_add_cast_3[58];
  assign MMul_dot_product2_in0_re[59] = (alpha_re_3[59] == 1'b1 ? alpha_re_19[59] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[59] = {MMul_dot_product2_in0_re[59][13], MMul_dot_product2_in0_re[59]};
  assign MMul_dot_product2_sub_cast_1[59] = {{4{MMul_dot_product2_sub_cast[59][14]}}, MMul_dot_product2_sub_cast[59]};
  assign MMul_dot_product2_in0_im[59] = (alpha_im_3[59] == 1'b1 ? alpha_im_19[59] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[59] = {MMul_dot_product2_in0_im[59][13], MMul_dot_product2_in0_im[59]};
  assign MMul_dot_product2_sub_cast_3[59] = {{4{MMul_dot_product2_sub_cast_2[59][14]}}, MMul_dot_product2_sub_cast_2[59]};
  assign MMul_dot_product_out_re_4[59] = MMul_dot_product2_sub_cast_1[59] - MMul_dot_product2_sub_cast_3[59];
  assign MMul_dot_product2_in0_im_1[59] = (alpha_im_3[59] == 1'b1 ? alpha_re_19[59] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[59] = {MMul_dot_product2_in0_im_1[59][13], MMul_dot_product2_in0_im_1[59]};
  assign MMul_dot_product2_add_cast_1[59] = {{4{MMul_dot_product2_add_cast[59][14]}}, MMul_dot_product2_add_cast[59]};
  assign MMul_dot_product2_in0_re_1[59] = (alpha_re_3[59] == 1'b1 ? alpha_im_19[59] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[59] = {MMul_dot_product2_in0_re_1[59][13], MMul_dot_product2_in0_re_1[59]};
  assign MMul_dot_product2_add_cast_3[59] = {{4{MMul_dot_product2_add_cast_2[59][14]}}, MMul_dot_product2_add_cast_2[59]};
  assign MMul_dot_product_out_im_4[59] = MMul_dot_product2_add_cast_1[59] + MMul_dot_product2_add_cast_3[59];
  assign MMul_dot_product2_in0_re[60] = (alpha_re_3[60] == 1'b1 ? alpha_re_19[60] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[60] = {MMul_dot_product2_in0_re[60][13], MMul_dot_product2_in0_re[60]};
  assign MMul_dot_product2_sub_cast_1[60] = {{4{MMul_dot_product2_sub_cast[60][14]}}, MMul_dot_product2_sub_cast[60]};
  assign MMul_dot_product2_in0_im[60] = (alpha_im_3[60] == 1'b1 ? alpha_im_19[60] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[60] = {MMul_dot_product2_in0_im[60][13], MMul_dot_product2_in0_im[60]};
  assign MMul_dot_product2_sub_cast_3[60] = {{4{MMul_dot_product2_sub_cast_2[60][14]}}, MMul_dot_product2_sub_cast_2[60]};
  assign MMul_dot_product_out_re_4[60] = MMul_dot_product2_sub_cast_1[60] - MMul_dot_product2_sub_cast_3[60];
  assign MMul_dot_product2_in0_im_1[60] = (alpha_im_3[60] == 1'b1 ? alpha_re_19[60] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[60] = {MMul_dot_product2_in0_im_1[60][13], MMul_dot_product2_in0_im_1[60]};
  assign MMul_dot_product2_add_cast_1[60] = {{4{MMul_dot_product2_add_cast[60][14]}}, MMul_dot_product2_add_cast[60]};
  assign MMul_dot_product2_in0_re_1[60] = (alpha_re_3[60] == 1'b1 ? alpha_im_19[60] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[60] = {MMul_dot_product2_in0_re_1[60][13], MMul_dot_product2_in0_re_1[60]};
  assign MMul_dot_product2_add_cast_3[60] = {{4{MMul_dot_product2_add_cast_2[60][14]}}, MMul_dot_product2_add_cast_2[60]};
  assign MMul_dot_product_out_im_4[60] = MMul_dot_product2_add_cast_1[60] + MMul_dot_product2_add_cast_3[60];
  assign MMul_dot_product2_in0_re[61] = (alpha_re_3[61] == 1'b1 ? alpha_re_19[61] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[61] = {MMul_dot_product2_in0_re[61][13], MMul_dot_product2_in0_re[61]};
  assign MMul_dot_product2_sub_cast_1[61] = {{4{MMul_dot_product2_sub_cast[61][14]}}, MMul_dot_product2_sub_cast[61]};
  assign MMul_dot_product2_in0_im[61] = (alpha_im_3[61] == 1'b1 ? alpha_im_19[61] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[61] = {MMul_dot_product2_in0_im[61][13], MMul_dot_product2_in0_im[61]};
  assign MMul_dot_product2_sub_cast_3[61] = {{4{MMul_dot_product2_sub_cast_2[61][14]}}, MMul_dot_product2_sub_cast_2[61]};
  assign MMul_dot_product_out_re_4[61] = MMul_dot_product2_sub_cast_1[61] - MMul_dot_product2_sub_cast_3[61];
  assign MMul_dot_product2_in0_im_1[61] = (alpha_im_3[61] == 1'b1 ? alpha_re_19[61] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[61] = {MMul_dot_product2_in0_im_1[61][13], MMul_dot_product2_in0_im_1[61]};
  assign MMul_dot_product2_add_cast_1[61] = {{4{MMul_dot_product2_add_cast[61][14]}}, MMul_dot_product2_add_cast[61]};
  assign MMul_dot_product2_in0_re_1[61] = (alpha_re_3[61] == 1'b1 ? alpha_im_19[61] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[61] = {MMul_dot_product2_in0_re_1[61][13], MMul_dot_product2_in0_re_1[61]};
  assign MMul_dot_product2_add_cast_3[61] = {{4{MMul_dot_product2_add_cast_2[61][14]}}, MMul_dot_product2_add_cast_2[61]};
  assign MMul_dot_product_out_im_4[61] = MMul_dot_product2_add_cast_1[61] + MMul_dot_product2_add_cast_3[61];
  assign MMul_dot_product2_in0_re[62] = (alpha_re_3[62] == 1'b1 ? alpha_re_19[62] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[62] = {MMul_dot_product2_in0_re[62][13], MMul_dot_product2_in0_re[62]};
  assign MMul_dot_product2_sub_cast_1[62] = {{4{MMul_dot_product2_sub_cast[62][14]}}, MMul_dot_product2_sub_cast[62]};
  assign MMul_dot_product2_in0_im[62] = (alpha_im_3[62] == 1'b1 ? alpha_im_19[62] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[62] = {MMul_dot_product2_in0_im[62][13], MMul_dot_product2_in0_im[62]};
  assign MMul_dot_product2_sub_cast_3[62] = {{4{MMul_dot_product2_sub_cast_2[62][14]}}, MMul_dot_product2_sub_cast_2[62]};
  assign MMul_dot_product_out_re_4[62] = MMul_dot_product2_sub_cast_1[62] - MMul_dot_product2_sub_cast_3[62];
  assign MMul_dot_product2_in0_im_1[62] = (alpha_im_3[62] == 1'b1 ? alpha_re_19[62] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[62] = {MMul_dot_product2_in0_im_1[62][13], MMul_dot_product2_in0_im_1[62]};
  assign MMul_dot_product2_add_cast_1[62] = {{4{MMul_dot_product2_add_cast[62][14]}}, MMul_dot_product2_add_cast[62]};
  assign MMul_dot_product2_in0_re_1[62] = (alpha_re_3[62] == 1'b1 ? alpha_im_19[62] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[62] = {MMul_dot_product2_in0_re_1[62][13], MMul_dot_product2_in0_re_1[62]};
  assign MMul_dot_product2_add_cast_3[62] = {{4{MMul_dot_product2_add_cast_2[62][14]}}, MMul_dot_product2_add_cast_2[62]};
  assign MMul_dot_product_out_im_4[62] = MMul_dot_product2_add_cast_1[62] + MMul_dot_product2_add_cast_3[62];
  assign MMul_dot_product2_in0_re[63] = (alpha_re_3[63] == 1'b1 ? alpha_re_19[63] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast[63] = {MMul_dot_product2_in0_re[63][13], MMul_dot_product2_in0_re[63]};
  assign MMul_dot_product2_sub_cast_1[63] = {{4{MMul_dot_product2_sub_cast[63][14]}}, MMul_dot_product2_sub_cast[63]};
  assign MMul_dot_product2_in0_im[63] = (alpha_im_3[63] == 1'b1 ? alpha_im_19[63] :
              14'sb00000000000000);
  assign MMul_dot_product2_sub_cast_2[63] = {MMul_dot_product2_in0_im[63][13], MMul_dot_product2_in0_im[63]};
  assign MMul_dot_product2_sub_cast_3[63] = {{4{MMul_dot_product2_sub_cast_2[63][14]}}, MMul_dot_product2_sub_cast_2[63]};
  assign MMul_dot_product_out_re_4[63] = MMul_dot_product2_sub_cast_1[63] - MMul_dot_product2_sub_cast_3[63];
  assign MMul_dot_product2_in0_im_1[63] = (alpha_im_3[63] == 1'b1 ? alpha_re_19[63] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast[63] = {MMul_dot_product2_in0_im_1[63][13], MMul_dot_product2_in0_im_1[63]};
  assign MMul_dot_product2_add_cast_1[63] = {{4{MMul_dot_product2_add_cast[63][14]}}, MMul_dot_product2_add_cast[63]};
  assign MMul_dot_product2_in0_re_1[63] = (alpha_re_3[63] == 1'b1 ? alpha_im_19[63] :
              14'sb00000000000000);
  assign MMul_dot_product2_add_cast_2[63] = {MMul_dot_product2_in0_re_1[63][13], MMul_dot_product2_in0_re_1[63]};
  assign MMul_dot_product2_add_cast_3[63] = {{4{MMul_dot_product2_add_cast_2[63][14]}}, MMul_dot_product2_add_cast_2[63]};
  assign MMul_dot_product_out_im_4[63] = MMul_dot_product2_add_cast_1[63] + MMul_dot_product2_add_cast_3[63];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  always_comb begin
    reshape_out_re_4[0][0] = MMul_dot_product_out_re_4[0];
    reshape_out_im_4[0][0] = MMul_dot_product_out_im_4[0];
    reshape_out_re_4[1][0] = MMul_dot_product_out_re_4[1];
    reshape_out_im_4[1][0] = MMul_dot_product_out_im_4[1];
    reshape_out_re_4[2][0] = MMul_dot_product_out_re_4[2];
    reshape_out_im_4[2][0] = MMul_dot_product_out_im_4[2];
    reshape_out_re_4[3][0] = MMul_dot_product_out_re_4[3];
    reshape_out_im_4[3][0] = MMul_dot_product_out_im_4[3];
    reshape_out_re_4[4][0] = MMul_dot_product_out_re_4[4];
    reshape_out_im_4[4][0] = MMul_dot_product_out_im_4[4];
    reshape_out_re_4[5][0] = MMul_dot_product_out_re_4[5];
    reshape_out_im_4[5][0] = MMul_dot_product_out_im_4[5];
    reshape_out_re_4[6][0] = MMul_dot_product_out_re_4[6];
    reshape_out_im_4[6][0] = MMul_dot_product_out_im_4[6];
    reshape_out_re_4[7][0] = MMul_dot_product_out_re_4[7];
    reshape_out_im_4[7][0] = MMul_dot_product_out_im_4[7];
    reshape_out_re_4[0][1] = MMul_dot_product_out_re_4[8];
    reshape_out_im_4[0][1] = MMul_dot_product_out_im_4[8];
    reshape_out_re_4[1][1] = MMul_dot_product_out_re_4[9];
    reshape_out_im_4[1][1] = MMul_dot_product_out_im_4[9];
    reshape_out_re_4[2][1] = MMul_dot_product_out_re_4[10];
    reshape_out_im_4[2][1] = MMul_dot_product_out_im_4[10];
    reshape_out_re_4[3][1] = MMul_dot_product_out_re_4[11];
    reshape_out_im_4[3][1] = MMul_dot_product_out_im_4[11];
    reshape_out_re_4[4][1] = MMul_dot_product_out_re_4[12];
    reshape_out_im_4[4][1] = MMul_dot_product_out_im_4[12];
    reshape_out_re_4[5][1] = MMul_dot_product_out_re_4[13];
    reshape_out_im_4[5][1] = MMul_dot_product_out_im_4[13];
    reshape_out_re_4[6][1] = MMul_dot_product_out_re_4[14];
    reshape_out_im_4[6][1] = MMul_dot_product_out_im_4[14];
    reshape_out_re_4[7][1] = MMul_dot_product_out_re_4[15];
    reshape_out_im_4[7][1] = MMul_dot_product_out_im_4[15];
    reshape_out_re_4[0][2] = MMul_dot_product_out_re_4[16];
    reshape_out_im_4[0][2] = MMul_dot_product_out_im_4[16];
    reshape_out_re_4[1][2] = MMul_dot_product_out_re_4[17];
    reshape_out_im_4[1][2] = MMul_dot_product_out_im_4[17];
    reshape_out_re_4[2][2] = MMul_dot_product_out_re_4[18];
    reshape_out_im_4[2][2] = MMul_dot_product_out_im_4[18];
    reshape_out_re_4[3][2] = MMul_dot_product_out_re_4[19];
    reshape_out_im_4[3][2] = MMul_dot_product_out_im_4[19];
    reshape_out_re_4[4][2] = MMul_dot_product_out_re_4[20];
    reshape_out_im_4[4][2] = MMul_dot_product_out_im_4[20];
    reshape_out_re_4[5][2] = MMul_dot_product_out_re_4[21];
    reshape_out_im_4[5][2] = MMul_dot_product_out_im_4[21];
    reshape_out_re_4[6][2] = MMul_dot_product_out_re_4[22];
    reshape_out_im_4[6][2] = MMul_dot_product_out_im_4[22];
    reshape_out_re_4[7][2] = MMul_dot_product_out_re_4[23];
    reshape_out_im_4[7][2] = MMul_dot_product_out_im_4[23];
    reshape_out_re_4[0][3] = MMul_dot_product_out_re_4[24];
    reshape_out_im_4[0][3] = MMul_dot_product_out_im_4[24];
    reshape_out_re_4[1][3] = MMul_dot_product_out_re_4[25];
    reshape_out_im_4[1][3] = MMul_dot_product_out_im_4[25];
    reshape_out_re_4[2][3] = MMul_dot_product_out_re_4[26];
    reshape_out_im_4[2][3] = MMul_dot_product_out_im_4[26];
    reshape_out_re_4[3][3] = MMul_dot_product_out_re_4[27];
    reshape_out_im_4[3][3] = MMul_dot_product_out_im_4[27];
    reshape_out_re_4[4][3] = MMul_dot_product_out_re_4[28];
    reshape_out_im_4[4][3] = MMul_dot_product_out_im_4[28];
    reshape_out_re_4[5][3] = MMul_dot_product_out_re_4[29];
    reshape_out_im_4[5][3] = MMul_dot_product_out_im_4[29];
    reshape_out_re_4[6][3] = MMul_dot_product_out_re_4[30];
    reshape_out_im_4[6][3] = MMul_dot_product_out_im_4[30];
    reshape_out_re_4[7][3] = MMul_dot_product_out_re_4[31];
    reshape_out_im_4[7][3] = MMul_dot_product_out_im_4[31];
    reshape_out_re_4[0][4] = MMul_dot_product_out_re_4[32];
    reshape_out_im_4[0][4] = MMul_dot_product_out_im_4[32];
    reshape_out_re_4[1][4] = MMul_dot_product_out_re_4[33];
    reshape_out_im_4[1][4] = MMul_dot_product_out_im_4[33];
    reshape_out_re_4[2][4] = MMul_dot_product_out_re_4[34];
    reshape_out_im_4[2][4] = MMul_dot_product_out_im_4[34];
    reshape_out_re_4[3][4] = MMul_dot_product_out_re_4[35];
    reshape_out_im_4[3][4] = MMul_dot_product_out_im_4[35];
    reshape_out_re_4[4][4] = MMul_dot_product_out_re_4[36];
    reshape_out_im_4[4][4] = MMul_dot_product_out_im_4[36];
    reshape_out_re_4[5][4] = MMul_dot_product_out_re_4[37];
    reshape_out_im_4[5][4] = MMul_dot_product_out_im_4[37];
    reshape_out_re_4[6][4] = MMul_dot_product_out_re_4[38];
    reshape_out_im_4[6][4] = MMul_dot_product_out_im_4[38];
    reshape_out_re_4[7][4] = MMul_dot_product_out_re_4[39];
    reshape_out_im_4[7][4] = MMul_dot_product_out_im_4[39];
    reshape_out_re_4[0][5] = MMul_dot_product_out_re_4[40];
    reshape_out_im_4[0][5] = MMul_dot_product_out_im_4[40];
    reshape_out_re_4[1][5] = MMul_dot_product_out_re_4[41];
    reshape_out_im_4[1][5] = MMul_dot_product_out_im_4[41];
    reshape_out_re_4[2][5] = MMul_dot_product_out_re_4[42];
    reshape_out_im_4[2][5] = MMul_dot_product_out_im_4[42];
    reshape_out_re_4[3][5] = MMul_dot_product_out_re_4[43];
    reshape_out_im_4[3][5] = MMul_dot_product_out_im_4[43];
    reshape_out_re_4[4][5] = MMul_dot_product_out_re_4[44];
    reshape_out_im_4[4][5] = MMul_dot_product_out_im_4[44];
    reshape_out_re_4[5][5] = MMul_dot_product_out_re_4[45];
    reshape_out_im_4[5][5] = MMul_dot_product_out_im_4[45];
    reshape_out_re_4[6][5] = MMul_dot_product_out_re_4[46];
    reshape_out_im_4[6][5] = MMul_dot_product_out_im_4[46];
    reshape_out_re_4[7][5] = MMul_dot_product_out_re_4[47];
    reshape_out_im_4[7][5] = MMul_dot_product_out_im_4[47];
    reshape_out_re_4[0][6] = MMul_dot_product_out_re_4[48];
    reshape_out_im_4[0][6] = MMul_dot_product_out_im_4[48];
    reshape_out_re_4[1][6] = MMul_dot_product_out_re_4[49];
    reshape_out_im_4[1][6] = MMul_dot_product_out_im_4[49];
    reshape_out_re_4[2][6] = MMul_dot_product_out_re_4[50];
    reshape_out_im_4[2][6] = MMul_dot_product_out_im_4[50];
    reshape_out_re_4[3][6] = MMul_dot_product_out_re_4[51];
    reshape_out_im_4[3][6] = MMul_dot_product_out_im_4[51];
    reshape_out_re_4[4][6] = MMul_dot_product_out_re_4[52];
    reshape_out_im_4[4][6] = MMul_dot_product_out_im_4[52];
    reshape_out_re_4[5][6] = MMul_dot_product_out_re_4[53];
    reshape_out_im_4[5][6] = MMul_dot_product_out_im_4[53];
    reshape_out_re_4[6][6] = MMul_dot_product_out_re_4[54];
    reshape_out_im_4[6][6] = MMul_dot_product_out_im_4[54];
    reshape_out_re_4[7][6] = MMul_dot_product_out_re_4[55];
    reshape_out_im_4[7][6] = MMul_dot_product_out_im_4[55];
    reshape_out_re_4[0][7] = MMul_dot_product_out_re_4[56];
    reshape_out_im_4[0][7] = MMul_dot_product_out_im_4[56];
    reshape_out_re_4[1][7] = MMul_dot_product_out_re_4[57];
    reshape_out_im_4[1][7] = MMul_dot_product_out_im_4[57];
    reshape_out_re_4[2][7] = MMul_dot_product_out_re_4[58];
    reshape_out_im_4[2][7] = MMul_dot_product_out_im_4[58];
    reshape_out_re_4[3][7] = MMul_dot_product_out_re_4[59];
    reshape_out_im_4[3][7] = MMul_dot_product_out_im_4[59];
    reshape_out_re_4[4][7] = MMul_dot_product_out_re_4[60];
    reshape_out_im_4[4][7] = MMul_dot_product_out_im_4[60];
    reshape_out_re_4[5][7] = MMul_dot_product_out_re_4[61];
    reshape_out_im_4[5][7] = MMul_dot_product_out_im_4[61];
    reshape_out_re_4[6][7] = MMul_dot_product_out_re_4[62];
    reshape_out_im_4[6][7] = MMul_dot_product_out_im_4[62];
    reshape_out_re_4[7][7] = MMul_dot_product_out_re_4[63];
    reshape_out_im_4[7][7] = MMul_dot_product_out_im_4[63];
  end

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_42[0] = reshape_out_re_4[0][0];
  assign selector_out_im_42[0] = reshape_out_im_4[0][0];
  assign selector_out_re_42[1] = reshape_out_re_4[0][1];
  assign selector_out_im_42[1] = reshape_out_im_4[0][1];
  assign selector_out_re_42[2] = reshape_out_re_4[0][2];
  assign selector_out_im_42[2] = reshape_out_im_4[0][2];
  assign selector_out_re_42[3] = reshape_out_re_4[0][3];
  assign selector_out_im_42[3] = reshape_out_im_4[0][3];
  assign selector_out_re_42[4] = reshape_out_re_4[0][4];
  assign selector_out_im_42[4] = reshape_out_im_4[0][4];
  assign selector_out_re_42[5] = reshape_out_re_4[0][5];
  assign selector_out_im_42[5] = reshape_out_im_4[0][5];
  assign selector_out_re_42[6] = reshape_out_re_4[0][6];
  assign selector_out_im_42[6] = reshape_out_im_4[0][6];
  assign selector_out_re_42[7] = reshape_out_re_4[0][7];
  assign selector_out_im_42[7] = reshape_out_im_4[0][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_43[0] = reshape_out_re_4[1][0];
  assign selector_out_im_43[0] = reshape_out_im_4[1][0];
  assign selector_out_re_43[1] = reshape_out_re_4[1][1];
  assign selector_out_im_43[1] = reshape_out_im_4[1][1];
  assign selector_out_re_43[2] = reshape_out_re_4[1][2];
  assign selector_out_im_43[2] = reshape_out_im_4[1][2];
  assign selector_out_re_43[3] = reshape_out_re_4[1][3];
  assign selector_out_im_43[3] = reshape_out_im_4[1][3];
  assign selector_out_re_43[4] = reshape_out_re_4[1][4];
  assign selector_out_im_43[4] = reshape_out_im_4[1][4];
  assign selector_out_re_43[5] = reshape_out_re_4[1][5];
  assign selector_out_im_43[5] = reshape_out_im_4[1][5];
  assign selector_out_re_43[6] = reshape_out_re_4[1][6];
  assign selector_out_im_43[6] = reshape_out_im_4[1][6];
  assign selector_out_re_43[7] = reshape_out_re_4[1][7];
  assign selector_out_im_43[7] = reshape_out_im_4[1][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_add_01_out_re_4[0] = selector_out_re_42[0] + selector_out_re_43[0];
  assign MMul_add_01_out_im_4[0] = selector_out_im_42[0] + selector_out_im_43[0];
  assign MMul_add_01_out_re_4[1] = selector_out_re_42[1] + selector_out_re_43[1];
  assign MMul_add_01_out_im_4[1] = selector_out_im_42[1] + selector_out_im_43[1];
  assign MMul_add_01_out_re_4[2] = selector_out_re_42[2] + selector_out_re_43[2];
  assign MMul_add_01_out_im_4[2] = selector_out_im_42[2] + selector_out_im_43[2];
  assign MMul_add_01_out_re_4[3] = selector_out_re_42[3] + selector_out_re_43[3];
  assign MMul_add_01_out_im_4[3] = selector_out_im_42[3] + selector_out_im_43[3];
  assign MMul_add_01_out_re_4[4] = selector_out_re_42[4] + selector_out_re_43[4];
  assign MMul_add_01_out_im_4[4] = selector_out_im_42[4] + selector_out_im_43[4];
  assign MMul_add_01_out_re_4[5] = selector_out_re_42[5] + selector_out_re_43[5];
  assign MMul_add_01_out_im_4[5] = selector_out_im_42[5] + selector_out_im_43[5];
  assign MMul_add_01_out_re_4[6] = selector_out_re_42[6] + selector_out_re_43[6];
  assign MMul_add_01_out_im_4[6] = selector_out_im_42[6] + selector_out_im_43[6];
  assign MMul_add_01_out_re_4[7] = selector_out_re_42[7] + selector_out_re_43[7];
  assign MMul_add_01_out_im_4[7] = selector_out_im_42[7] + selector_out_im_43[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_44[0] = reshape_out_re_4[2][0];
  assign selector_out_im_44[0] = reshape_out_im_4[2][0];
  assign selector_out_re_44[1] = reshape_out_re_4[2][1];
  assign selector_out_im_44[1] = reshape_out_im_4[2][1];
  assign selector_out_re_44[2] = reshape_out_re_4[2][2];
  assign selector_out_im_44[2] = reshape_out_im_4[2][2];
  assign selector_out_re_44[3] = reshape_out_re_4[2][3];
  assign selector_out_im_44[3] = reshape_out_im_4[2][3];
  assign selector_out_re_44[4] = reshape_out_re_4[2][4];
  assign selector_out_im_44[4] = reshape_out_im_4[2][4];
  assign selector_out_re_44[5] = reshape_out_re_4[2][5];
  assign selector_out_im_44[5] = reshape_out_im_4[2][5];
  assign selector_out_re_44[6] = reshape_out_re_4[2][6];
  assign selector_out_im_44[6] = reshape_out_im_4[2][6];
  assign selector_out_re_44[7] = reshape_out_re_4[2][7];
  assign selector_out_im_44[7] = reshape_out_im_4[2][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_add_12_out_re_4[0] = MMul_add_01_out_re_4[0] + selector_out_re_44[0];
  assign MMul_add_12_out_im_4[0] = MMul_add_01_out_im_4[0] + selector_out_im_44[0];
  assign MMul_add_12_out_re_4[1] = MMul_add_01_out_re_4[1] + selector_out_re_44[1];
  assign MMul_add_12_out_im_4[1] = MMul_add_01_out_im_4[1] + selector_out_im_44[1];
  assign MMul_add_12_out_re_4[2] = MMul_add_01_out_re_4[2] + selector_out_re_44[2];
  assign MMul_add_12_out_im_4[2] = MMul_add_01_out_im_4[2] + selector_out_im_44[2];
  assign MMul_add_12_out_re_4[3] = MMul_add_01_out_re_4[3] + selector_out_re_44[3];
  assign MMul_add_12_out_im_4[3] = MMul_add_01_out_im_4[3] + selector_out_im_44[3];
  assign MMul_add_12_out_re_4[4] = MMul_add_01_out_re_4[4] + selector_out_re_44[4];
  assign MMul_add_12_out_im_4[4] = MMul_add_01_out_im_4[4] + selector_out_im_44[4];
  assign MMul_add_12_out_re_4[5] = MMul_add_01_out_re_4[5] + selector_out_re_44[5];
  assign MMul_add_12_out_im_4[5] = MMul_add_01_out_im_4[5] + selector_out_im_44[5];
  assign MMul_add_12_out_re_4[6] = MMul_add_01_out_re_4[6] + selector_out_re_44[6];
  assign MMul_add_12_out_im_4[6] = MMul_add_01_out_im_4[6] + selector_out_im_44[6];
  assign MMul_add_12_out_re_4[7] = MMul_add_01_out_re_4[7] + selector_out_re_44[7];
  assign MMul_add_12_out_im_4[7] = MMul_add_01_out_im_4[7] + selector_out_im_44[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_45[0] = reshape_out_re_4[3][0];
  assign selector_out_im_45[0] = reshape_out_im_4[3][0];
  assign selector_out_re_45[1] = reshape_out_re_4[3][1];
  assign selector_out_im_45[1] = reshape_out_im_4[3][1];
  assign selector_out_re_45[2] = reshape_out_re_4[3][2];
  assign selector_out_im_45[2] = reshape_out_im_4[3][2];
  assign selector_out_re_45[3] = reshape_out_re_4[3][3];
  assign selector_out_im_45[3] = reshape_out_im_4[3][3];
  assign selector_out_re_45[4] = reshape_out_re_4[3][4];
  assign selector_out_im_45[4] = reshape_out_im_4[3][4];
  assign selector_out_re_45[5] = reshape_out_re_4[3][5];
  assign selector_out_im_45[5] = reshape_out_im_4[3][5];
  assign selector_out_re_45[6] = reshape_out_re_4[3][6];
  assign selector_out_im_45[6] = reshape_out_im_4[3][6];
  assign selector_out_re_45[7] = reshape_out_re_4[3][7];
  assign selector_out_im_45[7] = reshape_out_im_4[3][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_add_23_out_re_4[0] = MMul_add_12_out_re_4[0] + selector_out_re_45[0];
  assign MMul_add_23_out_im_4[0] = MMul_add_12_out_im_4[0] + selector_out_im_45[0];
  assign MMul_add_23_out_re_4[1] = MMul_add_12_out_re_4[1] + selector_out_re_45[1];
  assign MMul_add_23_out_im_4[1] = MMul_add_12_out_im_4[1] + selector_out_im_45[1];
  assign MMul_add_23_out_re_4[2] = MMul_add_12_out_re_4[2] + selector_out_re_45[2];
  assign MMul_add_23_out_im_4[2] = MMul_add_12_out_im_4[2] + selector_out_im_45[2];
  assign MMul_add_23_out_re_4[3] = MMul_add_12_out_re_4[3] + selector_out_re_45[3];
  assign MMul_add_23_out_im_4[3] = MMul_add_12_out_im_4[3] + selector_out_im_45[3];
  assign MMul_add_23_out_re_4[4] = MMul_add_12_out_re_4[4] + selector_out_re_45[4];
  assign MMul_add_23_out_im_4[4] = MMul_add_12_out_im_4[4] + selector_out_im_45[4];
  assign MMul_add_23_out_re_4[5] = MMul_add_12_out_re_4[5] + selector_out_re_45[5];
  assign MMul_add_23_out_im_4[5] = MMul_add_12_out_im_4[5] + selector_out_im_45[5];
  assign MMul_add_23_out_re_4[6] = MMul_add_12_out_re_4[6] + selector_out_re_45[6];
  assign MMul_add_23_out_im_4[6] = MMul_add_12_out_im_4[6] + selector_out_im_45[6];
  assign MMul_add_23_out_re_4[7] = MMul_add_12_out_re_4[7] + selector_out_re_45[7];
  assign MMul_add_23_out_im_4[7] = MMul_add_12_out_im_4[7] + selector_out_im_45[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_46[0] = reshape_out_re_4[4][0];
  assign selector_out_im_46[0] = reshape_out_im_4[4][0];
  assign selector_out_re_46[1] = reshape_out_re_4[4][1];
  assign selector_out_im_46[1] = reshape_out_im_4[4][1];
  assign selector_out_re_46[2] = reshape_out_re_4[4][2];
  assign selector_out_im_46[2] = reshape_out_im_4[4][2];
  assign selector_out_re_46[3] = reshape_out_re_4[4][3];
  assign selector_out_im_46[3] = reshape_out_im_4[4][3];
  assign selector_out_re_46[4] = reshape_out_re_4[4][4];
  assign selector_out_im_46[4] = reshape_out_im_4[4][4];
  assign selector_out_re_46[5] = reshape_out_re_4[4][5];
  assign selector_out_im_46[5] = reshape_out_im_4[4][5];
  assign selector_out_re_46[6] = reshape_out_re_4[4][6];
  assign selector_out_im_46[6] = reshape_out_im_4[4][6];
  assign selector_out_re_46[7] = reshape_out_re_4[4][7];
  assign selector_out_im_46[7] = reshape_out_im_4[4][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_add_34_out_re_4[0] = MMul_add_23_out_re_4[0] + selector_out_re_46[0];
  assign MMul_add_34_out_im_4[0] = MMul_add_23_out_im_4[0] + selector_out_im_46[0];
  assign MMul_add_34_out_re_4[1] = MMul_add_23_out_re_4[1] + selector_out_re_46[1];
  assign MMul_add_34_out_im_4[1] = MMul_add_23_out_im_4[1] + selector_out_im_46[1];
  assign MMul_add_34_out_re_4[2] = MMul_add_23_out_re_4[2] + selector_out_re_46[2];
  assign MMul_add_34_out_im_4[2] = MMul_add_23_out_im_4[2] + selector_out_im_46[2];
  assign MMul_add_34_out_re_4[3] = MMul_add_23_out_re_4[3] + selector_out_re_46[3];
  assign MMul_add_34_out_im_4[3] = MMul_add_23_out_im_4[3] + selector_out_im_46[3];
  assign MMul_add_34_out_re_4[4] = MMul_add_23_out_re_4[4] + selector_out_re_46[4];
  assign MMul_add_34_out_im_4[4] = MMul_add_23_out_im_4[4] + selector_out_im_46[4];
  assign MMul_add_34_out_re_4[5] = MMul_add_23_out_re_4[5] + selector_out_re_46[5];
  assign MMul_add_34_out_im_4[5] = MMul_add_23_out_im_4[5] + selector_out_im_46[5];
  assign MMul_add_34_out_re_4[6] = MMul_add_23_out_re_4[6] + selector_out_re_46[6];
  assign MMul_add_34_out_im_4[6] = MMul_add_23_out_im_4[6] + selector_out_im_46[6];
  assign MMul_add_34_out_re_4[7] = MMul_add_23_out_re_4[7] + selector_out_re_46[7];
  assign MMul_add_34_out_im_4[7] = MMul_add_23_out_im_4[7] + selector_out_im_46[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_47[0] = reshape_out_re_4[5][0];
  assign selector_out_im_47[0] = reshape_out_im_4[5][0];
  assign selector_out_re_47[1] = reshape_out_re_4[5][1];
  assign selector_out_im_47[1] = reshape_out_im_4[5][1];
  assign selector_out_re_47[2] = reshape_out_re_4[5][2];
  assign selector_out_im_47[2] = reshape_out_im_4[5][2];
  assign selector_out_re_47[3] = reshape_out_re_4[5][3];
  assign selector_out_im_47[3] = reshape_out_im_4[5][3];
  assign selector_out_re_47[4] = reshape_out_re_4[5][4];
  assign selector_out_im_47[4] = reshape_out_im_4[5][4];
  assign selector_out_re_47[5] = reshape_out_re_4[5][5];
  assign selector_out_im_47[5] = reshape_out_im_4[5][5];
  assign selector_out_re_47[6] = reshape_out_re_4[5][6];
  assign selector_out_im_47[6] = reshape_out_im_4[5][6];
  assign selector_out_re_47[7] = reshape_out_re_4[5][7];
  assign selector_out_im_47[7] = reshape_out_im_4[5][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_add_45_out_re_4[0] = MMul_add_34_out_re_4[0] + selector_out_re_47[0];
  assign MMul_add_45_out_im_4[0] = MMul_add_34_out_im_4[0] + selector_out_im_47[0];
  assign MMul_add_45_out_re_4[1] = MMul_add_34_out_re_4[1] + selector_out_re_47[1];
  assign MMul_add_45_out_im_4[1] = MMul_add_34_out_im_4[1] + selector_out_im_47[1];
  assign MMul_add_45_out_re_4[2] = MMul_add_34_out_re_4[2] + selector_out_re_47[2];
  assign MMul_add_45_out_im_4[2] = MMul_add_34_out_im_4[2] + selector_out_im_47[2];
  assign MMul_add_45_out_re_4[3] = MMul_add_34_out_re_4[3] + selector_out_re_47[3];
  assign MMul_add_45_out_im_4[3] = MMul_add_34_out_im_4[3] + selector_out_im_47[3];
  assign MMul_add_45_out_re_4[4] = MMul_add_34_out_re_4[4] + selector_out_re_47[4];
  assign MMul_add_45_out_im_4[4] = MMul_add_34_out_im_4[4] + selector_out_im_47[4];
  assign MMul_add_45_out_re_4[5] = MMul_add_34_out_re_4[5] + selector_out_re_47[5];
  assign MMul_add_45_out_im_4[5] = MMul_add_34_out_im_4[5] + selector_out_im_47[5];
  assign MMul_add_45_out_re_4[6] = MMul_add_34_out_re_4[6] + selector_out_re_47[6];
  assign MMul_add_45_out_im_4[6] = MMul_add_34_out_im_4[6] + selector_out_im_47[6];
  assign MMul_add_45_out_re_4[7] = MMul_add_34_out_re_4[7] + selector_out_re_47[7];
  assign MMul_add_45_out_im_4[7] = MMul_add_34_out_im_4[7] + selector_out_im_47[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_48[0] = reshape_out_re_4[6][0];
  assign selector_out_im_48[0] = reshape_out_im_4[6][0];
  assign selector_out_re_48[1] = reshape_out_re_4[6][1];
  assign selector_out_im_48[1] = reshape_out_im_4[6][1];
  assign selector_out_re_48[2] = reshape_out_re_4[6][2];
  assign selector_out_im_48[2] = reshape_out_im_4[6][2];
  assign selector_out_re_48[3] = reshape_out_re_4[6][3];
  assign selector_out_im_48[3] = reshape_out_im_4[6][3];
  assign selector_out_re_48[4] = reshape_out_re_4[6][4];
  assign selector_out_im_48[4] = reshape_out_im_4[6][4];
  assign selector_out_re_48[5] = reshape_out_re_4[6][5];
  assign selector_out_im_48[5] = reshape_out_im_4[6][5];
  assign selector_out_re_48[6] = reshape_out_re_4[6][6];
  assign selector_out_im_48[6] = reshape_out_im_4[6][6];
  assign selector_out_re_48[7] = reshape_out_re_4[6][7];
  assign selector_out_im_48[7] = reshape_out_im_4[6][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign MMul_add_56_out_re_4[0] = MMul_add_45_out_re_4[0] + selector_out_re_48[0];
  assign MMul_add_56_out_im_4[0] = MMul_add_45_out_im_4[0] + selector_out_im_48[0];
  assign MMul_add_56_out_re_4[1] = MMul_add_45_out_re_4[1] + selector_out_re_48[1];
  assign MMul_add_56_out_im_4[1] = MMul_add_45_out_im_4[1] + selector_out_im_48[1];
  assign MMul_add_56_out_re_4[2] = MMul_add_45_out_re_4[2] + selector_out_re_48[2];
  assign MMul_add_56_out_im_4[2] = MMul_add_45_out_im_4[2] + selector_out_im_48[2];
  assign MMul_add_56_out_re_4[3] = MMul_add_45_out_re_4[3] + selector_out_re_48[3];
  assign MMul_add_56_out_im_4[3] = MMul_add_45_out_im_4[3] + selector_out_im_48[3];
  assign MMul_add_56_out_re_4[4] = MMul_add_45_out_re_4[4] + selector_out_re_48[4];
  assign MMul_add_56_out_im_4[4] = MMul_add_45_out_im_4[4] + selector_out_im_48[4];
  assign MMul_add_56_out_re_4[5] = MMul_add_45_out_re_4[5] + selector_out_re_48[5];
  assign MMul_add_56_out_im_4[5] = MMul_add_45_out_im_4[5] + selector_out_im_48[5];
  assign MMul_add_56_out_re_4[6] = MMul_add_45_out_re_4[6] + selector_out_re_48[6];
  assign MMul_add_56_out_im_4[6] = MMul_add_45_out_im_4[6] + selector_out_im_48[6];
  assign MMul_add_56_out_re_4[7] = MMul_add_45_out_re_4[7] + selector_out_re_48[7];
  assign MMul_add_56_out_im_4[7] = MMul_add_45_out_im_4[7] + selector_out_im_48[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign selector_out_re_49[0] = reshape_out_re_4[7][0];
  assign selector_out_im_49[0] = reshape_out_im_4[7][0];
  assign selector_out_re_49[1] = reshape_out_re_4[7][1];
  assign selector_out_im_49[1] = reshape_out_im_4[7][1];
  assign selector_out_re_49[2] = reshape_out_re_4[7][2];
  assign selector_out_im_49[2] = reshape_out_im_4[7][2];
  assign selector_out_re_49[3] = reshape_out_re_4[7][3];
  assign selector_out_im_49[3] = reshape_out_im_4[7][3];
  assign selector_out_re_49[4] = reshape_out_re_4[7][4];
  assign selector_out_im_49[4] = reshape_out_im_4[7][4];
  assign selector_out_re_49[5] = reshape_out_re_4[7][5];
  assign selector_out_im_49[5] = reshape_out_im_4[7][5];
  assign selector_out_re_49[6] = reshape_out_re_4[7][6];
  assign selector_out_im_49[6] = reshape_out_im_4[7][6];
  assign selector_out_re_49[7] = reshape_out_re_4[7][7];
  assign selector_out_im_49[7] = reshape_out_im_4[7][7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign alpha_re_20[0] = MMul_add_56_out_re_4[0] + selector_out_re_49[0];
  assign alpha_im_20[0] = MMul_add_56_out_im_4[0] + selector_out_im_49[0];
  assign alpha_re_20[1] = MMul_add_56_out_re_4[1] + selector_out_re_49[1];
  assign alpha_im_20[1] = MMul_add_56_out_im_4[1] + selector_out_im_49[1];
  assign alpha_re_20[2] = MMul_add_56_out_re_4[2] + selector_out_re_49[2];
  assign alpha_im_20[2] = MMul_add_56_out_im_4[2] + selector_out_im_49[2];
  assign alpha_re_20[3] = MMul_add_56_out_re_4[3] + selector_out_re_49[3];
  assign alpha_im_20[3] = MMul_add_56_out_im_4[3] + selector_out_im_49[3];
  assign alpha_re_20[4] = MMul_add_56_out_re_4[4] + selector_out_re_49[4];
  assign alpha_im_20[4] = MMul_add_56_out_im_4[4] + selector_out_im_49[4];
  assign alpha_re_20[5] = MMul_add_56_out_re_4[5] + selector_out_re_49[5];
  assign alpha_im_20[5] = MMul_add_56_out_im_4[5] + selector_out_im_49[5];
  assign alpha_re_20[6] = MMul_add_56_out_re_4[6] + selector_out_re_49[6];
  assign alpha_im_20[6] = MMul_add_56_out_im_4[6] + selector_out_im_49[6];
  assign alpha_re_20[7] = MMul_add_56_out_re_4[7] + selector_out_re_49[7];
  assign alpha_im_20[7] = MMul_add_56_out_im_4[7] + selector_out_im_49[7];

  // Step 5: Apply controlled R2 between qubit 2 and qubit 3
  // Controlled phase shift on qubit 2 and 3
  assign out0_re_4[0] = alpha_re_20[0];
  assign out0_im_4[0] = alpha_im_20[0];
  assign out0_re_4[1] = alpha_re_20[1];
  assign out0_im_4[1] = alpha_im_20[1];
  assign out0_re_4[2] = alpha_re_20[2];
  assign out0_im_4[2] = alpha_im_20[2];
  assign out0_re_4[3] = alpha_re_20[3];
  assign out0_im_4[3] = alpha_im_20[3];
  assign out0_re_4[4] = alpha_re_20[4];
  assign out0_im_4[4] = alpha_im_20[4];
  assign out0_re_4[5] = alpha_re_20[5];
  assign out0_im_4[5] = alpha_im_20[5];
  assign out0_re_4[6] = alpha_re_20[6];
  assign out0_im_4[6] = alpha_im_20[6];
  assign out0_re_4[7] = alpha_re_20[7];
  assign out0_im_4[7] = alpha_im_20[7];

  assign state_after_CR2_23_re[0] = out0_re_4[0][13:0];
  assign state_after_CR2_23_im[0] = out0_im_4[0][13:0];
  assign state_after_CR2_23_re[1] = out0_re_4[1][13:0];
  assign state_after_CR2_23_im[1] = out0_im_4[1][13:0];
  assign state_after_CR2_23_re[2] = out0_re_4[2][13:0];
  assign state_after_CR2_23_im[2] = out0_im_4[2][13:0];
  assign state_after_CR2_23_re[3] = out0_re_4[3][13:0];
  assign state_after_CR2_23_im[3] = out0_im_4[3][13:0];
  assign state_after_CR2_23_re[4] = out0_re_4[4][13:0];
  assign state_after_CR2_23_im[4] = out0_im_4[4][13:0];
  assign state_after_CR2_23_re[5] = out0_re_4[5][13:0];
  assign state_after_CR2_23_im[5] = out0_im_4[5][13:0];
  assign state_after_CR2_23_re[6] = out0_re_4[6][13:0];
  assign state_after_CR2_23_im[6] = out0_im_4[6][13:0];
  assign state_after_CR2_23_re[7] = out0_re_4[7][13:0];
  assign state_after_CR2_23_im[7] = out0_im_4[7][13:0];

  assign selector_out_re_50[0] = state_after_CR2_23_re[0];
  assign selector_out_re_50[1] = state_after_CR2_23_re[1];
  assign selector_out_re_50[2] = state_after_CR2_23_re[2];
  assign selector_out_re_50[3] = state_after_CR2_23_re[3];
  assign selector_out_re_50[4] = state_after_CR2_23_re[4];
  assign selector_out_re_50[5] = state_after_CR2_23_re[5];
  assign selector_out_re_50[6] = state_after_CR2_23_re[6];
  assign selector_out_re_50[7] = state_after_CR2_23_re[7];
  assign selector_out_re_50[8] = state_after_CR2_23_re[0];
  assign selector_out_re_50[9] = state_after_CR2_23_re[1];
  assign selector_out_re_50[10] = state_after_CR2_23_re[2];
  assign selector_out_re_50[11] = state_after_CR2_23_re[3];
  assign selector_out_re_50[12] = state_after_CR2_23_re[4];
  assign selector_out_re_50[13] = state_after_CR2_23_re[5];
  assign selector_out_re_50[14] = state_after_CR2_23_re[6];
  assign selector_out_re_50[15] = state_after_CR2_23_re[7];
  assign selector_out_re_50[16] = state_after_CR2_23_re[0];
  assign selector_out_re_50[17] = state_after_CR2_23_re[1];
  assign selector_out_re_50[18] = state_after_CR2_23_re[2];
  assign selector_out_re_50[19] = state_after_CR2_23_re[3];
  assign selector_out_re_50[20] = state_after_CR2_23_re[4];
  assign selector_out_re_50[21] = state_after_CR2_23_re[5];
  assign selector_out_re_50[22] = state_after_CR2_23_re[6];
  assign selector_out_re_50[23] = state_after_CR2_23_re[7];
  assign selector_out_re_50[24] = state_after_CR2_23_re[0];
  assign selector_out_re_50[25] = state_after_CR2_23_re[1];
  assign selector_out_re_50[26] = state_after_CR2_23_re[2];
  assign selector_out_re_50[27] = state_after_CR2_23_re[3];
  assign selector_out_re_50[28] = state_after_CR2_23_re[4];
  assign selector_out_re_50[29] = state_after_CR2_23_re[5];
  assign selector_out_re_50[30] = state_after_CR2_23_re[6];
  assign selector_out_re_50[31] = state_after_CR2_23_re[7];
  assign selector_out_re_50[32] = state_after_CR2_23_re[0];
  assign selector_out_re_50[33] = state_after_CR2_23_re[1];
  assign selector_out_re_50[34] = state_after_CR2_23_re[2];
  assign selector_out_re_50[35] = state_after_CR2_23_re[3];
  assign selector_out_re_50[36] = state_after_CR2_23_re[4];
  assign selector_out_re_50[37] = state_after_CR2_23_re[5];
  assign selector_out_re_50[38] = state_after_CR2_23_re[6];
  assign selector_out_re_50[39] = state_after_CR2_23_re[7];
  assign selector_out_re_50[40] = state_after_CR2_23_re[0];
  assign selector_out_re_50[41] = state_after_CR2_23_re[1];
  assign selector_out_re_50[42] = state_after_CR2_23_re[2];
  assign selector_out_re_50[43] = state_after_CR2_23_re[3];
  assign selector_out_re_50[44] = state_after_CR2_23_re[4];
  assign selector_out_re_50[45] = state_after_CR2_23_re[5];
  assign selector_out_re_50[46] = state_after_CR2_23_re[6];
  assign selector_out_re_50[47] = state_after_CR2_23_re[7];
  assign selector_out_re_50[48] = state_after_CR2_23_re[0];
  assign selector_out_re_50[49] = state_after_CR2_23_re[1];
  assign selector_out_re_50[50] = state_after_CR2_23_re[2];
  assign selector_out_re_50[51] = state_after_CR2_23_re[3];
  assign selector_out_re_50[52] = state_after_CR2_23_re[4];
  assign selector_out_re_50[53] = state_after_CR2_23_re[5];
  assign selector_out_re_50[54] = state_after_CR2_23_re[6];
  assign selector_out_re_50[55] = state_after_CR2_23_re[7];
  assign selector_out_re_50[56] = state_after_CR2_23_re[0];
  assign selector_out_re_50[57] = state_after_CR2_23_re[1];
  assign selector_out_re_50[58] = state_after_CR2_23_re[2];
  assign selector_out_re_50[59] = state_after_CR2_23_re[3];
  assign selector_out_re_50[60] = state_after_CR2_23_re[4];
  assign selector_out_re_50[61] = state_after_CR2_23_re[5];
  assign selector_out_re_50[62] = state_after_CR2_23_re[6];
  assign selector_out_re_50[63] = state_after_CR2_23_re[7];

  assign selector_out_im_50[0] = state_after_CR2_23_im[0];
  assign selector_out_im_50[1] = state_after_CR2_23_im[1];
  assign selector_out_im_50[2] = state_after_CR2_23_im[2];
  assign selector_out_im_50[3] = state_after_CR2_23_im[3];
  assign selector_out_im_50[4] = state_after_CR2_23_im[4];
  assign selector_out_im_50[5] = state_after_CR2_23_im[5];
  assign selector_out_im_50[6] = state_after_CR2_23_im[6];
  assign selector_out_im_50[7] = state_after_CR2_23_im[7];
  assign selector_out_im_50[8] = state_after_CR2_23_im[0];
  assign selector_out_im_50[9] = state_after_CR2_23_im[1];
  assign selector_out_im_50[10] = state_after_CR2_23_im[2];
  assign selector_out_im_50[11] = state_after_CR2_23_im[3];
  assign selector_out_im_50[12] = state_after_CR2_23_im[4];
  assign selector_out_im_50[13] = state_after_CR2_23_im[5];
  assign selector_out_im_50[14] = state_after_CR2_23_im[6];
  assign selector_out_im_50[15] = state_after_CR2_23_im[7];
  assign selector_out_im_50[16] = state_after_CR2_23_im[0];
  assign selector_out_im_50[17] = state_after_CR2_23_im[1];
  assign selector_out_im_50[18] = state_after_CR2_23_im[2];
  assign selector_out_im_50[19] = state_after_CR2_23_im[3];
  assign selector_out_im_50[20] = state_after_CR2_23_im[4];
  assign selector_out_im_50[21] = state_after_CR2_23_im[5];
  assign selector_out_im_50[22] = state_after_CR2_23_im[6];
  assign selector_out_im_50[23] = state_after_CR2_23_im[7];
  assign selector_out_im_50[24] = state_after_CR2_23_im[0];
  assign selector_out_im_50[25] = state_after_CR2_23_im[1];
  assign selector_out_im_50[26] = state_after_CR2_23_im[2];
  assign selector_out_im_50[27] = state_after_CR2_23_im[3];
  assign selector_out_im_50[28] = state_after_CR2_23_im[4];
  assign selector_out_im_50[29] = state_after_CR2_23_im[5];
  assign selector_out_im_50[30] = state_after_CR2_23_im[6];
  assign selector_out_im_50[31] = state_after_CR2_23_im[7];
  assign selector_out_im_50[32] = state_after_CR2_23_im[0];
  assign selector_out_im_50[33] = state_after_CR2_23_im[1];
  assign selector_out_im_50[34] = state_after_CR2_23_im[2];
  assign selector_out_im_50[35] = state_after_CR2_23_im[3];
  assign selector_out_im_50[36] = state_after_CR2_23_im[4];
  assign selector_out_im_50[37] = state_after_CR2_23_im[5];
  assign selector_out_im_50[38] = state_after_CR2_23_im[6];
  assign selector_out_im_50[39] = state_after_CR2_23_im[7];
  assign selector_out_im_50[40] = state_after_CR2_23_im[0];
  assign selector_out_im_50[41] = state_after_CR2_23_im[1];
  assign selector_out_im_50[42] = state_after_CR2_23_im[2];
  assign selector_out_im_50[43] = state_after_CR2_23_im[3];
  assign selector_out_im_50[44] = state_after_CR2_23_im[4];
  assign selector_out_im_50[45] = state_after_CR2_23_im[5];
  assign selector_out_im_50[46] = state_after_CR2_23_im[6];
  assign selector_out_im_50[47] = state_after_CR2_23_im[7];
  assign selector_out_im_50[48] = state_after_CR2_23_im[0];
  assign selector_out_im_50[49] = state_after_CR2_23_im[1];
  assign selector_out_im_50[50] = state_after_CR2_23_im[2];
  assign selector_out_im_50[51] = state_after_CR2_23_im[3];
  assign selector_out_im_50[52] = state_after_CR2_23_im[4];
  assign selector_out_im_50[53] = state_after_CR2_23_im[5];
  assign selector_out_im_50[54] = state_after_CR2_23_im[6];
  assign selector_out_im_50[55] = state_after_CR2_23_im[7];
  assign selector_out_im_50[56] = state_after_CR2_23_im[0];
  assign selector_out_im_50[57] = state_after_CR2_23_im[1];
  assign selector_out_im_50[58] = state_after_CR2_23_im[2];
  assign selector_out_im_50[59] = state_after_CR2_23_im[3];
  assign selector_out_im_50[60] = state_after_CR2_23_im[4];
  assign selector_out_im_50[61] = state_after_CR2_23_im[5];
  assign selector_out_im_50[62] = state_after_CR2_23_im[6];
  assign selector_out_im_50[63] = state_after_CR2_23_im[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign alpha_re_21[0] = selector_out_re_50[0];
  assign alpha_im_21[0] = selector_out_im_50[0];
  assign alpha_re_21[1] = selector_out_re_50[1];
  assign alpha_im_21[1] = selector_out_im_50[1];
  assign alpha_re_21[2] = selector_out_re_50[2];
  assign alpha_im_21[2] = selector_out_im_50[2];
  assign alpha_re_21[3] = selector_out_re_50[3];
  assign alpha_im_21[3] = selector_out_im_50[3];
  assign alpha_re_21[4] = selector_out_re_50[4];
  assign alpha_im_21[4] = selector_out_im_50[4];
  assign alpha_re_21[5] = selector_out_re_50[5];
  assign alpha_im_21[5] = selector_out_im_50[5];
  assign alpha_re_21[6] = selector_out_re_50[6];
  assign alpha_im_21[6] = selector_out_im_50[6];
  assign alpha_re_21[7] = selector_out_re_50[7];
  assign alpha_im_21[7] = selector_out_im_50[7];
  assign alpha_re_21[8] = selector_out_re_50[8];
  assign alpha_im_21[8] = selector_out_im_50[8];
  assign alpha_re_21[9] = selector_out_re_50[9];
  assign alpha_im_21[9] = selector_out_im_50[9];
  assign alpha_re_21[10] = selector_out_re_50[10];
  assign alpha_im_21[10] = selector_out_im_50[10];
  assign alpha_re_21[11] = selector_out_re_50[11];
  assign alpha_im_21[11] = selector_out_im_50[11];
  assign alpha_re_21[12] = selector_out_re_50[12];
  assign alpha_im_21[12] = selector_out_im_50[12];
  assign alpha_re_21[13] = selector_out_re_50[13];
  assign alpha_im_21[13] = selector_out_im_50[13];
  assign alpha_re_21[14] = selector_out_re_50[14];
  assign alpha_im_21[14] = selector_out_im_50[14];
  assign alpha_re_21[15] = selector_out_re_50[15];
  assign alpha_im_21[15] = selector_out_im_50[15];
  assign alpha_re_21[16] = selector_out_re_50[16];
  assign alpha_im_21[16] = selector_out_im_50[16];
  assign alpha_re_21[17] = selector_out_re_50[17];
  assign alpha_im_21[17] = selector_out_im_50[17];
  assign alpha_re_21[18] = selector_out_re_50[18];
  assign alpha_im_21[18] = selector_out_im_50[18];
  assign alpha_re_21[19] = selector_out_re_50[19];
  assign alpha_im_21[19] = selector_out_im_50[19];
  assign alpha_re_21[20] = selector_out_re_50[20];
  assign alpha_im_21[20] = selector_out_im_50[20];
  assign alpha_re_21[21] = selector_out_re_50[21];
  assign alpha_im_21[21] = selector_out_im_50[21];
  assign alpha_re_21[22] = selector_out_re_50[22];
  assign alpha_im_21[22] = selector_out_im_50[22];
  assign alpha_re_21[23] = selector_out_re_50[23];
  assign alpha_im_21[23] = selector_out_im_50[23];
  assign alpha_re_21[24] = selector_out_re_50[24];
  assign alpha_im_21[24] = selector_out_im_50[24];
  assign alpha_re_21[25] = selector_out_re_50[25];
  assign alpha_im_21[25] = selector_out_im_50[25];
  assign alpha_re_21[26] = selector_out_re_50[26];
  assign alpha_im_21[26] = selector_out_im_50[26];
  assign alpha_re_21[27] = selector_out_re_50[27];
  assign alpha_im_21[27] = selector_out_im_50[27];
  assign alpha_re_21[28] = selector_out_re_50[28];
  assign alpha_im_21[28] = selector_out_im_50[28];
  assign alpha_re_21[29] = selector_out_re_50[29];
  assign alpha_im_21[29] = selector_out_im_50[29];
  assign alpha_re_21[30] = selector_out_re_50[30];
  assign alpha_im_21[30] = selector_out_im_50[30];
  assign alpha_re_21[31] = selector_out_re_50[31];
  assign alpha_im_21[31] = selector_out_im_50[31];
  assign alpha_re_21[32] = selector_out_re_50[32];
  assign alpha_im_21[32] = selector_out_im_50[32];
  assign alpha_re_21[33] = selector_out_re_50[33];
  assign alpha_im_21[33] = selector_out_im_50[33];
  assign alpha_re_21[34] = selector_out_re_50[34];
  assign alpha_im_21[34] = selector_out_im_50[34];
  assign alpha_re_21[35] = selector_out_re_50[35];
  assign alpha_im_21[35] = selector_out_im_50[35];
  assign alpha_re_21[36] = selector_out_re_50[36];
  assign alpha_im_21[36] = selector_out_im_50[36];
  assign alpha_re_21[37] = selector_out_re_50[37];
  assign alpha_im_21[37] = selector_out_im_50[37];
  assign alpha_re_21[38] = selector_out_re_50[38];
  assign alpha_im_21[38] = selector_out_im_50[38];
  assign alpha_re_21[39] = selector_out_re_50[39];
  assign alpha_im_21[39] = selector_out_im_50[39];
  assign alpha_re_21[40] = selector_out_re_50[40];
  assign alpha_im_21[40] = selector_out_im_50[40];
  assign alpha_re_21[41] = selector_out_re_50[41];
  assign alpha_im_21[41] = selector_out_im_50[41];
  assign alpha_re_21[42] = selector_out_re_50[42];
  assign alpha_im_21[42] = selector_out_im_50[42];
  assign alpha_re_21[43] = selector_out_re_50[43];
  assign alpha_im_21[43] = selector_out_im_50[43];
  assign alpha_re_21[44] = selector_out_re_50[44];
  assign alpha_im_21[44] = selector_out_im_50[44];
  assign alpha_re_21[45] = selector_out_re_50[45];
  assign alpha_im_21[45] = selector_out_im_50[45];
  assign alpha_re_21[46] = selector_out_re_50[46];
  assign alpha_im_21[46] = selector_out_im_50[46];
  assign alpha_re_21[47] = selector_out_re_50[47];
  assign alpha_im_21[47] = selector_out_im_50[47];
  assign alpha_re_21[48] = selector_out_re_50[48];
  assign alpha_im_21[48] = selector_out_im_50[48];
  assign alpha_re_21[49] = selector_out_re_50[49];
  assign alpha_im_21[49] = selector_out_im_50[49];
  assign alpha_re_21[50] = selector_out_re_50[50];
  assign alpha_im_21[50] = selector_out_im_50[50];
  assign alpha_re_21[51] = selector_out_re_50[51];
  assign alpha_im_21[51] = selector_out_im_50[51];
  assign alpha_re_21[52] = selector_out_re_50[52];
  assign alpha_im_21[52] = selector_out_im_50[52];
  assign alpha_re_21[53] = selector_out_re_50[53];
  assign alpha_im_21[53] = selector_out_im_50[53];
  assign alpha_re_21[54] = selector_out_re_50[54];
  assign alpha_im_21[54] = selector_out_im_50[54];
  assign alpha_re_21[55] = selector_out_re_50[55];
  assign alpha_im_21[55] = selector_out_im_50[55];
  assign alpha_re_21[56] = selector_out_re_50[56];
  assign alpha_im_21[56] = selector_out_im_50[56];
  assign alpha_re_21[57] = selector_out_re_50[57];
  assign alpha_im_21[57] = selector_out_im_50[57];
  assign alpha_re_21[58] = selector_out_re_50[58];
  assign alpha_im_21[58] = selector_out_im_50[58];
  assign alpha_re_21[59] = selector_out_re_50[59];
  assign alpha_im_21[59] = selector_out_im_50[59];
  assign alpha_re_21[60] = selector_out_re_50[60];
  assign alpha_im_21[60] = selector_out_im_50[60];
  assign alpha_re_21[61] = selector_out_re_50[61];
  assign alpha_im_21[61] = selector_out_im_50[61];
  assign alpha_re_21[62] = selector_out_re_50[62];
  assign alpha_im_21[62] = selector_out_im_50[62];
  assign alpha_re_21[63] = selector_out_re_50[63];
  assign alpha_im_21[63] = selector_out_im_50[63];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_dot_product1_mul_temp[0] = alpha_re_1[0] * alpha_re_21[0];
  assign MMul_dot_product1_sub_cast[0] = {{4{MMul_dot_product1_mul_temp[0][27]}}, MMul_dot_product1_mul_temp[0]};
  assign MMul_dot_product1_mul_temp_1[0] = alpha_im_1[0] * alpha_im_21[0];
  assign MMul_dot_product1_sub_cast_1[0] = {{4{MMul_dot_product1_mul_temp_1[0][27]}}, MMul_dot_product1_mul_temp_1[0]};
  assign MMul_dot_product_out_re_5[0] = MMul_dot_product1_sub_cast[0] - MMul_dot_product1_sub_cast_1[0];
  assign MMul_dot_product1_mul_temp_2[0] = alpha_im_1[0] * alpha_re_21[0];
  assign MMul_dot_product1_add_cast[0] = {{4{MMul_dot_product1_mul_temp_2[0][27]}}, MMul_dot_product1_mul_temp_2[0]};
  assign MMul_dot_product1_mul_temp_3[0] = alpha_re_1[0] * alpha_im_21[0];
  assign MMul_dot_product1_add_cast_1[0] = {{4{MMul_dot_product1_mul_temp_3[0][27]}}, MMul_dot_product1_mul_temp_3[0]};
  assign MMul_dot_product_out_im_5[0] = MMul_dot_product1_add_cast[0] + MMul_dot_product1_add_cast_1[0];
  assign MMul_dot_product1_mul_temp[1] = alpha_re_1[1] * alpha_re_21[1];
  assign MMul_dot_product1_sub_cast[1] = {{4{MMul_dot_product1_mul_temp[1][27]}}, MMul_dot_product1_mul_temp[1]};
  assign MMul_dot_product1_mul_temp_1[1] = alpha_im_1[1] * alpha_im_21[1];
  assign MMul_dot_product1_sub_cast_1[1] = {{4{MMul_dot_product1_mul_temp_1[1][27]}}, MMul_dot_product1_mul_temp_1[1]};
  assign MMul_dot_product_out_re_5[1] = MMul_dot_product1_sub_cast[1] - MMul_dot_product1_sub_cast_1[1];
  assign MMul_dot_product1_mul_temp_2[1] = alpha_im_1[1] * alpha_re_21[1];
  assign MMul_dot_product1_add_cast[1] = {{4{MMul_dot_product1_mul_temp_2[1][27]}}, MMul_dot_product1_mul_temp_2[1]};
  assign MMul_dot_product1_mul_temp_3[1] = alpha_re_1[1] * alpha_im_21[1];
  assign MMul_dot_product1_add_cast_1[1] = {{4{MMul_dot_product1_mul_temp_3[1][27]}}, MMul_dot_product1_mul_temp_3[1]};
  assign MMul_dot_product_out_im_5[1] = MMul_dot_product1_add_cast[1] + MMul_dot_product1_add_cast_1[1];
  assign MMul_dot_product1_mul_temp[2] = alpha_re_1[2] * alpha_re_21[2];
  assign MMul_dot_product1_sub_cast[2] = {{4{MMul_dot_product1_mul_temp[2][27]}}, MMul_dot_product1_mul_temp[2]};
  assign MMul_dot_product1_mul_temp_1[2] = alpha_im_1[2] * alpha_im_21[2];
  assign MMul_dot_product1_sub_cast_1[2] = {{4{MMul_dot_product1_mul_temp_1[2][27]}}, MMul_dot_product1_mul_temp_1[2]};
  assign MMul_dot_product_out_re_5[2] = MMul_dot_product1_sub_cast[2] - MMul_dot_product1_sub_cast_1[2];
  assign MMul_dot_product1_mul_temp_2[2] = alpha_im_1[2] * alpha_re_21[2];
  assign MMul_dot_product1_add_cast[2] = {{4{MMul_dot_product1_mul_temp_2[2][27]}}, MMul_dot_product1_mul_temp_2[2]};
  assign MMul_dot_product1_mul_temp_3[2] = alpha_re_1[2] * alpha_im_21[2];
  assign MMul_dot_product1_add_cast_1[2] = {{4{MMul_dot_product1_mul_temp_3[2][27]}}, MMul_dot_product1_mul_temp_3[2]};
  assign MMul_dot_product_out_im_5[2] = MMul_dot_product1_add_cast[2] + MMul_dot_product1_add_cast_1[2];
  assign MMul_dot_product1_mul_temp[3] = alpha_re_1[3] * alpha_re_21[3];
  assign MMul_dot_product1_sub_cast[3] = {{4{MMul_dot_product1_mul_temp[3][27]}}, MMul_dot_product1_mul_temp[3]};
  assign MMul_dot_product1_mul_temp_1[3] = alpha_im_1[3] * alpha_im_21[3];
  assign MMul_dot_product1_sub_cast_1[3] = {{4{MMul_dot_product1_mul_temp_1[3][27]}}, MMul_dot_product1_mul_temp_1[3]};
  assign MMul_dot_product_out_re_5[3] = MMul_dot_product1_sub_cast[3] - MMul_dot_product1_sub_cast_1[3];
  assign MMul_dot_product1_mul_temp_2[3] = alpha_im_1[3] * alpha_re_21[3];
  assign MMul_dot_product1_add_cast[3] = {{4{MMul_dot_product1_mul_temp_2[3][27]}}, MMul_dot_product1_mul_temp_2[3]};
  assign MMul_dot_product1_mul_temp_3[3] = alpha_re_1[3] * alpha_im_21[3];
  assign MMul_dot_product1_add_cast_1[3] = {{4{MMul_dot_product1_mul_temp_3[3][27]}}, MMul_dot_product1_mul_temp_3[3]};
  assign MMul_dot_product_out_im_5[3] = MMul_dot_product1_add_cast[3] + MMul_dot_product1_add_cast_1[3];
  assign MMul_dot_product1_mul_temp[4] = alpha_re_1[4] * alpha_re_21[4];
  assign MMul_dot_product1_sub_cast[4] = {{4{MMul_dot_product1_mul_temp[4][27]}}, MMul_dot_product1_mul_temp[4]};
  assign MMul_dot_product1_mul_temp_1[4] = alpha_im_1[4] * alpha_im_21[4];
  assign MMul_dot_product1_sub_cast_1[4] = {{4{MMul_dot_product1_mul_temp_1[4][27]}}, MMul_dot_product1_mul_temp_1[4]};
  assign MMul_dot_product_out_re_5[4] = MMul_dot_product1_sub_cast[4] - MMul_dot_product1_sub_cast_1[4];
  assign MMul_dot_product1_mul_temp_2[4] = alpha_im_1[4] * alpha_re_21[4];
  assign MMul_dot_product1_add_cast[4] = {{4{MMul_dot_product1_mul_temp_2[4][27]}}, MMul_dot_product1_mul_temp_2[4]};
  assign MMul_dot_product1_mul_temp_3[4] = alpha_re_1[4] * alpha_im_21[4];
  assign MMul_dot_product1_add_cast_1[4] = {{4{MMul_dot_product1_mul_temp_3[4][27]}}, MMul_dot_product1_mul_temp_3[4]};
  assign MMul_dot_product_out_im_5[4] = MMul_dot_product1_add_cast[4] + MMul_dot_product1_add_cast_1[4];
  assign MMul_dot_product1_mul_temp[5] = alpha_re_1[5] * alpha_re_21[5];
  assign MMul_dot_product1_sub_cast[5] = {{4{MMul_dot_product1_mul_temp[5][27]}}, MMul_dot_product1_mul_temp[5]};
  assign MMul_dot_product1_mul_temp_1[5] = alpha_im_1[5] * alpha_im_21[5];
  assign MMul_dot_product1_sub_cast_1[5] = {{4{MMul_dot_product1_mul_temp_1[5][27]}}, MMul_dot_product1_mul_temp_1[5]};
  assign MMul_dot_product_out_re_5[5] = MMul_dot_product1_sub_cast[5] - MMul_dot_product1_sub_cast_1[5];
  assign MMul_dot_product1_mul_temp_2[5] = alpha_im_1[5] * alpha_re_21[5];
  assign MMul_dot_product1_add_cast[5] = {{4{MMul_dot_product1_mul_temp_2[5][27]}}, MMul_dot_product1_mul_temp_2[5]};
  assign MMul_dot_product1_mul_temp_3[5] = alpha_re_1[5] * alpha_im_21[5];
  assign MMul_dot_product1_add_cast_1[5] = {{4{MMul_dot_product1_mul_temp_3[5][27]}}, MMul_dot_product1_mul_temp_3[5]};
  assign MMul_dot_product_out_im_5[5] = MMul_dot_product1_add_cast[5] + MMul_dot_product1_add_cast_1[5];
  assign MMul_dot_product1_mul_temp[6] = alpha_re_1[6] * alpha_re_21[6];
  assign MMul_dot_product1_sub_cast[6] = {{4{MMul_dot_product1_mul_temp[6][27]}}, MMul_dot_product1_mul_temp[6]};
  assign MMul_dot_product1_mul_temp_1[6] = alpha_im_1[6] * alpha_im_21[6];
  assign MMul_dot_product1_sub_cast_1[6] = {{4{MMul_dot_product1_mul_temp_1[6][27]}}, MMul_dot_product1_mul_temp_1[6]};
  assign MMul_dot_product_out_re_5[6] = MMul_dot_product1_sub_cast[6] - MMul_dot_product1_sub_cast_1[6];
  assign MMul_dot_product1_mul_temp_2[6] = alpha_im_1[6] * alpha_re_21[6];
  assign MMul_dot_product1_add_cast[6] = {{4{MMul_dot_product1_mul_temp_2[6][27]}}, MMul_dot_product1_mul_temp_2[6]};
  assign MMul_dot_product1_mul_temp_3[6] = alpha_re_1[6] * alpha_im_21[6];
  assign MMul_dot_product1_add_cast_1[6] = {{4{MMul_dot_product1_mul_temp_3[6][27]}}, MMul_dot_product1_mul_temp_3[6]};
  assign MMul_dot_product_out_im_5[6] = MMul_dot_product1_add_cast[6] + MMul_dot_product1_add_cast_1[6];
  assign MMul_dot_product1_mul_temp[7] = alpha_re_1[7] * alpha_re_21[7];
  assign MMul_dot_product1_sub_cast[7] = {{4{MMul_dot_product1_mul_temp[7][27]}}, MMul_dot_product1_mul_temp[7]};
  assign MMul_dot_product1_mul_temp_1[7] = alpha_im_1[7] * alpha_im_21[7];
  assign MMul_dot_product1_sub_cast_1[7] = {{4{MMul_dot_product1_mul_temp_1[7][27]}}, MMul_dot_product1_mul_temp_1[7]};
  assign MMul_dot_product_out_re_5[7] = MMul_dot_product1_sub_cast[7] - MMul_dot_product1_sub_cast_1[7];
  assign MMul_dot_product1_mul_temp_2[7] = alpha_im_1[7] * alpha_re_21[7];
  assign MMul_dot_product1_add_cast[7] = {{4{MMul_dot_product1_mul_temp_2[7][27]}}, MMul_dot_product1_mul_temp_2[7]};
  assign MMul_dot_product1_mul_temp_3[7] = alpha_re_1[7] * alpha_im_21[7];
  assign MMul_dot_product1_add_cast_1[7] = {{4{MMul_dot_product1_mul_temp_3[7][27]}}, MMul_dot_product1_mul_temp_3[7]};
  assign MMul_dot_product_out_im_5[7] = MMul_dot_product1_add_cast[7] + MMul_dot_product1_add_cast_1[7];
  assign MMul_dot_product1_mul_temp[8] = alpha_re_1[8] * alpha_re_21[8];
  assign MMul_dot_product1_sub_cast[8] = {{4{MMul_dot_product1_mul_temp[8][27]}}, MMul_dot_product1_mul_temp[8]};
  assign MMul_dot_product1_mul_temp_1[8] = alpha_im_1[8] * alpha_im_21[8];
  assign MMul_dot_product1_sub_cast_1[8] = {{4{MMul_dot_product1_mul_temp_1[8][27]}}, MMul_dot_product1_mul_temp_1[8]};
  assign MMul_dot_product_out_re_5[8] = MMul_dot_product1_sub_cast[8] - MMul_dot_product1_sub_cast_1[8];
  assign MMul_dot_product1_mul_temp_2[8] = alpha_im_1[8] * alpha_re_21[8];
  assign MMul_dot_product1_add_cast[8] = {{4{MMul_dot_product1_mul_temp_2[8][27]}}, MMul_dot_product1_mul_temp_2[8]};
  assign MMul_dot_product1_mul_temp_3[8] = alpha_re_1[8] * alpha_im_21[8];
  assign MMul_dot_product1_add_cast_1[8] = {{4{MMul_dot_product1_mul_temp_3[8][27]}}, MMul_dot_product1_mul_temp_3[8]};
  assign MMul_dot_product_out_im_5[8] = MMul_dot_product1_add_cast[8] + MMul_dot_product1_add_cast_1[8];
  assign MMul_dot_product1_mul_temp[9] = alpha_re_1[9] * alpha_re_21[9];
  assign MMul_dot_product1_sub_cast[9] = {{4{MMul_dot_product1_mul_temp[9][27]}}, MMul_dot_product1_mul_temp[9]};
  assign MMul_dot_product1_mul_temp_1[9] = alpha_im_1[9] * alpha_im_21[9];
  assign MMul_dot_product1_sub_cast_1[9] = {{4{MMul_dot_product1_mul_temp_1[9][27]}}, MMul_dot_product1_mul_temp_1[9]};
  assign MMul_dot_product_out_re_5[9] = MMul_dot_product1_sub_cast[9] - MMul_dot_product1_sub_cast_1[9];
  assign MMul_dot_product1_mul_temp_2[9] = alpha_im_1[9] * alpha_re_21[9];
  assign MMul_dot_product1_add_cast[9] = {{4{MMul_dot_product1_mul_temp_2[9][27]}}, MMul_dot_product1_mul_temp_2[9]};
  assign MMul_dot_product1_mul_temp_3[9] = alpha_re_1[9] * alpha_im_21[9];
  assign MMul_dot_product1_add_cast_1[9] = {{4{MMul_dot_product1_mul_temp_3[9][27]}}, MMul_dot_product1_mul_temp_3[9]};
  assign MMul_dot_product_out_im_5[9] = MMul_dot_product1_add_cast[9] + MMul_dot_product1_add_cast_1[9];
  assign MMul_dot_product1_mul_temp[10] = alpha_re_1[10] * alpha_re_21[10];
  assign MMul_dot_product1_sub_cast[10] = {{4{MMul_dot_product1_mul_temp[10][27]}}, MMul_dot_product1_mul_temp[10]};
  assign MMul_dot_product1_mul_temp_1[10] = alpha_im_1[10] * alpha_im_21[10];
  assign MMul_dot_product1_sub_cast_1[10] = {{4{MMul_dot_product1_mul_temp_1[10][27]}}, MMul_dot_product1_mul_temp_1[10]};
  assign MMul_dot_product_out_re_5[10] = MMul_dot_product1_sub_cast[10] - MMul_dot_product1_sub_cast_1[10];
  assign MMul_dot_product1_mul_temp_2[10] = alpha_im_1[10] * alpha_re_21[10];
  assign MMul_dot_product1_add_cast[10] = {{4{MMul_dot_product1_mul_temp_2[10][27]}}, MMul_dot_product1_mul_temp_2[10]};
  assign MMul_dot_product1_mul_temp_3[10] = alpha_re_1[10] * alpha_im_21[10];
  assign MMul_dot_product1_add_cast_1[10] = {{4{MMul_dot_product1_mul_temp_3[10][27]}}, MMul_dot_product1_mul_temp_3[10]};
  assign MMul_dot_product_out_im_5[10] = MMul_dot_product1_add_cast[10] + MMul_dot_product1_add_cast_1[10];
  assign MMul_dot_product1_mul_temp[11] = alpha_re_1[11] * alpha_re_21[11];
  assign MMul_dot_product1_sub_cast[11] = {{4{MMul_dot_product1_mul_temp[11][27]}}, MMul_dot_product1_mul_temp[11]};
  assign MMul_dot_product1_mul_temp_1[11] = alpha_im_1[11] * alpha_im_21[11];
  assign MMul_dot_product1_sub_cast_1[11] = {{4{MMul_dot_product1_mul_temp_1[11][27]}}, MMul_dot_product1_mul_temp_1[11]};
  assign MMul_dot_product_out_re_5[11] = MMul_dot_product1_sub_cast[11] - MMul_dot_product1_sub_cast_1[11];
  assign MMul_dot_product1_mul_temp_2[11] = alpha_im_1[11] * alpha_re_21[11];
  assign MMul_dot_product1_add_cast[11] = {{4{MMul_dot_product1_mul_temp_2[11][27]}}, MMul_dot_product1_mul_temp_2[11]};
  assign MMul_dot_product1_mul_temp_3[11] = alpha_re_1[11] * alpha_im_21[11];
  assign MMul_dot_product1_add_cast_1[11] = {{4{MMul_dot_product1_mul_temp_3[11][27]}}, MMul_dot_product1_mul_temp_3[11]};
  assign MMul_dot_product_out_im_5[11] = MMul_dot_product1_add_cast[11] + MMul_dot_product1_add_cast_1[11];
  assign MMul_dot_product1_mul_temp[12] = alpha_re_1[12] * alpha_re_21[12];
  assign MMul_dot_product1_sub_cast[12] = {{4{MMul_dot_product1_mul_temp[12][27]}}, MMul_dot_product1_mul_temp[12]};
  assign MMul_dot_product1_mul_temp_1[12] = alpha_im_1[12] * alpha_im_21[12];
  assign MMul_dot_product1_sub_cast_1[12] = {{4{MMul_dot_product1_mul_temp_1[12][27]}}, MMul_dot_product1_mul_temp_1[12]};
  assign MMul_dot_product_out_re_5[12] = MMul_dot_product1_sub_cast[12] - MMul_dot_product1_sub_cast_1[12];
  assign MMul_dot_product1_mul_temp_2[12] = alpha_im_1[12] * alpha_re_21[12];
  assign MMul_dot_product1_add_cast[12] = {{4{MMul_dot_product1_mul_temp_2[12][27]}}, MMul_dot_product1_mul_temp_2[12]};
  assign MMul_dot_product1_mul_temp_3[12] = alpha_re_1[12] * alpha_im_21[12];
  assign MMul_dot_product1_add_cast_1[12] = {{4{MMul_dot_product1_mul_temp_3[12][27]}}, MMul_dot_product1_mul_temp_3[12]};
  assign MMul_dot_product_out_im_5[12] = MMul_dot_product1_add_cast[12] + MMul_dot_product1_add_cast_1[12];
  assign MMul_dot_product1_mul_temp[13] = alpha_re_1[13] * alpha_re_21[13];
  assign MMul_dot_product1_sub_cast[13] = {{4{MMul_dot_product1_mul_temp[13][27]}}, MMul_dot_product1_mul_temp[13]};
  assign MMul_dot_product1_mul_temp_1[13] = alpha_im_1[13] * alpha_im_21[13];
  assign MMul_dot_product1_sub_cast_1[13] = {{4{MMul_dot_product1_mul_temp_1[13][27]}}, MMul_dot_product1_mul_temp_1[13]};
  assign MMul_dot_product_out_re_5[13] = MMul_dot_product1_sub_cast[13] - MMul_dot_product1_sub_cast_1[13];
  assign MMul_dot_product1_mul_temp_2[13] = alpha_im_1[13] * alpha_re_21[13];
  assign MMul_dot_product1_add_cast[13] = {{4{MMul_dot_product1_mul_temp_2[13][27]}}, MMul_dot_product1_mul_temp_2[13]};
  assign MMul_dot_product1_mul_temp_3[13] = alpha_re_1[13] * alpha_im_21[13];
  assign MMul_dot_product1_add_cast_1[13] = {{4{MMul_dot_product1_mul_temp_3[13][27]}}, MMul_dot_product1_mul_temp_3[13]};
  assign MMul_dot_product_out_im_5[13] = MMul_dot_product1_add_cast[13] + MMul_dot_product1_add_cast_1[13];
  assign MMul_dot_product1_mul_temp[14] = alpha_re_1[14] * alpha_re_21[14];
  assign MMul_dot_product1_sub_cast[14] = {{4{MMul_dot_product1_mul_temp[14][27]}}, MMul_dot_product1_mul_temp[14]};
  assign MMul_dot_product1_mul_temp_1[14] = alpha_im_1[14] * alpha_im_21[14];
  assign MMul_dot_product1_sub_cast_1[14] = {{4{MMul_dot_product1_mul_temp_1[14][27]}}, MMul_dot_product1_mul_temp_1[14]};
  assign MMul_dot_product_out_re_5[14] = MMul_dot_product1_sub_cast[14] - MMul_dot_product1_sub_cast_1[14];
  assign MMul_dot_product1_mul_temp_2[14] = alpha_im_1[14] * alpha_re_21[14];
  assign MMul_dot_product1_add_cast[14] = {{4{MMul_dot_product1_mul_temp_2[14][27]}}, MMul_dot_product1_mul_temp_2[14]};
  assign MMul_dot_product1_mul_temp_3[14] = alpha_re_1[14] * alpha_im_21[14];
  assign MMul_dot_product1_add_cast_1[14] = {{4{MMul_dot_product1_mul_temp_3[14][27]}}, MMul_dot_product1_mul_temp_3[14]};
  assign MMul_dot_product_out_im_5[14] = MMul_dot_product1_add_cast[14] + MMul_dot_product1_add_cast_1[14];
  assign MMul_dot_product1_mul_temp[15] = alpha_re_1[15] * alpha_re_21[15];
  assign MMul_dot_product1_sub_cast[15] = {{4{MMul_dot_product1_mul_temp[15][27]}}, MMul_dot_product1_mul_temp[15]};
  assign MMul_dot_product1_mul_temp_1[15] = alpha_im_1[15] * alpha_im_21[15];
  assign MMul_dot_product1_sub_cast_1[15] = {{4{MMul_dot_product1_mul_temp_1[15][27]}}, MMul_dot_product1_mul_temp_1[15]};
  assign MMul_dot_product_out_re_5[15] = MMul_dot_product1_sub_cast[15] - MMul_dot_product1_sub_cast_1[15];
  assign MMul_dot_product1_mul_temp_2[15] = alpha_im_1[15] * alpha_re_21[15];
  assign MMul_dot_product1_add_cast[15] = {{4{MMul_dot_product1_mul_temp_2[15][27]}}, MMul_dot_product1_mul_temp_2[15]};
  assign MMul_dot_product1_mul_temp_3[15] = alpha_re_1[15] * alpha_im_21[15];
  assign MMul_dot_product1_add_cast_1[15] = {{4{MMul_dot_product1_mul_temp_3[15][27]}}, MMul_dot_product1_mul_temp_3[15]};
  assign MMul_dot_product_out_im_5[15] = MMul_dot_product1_add_cast[15] + MMul_dot_product1_add_cast_1[15];
  assign MMul_dot_product1_mul_temp[16] = alpha_re_1[16] * alpha_re_21[16];
  assign MMul_dot_product1_sub_cast[16] = {{4{MMul_dot_product1_mul_temp[16][27]}}, MMul_dot_product1_mul_temp[16]};
  assign MMul_dot_product1_mul_temp_1[16] = alpha_im_1[16] * alpha_im_21[16];
  assign MMul_dot_product1_sub_cast_1[16] = {{4{MMul_dot_product1_mul_temp_1[16][27]}}, MMul_dot_product1_mul_temp_1[16]};
  assign MMul_dot_product_out_re_5[16] = MMul_dot_product1_sub_cast[16] - MMul_dot_product1_sub_cast_1[16];
  assign MMul_dot_product1_mul_temp_2[16] = alpha_im_1[16] * alpha_re_21[16];
  assign MMul_dot_product1_add_cast[16] = {{4{MMul_dot_product1_mul_temp_2[16][27]}}, MMul_dot_product1_mul_temp_2[16]};
  assign MMul_dot_product1_mul_temp_3[16] = alpha_re_1[16] * alpha_im_21[16];
  assign MMul_dot_product1_add_cast_1[16] = {{4{MMul_dot_product1_mul_temp_3[16][27]}}, MMul_dot_product1_mul_temp_3[16]};
  assign MMul_dot_product_out_im_5[16] = MMul_dot_product1_add_cast[16] + MMul_dot_product1_add_cast_1[16];
  assign MMul_dot_product1_mul_temp[17] = alpha_re_1[17] * alpha_re_21[17];
  assign MMul_dot_product1_sub_cast[17] = {{4{MMul_dot_product1_mul_temp[17][27]}}, MMul_dot_product1_mul_temp[17]};
  assign MMul_dot_product1_mul_temp_1[17] = alpha_im_1[17] * alpha_im_21[17];
  assign MMul_dot_product1_sub_cast_1[17] = {{4{MMul_dot_product1_mul_temp_1[17][27]}}, MMul_dot_product1_mul_temp_1[17]};
  assign MMul_dot_product_out_re_5[17] = MMul_dot_product1_sub_cast[17] - MMul_dot_product1_sub_cast_1[17];
  assign MMul_dot_product1_mul_temp_2[17] = alpha_im_1[17] * alpha_re_21[17];
  assign MMul_dot_product1_add_cast[17] = {{4{MMul_dot_product1_mul_temp_2[17][27]}}, MMul_dot_product1_mul_temp_2[17]};
  assign MMul_dot_product1_mul_temp_3[17] = alpha_re_1[17] * alpha_im_21[17];
  assign MMul_dot_product1_add_cast_1[17] = {{4{MMul_dot_product1_mul_temp_3[17][27]}}, MMul_dot_product1_mul_temp_3[17]};
  assign MMul_dot_product_out_im_5[17] = MMul_dot_product1_add_cast[17] + MMul_dot_product1_add_cast_1[17];
  assign MMul_dot_product1_mul_temp[18] = alpha_re_1[18] * alpha_re_21[18];
  assign MMul_dot_product1_sub_cast[18] = {{4{MMul_dot_product1_mul_temp[18][27]}}, MMul_dot_product1_mul_temp[18]};
  assign MMul_dot_product1_mul_temp_1[18] = alpha_im_1[18] * alpha_im_21[18];
  assign MMul_dot_product1_sub_cast_1[18] = {{4{MMul_dot_product1_mul_temp_1[18][27]}}, MMul_dot_product1_mul_temp_1[18]};
  assign MMul_dot_product_out_re_5[18] = MMul_dot_product1_sub_cast[18] - MMul_dot_product1_sub_cast_1[18];
  assign MMul_dot_product1_mul_temp_2[18] = alpha_im_1[18] * alpha_re_21[18];
  assign MMul_dot_product1_add_cast[18] = {{4{MMul_dot_product1_mul_temp_2[18][27]}}, MMul_dot_product1_mul_temp_2[18]};
  assign MMul_dot_product1_mul_temp_3[18] = alpha_re_1[18] * alpha_im_21[18];
  assign MMul_dot_product1_add_cast_1[18] = {{4{MMul_dot_product1_mul_temp_3[18][27]}}, MMul_dot_product1_mul_temp_3[18]};
  assign MMul_dot_product_out_im_5[18] = MMul_dot_product1_add_cast[18] + MMul_dot_product1_add_cast_1[18];
  assign MMul_dot_product1_mul_temp[19] = alpha_re_1[19] * alpha_re_21[19];
  assign MMul_dot_product1_sub_cast[19] = {{4{MMul_dot_product1_mul_temp[19][27]}}, MMul_dot_product1_mul_temp[19]};
  assign MMul_dot_product1_mul_temp_1[19] = alpha_im_1[19] * alpha_im_21[19];
  assign MMul_dot_product1_sub_cast_1[19] = {{4{MMul_dot_product1_mul_temp_1[19][27]}}, MMul_dot_product1_mul_temp_1[19]};
  assign MMul_dot_product_out_re_5[19] = MMul_dot_product1_sub_cast[19] - MMul_dot_product1_sub_cast_1[19];
  assign MMul_dot_product1_mul_temp_2[19] = alpha_im_1[19] * alpha_re_21[19];
  assign MMul_dot_product1_add_cast[19] = {{4{MMul_dot_product1_mul_temp_2[19][27]}}, MMul_dot_product1_mul_temp_2[19]};
  assign MMul_dot_product1_mul_temp_3[19] = alpha_re_1[19] * alpha_im_21[19];
  assign MMul_dot_product1_add_cast_1[19] = {{4{MMul_dot_product1_mul_temp_3[19][27]}}, MMul_dot_product1_mul_temp_3[19]};
  assign MMul_dot_product_out_im_5[19] = MMul_dot_product1_add_cast[19] + MMul_dot_product1_add_cast_1[19];
  assign MMul_dot_product1_mul_temp[20] = alpha_re_1[20] * alpha_re_21[20];
  assign MMul_dot_product1_sub_cast[20] = {{4{MMul_dot_product1_mul_temp[20][27]}}, MMul_dot_product1_mul_temp[20]};
  assign MMul_dot_product1_mul_temp_1[20] = alpha_im_1[20] * alpha_im_21[20];
  assign MMul_dot_product1_sub_cast_1[20] = {{4{MMul_dot_product1_mul_temp_1[20][27]}}, MMul_dot_product1_mul_temp_1[20]};
  assign MMul_dot_product_out_re_5[20] = MMul_dot_product1_sub_cast[20] - MMul_dot_product1_sub_cast_1[20];
  assign MMul_dot_product1_mul_temp_2[20] = alpha_im_1[20] * alpha_re_21[20];
  assign MMul_dot_product1_add_cast[20] = {{4{MMul_dot_product1_mul_temp_2[20][27]}}, MMul_dot_product1_mul_temp_2[20]};
  assign MMul_dot_product1_mul_temp_3[20] = alpha_re_1[20] * alpha_im_21[20];
  assign MMul_dot_product1_add_cast_1[20] = {{4{MMul_dot_product1_mul_temp_3[20][27]}}, MMul_dot_product1_mul_temp_3[20]};
  assign MMul_dot_product_out_im_5[20] = MMul_dot_product1_add_cast[20] + MMul_dot_product1_add_cast_1[20];
  assign MMul_dot_product1_mul_temp[21] = alpha_re_1[21] * alpha_re_21[21];
  assign MMul_dot_product1_sub_cast[21] = {{4{MMul_dot_product1_mul_temp[21][27]}}, MMul_dot_product1_mul_temp[21]};
  assign MMul_dot_product1_mul_temp_1[21] = alpha_im_1[21] * alpha_im_21[21];
  assign MMul_dot_product1_sub_cast_1[21] = {{4{MMul_dot_product1_mul_temp_1[21][27]}}, MMul_dot_product1_mul_temp_1[21]};
  assign MMul_dot_product_out_re_5[21] = MMul_dot_product1_sub_cast[21] - MMul_dot_product1_sub_cast_1[21];
  assign MMul_dot_product1_mul_temp_2[21] = alpha_im_1[21] * alpha_re_21[21];
  assign MMul_dot_product1_add_cast[21] = {{4{MMul_dot_product1_mul_temp_2[21][27]}}, MMul_dot_product1_mul_temp_2[21]};
  assign MMul_dot_product1_mul_temp_3[21] = alpha_re_1[21] * alpha_im_21[21];
  assign MMul_dot_product1_add_cast_1[21] = {{4{MMul_dot_product1_mul_temp_3[21][27]}}, MMul_dot_product1_mul_temp_3[21]};
  assign MMul_dot_product_out_im_5[21] = MMul_dot_product1_add_cast[21] + MMul_dot_product1_add_cast_1[21];
  assign MMul_dot_product1_mul_temp[22] = alpha_re_1[22] * alpha_re_21[22];
  assign MMul_dot_product1_sub_cast[22] = {{4{MMul_dot_product1_mul_temp[22][27]}}, MMul_dot_product1_mul_temp[22]};
  assign MMul_dot_product1_mul_temp_1[22] = alpha_im_1[22] * alpha_im_21[22];
  assign MMul_dot_product1_sub_cast_1[22] = {{4{MMul_dot_product1_mul_temp_1[22][27]}}, MMul_dot_product1_mul_temp_1[22]};
  assign MMul_dot_product_out_re_5[22] = MMul_dot_product1_sub_cast[22] - MMul_dot_product1_sub_cast_1[22];
  assign MMul_dot_product1_mul_temp_2[22] = alpha_im_1[22] * alpha_re_21[22];
  assign MMul_dot_product1_add_cast[22] = {{4{MMul_dot_product1_mul_temp_2[22][27]}}, MMul_dot_product1_mul_temp_2[22]};
  assign MMul_dot_product1_mul_temp_3[22] = alpha_re_1[22] * alpha_im_21[22];
  assign MMul_dot_product1_add_cast_1[22] = {{4{MMul_dot_product1_mul_temp_3[22][27]}}, MMul_dot_product1_mul_temp_3[22]};
  assign MMul_dot_product_out_im_5[22] = MMul_dot_product1_add_cast[22] + MMul_dot_product1_add_cast_1[22];
  assign MMul_dot_product1_mul_temp[23] = alpha_re_1[23] * alpha_re_21[23];
  assign MMul_dot_product1_sub_cast[23] = {{4{MMul_dot_product1_mul_temp[23][27]}}, MMul_dot_product1_mul_temp[23]};
  assign MMul_dot_product1_mul_temp_1[23] = alpha_im_1[23] * alpha_im_21[23];
  assign MMul_dot_product1_sub_cast_1[23] = {{4{MMul_dot_product1_mul_temp_1[23][27]}}, MMul_dot_product1_mul_temp_1[23]};
  assign MMul_dot_product_out_re_5[23] = MMul_dot_product1_sub_cast[23] - MMul_dot_product1_sub_cast_1[23];
  assign MMul_dot_product1_mul_temp_2[23] = alpha_im_1[23] * alpha_re_21[23];
  assign MMul_dot_product1_add_cast[23] = {{4{MMul_dot_product1_mul_temp_2[23][27]}}, MMul_dot_product1_mul_temp_2[23]};
  assign MMul_dot_product1_mul_temp_3[23] = alpha_re_1[23] * alpha_im_21[23];
  assign MMul_dot_product1_add_cast_1[23] = {{4{MMul_dot_product1_mul_temp_3[23][27]}}, MMul_dot_product1_mul_temp_3[23]};
  assign MMul_dot_product_out_im_5[23] = MMul_dot_product1_add_cast[23] + MMul_dot_product1_add_cast_1[23];
  assign MMul_dot_product1_mul_temp[24] = alpha_re_1[24] * alpha_re_21[24];
  assign MMul_dot_product1_sub_cast[24] = {{4{MMul_dot_product1_mul_temp[24][27]}}, MMul_dot_product1_mul_temp[24]};
  assign MMul_dot_product1_mul_temp_1[24] = alpha_im_1[24] * alpha_im_21[24];
  assign MMul_dot_product1_sub_cast_1[24] = {{4{MMul_dot_product1_mul_temp_1[24][27]}}, MMul_dot_product1_mul_temp_1[24]};
  assign MMul_dot_product_out_re_5[24] = MMul_dot_product1_sub_cast[24] - MMul_dot_product1_sub_cast_1[24];
  assign MMul_dot_product1_mul_temp_2[24] = alpha_im_1[24] * alpha_re_21[24];
  assign MMul_dot_product1_add_cast[24] = {{4{MMul_dot_product1_mul_temp_2[24][27]}}, MMul_dot_product1_mul_temp_2[24]};
  assign MMul_dot_product1_mul_temp_3[24] = alpha_re_1[24] * alpha_im_21[24];
  assign MMul_dot_product1_add_cast_1[24] = {{4{MMul_dot_product1_mul_temp_3[24][27]}}, MMul_dot_product1_mul_temp_3[24]};
  assign MMul_dot_product_out_im_5[24] = MMul_dot_product1_add_cast[24] + MMul_dot_product1_add_cast_1[24];
  assign MMul_dot_product1_mul_temp[25] = alpha_re_1[25] * alpha_re_21[25];
  assign MMul_dot_product1_sub_cast[25] = {{4{MMul_dot_product1_mul_temp[25][27]}}, MMul_dot_product1_mul_temp[25]};
  assign MMul_dot_product1_mul_temp_1[25] = alpha_im_1[25] * alpha_im_21[25];
  assign MMul_dot_product1_sub_cast_1[25] = {{4{MMul_dot_product1_mul_temp_1[25][27]}}, MMul_dot_product1_mul_temp_1[25]};
  assign MMul_dot_product_out_re_5[25] = MMul_dot_product1_sub_cast[25] - MMul_dot_product1_sub_cast_1[25];
  assign MMul_dot_product1_mul_temp_2[25] = alpha_im_1[25] * alpha_re_21[25];
  assign MMul_dot_product1_add_cast[25] = {{4{MMul_dot_product1_mul_temp_2[25][27]}}, MMul_dot_product1_mul_temp_2[25]};
  assign MMul_dot_product1_mul_temp_3[25] = alpha_re_1[25] * alpha_im_21[25];
  assign MMul_dot_product1_add_cast_1[25] = {{4{MMul_dot_product1_mul_temp_3[25][27]}}, MMul_dot_product1_mul_temp_3[25]};
  assign MMul_dot_product_out_im_5[25] = MMul_dot_product1_add_cast[25] + MMul_dot_product1_add_cast_1[25];
  assign MMul_dot_product1_mul_temp[26] = alpha_re_1[26] * alpha_re_21[26];
  assign MMul_dot_product1_sub_cast[26] = {{4{MMul_dot_product1_mul_temp[26][27]}}, MMul_dot_product1_mul_temp[26]};
  assign MMul_dot_product1_mul_temp_1[26] = alpha_im_1[26] * alpha_im_21[26];
  assign MMul_dot_product1_sub_cast_1[26] = {{4{MMul_dot_product1_mul_temp_1[26][27]}}, MMul_dot_product1_mul_temp_1[26]};
  assign MMul_dot_product_out_re_5[26] = MMul_dot_product1_sub_cast[26] - MMul_dot_product1_sub_cast_1[26];
  assign MMul_dot_product1_mul_temp_2[26] = alpha_im_1[26] * alpha_re_21[26];
  assign MMul_dot_product1_add_cast[26] = {{4{MMul_dot_product1_mul_temp_2[26][27]}}, MMul_dot_product1_mul_temp_2[26]};
  assign MMul_dot_product1_mul_temp_3[26] = alpha_re_1[26] * alpha_im_21[26];
  assign MMul_dot_product1_add_cast_1[26] = {{4{MMul_dot_product1_mul_temp_3[26][27]}}, MMul_dot_product1_mul_temp_3[26]};
  assign MMul_dot_product_out_im_5[26] = MMul_dot_product1_add_cast[26] + MMul_dot_product1_add_cast_1[26];
  assign MMul_dot_product1_mul_temp[27] = alpha_re_1[27] * alpha_re_21[27];
  assign MMul_dot_product1_sub_cast[27] = {{4{MMul_dot_product1_mul_temp[27][27]}}, MMul_dot_product1_mul_temp[27]};
  assign MMul_dot_product1_mul_temp_1[27] = alpha_im_1[27] * alpha_im_21[27];
  assign MMul_dot_product1_sub_cast_1[27] = {{4{MMul_dot_product1_mul_temp_1[27][27]}}, MMul_dot_product1_mul_temp_1[27]};
  assign MMul_dot_product_out_re_5[27] = MMul_dot_product1_sub_cast[27] - MMul_dot_product1_sub_cast_1[27];
  assign MMul_dot_product1_mul_temp_2[27] = alpha_im_1[27] * alpha_re_21[27];
  assign MMul_dot_product1_add_cast[27] = {{4{MMul_dot_product1_mul_temp_2[27][27]}}, MMul_dot_product1_mul_temp_2[27]};
  assign MMul_dot_product1_mul_temp_3[27] = alpha_re_1[27] * alpha_im_21[27];
  assign MMul_dot_product1_add_cast_1[27] = {{4{MMul_dot_product1_mul_temp_3[27][27]}}, MMul_dot_product1_mul_temp_3[27]};
  assign MMul_dot_product_out_im_5[27] = MMul_dot_product1_add_cast[27] + MMul_dot_product1_add_cast_1[27];
  assign MMul_dot_product1_mul_temp[28] = alpha_re_1[28] * alpha_re_21[28];
  assign MMul_dot_product1_sub_cast[28] = {{4{MMul_dot_product1_mul_temp[28][27]}}, MMul_dot_product1_mul_temp[28]};
  assign MMul_dot_product1_mul_temp_1[28] = alpha_im_1[28] * alpha_im_21[28];
  assign MMul_dot_product1_sub_cast_1[28] = {{4{MMul_dot_product1_mul_temp_1[28][27]}}, MMul_dot_product1_mul_temp_1[28]};
  assign MMul_dot_product_out_re_5[28] = MMul_dot_product1_sub_cast[28] - MMul_dot_product1_sub_cast_1[28];
  assign MMul_dot_product1_mul_temp_2[28] = alpha_im_1[28] * alpha_re_21[28];
  assign MMul_dot_product1_add_cast[28] = {{4{MMul_dot_product1_mul_temp_2[28][27]}}, MMul_dot_product1_mul_temp_2[28]};
  assign MMul_dot_product1_mul_temp_3[28] = alpha_re_1[28] * alpha_im_21[28];
  assign MMul_dot_product1_add_cast_1[28] = {{4{MMul_dot_product1_mul_temp_3[28][27]}}, MMul_dot_product1_mul_temp_3[28]};
  assign MMul_dot_product_out_im_5[28] = MMul_dot_product1_add_cast[28] + MMul_dot_product1_add_cast_1[28];
  assign MMul_dot_product1_mul_temp[29] = alpha_re_1[29] * alpha_re_21[29];
  assign MMul_dot_product1_sub_cast[29] = {{4{MMul_dot_product1_mul_temp[29][27]}}, MMul_dot_product1_mul_temp[29]};
  assign MMul_dot_product1_mul_temp_1[29] = alpha_im_1[29] * alpha_im_21[29];
  assign MMul_dot_product1_sub_cast_1[29] = {{4{MMul_dot_product1_mul_temp_1[29][27]}}, MMul_dot_product1_mul_temp_1[29]};
  assign MMul_dot_product_out_re_5[29] = MMul_dot_product1_sub_cast[29] - MMul_dot_product1_sub_cast_1[29];
  assign MMul_dot_product1_mul_temp_2[29] = alpha_im_1[29] * alpha_re_21[29];
  assign MMul_dot_product1_add_cast[29] = {{4{MMul_dot_product1_mul_temp_2[29][27]}}, MMul_dot_product1_mul_temp_2[29]};
  assign MMul_dot_product1_mul_temp_3[29] = alpha_re_1[29] * alpha_im_21[29];
  assign MMul_dot_product1_add_cast_1[29] = {{4{MMul_dot_product1_mul_temp_3[29][27]}}, MMul_dot_product1_mul_temp_3[29]};
  assign MMul_dot_product_out_im_5[29] = MMul_dot_product1_add_cast[29] + MMul_dot_product1_add_cast_1[29];
  assign MMul_dot_product1_mul_temp[30] = alpha_re_1[30] * alpha_re_21[30];
  assign MMul_dot_product1_sub_cast[30] = {{4{MMul_dot_product1_mul_temp[30][27]}}, MMul_dot_product1_mul_temp[30]};
  assign MMul_dot_product1_mul_temp_1[30] = alpha_im_1[30] * alpha_im_21[30];
  assign MMul_dot_product1_sub_cast_1[30] = {{4{MMul_dot_product1_mul_temp_1[30][27]}}, MMul_dot_product1_mul_temp_1[30]};
  assign MMul_dot_product_out_re_5[30] = MMul_dot_product1_sub_cast[30] - MMul_dot_product1_sub_cast_1[30];
  assign MMul_dot_product1_mul_temp_2[30] = alpha_im_1[30] * alpha_re_21[30];
  assign MMul_dot_product1_add_cast[30] = {{4{MMul_dot_product1_mul_temp_2[30][27]}}, MMul_dot_product1_mul_temp_2[30]};
  assign MMul_dot_product1_mul_temp_3[30] = alpha_re_1[30] * alpha_im_21[30];
  assign MMul_dot_product1_add_cast_1[30] = {{4{MMul_dot_product1_mul_temp_3[30][27]}}, MMul_dot_product1_mul_temp_3[30]};
  assign MMul_dot_product_out_im_5[30] = MMul_dot_product1_add_cast[30] + MMul_dot_product1_add_cast_1[30];
  assign MMul_dot_product1_mul_temp[31] = alpha_re_1[31] * alpha_re_21[31];
  assign MMul_dot_product1_sub_cast[31] = {{4{MMul_dot_product1_mul_temp[31][27]}}, MMul_dot_product1_mul_temp[31]};
  assign MMul_dot_product1_mul_temp_1[31] = alpha_im_1[31] * alpha_im_21[31];
  assign MMul_dot_product1_sub_cast_1[31] = {{4{MMul_dot_product1_mul_temp_1[31][27]}}, MMul_dot_product1_mul_temp_1[31]};
  assign MMul_dot_product_out_re_5[31] = MMul_dot_product1_sub_cast[31] - MMul_dot_product1_sub_cast_1[31];
  assign MMul_dot_product1_mul_temp_2[31] = alpha_im_1[31] * alpha_re_21[31];
  assign MMul_dot_product1_add_cast[31] = {{4{MMul_dot_product1_mul_temp_2[31][27]}}, MMul_dot_product1_mul_temp_2[31]};
  assign MMul_dot_product1_mul_temp_3[31] = alpha_re_1[31] * alpha_im_21[31];
  assign MMul_dot_product1_add_cast_1[31] = {{4{MMul_dot_product1_mul_temp_3[31][27]}}, MMul_dot_product1_mul_temp_3[31]};
  assign MMul_dot_product_out_im_5[31] = MMul_dot_product1_add_cast[31] + MMul_dot_product1_add_cast_1[31];
  assign MMul_dot_product1_mul_temp[32] = alpha_re_1[32] * alpha_re_21[32];
  assign MMul_dot_product1_sub_cast[32] = {{4{MMul_dot_product1_mul_temp[32][27]}}, MMul_dot_product1_mul_temp[32]};
  assign MMul_dot_product1_mul_temp_1[32] = alpha_im_1[32] * alpha_im_21[32];
  assign MMul_dot_product1_sub_cast_1[32] = {{4{MMul_dot_product1_mul_temp_1[32][27]}}, MMul_dot_product1_mul_temp_1[32]};
  assign MMul_dot_product_out_re_5[32] = MMul_dot_product1_sub_cast[32] - MMul_dot_product1_sub_cast_1[32];
  assign MMul_dot_product1_mul_temp_2[32] = alpha_im_1[32] * alpha_re_21[32];
  assign MMul_dot_product1_add_cast[32] = {{4{MMul_dot_product1_mul_temp_2[32][27]}}, MMul_dot_product1_mul_temp_2[32]};
  assign MMul_dot_product1_mul_temp_3[32] = alpha_re_1[32] * alpha_im_21[32];
  assign MMul_dot_product1_add_cast_1[32] = {{4{MMul_dot_product1_mul_temp_3[32][27]}}, MMul_dot_product1_mul_temp_3[32]};
  assign MMul_dot_product_out_im_5[32] = MMul_dot_product1_add_cast[32] + MMul_dot_product1_add_cast_1[32];
  assign MMul_dot_product1_mul_temp[33] = alpha_re_1[33] * alpha_re_21[33];
  assign MMul_dot_product1_sub_cast[33] = {{4{MMul_dot_product1_mul_temp[33][27]}}, MMul_dot_product1_mul_temp[33]};
  assign MMul_dot_product1_mul_temp_1[33] = alpha_im_1[33] * alpha_im_21[33];
  assign MMul_dot_product1_sub_cast_1[33] = {{4{MMul_dot_product1_mul_temp_1[33][27]}}, MMul_dot_product1_mul_temp_1[33]};
  assign MMul_dot_product_out_re_5[33] = MMul_dot_product1_sub_cast[33] - MMul_dot_product1_sub_cast_1[33];
  assign MMul_dot_product1_mul_temp_2[33] = alpha_im_1[33] * alpha_re_21[33];
  assign MMul_dot_product1_add_cast[33] = {{4{MMul_dot_product1_mul_temp_2[33][27]}}, MMul_dot_product1_mul_temp_2[33]};
  assign MMul_dot_product1_mul_temp_3[33] = alpha_re_1[33] * alpha_im_21[33];
  assign MMul_dot_product1_add_cast_1[33] = {{4{MMul_dot_product1_mul_temp_3[33][27]}}, MMul_dot_product1_mul_temp_3[33]};
  assign MMul_dot_product_out_im_5[33] = MMul_dot_product1_add_cast[33] + MMul_dot_product1_add_cast_1[33];
  assign MMul_dot_product1_mul_temp[34] = alpha_re_1[34] * alpha_re_21[34];
  assign MMul_dot_product1_sub_cast[34] = {{4{MMul_dot_product1_mul_temp[34][27]}}, MMul_dot_product1_mul_temp[34]};
  assign MMul_dot_product1_mul_temp_1[34] = alpha_im_1[34] * alpha_im_21[34];
  assign MMul_dot_product1_sub_cast_1[34] = {{4{MMul_dot_product1_mul_temp_1[34][27]}}, MMul_dot_product1_mul_temp_1[34]};
  assign MMul_dot_product_out_re_5[34] = MMul_dot_product1_sub_cast[34] - MMul_dot_product1_sub_cast_1[34];
  assign MMul_dot_product1_mul_temp_2[34] = alpha_im_1[34] * alpha_re_21[34];
  assign MMul_dot_product1_add_cast[34] = {{4{MMul_dot_product1_mul_temp_2[34][27]}}, MMul_dot_product1_mul_temp_2[34]};
  assign MMul_dot_product1_mul_temp_3[34] = alpha_re_1[34] * alpha_im_21[34];
  assign MMul_dot_product1_add_cast_1[34] = {{4{MMul_dot_product1_mul_temp_3[34][27]}}, MMul_dot_product1_mul_temp_3[34]};
  assign MMul_dot_product_out_im_5[34] = MMul_dot_product1_add_cast[34] + MMul_dot_product1_add_cast_1[34];
  assign MMul_dot_product1_mul_temp[35] = alpha_re_1[35] * alpha_re_21[35];
  assign MMul_dot_product1_sub_cast[35] = {{4{MMul_dot_product1_mul_temp[35][27]}}, MMul_dot_product1_mul_temp[35]};
  assign MMul_dot_product1_mul_temp_1[35] = alpha_im_1[35] * alpha_im_21[35];
  assign MMul_dot_product1_sub_cast_1[35] = {{4{MMul_dot_product1_mul_temp_1[35][27]}}, MMul_dot_product1_mul_temp_1[35]};
  assign MMul_dot_product_out_re_5[35] = MMul_dot_product1_sub_cast[35] - MMul_dot_product1_sub_cast_1[35];
  assign MMul_dot_product1_mul_temp_2[35] = alpha_im_1[35] * alpha_re_21[35];
  assign MMul_dot_product1_add_cast[35] = {{4{MMul_dot_product1_mul_temp_2[35][27]}}, MMul_dot_product1_mul_temp_2[35]};
  assign MMul_dot_product1_mul_temp_3[35] = alpha_re_1[35] * alpha_im_21[35];
  assign MMul_dot_product1_add_cast_1[35] = {{4{MMul_dot_product1_mul_temp_3[35][27]}}, MMul_dot_product1_mul_temp_3[35]};
  assign MMul_dot_product_out_im_5[35] = MMul_dot_product1_add_cast[35] + MMul_dot_product1_add_cast_1[35];
  assign MMul_dot_product1_mul_temp[36] = alpha_re_1[36] * alpha_re_21[36];
  assign MMul_dot_product1_sub_cast[36] = {{4{MMul_dot_product1_mul_temp[36][27]}}, MMul_dot_product1_mul_temp[36]};
  assign MMul_dot_product1_mul_temp_1[36] = alpha_im_1[36] * alpha_im_21[36];
  assign MMul_dot_product1_sub_cast_1[36] = {{4{MMul_dot_product1_mul_temp_1[36][27]}}, MMul_dot_product1_mul_temp_1[36]};
  assign MMul_dot_product_out_re_5[36] = MMul_dot_product1_sub_cast[36] - MMul_dot_product1_sub_cast_1[36];
  assign MMul_dot_product1_mul_temp_2[36] = alpha_im_1[36] * alpha_re_21[36];
  assign MMul_dot_product1_add_cast[36] = {{4{MMul_dot_product1_mul_temp_2[36][27]}}, MMul_dot_product1_mul_temp_2[36]};
  assign MMul_dot_product1_mul_temp_3[36] = alpha_re_1[36] * alpha_im_21[36];
  assign MMul_dot_product1_add_cast_1[36] = {{4{MMul_dot_product1_mul_temp_3[36][27]}}, MMul_dot_product1_mul_temp_3[36]};
  assign MMul_dot_product_out_im_5[36] = MMul_dot_product1_add_cast[36] + MMul_dot_product1_add_cast_1[36];
  assign MMul_dot_product1_mul_temp[37] = alpha_re_1[37] * alpha_re_21[37];
  assign MMul_dot_product1_sub_cast[37] = {{4{MMul_dot_product1_mul_temp[37][27]}}, MMul_dot_product1_mul_temp[37]};
  assign MMul_dot_product1_mul_temp_1[37] = alpha_im_1[37] * alpha_im_21[37];
  assign MMul_dot_product1_sub_cast_1[37] = {{4{MMul_dot_product1_mul_temp_1[37][27]}}, MMul_dot_product1_mul_temp_1[37]};
  assign MMul_dot_product_out_re_5[37] = MMul_dot_product1_sub_cast[37] - MMul_dot_product1_sub_cast_1[37];
  assign MMul_dot_product1_mul_temp_2[37] = alpha_im_1[37] * alpha_re_21[37];
  assign MMul_dot_product1_add_cast[37] = {{4{MMul_dot_product1_mul_temp_2[37][27]}}, MMul_dot_product1_mul_temp_2[37]};
  assign MMul_dot_product1_mul_temp_3[37] = alpha_re_1[37] * alpha_im_21[37];
  assign MMul_dot_product1_add_cast_1[37] = {{4{MMul_dot_product1_mul_temp_3[37][27]}}, MMul_dot_product1_mul_temp_3[37]};
  assign MMul_dot_product_out_im_5[37] = MMul_dot_product1_add_cast[37] + MMul_dot_product1_add_cast_1[37];
  assign MMul_dot_product1_mul_temp[38] = alpha_re_1[38] * alpha_re_21[38];
  assign MMul_dot_product1_sub_cast[38] = {{4{MMul_dot_product1_mul_temp[38][27]}}, MMul_dot_product1_mul_temp[38]};
  assign MMul_dot_product1_mul_temp_1[38] = alpha_im_1[38] * alpha_im_21[38];
  assign MMul_dot_product1_sub_cast_1[38] = {{4{MMul_dot_product1_mul_temp_1[38][27]}}, MMul_dot_product1_mul_temp_1[38]};
  assign MMul_dot_product_out_re_5[38] = MMul_dot_product1_sub_cast[38] - MMul_dot_product1_sub_cast_1[38];
  assign MMul_dot_product1_mul_temp_2[38] = alpha_im_1[38] * alpha_re_21[38];
  assign MMul_dot_product1_add_cast[38] = {{4{MMul_dot_product1_mul_temp_2[38][27]}}, MMul_dot_product1_mul_temp_2[38]};
  assign MMul_dot_product1_mul_temp_3[38] = alpha_re_1[38] * alpha_im_21[38];
  assign MMul_dot_product1_add_cast_1[38] = {{4{MMul_dot_product1_mul_temp_3[38][27]}}, MMul_dot_product1_mul_temp_3[38]};
  assign MMul_dot_product_out_im_5[38] = MMul_dot_product1_add_cast[38] + MMul_dot_product1_add_cast_1[38];
  assign MMul_dot_product1_mul_temp[39] = alpha_re_1[39] * alpha_re_21[39];
  assign MMul_dot_product1_sub_cast[39] = {{4{MMul_dot_product1_mul_temp[39][27]}}, MMul_dot_product1_mul_temp[39]};
  assign MMul_dot_product1_mul_temp_1[39] = alpha_im_1[39] * alpha_im_21[39];
  assign MMul_dot_product1_sub_cast_1[39] = {{4{MMul_dot_product1_mul_temp_1[39][27]}}, MMul_dot_product1_mul_temp_1[39]};
  assign MMul_dot_product_out_re_5[39] = MMul_dot_product1_sub_cast[39] - MMul_dot_product1_sub_cast_1[39];
  assign MMul_dot_product1_mul_temp_2[39] = alpha_im_1[39] * alpha_re_21[39];
  assign MMul_dot_product1_add_cast[39] = {{4{MMul_dot_product1_mul_temp_2[39][27]}}, MMul_dot_product1_mul_temp_2[39]};
  assign MMul_dot_product1_mul_temp_3[39] = alpha_re_1[39] * alpha_im_21[39];
  assign MMul_dot_product1_add_cast_1[39] = {{4{MMul_dot_product1_mul_temp_3[39][27]}}, MMul_dot_product1_mul_temp_3[39]};
  assign MMul_dot_product_out_im_5[39] = MMul_dot_product1_add_cast[39] + MMul_dot_product1_add_cast_1[39];
  assign MMul_dot_product1_mul_temp[40] = alpha_re_1[40] * alpha_re_21[40];
  assign MMul_dot_product1_sub_cast[40] = {{4{MMul_dot_product1_mul_temp[40][27]}}, MMul_dot_product1_mul_temp[40]};
  assign MMul_dot_product1_mul_temp_1[40] = alpha_im_1[40] * alpha_im_21[40];
  assign MMul_dot_product1_sub_cast_1[40] = {{4{MMul_dot_product1_mul_temp_1[40][27]}}, MMul_dot_product1_mul_temp_1[40]};
  assign MMul_dot_product_out_re_5[40] = MMul_dot_product1_sub_cast[40] - MMul_dot_product1_sub_cast_1[40];
  assign MMul_dot_product1_mul_temp_2[40] = alpha_im_1[40] * alpha_re_21[40];
  assign MMul_dot_product1_add_cast[40] = {{4{MMul_dot_product1_mul_temp_2[40][27]}}, MMul_dot_product1_mul_temp_2[40]};
  assign MMul_dot_product1_mul_temp_3[40] = alpha_re_1[40] * alpha_im_21[40];
  assign MMul_dot_product1_add_cast_1[40] = {{4{MMul_dot_product1_mul_temp_3[40][27]}}, MMul_dot_product1_mul_temp_3[40]};
  assign MMul_dot_product_out_im_5[40] = MMul_dot_product1_add_cast[40] + MMul_dot_product1_add_cast_1[40];
  assign MMul_dot_product1_mul_temp[41] = alpha_re_1[41] * alpha_re_21[41];
  assign MMul_dot_product1_sub_cast[41] = {{4{MMul_dot_product1_mul_temp[41][27]}}, MMul_dot_product1_mul_temp[41]};
  assign MMul_dot_product1_mul_temp_1[41] = alpha_im_1[41] * alpha_im_21[41];
  assign MMul_dot_product1_sub_cast_1[41] = {{4{MMul_dot_product1_mul_temp_1[41][27]}}, MMul_dot_product1_mul_temp_1[41]};
  assign MMul_dot_product_out_re_5[41] = MMul_dot_product1_sub_cast[41] - MMul_dot_product1_sub_cast_1[41];
  assign MMul_dot_product1_mul_temp_2[41] = alpha_im_1[41] * alpha_re_21[41];
  assign MMul_dot_product1_add_cast[41] = {{4{MMul_dot_product1_mul_temp_2[41][27]}}, MMul_dot_product1_mul_temp_2[41]};
  assign MMul_dot_product1_mul_temp_3[41] = alpha_re_1[41] * alpha_im_21[41];
  assign MMul_dot_product1_add_cast_1[41] = {{4{MMul_dot_product1_mul_temp_3[41][27]}}, MMul_dot_product1_mul_temp_3[41]};
  assign MMul_dot_product_out_im_5[41] = MMul_dot_product1_add_cast[41] + MMul_dot_product1_add_cast_1[41];
  assign MMul_dot_product1_mul_temp[42] = alpha_re_1[42] * alpha_re_21[42];
  assign MMul_dot_product1_sub_cast[42] = {{4{MMul_dot_product1_mul_temp[42][27]}}, MMul_dot_product1_mul_temp[42]};
  assign MMul_dot_product1_mul_temp_1[42] = alpha_im_1[42] * alpha_im_21[42];
  assign MMul_dot_product1_sub_cast_1[42] = {{4{MMul_dot_product1_mul_temp_1[42][27]}}, MMul_dot_product1_mul_temp_1[42]};
  assign MMul_dot_product_out_re_5[42] = MMul_dot_product1_sub_cast[42] - MMul_dot_product1_sub_cast_1[42];
  assign MMul_dot_product1_mul_temp_2[42] = alpha_im_1[42] * alpha_re_21[42];
  assign MMul_dot_product1_add_cast[42] = {{4{MMul_dot_product1_mul_temp_2[42][27]}}, MMul_dot_product1_mul_temp_2[42]};
  assign MMul_dot_product1_mul_temp_3[42] = alpha_re_1[42] * alpha_im_21[42];
  assign MMul_dot_product1_add_cast_1[42] = {{4{MMul_dot_product1_mul_temp_3[42][27]}}, MMul_dot_product1_mul_temp_3[42]};
  assign MMul_dot_product_out_im_5[42] = MMul_dot_product1_add_cast[42] + MMul_dot_product1_add_cast_1[42];
  assign MMul_dot_product1_mul_temp[43] = alpha_re_1[43] * alpha_re_21[43];
  assign MMul_dot_product1_sub_cast[43] = {{4{MMul_dot_product1_mul_temp[43][27]}}, MMul_dot_product1_mul_temp[43]};
  assign MMul_dot_product1_mul_temp_1[43] = alpha_im_1[43] * alpha_im_21[43];
  assign MMul_dot_product1_sub_cast_1[43] = {{4{MMul_dot_product1_mul_temp_1[43][27]}}, MMul_dot_product1_mul_temp_1[43]};
  assign MMul_dot_product_out_re_5[43] = MMul_dot_product1_sub_cast[43] - MMul_dot_product1_sub_cast_1[43];
  assign MMul_dot_product1_mul_temp_2[43] = alpha_im_1[43] * alpha_re_21[43];
  assign MMul_dot_product1_add_cast[43] = {{4{MMul_dot_product1_mul_temp_2[43][27]}}, MMul_dot_product1_mul_temp_2[43]};
  assign MMul_dot_product1_mul_temp_3[43] = alpha_re_1[43] * alpha_im_21[43];
  assign MMul_dot_product1_add_cast_1[43] = {{4{MMul_dot_product1_mul_temp_3[43][27]}}, MMul_dot_product1_mul_temp_3[43]};
  assign MMul_dot_product_out_im_5[43] = MMul_dot_product1_add_cast[43] + MMul_dot_product1_add_cast_1[43];
  assign MMul_dot_product1_mul_temp[44] = alpha_re_1[44] * alpha_re_21[44];
  assign MMul_dot_product1_sub_cast[44] = {{4{MMul_dot_product1_mul_temp[44][27]}}, MMul_dot_product1_mul_temp[44]};
  assign MMul_dot_product1_mul_temp_1[44] = alpha_im_1[44] * alpha_im_21[44];
  assign MMul_dot_product1_sub_cast_1[44] = {{4{MMul_dot_product1_mul_temp_1[44][27]}}, MMul_dot_product1_mul_temp_1[44]};
  assign MMul_dot_product_out_re_5[44] = MMul_dot_product1_sub_cast[44] - MMul_dot_product1_sub_cast_1[44];
  assign MMul_dot_product1_mul_temp_2[44] = alpha_im_1[44] * alpha_re_21[44];
  assign MMul_dot_product1_add_cast[44] = {{4{MMul_dot_product1_mul_temp_2[44][27]}}, MMul_dot_product1_mul_temp_2[44]};
  assign MMul_dot_product1_mul_temp_3[44] = alpha_re_1[44] * alpha_im_21[44];
  assign MMul_dot_product1_add_cast_1[44] = {{4{MMul_dot_product1_mul_temp_3[44][27]}}, MMul_dot_product1_mul_temp_3[44]};
  assign MMul_dot_product_out_im_5[44] = MMul_dot_product1_add_cast[44] + MMul_dot_product1_add_cast_1[44];
  assign MMul_dot_product1_mul_temp[45] = alpha_re_1[45] * alpha_re_21[45];
  assign MMul_dot_product1_sub_cast[45] = {{4{MMul_dot_product1_mul_temp[45][27]}}, MMul_dot_product1_mul_temp[45]};
  assign MMul_dot_product1_mul_temp_1[45] = alpha_im_1[45] * alpha_im_21[45];
  assign MMul_dot_product1_sub_cast_1[45] = {{4{MMul_dot_product1_mul_temp_1[45][27]}}, MMul_dot_product1_mul_temp_1[45]};
  assign MMul_dot_product_out_re_5[45] = MMul_dot_product1_sub_cast[45] - MMul_dot_product1_sub_cast_1[45];
  assign MMul_dot_product1_mul_temp_2[45] = alpha_im_1[45] * alpha_re_21[45];
  assign MMul_dot_product1_add_cast[45] = {{4{MMul_dot_product1_mul_temp_2[45][27]}}, MMul_dot_product1_mul_temp_2[45]};
  assign MMul_dot_product1_mul_temp_3[45] = alpha_re_1[45] * alpha_im_21[45];
  assign MMul_dot_product1_add_cast_1[45] = {{4{MMul_dot_product1_mul_temp_3[45][27]}}, MMul_dot_product1_mul_temp_3[45]};
  assign MMul_dot_product_out_im_5[45] = MMul_dot_product1_add_cast[45] + MMul_dot_product1_add_cast_1[45];
  assign MMul_dot_product1_mul_temp[46] = alpha_re_1[46] * alpha_re_21[46];
  assign MMul_dot_product1_sub_cast[46] = {{4{MMul_dot_product1_mul_temp[46][27]}}, MMul_dot_product1_mul_temp[46]};
  assign MMul_dot_product1_mul_temp_1[46] = alpha_im_1[46] * alpha_im_21[46];
  assign MMul_dot_product1_sub_cast_1[46] = {{4{MMul_dot_product1_mul_temp_1[46][27]}}, MMul_dot_product1_mul_temp_1[46]};
  assign MMul_dot_product_out_re_5[46] = MMul_dot_product1_sub_cast[46] - MMul_dot_product1_sub_cast_1[46];
  assign MMul_dot_product1_mul_temp_2[46] = alpha_im_1[46] * alpha_re_21[46];
  assign MMul_dot_product1_add_cast[46] = {{4{MMul_dot_product1_mul_temp_2[46][27]}}, MMul_dot_product1_mul_temp_2[46]};
  assign MMul_dot_product1_mul_temp_3[46] = alpha_re_1[46] * alpha_im_21[46];
  assign MMul_dot_product1_add_cast_1[46] = {{4{MMul_dot_product1_mul_temp_3[46][27]}}, MMul_dot_product1_mul_temp_3[46]};
  assign MMul_dot_product_out_im_5[46] = MMul_dot_product1_add_cast[46] + MMul_dot_product1_add_cast_1[46];
  assign MMul_dot_product1_mul_temp[47] = alpha_re_1[47] * alpha_re_21[47];
  assign MMul_dot_product1_sub_cast[47] = {{4{MMul_dot_product1_mul_temp[47][27]}}, MMul_dot_product1_mul_temp[47]};
  assign MMul_dot_product1_mul_temp_1[47] = alpha_im_1[47] * alpha_im_21[47];
  assign MMul_dot_product1_sub_cast_1[47] = {{4{MMul_dot_product1_mul_temp_1[47][27]}}, MMul_dot_product1_mul_temp_1[47]};
  assign MMul_dot_product_out_re_5[47] = MMul_dot_product1_sub_cast[47] - MMul_dot_product1_sub_cast_1[47];
  assign MMul_dot_product1_mul_temp_2[47] = alpha_im_1[47] * alpha_re_21[47];
  assign MMul_dot_product1_add_cast[47] = {{4{MMul_dot_product1_mul_temp_2[47][27]}}, MMul_dot_product1_mul_temp_2[47]};
  assign MMul_dot_product1_mul_temp_3[47] = alpha_re_1[47] * alpha_im_21[47];
  assign MMul_dot_product1_add_cast_1[47] = {{4{MMul_dot_product1_mul_temp_3[47][27]}}, MMul_dot_product1_mul_temp_3[47]};
  assign MMul_dot_product_out_im_5[47] = MMul_dot_product1_add_cast[47] + MMul_dot_product1_add_cast_1[47];
  assign MMul_dot_product1_mul_temp[48] = alpha_re_1[48] * alpha_re_21[48];
  assign MMul_dot_product1_sub_cast[48] = {{4{MMul_dot_product1_mul_temp[48][27]}}, MMul_dot_product1_mul_temp[48]};
  assign MMul_dot_product1_mul_temp_1[48] = alpha_im_1[48] * alpha_im_21[48];
  assign MMul_dot_product1_sub_cast_1[48] = {{4{MMul_dot_product1_mul_temp_1[48][27]}}, MMul_dot_product1_mul_temp_1[48]};
  assign MMul_dot_product_out_re_5[48] = MMul_dot_product1_sub_cast[48] - MMul_dot_product1_sub_cast_1[48];
  assign MMul_dot_product1_mul_temp_2[48] = alpha_im_1[48] * alpha_re_21[48];
  assign MMul_dot_product1_add_cast[48] = {{4{MMul_dot_product1_mul_temp_2[48][27]}}, MMul_dot_product1_mul_temp_2[48]};
  assign MMul_dot_product1_mul_temp_3[48] = alpha_re_1[48] * alpha_im_21[48];
  assign MMul_dot_product1_add_cast_1[48] = {{4{MMul_dot_product1_mul_temp_3[48][27]}}, MMul_dot_product1_mul_temp_3[48]};
  assign MMul_dot_product_out_im_5[48] = MMul_dot_product1_add_cast[48] + MMul_dot_product1_add_cast_1[48];
  assign MMul_dot_product1_mul_temp[49] = alpha_re_1[49] * alpha_re_21[49];
  assign MMul_dot_product1_sub_cast[49] = {{4{MMul_dot_product1_mul_temp[49][27]}}, MMul_dot_product1_mul_temp[49]};
  assign MMul_dot_product1_mul_temp_1[49] = alpha_im_1[49] * alpha_im_21[49];
  assign MMul_dot_product1_sub_cast_1[49] = {{4{MMul_dot_product1_mul_temp_1[49][27]}}, MMul_dot_product1_mul_temp_1[49]};
  assign MMul_dot_product_out_re_5[49] = MMul_dot_product1_sub_cast[49] - MMul_dot_product1_sub_cast_1[49];
  assign MMul_dot_product1_mul_temp_2[49] = alpha_im_1[49] * alpha_re_21[49];
  assign MMul_dot_product1_add_cast[49] = {{4{MMul_dot_product1_mul_temp_2[49][27]}}, MMul_dot_product1_mul_temp_2[49]};
  assign MMul_dot_product1_mul_temp_3[49] = alpha_re_1[49] * alpha_im_21[49];
  assign MMul_dot_product1_add_cast_1[49] = {{4{MMul_dot_product1_mul_temp_3[49][27]}}, MMul_dot_product1_mul_temp_3[49]};
  assign MMul_dot_product_out_im_5[49] = MMul_dot_product1_add_cast[49] + MMul_dot_product1_add_cast_1[49];
  assign MMul_dot_product1_mul_temp[50] = alpha_re_1[50] * alpha_re_21[50];
  assign MMul_dot_product1_sub_cast[50] = {{4{MMul_dot_product1_mul_temp[50][27]}}, MMul_dot_product1_mul_temp[50]};
  assign MMul_dot_product1_mul_temp_1[50] = alpha_im_1[50] * alpha_im_21[50];
  assign MMul_dot_product1_sub_cast_1[50] = {{4{MMul_dot_product1_mul_temp_1[50][27]}}, MMul_dot_product1_mul_temp_1[50]};
  assign MMul_dot_product_out_re_5[50] = MMul_dot_product1_sub_cast[50] - MMul_dot_product1_sub_cast_1[50];
  assign MMul_dot_product1_mul_temp_2[50] = alpha_im_1[50] * alpha_re_21[50];
  assign MMul_dot_product1_add_cast[50] = {{4{MMul_dot_product1_mul_temp_2[50][27]}}, MMul_dot_product1_mul_temp_2[50]};
  assign MMul_dot_product1_mul_temp_3[50] = alpha_re_1[50] * alpha_im_21[50];
  assign MMul_dot_product1_add_cast_1[50] = {{4{MMul_dot_product1_mul_temp_3[50][27]}}, MMul_dot_product1_mul_temp_3[50]};
  assign MMul_dot_product_out_im_5[50] = MMul_dot_product1_add_cast[50] + MMul_dot_product1_add_cast_1[50];
  assign MMul_dot_product1_mul_temp[51] = alpha_re_1[51] * alpha_re_21[51];
  assign MMul_dot_product1_sub_cast[51] = {{4{MMul_dot_product1_mul_temp[51][27]}}, MMul_dot_product1_mul_temp[51]};
  assign MMul_dot_product1_mul_temp_1[51] = alpha_im_1[51] * alpha_im_21[51];
  assign MMul_dot_product1_sub_cast_1[51] = {{4{MMul_dot_product1_mul_temp_1[51][27]}}, MMul_dot_product1_mul_temp_1[51]};
  assign MMul_dot_product_out_re_5[51] = MMul_dot_product1_sub_cast[51] - MMul_dot_product1_sub_cast_1[51];
  assign MMul_dot_product1_mul_temp_2[51] = alpha_im_1[51] * alpha_re_21[51];
  assign MMul_dot_product1_add_cast[51] = {{4{MMul_dot_product1_mul_temp_2[51][27]}}, MMul_dot_product1_mul_temp_2[51]};
  assign MMul_dot_product1_mul_temp_3[51] = alpha_re_1[51] * alpha_im_21[51];
  assign MMul_dot_product1_add_cast_1[51] = {{4{MMul_dot_product1_mul_temp_3[51][27]}}, MMul_dot_product1_mul_temp_3[51]};
  assign MMul_dot_product_out_im_5[51] = MMul_dot_product1_add_cast[51] + MMul_dot_product1_add_cast_1[51];
  assign MMul_dot_product1_mul_temp[52] = alpha_re_1[52] * alpha_re_21[52];
  assign MMul_dot_product1_sub_cast[52] = {{4{MMul_dot_product1_mul_temp[52][27]}}, MMul_dot_product1_mul_temp[52]};
  assign MMul_dot_product1_mul_temp_1[52] = alpha_im_1[52] * alpha_im_21[52];
  assign MMul_dot_product1_sub_cast_1[52] = {{4{MMul_dot_product1_mul_temp_1[52][27]}}, MMul_dot_product1_mul_temp_1[52]};
  assign MMul_dot_product_out_re_5[52] = MMul_dot_product1_sub_cast[52] - MMul_dot_product1_sub_cast_1[52];
  assign MMul_dot_product1_mul_temp_2[52] = alpha_im_1[52] * alpha_re_21[52];
  assign MMul_dot_product1_add_cast[52] = {{4{MMul_dot_product1_mul_temp_2[52][27]}}, MMul_dot_product1_mul_temp_2[52]};
  assign MMul_dot_product1_mul_temp_3[52] = alpha_re_1[52] * alpha_im_21[52];
  assign MMul_dot_product1_add_cast_1[52] = {{4{MMul_dot_product1_mul_temp_3[52][27]}}, MMul_dot_product1_mul_temp_3[52]};
  assign MMul_dot_product_out_im_5[52] = MMul_dot_product1_add_cast[52] + MMul_dot_product1_add_cast_1[52];
  assign MMul_dot_product1_mul_temp[53] = alpha_re_1[53] * alpha_re_21[53];
  assign MMul_dot_product1_sub_cast[53] = {{4{MMul_dot_product1_mul_temp[53][27]}}, MMul_dot_product1_mul_temp[53]};
  assign MMul_dot_product1_mul_temp_1[53] = alpha_im_1[53] * alpha_im_21[53];
  assign MMul_dot_product1_sub_cast_1[53] = {{4{MMul_dot_product1_mul_temp_1[53][27]}}, MMul_dot_product1_mul_temp_1[53]};
  assign MMul_dot_product_out_re_5[53] = MMul_dot_product1_sub_cast[53] - MMul_dot_product1_sub_cast_1[53];
  assign MMul_dot_product1_mul_temp_2[53] = alpha_im_1[53] * alpha_re_21[53];
  assign MMul_dot_product1_add_cast[53] = {{4{MMul_dot_product1_mul_temp_2[53][27]}}, MMul_dot_product1_mul_temp_2[53]};
  assign MMul_dot_product1_mul_temp_3[53] = alpha_re_1[53] * alpha_im_21[53];
  assign MMul_dot_product1_add_cast_1[53] = {{4{MMul_dot_product1_mul_temp_3[53][27]}}, MMul_dot_product1_mul_temp_3[53]};
  assign MMul_dot_product_out_im_5[53] = MMul_dot_product1_add_cast[53] + MMul_dot_product1_add_cast_1[53];
  assign MMul_dot_product1_mul_temp[54] = alpha_re_1[54] * alpha_re_21[54];
  assign MMul_dot_product1_sub_cast[54] = {{4{MMul_dot_product1_mul_temp[54][27]}}, MMul_dot_product1_mul_temp[54]};
  assign MMul_dot_product1_mul_temp_1[54] = alpha_im_1[54] * alpha_im_21[54];
  assign MMul_dot_product1_sub_cast_1[54] = {{4{MMul_dot_product1_mul_temp_1[54][27]}}, MMul_dot_product1_mul_temp_1[54]};
  assign MMul_dot_product_out_re_5[54] = MMul_dot_product1_sub_cast[54] - MMul_dot_product1_sub_cast_1[54];
  assign MMul_dot_product1_mul_temp_2[54] = alpha_im_1[54] * alpha_re_21[54];
  assign MMul_dot_product1_add_cast[54] = {{4{MMul_dot_product1_mul_temp_2[54][27]}}, MMul_dot_product1_mul_temp_2[54]};
  assign MMul_dot_product1_mul_temp_3[54] = alpha_re_1[54] * alpha_im_21[54];
  assign MMul_dot_product1_add_cast_1[54] = {{4{MMul_dot_product1_mul_temp_3[54][27]}}, MMul_dot_product1_mul_temp_3[54]};
  assign MMul_dot_product_out_im_5[54] = MMul_dot_product1_add_cast[54] + MMul_dot_product1_add_cast_1[54];
  assign MMul_dot_product1_mul_temp[55] = alpha_re_1[55] * alpha_re_21[55];
  assign MMul_dot_product1_sub_cast[55] = {{4{MMul_dot_product1_mul_temp[55][27]}}, MMul_dot_product1_mul_temp[55]};
  assign MMul_dot_product1_mul_temp_1[55] = alpha_im_1[55] * alpha_im_21[55];
  assign MMul_dot_product1_sub_cast_1[55] = {{4{MMul_dot_product1_mul_temp_1[55][27]}}, MMul_dot_product1_mul_temp_1[55]};
  assign MMul_dot_product_out_re_5[55] = MMul_dot_product1_sub_cast[55] - MMul_dot_product1_sub_cast_1[55];
  assign MMul_dot_product1_mul_temp_2[55] = alpha_im_1[55] * alpha_re_21[55];
  assign MMul_dot_product1_add_cast[55] = {{4{MMul_dot_product1_mul_temp_2[55][27]}}, MMul_dot_product1_mul_temp_2[55]};
  assign MMul_dot_product1_mul_temp_3[55] = alpha_re_1[55] * alpha_im_21[55];
  assign MMul_dot_product1_add_cast_1[55] = {{4{MMul_dot_product1_mul_temp_3[55][27]}}, MMul_dot_product1_mul_temp_3[55]};
  assign MMul_dot_product_out_im_5[55] = MMul_dot_product1_add_cast[55] + MMul_dot_product1_add_cast_1[55];
  assign MMul_dot_product1_mul_temp[56] = alpha_re_1[56] * alpha_re_21[56];
  assign MMul_dot_product1_sub_cast[56] = {{4{MMul_dot_product1_mul_temp[56][27]}}, MMul_dot_product1_mul_temp[56]};
  assign MMul_dot_product1_mul_temp_1[56] = alpha_im_1[56] * alpha_im_21[56];
  assign MMul_dot_product1_sub_cast_1[56] = {{4{MMul_dot_product1_mul_temp_1[56][27]}}, MMul_dot_product1_mul_temp_1[56]};
  assign MMul_dot_product_out_re_5[56] = MMul_dot_product1_sub_cast[56] - MMul_dot_product1_sub_cast_1[56];
  assign MMul_dot_product1_mul_temp_2[56] = alpha_im_1[56] * alpha_re_21[56];
  assign MMul_dot_product1_add_cast[56] = {{4{MMul_dot_product1_mul_temp_2[56][27]}}, MMul_dot_product1_mul_temp_2[56]};
  assign MMul_dot_product1_mul_temp_3[56] = alpha_re_1[56] * alpha_im_21[56];
  assign MMul_dot_product1_add_cast_1[56] = {{4{MMul_dot_product1_mul_temp_3[56][27]}}, MMul_dot_product1_mul_temp_3[56]};
  assign MMul_dot_product_out_im_5[56] = MMul_dot_product1_add_cast[56] + MMul_dot_product1_add_cast_1[56];
  assign MMul_dot_product1_mul_temp[57] = alpha_re_1[57] * alpha_re_21[57];
  assign MMul_dot_product1_sub_cast[57] = {{4{MMul_dot_product1_mul_temp[57][27]}}, MMul_dot_product1_mul_temp[57]};
  assign MMul_dot_product1_mul_temp_1[57] = alpha_im_1[57] * alpha_im_21[57];
  assign MMul_dot_product1_sub_cast_1[57] = {{4{MMul_dot_product1_mul_temp_1[57][27]}}, MMul_dot_product1_mul_temp_1[57]};
  assign MMul_dot_product_out_re_5[57] = MMul_dot_product1_sub_cast[57] - MMul_dot_product1_sub_cast_1[57];
  assign MMul_dot_product1_mul_temp_2[57] = alpha_im_1[57] * alpha_re_21[57];
  assign MMul_dot_product1_add_cast[57] = {{4{MMul_dot_product1_mul_temp_2[57][27]}}, MMul_dot_product1_mul_temp_2[57]};
  assign MMul_dot_product1_mul_temp_3[57] = alpha_re_1[57] * alpha_im_21[57];
  assign MMul_dot_product1_add_cast_1[57] = {{4{MMul_dot_product1_mul_temp_3[57][27]}}, MMul_dot_product1_mul_temp_3[57]};
  assign MMul_dot_product_out_im_5[57] = MMul_dot_product1_add_cast[57] + MMul_dot_product1_add_cast_1[57];
  assign MMul_dot_product1_mul_temp[58] = alpha_re_1[58] * alpha_re_21[58];
  assign MMul_dot_product1_sub_cast[58] = {{4{MMul_dot_product1_mul_temp[58][27]}}, MMul_dot_product1_mul_temp[58]};
  assign MMul_dot_product1_mul_temp_1[58] = alpha_im_1[58] * alpha_im_21[58];
  assign MMul_dot_product1_sub_cast_1[58] = {{4{MMul_dot_product1_mul_temp_1[58][27]}}, MMul_dot_product1_mul_temp_1[58]};
  assign MMul_dot_product_out_re_5[58] = MMul_dot_product1_sub_cast[58] - MMul_dot_product1_sub_cast_1[58];
  assign MMul_dot_product1_mul_temp_2[58] = alpha_im_1[58] * alpha_re_21[58];
  assign MMul_dot_product1_add_cast[58] = {{4{MMul_dot_product1_mul_temp_2[58][27]}}, MMul_dot_product1_mul_temp_2[58]};
  assign MMul_dot_product1_mul_temp_3[58] = alpha_re_1[58] * alpha_im_21[58];
  assign MMul_dot_product1_add_cast_1[58] = {{4{MMul_dot_product1_mul_temp_3[58][27]}}, MMul_dot_product1_mul_temp_3[58]};
  assign MMul_dot_product_out_im_5[58] = MMul_dot_product1_add_cast[58] + MMul_dot_product1_add_cast_1[58];
  assign MMul_dot_product1_mul_temp[59] = alpha_re_1[59] * alpha_re_21[59];
  assign MMul_dot_product1_sub_cast[59] = {{4{MMul_dot_product1_mul_temp[59][27]}}, MMul_dot_product1_mul_temp[59]};
  assign MMul_dot_product1_mul_temp_1[59] = alpha_im_1[59] * alpha_im_21[59];
  assign MMul_dot_product1_sub_cast_1[59] = {{4{MMul_dot_product1_mul_temp_1[59][27]}}, MMul_dot_product1_mul_temp_1[59]};
  assign MMul_dot_product_out_re_5[59] = MMul_dot_product1_sub_cast[59] - MMul_dot_product1_sub_cast_1[59];
  assign MMul_dot_product1_mul_temp_2[59] = alpha_im_1[59] * alpha_re_21[59];
  assign MMul_dot_product1_add_cast[59] = {{4{MMul_dot_product1_mul_temp_2[59][27]}}, MMul_dot_product1_mul_temp_2[59]};
  assign MMul_dot_product1_mul_temp_3[59] = alpha_re_1[59] * alpha_im_21[59];
  assign MMul_dot_product1_add_cast_1[59] = {{4{MMul_dot_product1_mul_temp_3[59][27]}}, MMul_dot_product1_mul_temp_3[59]};
  assign MMul_dot_product_out_im_5[59] = MMul_dot_product1_add_cast[59] + MMul_dot_product1_add_cast_1[59];
  assign MMul_dot_product1_mul_temp[60] = alpha_re_1[60] * alpha_re_21[60];
  assign MMul_dot_product1_sub_cast[60] = {{4{MMul_dot_product1_mul_temp[60][27]}}, MMul_dot_product1_mul_temp[60]};
  assign MMul_dot_product1_mul_temp_1[60] = alpha_im_1[60] * alpha_im_21[60];
  assign MMul_dot_product1_sub_cast_1[60] = {{4{MMul_dot_product1_mul_temp_1[60][27]}}, MMul_dot_product1_mul_temp_1[60]};
  assign MMul_dot_product_out_re_5[60] = MMul_dot_product1_sub_cast[60] - MMul_dot_product1_sub_cast_1[60];
  assign MMul_dot_product1_mul_temp_2[60] = alpha_im_1[60] * alpha_re_21[60];
  assign MMul_dot_product1_add_cast[60] = {{4{MMul_dot_product1_mul_temp_2[60][27]}}, MMul_dot_product1_mul_temp_2[60]};
  assign MMul_dot_product1_mul_temp_3[60] = alpha_re_1[60] * alpha_im_21[60];
  assign MMul_dot_product1_add_cast_1[60] = {{4{MMul_dot_product1_mul_temp_3[60][27]}}, MMul_dot_product1_mul_temp_3[60]};
  assign MMul_dot_product_out_im_5[60] = MMul_dot_product1_add_cast[60] + MMul_dot_product1_add_cast_1[60];
  assign MMul_dot_product1_mul_temp[61] = alpha_re_1[61] * alpha_re_21[61];
  assign MMul_dot_product1_sub_cast[61] = {{4{MMul_dot_product1_mul_temp[61][27]}}, MMul_dot_product1_mul_temp[61]};
  assign MMul_dot_product1_mul_temp_1[61] = alpha_im_1[61] * alpha_im_21[61];
  assign MMul_dot_product1_sub_cast_1[61] = {{4{MMul_dot_product1_mul_temp_1[61][27]}}, MMul_dot_product1_mul_temp_1[61]};
  assign MMul_dot_product_out_re_5[61] = MMul_dot_product1_sub_cast[61] - MMul_dot_product1_sub_cast_1[61];
  assign MMul_dot_product1_mul_temp_2[61] = alpha_im_1[61] * alpha_re_21[61];
  assign MMul_dot_product1_add_cast[61] = {{4{MMul_dot_product1_mul_temp_2[61][27]}}, MMul_dot_product1_mul_temp_2[61]};
  assign MMul_dot_product1_mul_temp_3[61] = alpha_re_1[61] * alpha_im_21[61];
  assign MMul_dot_product1_add_cast_1[61] = {{4{MMul_dot_product1_mul_temp_3[61][27]}}, MMul_dot_product1_mul_temp_3[61]};
  assign MMul_dot_product_out_im_5[61] = MMul_dot_product1_add_cast[61] + MMul_dot_product1_add_cast_1[61];
  assign MMul_dot_product1_mul_temp[62] = alpha_re_1[62] * alpha_re_21[62];
  assign MMul_dot_product1_sub_cast[62] = {{4{MMul_dot_product1_mul_temp[62][27]}}, MMul_dot_product1_mul_temp[62]};
  assign MMul_dot_product1_mul_temp_1[62] = alpha_im_1[62] * alpha_im_21[62];
  assign MMul_dot_product1_sub_cast_1[62] = {{4{MMul_dot_product1_mul_temp_1[62][27]}}, MMul_dot_product1_mul_temp_1[62]};
  assign MMul_dot_product_out_re_5[62] = MMul_dot_product1_sub_cast[62] - MMul_dot_product1_sub_cast_1[62];
  assign MMul_dot_product1_mul_temp_2[62] = alpha_im_1[62] * alpha_re_21[62];
  assign MMul_dot_product1_add_cast[62] = {{4{MMul_dot_product1_mul_temp_2[62][27]}}, MMul_dot_product1_mul_temp_2[62]};
  assign MMul_dot_product1_mul_temp_3[62] = alpha_re_1[62] * alpha_im_21[62];
  assign MMul_dot_product1_add_cast_1[62] = {{4{MMul_dot_product1_mul_temp_3[62][27]}}, MMul_dot_product1_mul_temp_3[62]};
  assign MMul_dot_product_out_im_5[62] = MMul_dot_product1_add_cast[62] + MMul_dot_product1_add_cast_1[62];
  assign MMul_dot_product1_mul_temp[63] = alpha_re_1[63] * alpha_re_21[63];
  assign MMul_dot_product1_sub_cast[63] = {{4{MMul_dot_product1_mul_temp[63][27]}}, MMul_dot_product1_mul_temp[63]};
  assign MMul_dot_product1_mul_temp_1[63] = alpha_im_1[63] * alpha_im_21[63];
  assign MMul_dot_product1_sub_cast_1[63] = {{4{MMul_dot_product1_mul_temp_1[63][27]}}, MMul_dot_product1_mul_temp_1[63]};
  assign MMul_dot_product_out_re_5[63] = MMul_dot_product1_sub_cast[63] - MMul_dot_product1_sub_cast_1[63];
  assign MMul_dot_product1_mul_temp_2[63] = alpha_im_1[63] * alpha_re_21[63];
  assign MMul_dot_product1_add_cast[63] = {{4{MMul_dot_product1_mul_temp_2[63][27]}}, MMul_dot_product1_mul_temp_2[63]};
  assign MMul_dot_product1_mul_temp_3[63] = alpha_re_1[63] * alpha_im_21[63];
  assign MMul_dot_product1_add_cast_1[63] = {{4{MMul_dot_product1_mul_temp_3[63][27]}}, MMul_dot_product1_mul_temp_3[63]};
  assign MMul_dot_product_out_im_5[63] = MMul_dot_product1_add_cast[63] + MMul_dot_product1_add_cast_1[63];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  always_comb begin
    reshape_out_re_5[0][0] = MMul_dot_product_out_re_5[0];
    reshape_out_im_5[0][0] = MMul_dot_product_out_im_5[0];
    reshape_out_re_5[1][0] = MMul_dot_product_out_re_5[1];
    reshape_out_im_5[1][0] = MMul_dot_product_out_im_5[1];
    reshape_out_re_5[2][0] = MMul_dot_product_out_re_5[2];
    reshape_out_im_5[2][0] = MMul_dot_product_out_im_5[2];
    reshape_out_re_5[3][0] = MMul_dot_product_out_re_5[3];
    reshape_out_im_5[3][0] = MMul_dot_product_out_im_5[3];
    reshape_out_re_5[4][0] = MMul_dot_product_out_re_5[4];
    reshape_out_im_5[4][0] = MMul_dot_product_out_im_5[4];
    reshape_out_re_5[5][0] = MMul_dot_product_out_re_5[5];
    reshape_out_im_5[5][0] = MMul_dot_product_out_im_5[5];
    reshape_out_re_5[6][0] = MMul_dot_product_out_re_5[6];
    reshape_out_im_5[6][0] = MMul_dot_product_out_im_5[6];
    reshape_out_re_5[7][0] = MMul_dot_product_out_re_5[7];
    reshape_out_im_5[7][0] = MMul_dot_product_out_im_5[7];
    reshape_out_re_5[0][1] = MMul_dot_product_out_re_5[8];
    reshape_out_im_5[0][1] = MMul_dot_product_out_im_5[8];
    reshape_out_re_5[1][1] = MMul_dot_product_out_re_5[9];
    reshape_out_im_5[1][1] = MMul_dot_product_out_im_5[9];
    reshape_out_re_5[2][1] = MMul_dot_product_out_re_5[10];
    reshape_out_im_5[2][1] = MMul_dot_product_out_im_5[10];
    reshape_out_re_5[3][1] = MMul_dot_product_out_re_5[11];
    reshape_out_im_5[3][1] = MMul_dot_product_out_im_5[11];
    reshape_out_re_5[4][1] = MMul_dot_product_out_re_5[12];
    reshape_out_im_5[4][1] = MMul_dot_product_out_im_5[12];
    reshape_out_re_5[5][1] = MMul_dot_product_out_re_5[13];
    reshape_out_im_5[5][1] = MMul_dot_product_out_im_5[13];
    reshape_out_re_5[6][1] = MMul_dot_product_out_re_5[14];
    reshape_out_im_5[6][1] = MMul_dot_product_out_im_5[14];
    reshape_out_re_5[7][1] = MMul_dot_product_out_re_5[15];
    reshape_out_im_5[7][1] = MMul_dot_product_out_im_5[15];
    reshape_out_re_5[0][2] = MMul_dot_product_out_re_5[16];
    reshape_out_im_5[0][2] = MMul_dot_product_out_im_5[16];
    reshape_out_re_5[1][2] = MMul_dot_product_out_re_5[17];
    reshape_out_im_5[1][2] = MMul_dot_product_out_im_5[17];
    reshape_out_re_5[2][2] = MMul_dot_product_out_re_5[18];
    reshape_out_im_5[2][2] = MMul_dot_product_out_im_5[18];
    reshape_out_re_5[3][2] = MMul_dot_product_out_re_5[19];
    reshape_out_im_5[3][2] = MMul_dot_product_out_im_5[19];
    reshape_out_re_5[4][2] = MMul_dot_product_out_re_5[20];
    reshape_out_im_5[4][2] = MMul_dot_product_out_im_5[20];
    reshape_out_re_5[5][2] = MMul_dot_product_out_re_5[21];
    reshape_out_im_5[5][2] = MMul_dot_product_out_im_5[21];
    reshape_out_re_5[6][2] = MMul_dot_product_out_re_5[22];
    reshape_out_im_5[6][2] = MMul_dot_product_out_im_5[22];
    reshape_out_re_5[7][2] = MMul_dot_product_out_re_5[23];
    reshape_out_im_5[7][2] = MMul_dot_product_out_im_5[23];
    reshape_out_re_5[0][3] = MMul_dot_product_out_re_5[24];
    reshape_out_im_5[0][3] = MMul_dot_product_out_im_5[24];
    reshape_out_re_5[1][3] = MMul_dot_product_out_re_5[25];
    reshape_out_im_5[1][3] = MMul_dot_product_out_im_5[25];
    reshape_out_re_5[2][3] = MMul_dot_product_out_re_5[26];
    reshape_out_im_5[2][3] = MMul_dot_product_out_im_5[26];
    reshape_out_re_5[3][3] = MMul_dot_product_out_re_5[27];
    reshape_out_im_5[3][3] = MMul_dot_product_out_im_5[27];
    reshape_out_re_5[4][3] = MMul_dot_product_out_re_5[28];
    reshape_out_im_5[4][3] = MMul_dot_product_out_im_5[28];
    reshape_out_re_5[5][3] = MMul_dot_product_out_re_5[29];
    reshape_out_im_5[5][3] = MMul_dot_product_out_im_5[29];
    reshape_out_re_5[6][3] = MMul_dot_product_out_re_5[30];
    reshape_out_im_5[6][3] = MMul_dot_product_out_im_5[30];
    reshape_out_re_5[7][3] = MMul_dot_product_out_re_5[31];
    reshape_out_im_5[7][3] = MMul_dot_product_out_im_5[31];
    reshape_out_re_5[0][4] = MMul_dot_product_out_re_5[32];
    reshape_out_im_5[0][4] = MMul_dot_product_out_im_5[32];
    reshape_out_re_5[1][4] = MMul_dot_product_out_re_5[33];
    reshape_out_im_5[1][4] = MMul_dot_product_out_im_5[33];
    reshape_out_re_5[2][4] = MMul_dot_product_out_re_5[34];
    reshape_out_im_5[2][4] = MMul_dot_product_out_im_5[34];
    reshape_out_re_5[3][4] = MMul_dot_product_out_re_5[35];
    reshape_out_im_5[3][4] = MMul_dot_product_out_im_5[35];
    reshape_out_re_5[4][4] = MMul_dot_product_out_re_5[36];
    reshape_out_im_5[4][4] = MMul_dot_product_out_im_5[36];
    reshape_out_re_5[5][4] = MMul_dot_product_out_re_5[37];
    reshape_out_im_5[5][4] = MMul_dot_product_out_im_5[37];
    reshape_out_re_5[6][4] = MMul_dot_product_out_re_5[38];
    reshape_out_im_5[6][4] = MMul_dot_product_out_im_5[38];
    reshape_out_re_5[7][4] = MMul_dot_product_out_re_5[39];
    reshape_out_im_5[7][4] = MMul_dot_product_out_im_5[39];
    reshape_out_re_5[0][5] = MMul_dot_product_out_re_5[40];
    reshape_out_im_5[0][5] = MMul_dot_product_out_im_5[40];
    reshape_out_re_5[1][5] = MMul_dot_product_out_re_5[41];
    reshape_out_im_5[1][5] = MMul_dot_product_out_im_5[41];
    reshape_out_re_5[2][5] = MMul_dot_product_out_re_5[42];
    reshape_out_im_5[2][5] = MMul_dot_product_out_im_5[42];
    reshape_out_re_5[3][5] = MMul_dot_product_out_re_5[43];
    reshape_out_im_5[3][5] = MMul_dot_product_out_im_5[43];
    reshape_out_re_5[4][5] = MMul_dot_product_out_re_5[44];
    reshape_out_im_5[4][5] = MMul_dot_product_out_im_5[44];
    reshape_out_re_5[5][5] = MMul_dot_product_out_re_5[45];
    reshape_out_im_5[5][5] = MMul_dot_product_out_im_5[45];
    reshape_out_re_5[6][5] = MMul_dot_product_out_re_5[46];
    reshape_out_im_5[6][5] = MMul_dot_product_out_im_5[46];
    reshape_out_re_5[7][5] = MMul_dot_product_out_re_5[47];
    reshape_out_im_5[7][5] = MMul_dot_product_out_im_5[47];
    reshape_out_re_5[0][6] = MMul_dot_product_out_re_5[48];
    reshape_out_im_5[0][6] = MMul_dot_product_out_im_5[48];
    reshape_out_re_5[1][6] = MMul_dot_product_out_re_5[49];
    reshape_out_im_5[1][6] = MMul_dot_product_out_im_5[49];
    reshape_out_re_5[2][6] = MMul_dot_product_out_re_5[50];
    reshape_out_im_5[2][6] = MMul_dot_product_out_im_5[50];
    reshape_out_re_5[3][6] = MMul_dot_product_out_re_5[51];
    reshape_out_im_5[3][6] = MMul_dot_product_out_im_5[51];
    reshape_out_re_5[4][6] = MMul_dot_product_out_re_5[52];
    reshape_out_im_5[4][6] = MMul_dot_product_out_im_5[52];
    reshape_out_re_5[5][6] = MMul_dot_product_out_re_5[53];
    reshape_out_im_5[5][6] = MMul_dot_product_out_im_5[53];
    reshape_out_re_5[6][6] = MMul_dot_product_out_re_5[54];
    reshape_out_im_5[6][6] = MMul_dot_product_out_im_5[54];
    reshape_out_re_5[7][6] = MMul_dot_product_out_re_5[55];
    reshape_out_im_5[7][6] = MMul_dot_product_out_im_5[55];
    reshape_out_re_5[0][7] = MMul_dot_product_out_re_5[56];
    reshape_out_im_5[0][7] = MMul_dot_product_out_im_5[56];
    reshape_out_re_5[1][7] = MMul_dot_product_out_re_5[57];
    reshape_out_im_5[1][7] = MMul_dot_product_out_im_5[57];
    reshape_out_re_5[2][7] = MMul_dot_product_out_re_5[58];
    reshape_out_im_5[2][7] = MMul_dot_product_out_im_5[58];
    reshape_out_re_5[3][7] = MMul_dot_product_out_re_5[59];
    reshape_out_im_5[3][7] = MMul_dot_product_out_im_5[59];
    reshape_out_re_5[4][7] = MMul_dot_product_out_re_5[60];
    reshape_out_im_5[4][7] = MMul_dot_product_out_im_5[60];
    reshape_out_re_5[5][7] = MMul_dot_product_out_re_5[61];
    reshape_out_im_5[5][7] = MMul_dot_product_out_im_5[61];
    reshape_out_re_5[6][7] = MMul_dot_product_out_re_5[62];
    reshape_out_im_5[6][7] = MMul_dot_product_out_im_5[62];
    reshape_out_re_5[7][7] = MMul_dot_product_out_re_5[63];
    reshape_out_im_5[7][7] = MMul_dot_product_out_im_5[63];
  end

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_51[0] = reshape_out_re_5[0][0];
  assign selector_out_im_51[0] = reshape_out_im_5[0][0];
  assign selector_out_re_51[1] = reshape_out_re_5[0][1];
  assign selector_out_im_51[1] = reshape_out_im_5[0][1];
  assign selector_out_re_51[2] = reshape_out_re_5[0][2];
  assign selector_out_im_51[2] = reshape_out_im_5[0][2];
  assign selector_out_re_51[3] = reshape_out_re_5[0][3];
  assign selector_out_im_51[3] = reshape_out_im_5[0][3];
  assign selector_out_re_51[4] = reshape_out_re_5[0][4];
  assign selector_out_im_51[4] = reshape_out_im_5[0][4];
  assign selector_out_re_51[5] = reshape_out_re_5[0][5];
  assign selector_out_im_51[5] = reshape_out_im_5[0][5];
  assign selector_out_re_51[6] = reshape_out_re_5[0][6];
  assign selector_out_im_51[6] = reshape_out_im_5[0][6];
  assign selector_out_re_51[7] = reshape_out_re_5[0][7];
  assign selector_out_im_51[7] = reshape_out_im_5[0][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_52[0] = reshape_out_re_5[1][0];
  assign selector_out_im_52[0] = reshape_out_im_5[1][0];
  assign selector_out_re_52[1] = reshape_out_re_5[1][1];
  assign selector_out_im_52[1] = reshape_out_im_5[1][1];
  assign selector_out_re_52[2] = reshape_out_re_5[1][2];
  assign selector_out_im_52[2] = reshape_out_im_5[1][2];
  assign selector_out_re_52[3] = reshape_out_re_5[1][3];
  assign selector_out_im_52[3] = reshape_out_im_5[1][3];
  assign selector_out_re_52[4] = reshape_out_re_5[1][4];
  assign selector_out_im_52[4] = reshape_out_im_5[1][4];
  assign selector_out_re_52[5] = reshape_out_re_5[1][5];
  assign selector_out_im_52[5] = reshape_out_im_5[1][5];
  assign selector_out_re_52[6] = reshape_out_re_5[1][6];
  assign selector_out_im_52[6] = reshape_out_im_5[1][6];
  assign selector_out_re_52[7] = reshape_out_re_5[1][7];
  assign selector_out_im_52[7] = reshape_out_im_5[1][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_add_01_out_re_5[0] = selector_out_re_51[0] + selector_out_re_52[0];
  assign MMul_add_01_out_im_5[0] = selector_out_im_51[0] + selector_out_im_52[0];
  assign MMul_add_01_out_re_5[1] = selector_out_re_51[1] + selector_out_re_52[1];
  assign MMul_add_01_out_im_5[1] = selector_out_im_51[1] + selector_out_im_52[1];
  assign MMul_add_01_out_re_5[2] = selector_out_re_51[2] + selector_out_re_52[2];
  assign MMul_add_01_out_im_5[2] = selector_out_im_51[2] + selector_out_im_52[2];
  assign MMul_add_01_out_re_5[3] = selector_out_re_51[3] + selector_out_re_52[3];
  assign MMul_add_01_out_im_5[3] = selector_out_im_51[3] + selector_out_im_52[3];
  assign MMul_add_01_out_re_5[4] = selector_out_re_51[4] + selector_out_re_52[4];
  assign MMul_add_01_out_im_5[4] = selector_out_im_51[4] + selector_out_im_52[4];
  assign MMul_add_01_out_re_5[5] = selector_out_re_51[5] + selector_out_re_52[5];
  assign MMul_add_01_out_im_5[5] = selector_out_im_51[5] + selector_out_im_52[5];
  assign MMul_add_01_out_re_5[6] = selector_out_re_51[6] + selector_out_re_52[6];
  assign MMul_add_01_out_im_5[6] = selector_out_im_51[6] + selector_out_im_52[6];
  assign MMul_add_01_out_re_5[7] = selector_out_re_51[7] + selector_out_re_52[7];
  assign MMul_add_01_out_im_5[7] = selector_out_im_51[7] + selector_out_im_52[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_53[0] = reshape_out_re_5[2][0];
  assign selector_out_im_53[0] = reshape_out_im_5[2][0];
  assign selector_out_re_53[1] = reshape_out_re_5[2][1];
  assign selector_out_im_53[1] = reshape_out_im_5[2][1];
  assign selector_out_re_53[2] = reshape_out_re_5[2][2];
  assign selector_out_im_53[2] = reshape_out_im_5[2][2];
  assign selector_out_re_53[3] = reshape_out_re_5[2][3];
  assign selector_out_im_53[3] = reshape_out_im_5[2][3];
  assign selector_out_re_53[4] = reshape_out_re_5[2][4];
  assign selector_out_im_53[4] = reshape_out_im_5[2][4];
  assign selector_out_re_53[5] = reshape_out_re_5[2][5];
  assign selector_out_im_53[5] = reshape_out_im_5[2][5];
  assign selector_out_re_53[6] = reshape_out_re_5[2][6];
  assign selector_out_im_53[6] = reshape_out_im_5[2][6];
  assign selector_out_re_53[7] = reshape_out_re_5[2][7];
  assign selector_out_im_53[7] = reshape_out_im_5[2][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_add_12_out_re_5[0] = MMul_add_01_out_re_5[0] + selector_out_re_53[0];
  assign MMul_add_12_out_im_5[0] = MMul_add_01_out_im_5[0] + selector_out_im_53[0];
  assign MMul_add_12_out_re_5[1] = MMul_add_01_out_re_5[1] + selector_out_re_53[1];
  assign MMul_add_12_out_im_5[1] = MMul_add_01_out_im_5[1] + selector_out_im_53[1];
  assign MMul_add_12_out_re_5[2] = MMul_add_01_out_re_5[2] + selector_out_re_53[2];
  assign MMul_add_12_out_im_5[2] = MMul_add_01_out_im_5[2] + selector_out_im_53[2];
  assign MMul_add_12_out_re_5[3] = MMul_add_01_out_re_5[3] + selector_out_re_53[3];
  assign MMul_add_12_out_im_5[3] = MMul_add_01_out_im_5[3] + selector_out_im_53[3];
  assign MMul_add_12_out_re_5[4] = MMul_add_01_out_re_5[4] + selector_out_re_53[4];
  assign MMul_add_12_out_im_5[4] = MMul_add_01_out_im_5[4] + selector_out_im_53[4];
  assign MMul_add_12_out_re_5[5] = MMul_add_01_out_re_5[5] + selector_out_re_53[5];
  assign MMul_add_12_out_im_5[5] = MMul_add_01_out_im_5[5] + selector_out_im_53[5];
  assign MMul_add_12_out_re_5[6] = MMul_add_01_out_re_5[6] + selector_out_re_53[6];
  assign MMul_add_12_out_im_5[6] = MMul_add_01_out_im_5[6] + selector_out_im_53[6];
  assign MMul_add_12_out_re_5[7] = MMul_add_01_out_re_5[7] + selector_out_re_53[7];
  assign MMul_add_12_out_im_5[7] = MMul_add_01_out_im_5[7] + selector_out_im_53[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_54[0] = reshape_out_re_5[3][0];
  assign selector_out_im_54[0] = reshape_out_im_5[3][0];
  assign selector_out_re_54[1] = reshape_out_re_5[3][1];
  assign selector_out_im_54[1] = reshape_out_im_5[3][1];
  assign selector_out_re_54[2] = reshape_out_re_5[3][2];
  assign selector_out_im_54[2] = reshape_out_im_5[3][2];
  assign selector_out_re_54[3] = reshape_out_re_5[3][3];
  assign selector_out_im_54[3] = reshape_out_im_5[3][3];
  assign selector_out_re_54[4] = reshape_out_re_5[3][4];
  assign selector_out_im_54[4] = reshape_out_im_5[3][4];
  assign selector_out_re_54[5] = reshape_out_re_5[3][5];
  assign selector_out_im_54[5] = reshape_out_im_5[3][5];
  assign selector_out_re_54[6] = reshape_out_re_5[3][6];
  assign selector_out_im_54[6] = reshape_out_im_5[3][6];
  assign selector_out_re_54[7] = reshape_out_re_5[3][7];
  assign selector_out_im_54[7] = reshape_out_im_5[3][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_add_23_out_re_5[0] = MMul_add_12_out_re_5[0] + selector_out_re_54[0];
  assign MMul_add_23_out_im_5[0] = MMul_add_12_out_im_5[0] + selector_out_im_54[0];
  assign MMul_add_23_out_re_5[1] = MMul_add_12_out_re_5[1] + selector_out_re_54[1];
  assign MMul_add_23_out_im_5[1] = MMul_add_12_out_im_5[1] + selector_out_im_54[1];
  assign MMul_add_23_out_re_5[2] = MMul_add_12_out_re_5[2] + selector_out_re_54[2];
  assign MMul_add_23_out_im_5[2] = MMul_add_12_out_im_5[2] + selector_out_im_54[2];
  assign MMul_add_23_out_re_5[3] = MMul_add_12_out_re_5[3] + selector_out_re_54[3];
  assign MMul_add_23_out_im_5[3] = MMul_add_12_out_im_5[3] + selector_out_im_54[3];
  assign MMul_add_23_out_re_5[4] = MMul_add_12_out_re_5[4] + selector_out_re_54[4];
  assign MMul_add_23_out_im_5[4] = MMul_add_12_out_im_5[4] + selector_out_im_54[4];
  assign MMul_add_23_out_re_5[5] = MMul_add_12_out_re_5[5] + selector_out_re_54[5];
  assign MMul_add_23_out_im_5[5] = MMul_add_12_out_im_5[5] + selector_out_im_54[5];
  assign MMul_add_23_out_re_5[6] = MMul_add_12_out_re_5[6] + selector_out_re_54[6];
  assign MMul_add_23_out_im_5[6] = MMul_add_12_out_im_5[6] + selector_out_im_54[6];
  assign MMul_add_23_out_re_5[7] = MMul_add_12_out_re_5[7] + selector_out_re_54[7];
  assign MMul_add_23_out_im_5[7] = MMul_add_12_out_im_5[7] + selector_out_im_54[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_55[0] = reshape_out_re_5[4][0];
  assign selector_out_im_55[0] = reshape_out_im_5[4][0];
  assign selector_out_re_55[1] = reshape_out_re_5[4][1];
  assign selector_out_im_55[1] = reshape_out_im_5[4][1];
  assign selector_out_re_55[2] = reshape_out_re_5[4][2];
  assign selector_out_im_55[2] = reshape_out_im_5[4][2];
  assign selector_out_re_55[3] = reshape_out_re_5[4][3];
  assign selector_out_im_55[3] = reshape_out_im_5[4][3];
  assign selector_out_re_55[4] = reshape_out_re_5[4][4];
  assign selector_out_im_55[4] = reshape_out_im_5[4][4];
  assign selector_out_re_55[5] = reshape_out_re_5[4][5];
  assign selector_out_im_55[5] = reshape_out_im_5[4][5];
  assign selector_out_re_55[6] = reshape_out_re_5[4][6];
  assign selector_out_im_55[6] = reshape_out_im_5[4][6];
  assign selector_out_re_55[7] = reshape_out_re_5[4][7];
  assign selector_out_im_55[7] = reshape_out_im_5[4][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_add_34_out_re_5[0] = MMul_add_23_out_re_5[0] + selector_out_re_55[0];
  assign MMul_add_34_out_im_5[0] = MMul_add_23_out_im_5[0] + selector_out_im_55[0];
  assign MMul_add_34_out_re_5[1] = MMul_add_23_out_re_5[1] + selector_out_re_55[1];
  assign MMul_add_34_out_im_5[1] = MMul_add_23_out_im_5[1] + selector_out_im_55[1];
  assign MMul_add_34_out_re_5[2] = MMul_add_23_out_re_5[2] + selector_out_re_55[2];
  assign MMul_add_34_out_im_5[2] = MMul_add_23_out_im_5[2] + selector_out_im_55[2];
  assign MMul_add_34_out_re_5[3] = MMul_add_23_out_re_5[3] + selector_out_re_55[3];
  assign MMul_add_34_out_im_5[3] = MMul_add_23_out_im_5[3] + selector_out_im_55[3];
  assign MMul_add_34_out_re_5[4] = MMul_add_23_out_re_5[4] + selector_out_re_55[4];
  assign MMul_add_34_out_im_5[4] = MMul_add_23_out_im_5[4] + selector_out_im_55[4];
  assign MMul_add_34_out_re_5[5] = MMul_add_23_out_re_5[5] + selector_out_re_55[5];
  assign MMul_add_34_out_im_5[5] = MMul_add_23_out_im_5[5] + selector_out_im_55[5];
  assign MMul_add_34_out_re_5[6] = MMul_add_23_out_re_5[6] + selector_out_re_55[6];
  assign MMul_add_34_out_im_5[6] = MMul_add_23_out_im_5[6] + selector_out_im_55[6];
  assign MMul_add_34_out_re_5[7] = MMul_add_23_out_re_5[7] + selector_out_re_55[7];
  assign MMul_add_34_out_im_5[7] = MMul_add_23_out_im_5[7] + selector_out_im_55[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_56[0] = reshape_out_re_5[5][0];
  assign selector_out_im_56[0] = reshape_out_im_5[5][0];
  assign selector_out_re_56[1] = reshape_out_re_5[5][1];
  assign selector_out_im_56[1] = reshape_out_im_5[5][1];
  assign selector_out_re_56[2] = reshape_out_re_5[5][2];
  assign selector_out_im_56[2] = reshape_out_im_5[5][2];
  assign selector_out_re_56[3] = reshape_out_re_5[5][3];
  assign selector_out_im_56[3] = reshape_out_im_5[5][3];
  assign selector_out_re_56[4] = reshape_out_re_5[5][4];
  assign selector_out_im_56[4] = reshape_out_im_5[5][4];
  assign selector_out_re_56[5] = reshape_out_re_5[5][5];
  assign selector_out_im_56[5] = reshape_out_im_5[5][5];
  assign selector_out_re_56[6] = reshape_out_re_5[5][6];
  assign selector_out_im_56[6] = reshape_out_im_5[5][6];
  assign selector_out_re_56[7] = reshape_out_re_5[5][7];
  assign selector_out_im_56[7] = reshape_out_im_5[5][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_add_45_out_re_5[0] = MMul_add_34_out_re_5[0] + selector_out_re_56[0];
  assign MMul_add_45_out_im_5[0] = MMul_add_34_out_im_5[0] + selector_out_im_56[0];
  assign MMul_add_45_out_re_5[1] = MMul_add_34_out_re_5[1] + selector_out_re_56[1];
  assign MMul_add_45_out_im_5[1] = MMul_add_34_out_im_5[1] + selector_out_im_56[1];
  assign MMul_add_45_out_re_5[2] = MMul_add_34_out_re_5[2] + selector_out_re_56[2];
  assign MMul_add_45_out_im_5[2] = MMul_add_34_out_im_5[2] + selector_out_im_56[2];
  assign MMul_add_45_out_re_5[3] = MMul_add_34_out_re_5[3] + selector_out_re_56[3];
  assign MMul_add_45_out_im_5[3] = MMul_add_34_out_im_5[3] + selector_out_im_56[3];
  assign MMul_add_45_out_re_5[4] = MMul_add_34_out_re_5[4] + selector_out_re_56[4];
  assign MMul_add_45_out_im_5[4] = MMul_add_34_out_im_5[4] + selector_out_im_56[4];
  assign MMul_add_45_out_re_5[5] = MMul_add_34_out_re_5[5] + selector_out_re_56[5];
  assign MMul_add_45_out_im_5[5] = MMul_add_34_out_im_5[5] + selector_out_im_56[5];
  assign MMul_add_45_out_re_5[6] = MMul_add_34_out_re_5[6] + selector_out_re_56[6];
  assign MMul_add_45_out_im_5[6] = MMul_add_34_out_im_5[6] + selector_out_im_56[6];
  assign MMul_add_45_out_re_5[7] = MMul_add_34_out_re_5[7] + selector_out_re_56[7];
  assign MMul_add_45_out_im_5[7] = MMul_add_34_out_im_5[7] + selector_out_im_56[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_57[0] = reshape_out_re_5[6][0];
  assign selector_out_im_57[0] = reshape_out_im_5[6][0];
  assign selector_out_re_57[1] = reshape_out_re_5[6][1];
  assign selector_out_im_57[1] = reshape_out_im_5[6][1];
  assign selector_out_re_57[2] = reshape_out_re_5[6][2];
  assign selector_out_im_57[2] = reshape_out_im_5[6][2];
  assign selector_out_re_57[3] = reshape_out_re_5[6][3];
  assign selector_out_im_57[3] = reshape_out_im_5[6][3];
  assign selector_out_re_57[4] = reshape_out_re_5[6][4];
  assign selector_out_im_57[4] = reshape_out_im_5[6][4];
  assign selector_out_re_57[5] = reshape_out_re_5[6][5];
  assign selector_out_im_57[5] = reshape_out_im_5[6][5];
  assign selector_out_re_57[6] = reshape_out_re_5[6][6];
  assign selector_out_im_57[6] = reshape_out_im_5[6][6];
  assign selector_out_re_57[7] = reshape_out_re_5[6][7];
  assign selector_out_im_57[7] = reshape_out_im_5[6][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign MMul_add_56_out_re_5[0] = MMul_add_45_out_re_5[0] + selector_out_re_57[0];
  assign MMul_add_56_out_im_5[0] = MMul_add_45_out_im_5[0] + selector_out_im_57[0];
  assign MMul_add_56_out_re_5[1] = MMul_add_45_out_re_5[1] + selector_out_re_57[1];
  assign MMul_add_56_out_im_5[1] = MMul_add_45_out_im_5[1] + selector_out_im_57[1];
  assign MMul_add_56_out_re_5[2] = MMul_add_45_out_re_5[2] + selector_out_re_57[2];
  assign MMul_add_56_out_im_5[2] = MMul_add_45_out_im_5[2] + selector_out_im_57[2];
  assign MMul_add_56_out_re_5[3] = MMul_add_45_out_re_5[3] + selector_out_re_57[3];
  assign MMul_add_56_out_im_5[3] = MMul_add_45_out_im_5[3] + selector_out_im_57[3];
  assign MMul_add_56_out_re_5[4] = MMul_add_45_out_re_5[4] + selector_out_re_57[4];
  assign MMul_add_56_out_im_5[4] = MMul_add_45_out_im_5[4] + selector_out_im_57[4];
  assign MMul_add_56_out_re_5[5] = MMul_add_45_out_re_5[5] + selector_out_re_57[5];
  assign MMul_add_56_out_im_5[5] = MMul_add_45_out_im_5[5] + selector_out_im_57[5];
  assign MMul_add_56_out_re_5[6] = MMul_add_45_out_re_5[6] + selector_out_re_57[6];
  assign MMul_add_56_out_im_5[6] = MMul_add_45_out_im_5[6] + selector_out_im_57[6];
  assign MMul_add_56_out_re_5[7] = MMul_add_45_out_re_5[7] + selector_out_re_57[7];
  assign MMul_add_56_out_im_5[7] = MMul_add_45_out_im_5[7] + selector_out_im_57[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign selector_out_re_58[0] = reshape_out_re_5[7][0];
  assign selector_out_im_58[0] = reshape_out_im_5[7][0];
  assign selector_out_re_58[1] = reshape_out_re_5[7][1];
  assign selector_out_im_58[1] = reshape_out_im_5[7][1];
  assign selector_out_re_58[2] = reshape_out_re_5[7][2];
  assign selector_out_im_58[2] = reshape_out_im_5[7][2];
  assign selector_out_re_58[3] = reshape_out_re_5[7][3];
  assign selector_out_im_58[3] = reshape_out_im_5[7][3];
  assign selector_out_re_58[4] = reshape_out_re_5[7][4];
  assign selector_out_im_58[4] = reshape_out_im_5[7][4];
  assign selector_out_re_58[5] = reshape_out_re_5[7][5];
  assign selector_out_im_58[5] = reshape_out_im_5[7][5];
  assign selector_out_re_58[6] = reshape_out_re_5[7][6];
  assign selector_out_im_58[6] = reshape_out_im_5[7][6];
  assign selector_out_re_58[7] = reshape_out_re_5[7][7];
  assign selector_out_im_58[7] = reshape_out_im_5[7][7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign alpha_re_22[0] = MMul_add_56_out_re_5[0] + selector_out_re_58[0];
  assign alpha_im_22[0] = MMul_add_56_out_im_5[0] + selector_out_im_58[0];
  assign alpha_re_22[1] = MMul_add_56_out_re_5[1] + selector_out_re_58[1];
  assign alpha_im_22[1] = MMul_add_56_out_im_5[1] + selector_out_im_58[1];
  assign alpha_re_22[2] = MMul_add_56_out_re_5[2] + selector_out_re_58[2];
  assign alpha_im_22[2] = MMul_add_56_out_im_5[2] + selector_out_im_58[2];
  assign alpha_re_22[3] = MMul_add_56_out_re_5[3] + selector_out_re_58[3];
  assign alpha_im_22[3] = MMul_add_56_out_im_5[3] + selector_out_im_58[3];
  assign alpha_re_22[4] = MMul_add_56_out_re_5[4] + selector_out_re_58[4];
  assign alpha_im_22[4] = MMul_add_56_out_im_5[4] + selector_out_im_58[4];
  assign alpha_re_22[5] = MMul_add_56_out_re_5[5] + selector_out_re_58[5];
  assign alpha_im_22[5] = MMul_add_56_out_im_5[5] + selector_out_im_58[5];
  assign alpha_re_22[6] = MMul_add_56_out_re_5[6] + selector_out_re_58[6];
  assign alpha_im_22[6] = MMul_add_56_out_im_5[6] + selector_out_im_58[6];
  assign alpha_re_22[7] = MMul_add_56_out_re_5[7] + selector_out_re_58[7];
  assign alpha_im_22[7] = MMul_add_56_out_im_5[7] + selector_out_im_58[7];

  // Step 6: Apply Hadamard to the third qubit
  // H3 = tensor_product(I, I, H);  % Apply H to the third qubit
  // Initialize intermediate matrix AB for I ⊗ I (4x4 matrix)
  // Manually expand the tensor product I ⊗ I
  // Initialize result matrix for (I ⊗ I) ⊗ H, which results in an 8x8 matrix
  // Manually expand the tensor product (I ⊗ I) ⊗ H
  assign out0_re_5[0] = alpha_re_22[0];
  assign out0_im_5[0] = alpha_im_22[0];
  assign out0_re_5[1] = alpha_re_22[1];
  assign out0_im_5[1] = alpha_im_22[1];
  assign out0_re_5[2] = alpha_re_22[2];
  assign out0_im_5[2] = alpha_im_22[2];
  assign out0_re_5[3] = alpha_re_22[3];
  assign out0_im_5[3] = alpha_im_22[3];
  assign out0_re_5[4] = alpha_re_22[4];
  assign out0_im_5[4] = alpha_im_22[4];
  assign out0_re_5[5] = alpha_re_22[5];
  assign out0_im_5[5] = alpha_im_22[5];
  assign out0_re_5[6] = alpha_re_22[6];
  assign out0_im_5[6] = alpha_im_22[6];
  assign out0_re_5[7] = alpha_re_22[7];
  assign out0_im_5[7] = alpha_im_22[7];

  assign result_re[0] = out0_re_5[0][26:13];
  assign result_im[0] = out0_im_5[0][26:13];
  assign result_re[1] = out0_re_5[1][26:13];
  assign result_im[1] = out0_im_5[1][26:13];
  assign result_re[2] = out0_re_5[2][26:13];
  assign result_im[2] = out0_im_5[2][26:13];
  assign result_re[3] = out0_re_5[3][26:13];
  assign result_im[3] = out0_im_5[3][26:13];
  assign result_re[4] = out0_re_5[4][26:13];
  assign result_im[4] = out0_im_5[4][26:13];
  assign result_re[5] = out0_re_5[5][26:13];
  assign result_im[5] = out0_im_5[5][26:13];
  assign result_re[6] = out0_re_5[6][26:13];
  assign result_im[6] = out0_im_5[6][26:13];
  assign result_re[7] = out0_re_5[7][26:13];
  assign result_im[7] = out0_im_5[7][26:13];

  assign state_after_H3_re[0] = {result_re[0][12:0], 1'b0};
  assign state_after_H3_im[0] = {result_im[0][12:0], 1'b0};
  assign state_after_H3_re[1] = {result_re[1][12:0], 1'b0};
  assign state_after_H3_im[1] = {result_im[1][12:0], 1'b0};
  assign state_after_H3_re[2] = {result_re[2][12:0], 1'b0};
  assign state_after_H3_im[2] = {result_im[2][12:0], 1'b0};
  assign state_after_H3_re[3] = {result_re[3][12:0], 1'b0};
  assign state_after_H3_im[3] = {result_im[3][12:0], 1'b0};
  assign state_after_H3_re[4] = {result_re[4][12:0], 1'b0};
  assign state_after_H3_im[4] = {result_im[4][12:0], 1'b0};
  assign state_after_H3_re[5] = {result_re[5][12:0], 1'b0};
  assign state_after_H3_im[5] = {result_im[5][12:0], 1'b0};
  assign state_after_H3_re[6] = {result_re[6][12:0], 1'b0};
  assign state_after_H3_im[6] = {result_im[6][12:0], 1'b0};
  assign state_after_H3_re[7] = {result_re[7][12:0], 1'b0};
  assign state_after_H3_im[7] = {result_im[7][12:0], 1'b0};

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_1[0] = s[0];
  assign selector_out_1[1] = s[8];
  assign selector_out_1[2] = s[16];
  assign selector_out_1[3] = s[24];
  assign selector_out_1[4] = s[32];
  assign selector_out_1[5] = s[40];
  assign selector_out_1[6] = s[48];
  assign selector_out_1[7] = s[56];
  assign selector_out_1[8] = s[1];
  assign selector_out_1[9] = s[9];
  assign selector_out_1[10] = s[17];
  assign selector_out_1[11] = s[25];
  assign selector_out_1[12] = s[33];
  assign selector_out_1[13] = s[41];
  assign selector_out_1[14] = s[49];
  assign selector_out_1[15] = s[57];
  assign selector_out_1[16] = s[2];
  assign selector_out_1[17] = s[10];
  assign selector_out_1[18] = s[18];
  assign selector_out_1[19] = s[26];
  assign selector_out_1[20] = s[34];
  assign selector_out_1[21] = s[42];
  assign selector_out_1[22] = s[50];
  assign selector_out_1[23] = s[58];
  assign selector_out_1[24] = s[3];
  assign selector_out_1[25] = s[11];
  assign selector_out_1[26] = s[19];
  assign selector_out_1[27] = s[27];
  assign selector_out_1[28] = s[35];
  assign selector_out_1[29] = s[43];
  assign selector_out_1[30] = s[51];
  assign selector_out_1[31] = s[59];
  assign selector_out_1[32] = s[4];
  assign selector_out_1[33] = s[12];
  assign selector_out_1[34] = s[20];
  assign selector_out_1[35] = s[28];
  assign selector_out_1[36] = s[36];
  assign selector_out_1[37] = s[44];
  assign selector_out_1[38] = s[52];
  assign selector_out_1[39] = s[60];
  assign selector_out_1[40] = s[5];
  assign selector_out_1[41] = s[13];
  assign selector_out_1[42] = s[21];
  assign selector_out_1[43] = s[29];
  assign selector_out_1[44] = s[37];
  assign selector_out_1[45] = s[45];
  assign selector_out_1[46] = s[53];
  assign selector_out_1[47] = s[61];
  assign selector_out_1[48] = s[6];
  assign selector_out_1[49] = s[14];
  assign selector_out_1[50] = s[22];
  assign selector_out_1[51] = s[30];
  assign selector_out_1[52] = s[38];
  assign selector_out_1[53] = s[46];
  assign selector_out_1[54] = s[54];
  assign selector_out_1[55] = s[62];
  assign selector_out_1[56] = s[7];
  assign selector_out_1[57] = s[15];
  assign selector_out_1[58] = s[23];
  assign selector_out_1[59] = s[31];
  assign selector_out_1[60] = s[39];
  assign selector_out_1[61] = s[47];
  assign selector_out_1[62] = s[55];
  assign selector_out_1[63] = s[63];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign s_2[0] = selector_out_1[0];
  assign s_2[1] = selector_out_1[1];
  assign s_2[2] = selector_out_1[2];
  assign s_2[3] = selector_out_1[3];
  assign s_2[4] = selector_out_1[4];
  assign s_2[5] = selector_out_1[5];
  assign s_2[6] = selector_out_1[6];
  assign s_2[7] = selector_out_1[7];
  assign s_2[8] = selector_out_1[8];
  assign s_2[9] = selector_out_1[9];
  assign s_2[10] = selector_out_1[10];
  assign s_2[11] = selector_out_1[11];
  assign s_2[12] = selector_out_1[12];
  assign s_2[13] = selector_out_1[13];
  assign s_2[14] = selector_out_1[14];
  assign s_2[15] = selector_out_1[15];
  assign s_2[16] = selector_out_1[16];
  assign s_2[17] = selector_out_1[17];
  assign s_2[18] = selector_out_1[18];
  assign s_2[19] = selector_out_1[19];
  assign s_2[20] = selector_out_1[20];
  assign s_2[21] = selector_out_1[21];
  assign s_2[22] = selector_out_1[22];
  assign s_2[23] = selector_out_1[23];
  assign s_2[24] = selector_out_1[24];
  assign s_2[25] = selector_out_1[25];
  assign s_2[26] = selector_out_1[26];
  assign s_2[27] = selector_out_1[27];
  assign s_2[28] = selector_out_1[28];
  assign s_2[29] = selector_out_1[29];
  assign s_2[30] = selector_out_1[30];
  assign s_2[31] = selector_out_1[31];
  assign s_2[32] = selector_out_1[32];
  assign s_2[33] = selector_out_1[33];
  assign s_2[34] = selector_out_1[34];
  assign s_2[35] = selector_out_1[35];
  assign s_2[36] = selector_out_1[36];
  assign s_2[37] = selector_out_1[37];
  assign s_2[38] = selector_out_1[38];
  assign s_2[39] = selector_out_1[39];
  assign s_2[40] = selector_out_1[40];
  assign s_2[41] = selector_out_1[41];
  assign s_2[42] = selector_out_1[42];
  assign s_2[43] = selector_out_1[43];
  assign s_2[44] = selector_out_1[44];
  assign s_2[45] = selector_out_1[45];
  assign s_2[46] = selector_out_1[46];
  assign s_2[47] = selector_out_1[47];
  assign s_2[48] = selector_out_1[48];
  assign s_2[49] = selector_out_1[49];
  assign s_2[50] = selector_out_1[50];
  assign s_2[51] = selector_out_1[51];
  assign s_2[52] = selector_out_1[52];
  assign s_2[53] = selector_out_1[53];
  assign s_2[54] = selector_out_1[54];
  assign s_2[55] = selector_out_1[55];
  assign s_2[56] = selector_out_1[56];
  assign s_2[57] = selector_out_1[57];
  assign s_2[58] = selector_out_1[58];
  assign s_2[59] = selector_out_1[59];
  assign s_2[60] = selector_out_1[60];
  assign s_2[61] = selector_out_1[61];
  assign s_2[62] = selector_out_1[62];
  assign s_2[63] = selector_out_1[63];

  assign selector_out_re_59[0] = state_after_H3_re[0];
  assign selector_out_re_59[1] = state_after_H3_re[1];
  assign selector_out_re_59[2] = state_after_H3_re[2];
  assign selector_out_re_59[3] = state_after_H3_re[3];
  assign selector_out_re_59[4] = state_after_H3_re[4];
  assign selector_out_re_59[5] = state_after_H3_re[5];
  assign selector_out_re_59[6] = state_after_H3_re[6];
  assign selector_out_re_59[7] = state_after_H3_re[7];
  assign selector_out_re_59[8] = state_after_H3_re[0];
  assign selector_out_re_59[9] = state_after_H3_re[1];
  assign selector_out_re_59[10] = state_after_H3_re[2];
  assign selector_out_re_59[11] = state_after_H3_re[3];
  assign selector_out_re_59[12] = state_after_H3_re[4];
  assign selector_out_re_59[13] = state_after_H3_re[5];
  assign selector_out_re_59[14] = state_after_H3_re[6];
  assign selector_out_re_59[15] = state_after_H3_re[7];
  assign selector_out_re_59[16] = state_after_H3_re[0];
  assign selector_out_re_59[17] = state_after_H3_re[1];
  assign selector_out_re_59[18] = state_after_H3_re[2];
  assign selector_out_re_59[19] = state_after_H3_re[3];
  assign selector_out_re_59[20] = state_after_H3_re[4];
  assign selector_out_re_59[21] = state_after_H3_re[5];
  assign selector_out_re_59[22] = state_after_H3_re[6];
  assign selector_out_re_59[23] = state_after_H3_re[7];
  assign selector_out_re_59[24] = state_after_H3_re[0];
  assign selector_out_re_59[25] = state_after_H3_re[1];
  assign selector_out_re_59[26] = state_after_H3_re[2];
  assign selector_out_re_59[27] = state_after_H3_re[3];
  assign selector_out_re_59[28] = state_after_H3_re[4];
  assign selector_out_re_59[29] = state_after_H3_re[5];
  assign selector_out_re_59[30] = state_after_H3_re[6];
  assign selector_out_re_59[31] = state_after_H3_re[7];
  assign selector_out_re_59[32] = state_after_H3_re[0];
  assign selector_out_re_59[33] = state_after_H3_re[1];
  assign selector_out_re_59[34] = state_after_H3_re[2];
  assign selector_out_re_59[35] = state_after_H3_re[3];
  assign selector_out_re_59[36] = state_after_H3_re[4];
  assign selector_out_re_59[37] = state_after_H3_re[5];
  assign selector_out_re_59[38] = state_after_H3_re[6];
  assign selector_out_re_59[39] = state_after_H3_re[7];
  assign selector_out_re_59[40] = state_after_H3_re[0];
  assign selector_out_re_59[41] = state_after_H3_re[1];
  assign selector_out_re_59[42] = state_after_H3_re[2];
  assign selector_out_re_59[43] = state_after_H3_re[3];
  assign selector_out_re_59[44] = state_after_H3_re[4];
  assign selector_out_re_59[45] = state_after_H3_re[5];
  assign selector_out_re_59[46] = state_after_H3_re[6];
  assign selector_out_re_59[47] = state_after_H3_re[7];
  assign selector_out_re_59[48] = state_after_H3_re[0];
  assign selector_out_re_59[49] = state_after_H3_re[1];
  assign selector_out_re_59[50] = state_after_H3_re[2];
  assign selector_out_re_59[51] = state_after_H3_re[3];
  assign selector_out_re_59[52] = state_after_H3_re[4];
  assign selector_out_re_59[53] = state_after_H3_re[5];
  assign selector_out_re_59[54] = state_after_H3_re[6];
  assign selector_out_re_59[55] = state_after_H3_re[7];
  assign selector_out_re_59[56] = state_after_H3_re[0];
  assign selector_out_re_59[57] = state_after_H3_re[1];
  assign selector_out_re_59[58] = state_after_H3_re[2];
  assign selector_out_re_59[59] = state_after_H3_re[3];
  assign selector_out_re_59[60] = state_after_H3_re[4];
  assign selector_out_re_59[61] = state_after_H3_re[5];
  assign selector_out_re_59[62] = state_after_H3_re[6];
  assign selector_out_re_59[63] = state_after_H3_re[7];

  assign selector_out_im_59[0] = state_after_H3_im[0];
  assign selector_out_im_59[1] = state_after_H3_im[1];
  assign selector_out_im_59[2] = state_after_H3_im[2];
  assign selector_out_im_59[3] = state_after_H3_im[3];
  assign selector_out_im_59[4] = state_after_H3_im[4];
  assign selector_out_im_59[5] = state_after_H3_im[5];
  assign selector_out_im_59[6] = state_after_H3_im[6];
  assign selector_out_im_59[7] = state_after_H3_im[7];
  assign selector_out_im_59[8] = state_after_H3_im[0];
  assign selector_out_im_59[9] = state_after_H3_im[1];
  assign selector_out_im_59[10] = state_after_H3_im[2];
  assign selector_out_im_59[11] = state_after_H3_im[3];
  assign selector_out_im_59[12] = state_after_H3_im[4];
  assign selector_out_im_59[13] = state_after_H3_im[5];
  assign selector_out_im_59[14] = state_after_H3_im[6];
  assign selector_out_im_59[15] = state_after_H3_im[7];
  assign selector_out_im_59[16] = state_after_H3_im[0];
  assign selector_out_im_59[17] = state_after_H3_im[1];
  assign selector_out_im_59[18] = state_after_H3_im[2];
  assign selector_out_im_59[19] = state_after_H3_im[3];
  assign selector_out_im_59[20] = state_after_H3_im[4];
  assign selector_out_im_59[21] = state_after_H3_im[5];
  assign selector_out_im_59[22] = state_after_H3_im[6];
  assign selector_out_im_59[23] = state_after_H3_im[7];
  assign selector_out_im_59[24] = state_after_H3_im[0];
  assign selector_out_im_59[25] = state_after_H3_im[1];
  assign selector_out_im_59[26] = state_after_H3_im[2];
  assign selector_out_im_59[27] = state_after_H3_im[3];
  assign selector_out_im_59[28] = state_after_H3_im[4];
  assign selector_out_im_59[29] = state_after_H3_im[5];
  assign selector_out_im_59[30] = state_after_H3_im[6];
  assign selector_out_im_59[31] = state_after_H3_im[7];
  assign selector_out_im_59[32] = state_after_H3_im[0];
  assign selector_out_im_59[33] = state_after_H3_im[1];
  assign selector_out_im_59[34] = state_after_H3_im[2];
  assign selector_out_im_59[35] = state_after_H3_im[3];
  assign selector_out_im_59[36] = state_after_H3_im[4];
  assign selector_out_im_59[37] = state_after_H3_im[5];
  assign selector_out_im_59[38] = state_after_H3_im[6];
  assign selector_out_im_59[39] = state_after_H3_im[7];
  assign selector_out_im_59[40] = state_after_H3_im[0];
  assign selector_out_im_59[41] = state_after_H3_im[1];
  assign selector_out_im_59[42] = state_after_H3_im[2];
  assign selector_out_im_59[43] = state_after_H3_im[3];
  assign selector_out_im_59[44] = state_after_H3_im[4];
  assign selector_out_im_59[45] = state_after_H3_im[5];
  assign selector_out_im_59[46] = state_after_H3_im[6];
  assign selector_out_im_59[47] = state_after_H3_im[7];
  assign selector_out_im_59[48] = state_after_H3_im[0];
  assign selector_out_im_59[49] = state_after_H3_im[1];
  assign selector_out_im_59[50] = state_after_H3_im[2];
  assign selector_out_im_59[51] = state_after_H3_im[3];
  assign selector_out_im_59[52] = state_after_H3_im[4];
  assign selector_out_im_59[53] = state_after_H3_im[5];
  assign selector_out_im_59[54] = state_after_H3_im[6];
  assign selector_out_im_59[55] = state_after_H3_im[7];
  assign selector_out_im_59[56] = state_after_H3_im[0];
  assign selector_out_im_59[57] = state_after_H3_im[1];
  assign selector_out_im_59[58] = state_after_H3_im[2];
  assign selector_out_im_59[59] = state_after_H3_im[3];
  assign selector_out_im_59[60] = state_after_H3_im[4];
  assign selector_out_im_59[61] = state_after_H3_im[5];
  assign selector_out_im_59[62] = state_after_H3_im[6];
  assign selector_out_im_59[63] = state_after_H3_im[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign alpha_re_23[0] = selector_out_re_59[0];
  assign alpha_im_23[0] = selector_out_im_59[0];
  assign alpha_re_23[1] = selector_out_re_59[1];
  assign alpha_im_23[1] = selector_out_im_59[1];
  assign alpha_re_23[2] = selector_out_re_59[2];
  assign alpha_im_23[2] = selector_out_im_59[2];
  assign alpha_re_23[3] = selector_out_re_59[3];
  assign alpha_im_23[3] = selector_out_im_59[3];
  assign alpha_re_23[4] = selector_out_re_59[4];
  assign alpha_im_23[4] = selector_out_im_59[4];
  assign alpha_re_23[5] = selector_out_re_59[5];
  assign alpha_im_23[5] = selector_out_im_59[5];
  assign alpha_re_23[6] = selector_out_re_59[6];
  assign alpha_im_23[6] = selector_out_im_59[6];
  assign alpha_re_23[7] = selector_out_re_59[7];
  assign alpha_im_23[7] = selector_out_im_59[7];
  assign alpha_re_23[8] = selector_out_re_59[8];
  assign alpha_im_23[8] = selector_out_im_59[8];
  assign alpha_re_23[9] = selector_out_re_59[9];
  assign alpha_im_23[9] = selector_out_im_59[9];
  assign alpha_re_23[10] = selector_out_re_59[10];
  assign alpha_im_23[10] = selector_out_im_59[10];
  assign alpha_re_23[11] = selector_out_re_59[11];
  assign alpha_im_23[11] = selector_out_im_59[11];
  assign alpha_re_23[12] = selector_out_re_59[12];
  assign alpha_im_23[12] = selector_out_im_59[12];
  assign alpha_re_23[13] = selector_out_re_59[13];
  assign alpha_im_23[13] = selector_out_im_59[13];
  assign alpha_re_23[14] = selector_out_re_59[14];
  assign alpha_im_23[14] = selector_out_im_59[14];
  assign alpha_re_23[15] = selector_out_re_59[15];
  assign alpha_im_23[15] = selector_out_im_59[15];
  assign alpha_re_23[16] = selector_out_re_59[16];
  assign alpha_im_23[16] = selector_out_im_59[16];
  assign alpha_re_23[17] = selector_out_re_59[17];
  assign alpha_im_23[17] = selector_out_im_59[17];
  assign alpha_re_23[18] = selector_out_re_59[18];
  assign alpha_im_23[18] = selector_out_im_59[18];
  assign alpha_re_23[19] = selector_out_re_59[19];
  assign alpha_im_23[19] = selector_out_im_59[19];
  assign alpha_re_23[20] = selector_out_re_59[20];
  assign alpha_im_23[20] = selector_out_im_59[20];
  assign alpha_re_23[21] = selector_out_re_59[21];
  assign alpha_im_23[21] = selector_out_im_59[21];
  assign alpha_re_23[22] = selector_out_re_59[22];
  assign alpha_im_23[22] = selector_out_im_59[22];
  assign alpha_re_23[23] = selector_out_re_59[23];
  assign alpha_im_23[23] = selector_out_im_59[23];
  assign alpha_re_23[24] = selector_out_re_59[24];
  assign alpha_im_23[24] = selector_out_im_59[24];
  assign alpha_re_23[25] = selector_out_re_59[25];
  assign alpha_im_23[25] = selector_out_im_59[25];
  assign alpha_re_23[26] = selector_out_re_59[26];
  assign alpha_im_23[26] = selector_out_im_59[26];
  assign alpha_re_23[27] = selector_out_re_59[27];
  assign alpha_im_23[27] = selector_out_im_59[27];
  assign alpha_re_23[28] = selector_out_re_59[28];
  assign alpha_im_23[28] = selector_out_im_59[28];
  assign alpha_re_23[29] = selector_out_re_59[29];
  assign alpha_im_23[29] = selector_out_im_59[29];
  assign alpha_re_23[30] = selector_out_re_59[30];
  assign alpha_im_23[30] = selector_out_im_59[30];
  assign alpha_re_23[31] = selector_out_re_59[31];
  assign alpha_im_23[31] = selector_out_im_59[31];
  assign alpha_re_23[32] = selector_out_re_59[32];
  assign alpha_im_23[32] = selector_out_im_59[32];
  assign alpha_re_23[33] = selector_out_re_59[33];
  assign alpha_im_23[33] = selector_out_im_59[33];
  assign alpha_re_23[34] = selector_out_re_59[34];
  assign alpha_im_23[34] = selector_out_im_59[34];
  assign alpha_re_23[35] = selector_out_re_59[35];
  assign alpha_im_23[35] = selector_out_im_59[35];
  assign alpha_re_23[36] = selector_out_re_59[36];
  assign alpha_im_23[36] = selector_out_im_59[36];
  assign alpha_re_23[37] = selector_out_re_59[37];
  assign alpha_im_23[37] = selector_out_im_59[37];
  assign alpha_re_23[38] = selector_out_re_59[38];
  assign alpha_im_23[38] = selector_out_im_59[38];
  assign alpha_re_23[39] = selector_out_re_59[39];
  assign alpha_im_23[39] = selector_out_im_59[39];
  assign alpha_re_23[40] = selector_out_re_59[40];
  assign alpha_im_23[40] = selector_out_im_59[40];
  assign alpha_re_23[41] = selector_out_re_59[41];
  assign alpha_im_23[41] = selector_out_im_59[41];
  assign alpha_re_23[42] = selector_out_re_59[42];
  assign alpha_im_23[42] = selector_out_im_59[42];
  assign alpha_re_23[43] = selector_out_re_59[43];
  assign alpha_im_23[43] = selector_out_im_59[43];
  assign alpha_re_23[44] = selector_out_re_59[44];
  assign alpha_im_23[44] = selector_out_im_59[44];
  assign alpha_re_23[45] = selector_out_re_59[45];
  assign alpha_im_23[45] = selector_out_im_59[45];
  assign alpha_re_23[46] = selector_out_re_59[46];
  assign alpha_im_23[46] = selector_out_im_59[46];
  assign alpha_re_23[47] = selector_out_re_59[47];
  assign alpha_im_23[47] = selector_out_im_59[47];
  assign alpha_re_23[48] = selector_out_re_59[48];
  assign alpha_im_23[48] = selector_out_im_59[48];
  assign alpha_re_23[49] = selector_out_re_59[49];
  assign alpha_im_23[49] = selector_out_im_59[49];
  assign alpha_re_23[50] = selector_out_re_59[50];
  assign alpha_im_23[50] = selector_out_im_59[50];
  assign alpha_re_23[51] = selector_out_re_59[51];
  assign alpha_im_23[51] = selector_out_im_59[51];
  assign alpha_re_23[52] = selector_out_re_59[52];
  assign alpha_im_23[52] = selector_out_im_59[52];
  assign alpha_re_23[53] = selector_out_re_59[53];
  assign alpha_im_23[53] = selector_out_im_59[53];
  assign alpha_re_23[54] = selector_out_re_59[54];
  assign alpha_im_23[54] = selector_out_im_59[54];
  assign alpha_re_23[55] = selector_out_re_59[55];
  assign alpha_im_23[55] = selector_out_im_59[55];
  assign alpha_re_23[56] = selector_out_re_59[56];
  assign alpha_im_23[56] = selector_out_im_59[56];
  assign alpha_re_23[57] = selector_out_re_59[57];
  assign alpha_im_23[57] = selector_out_im_59[57];
  assign alpha_re_23[58] = selector_out_re_59[58];
  assign alpha_im_23[58] = selector_out_im_59[58];
  assign alpha_re_23[59] = selector_out_re_59[59];
  assign alpha_im_23[59] = selector_out_im_59[59];
  assign alpha_re_23[60] = selector_out_re_59[60];
  assign alpha_im_23[60] = selector_out_im_59[60];
  assign alpha_re_23[61] = selector_out_re_59[61];
  assign alpha_im_23[61] = selector_out_im_59[61];
  assign alpha_re_23[62] = selector_out_re_59[62];
  assign alpha_im_23[62] = selector_out_im_59[62];
  assign alpha_re_23[63] = selector_out_re_59[63];
  assign alpha_im_23[63] = selector_out_im_59[63];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_dot_product_in0[0] = (s_2[0] == 1'b1 ? alpha_re_23[0] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[0] = {MMul_dot_product_in0[0][13], MMul_dot_product_in0[0]};
  assign MMul_dot_product_out_re_6[0] = {{3{MMul_dot_product_cast[0][14]}}, MMul_dot_product_cast[0]};
  assign MMul_dot_product_in0_1[0] = (s_2[0] == 1'b1 ? alpha_im_23[0] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[0] = {MMul_dot_product_in0_1[0][13], MMul_dot_product_in0_1[0]};
  assign MMul_dot_product_out_im_6[0] = {{3{MMul_dot_product_cast_1[0][14]}}, MMul_dot_product_cast_1[0]};
  assign MMul_dot_product_in0[1] = (s_2[1] == 1'b1 ? alpha_re_23[1] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[1] = {MMul_dot_product_in0[1][13], MMul_dot_product_in0[1]};
  assign MMul_dot_product_out_re_6[1] = {{3{MMul_dot_product_cast[1][14]}}, MMul_dot_product_cast[1]};
  assign MMul_dot_product_in0_1[1] = (s_2[1] == 1'b1 ? alpha_im_23[1] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[1] = {MMul_dot_product_in0_1[1][13], MMul_dot_product_in0_1[1]};
  assign MMul_dot_product_out_im_6[1] = {{3{MMul_dot_product_cast_1[1][14]}}, MMul_dot_product_cast_1[1]};
  assign MMul_dot_product_in0[2] = (s_2[2] == 1'b1 ? alpha_re_23[2] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[2] = {MMul_dot_product_in0[2][13], MMul_dot_product_in0[2]};
  assign MMul_dot_product_out_re_6[2] = {{3{MMul_dot_product_cast[2][14]}}, MMul_dot_product_cast[2]};
  assign MMul_dot_product_in0_1[2] = (s_2[2] == 1'b1 ? alpha_im_23[2] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[2] = {MMul_dot_product_in0_1[2][13], MMul_dot_product_in0_1[2]};
  assign MMul_dot_product_out_im_6[2] = {{3{MMul_dot_product_cast_1[2][14]}}, MMul_dot_product_cast_1[2]};
  assign MMul_dot_product_in0[3] = (s_2[3] == 1'b1 ? alpha_re_23[3] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[3] = {MMul_dot_product_in0[3][13], MMul_dot_product_in0[3]};
  assign MMul_dot_product_out_re_6[3] = {{3{MMul_dot_product_cast[3][14]}}, MMul_dot_product_cast[3]};
  assign MMul_dot_product_in0_1[3] = (s_2[3] == 1'b1 ? alpha_im_23[3] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[3] = {MMul_dot_product_in0_1[3][13], MMul_dot_product_in0_1[3]};
  assign MMul_dot_product_out_im_6[3] = {{3{MMul_dot_product_cast_1[3][14]}}, MMul_dot_product_cast_1[3]};
  assign MMul_dot_product_in0[4] = (s_2[4] == 1'b1 ? alpha_re_23[4] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[4] = {MMul_dot_product_in0[4][13], MMul_dot_product_in0[4]};
  assign MMul_dot_product_out_re_6[4] = {{3{MMul_dot_product_cast[4][14]}}, MMul_dot_product_cast[4]};
  assign MMul_dot_product_in0_1[4] = (s_2[4] == 1'b1 ? alpha_im_23[4] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[4] = {MMul_dot_product_in0_1[4][13], MMul_dot_product_in0_1[4]};
  assign MMul_dot_product_out_im_6[4] = {{3{MMul_dot_product_cast_1[4][14]}}, MMul_dot_product_cast_1[4]};
  assign MMul_dot_product_in0[5] = (s_2[5] == 1'b1 ? alpha_re_23[5] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[5] = {MMul_dot_product_in0[5][13], MMul_dot_product_in0[5]};
  assign MMul_dot_product_out_re_6[5] = {{3{MMul_dot_product_cast[5][14]}}, MMul_dot_product_cast[5]};
  assign MMul_dot_product_in0_1[5] = (s_2[5] == 1'b1 ? alpha_im_23[5] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[5] = {MMul_dot_product_in0_1[5][13], MMul_dot_product_in0_1[5]};
  assign MMul_dot_product_out_im_6[5] = {{3{MMul_dot_product_cast_1[5][14]}}, MMul_dot_product_cast_1[5]};
  assign MMul_dot_product_in0[6] = (s_2[6] == 1'b1 ? alpha_re_23[6] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[6] = {MMul_dot_product_in0[6][13], MMul_dot_product_in0[6]};
  assign MMul_dot_product_out_re_6[6] = {{3{MMul_dot_product_cast[6][14]}}, MMul_dot_product_cast[6]};
  assign MMul_dot_product_in0_1[6] = (s_2[6] == 1'b1 ? alpha_im_23[6] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[6] = {MMul_dot_product_in0_1[6][13], MMul_dot_product_in0_1[6]};
  assign MMul_dot_product_out_im_6[6] = {{3{MMul_dot_product_cast_1[6][14]}}, MMul_dot_product_cast_1[6]};
  assign MMul_dot_product_in0[7] = (s_2[7] == 1'b1 ? alpha_re_23[7] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[7] = {MMul_dot_product_in0[7][13], MMul_dot_product_in0[7]};
  assign MMul_dot_product_out_re_6[7] = {{3{MMul_dot_product_cast[7][14]}}, MMul_dot_product_cast[7]};
  assign MMul_dot_product_in0_1[7] = (s_2[7] == 1'b1 ? alpha_im_23[7] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[7] = {MMul_dot_product_in0_1[7][13], MMul_dot_product_in0_1[7]};
  assign MMul_dot_product_out_im_6[7] = {{3{MMul_dot_product_cast_1[7][14]}}, MMul_dot_product_cast_1[7]};
  assign MMul_dot_product_in0[8] = (s_2[8] == 1'b1 ? alpha_re_23[8] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[8] = {MMul_dot_product_in0[8][13], MMul_dot_product_in0[8]};
  assign MMul_dot_product_out_re_6[8] = {{3{MMul_dot_product_cast[8][14]}}, MMul_dot_product_cast[8]};
  assign MMul_dot_product_in0_1[8] = (s_2[8] == 1'b1 ? alpha_im_23[8] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[8] = {MMul_dot_product_in0_1[8][13], MMul_dot_product_in0_1[8]};
  assign MMul_dot_product_out_im_6[8] = {{3{MMul_dot_product_cast_1[8][14]}}, MMul_dot_product_cast_1[8]};
  assign MMul_dot_product_in0[9] = (s_2[9] == 1'b1 ? alpha_re_23[9] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[9] = {MMul_dot_product_in0[9][13], MMul_dot_product_in0[9]};
  assign MMul_dot_product_out_re_6[9] = {{3{MMul_dot_product_cast[9][14]}}, MMul_dot_product_cast[9]};
  assign MMul_dot_product_in0_1[9] = (s_2[9] == 1'b1 ? alpha_im_23[9] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[9] = {MMul_dot_product_in0_1[9][13], MMul_dot_product_in0_1[9]};
  assign MMul_dot_product_out_im_6[9] = {{3{MMul_dot_product_cast_1[9][14]}}, MMul_dot_product_cast_1[9]};
  assign MMul_dot_product_in0[10] = (s_2[10] == 1'b1 ? alpha_re_23[10] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[10] = {MMul_dot_product_in0[10][13], MMul_dot_product_in0[10]};
  assign MMul_dot_product_out_re_6[10] = {{3{MMul_dot_product_cast[10][14]}}, MMul_dot_product_cast[10]};
  assign MMul_dot_product_in0_1[10] = (s_2[10] == 1'b1 ? alpha_im_23[10] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[10] = {MMul_dot_product_in0_1[10][13], MMul_dot_product_in0_1[10]};
  assign MMul_dot_product_out_im_6[10] = {{3{MMul_dot_product_cast_1[10][14]}}, MMul_dot_product_cast_1[10]};
  assign MMul_dot_product_in0[11] = (s_2[11] == 1'b1 ? alpha_re_23[11] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[11] = {MMul_dot_product_in0[11][13], MMul_dot_product_in0[11]};
  assign MMul_dot_product_out_re_6[11] = {{3{MMul_dot_product_cast[11][14]}}, MMul_dot_product_cast[11]};
  assign MMul_dot_product_in0_1[11] = (s_2[11] == 1'b1 ? alpha_im_23[11] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[11] = {MMul_dot_product_in0_1[11][13], MMul_dot_product_in0_1[11]};
  assign MMul_dot_product_out_im_6[11] = {{3{MMul_dot_product_cast_1[11][14]}}, MMul_dot_product_cast_1[11]};
  assign MMul_dot_product_in0[12] = (s_2[12] == 1'b1 ? alpha_re_23[12] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[12] = {MMul_dot_product_in0[12][13], MMul_dot_product_in0[12]};
  assign MMul_dot_product_out_re_6[12] = {{3{MMul_dot_product_cast[12][14]}}, MMul_dot_product_cast[12]};
  assign MMul_dot_product_in0_1[12] = (s_2[12] == 1'b1 ? alpha_im_23[12] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[12] = {MMul_dot_product_in0_1[12][13], MMul_dot_product_in0_1[12]};
  assign MMul_dot_product_out_im_6[12] = {{3{MMul_dot_product_cast_1[12][14]}}, MMul_dot_product_cast_1[12]};
  assign MMul_dot_product_in0[13] = (s_2[13] == 1'b1 ? alpha_re_23[13] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[13] = {MMul_dot_product_in0[13][13], MMul_dot_product_in0[13]};
  assign MMul_dot_product_out_re_6[13] = {{3{MMul_dot_product_cast[13][14]}}, MMul_dot_product_cast[13]};
  assign MMul_dot_product_in0_1[13] = (s_2[13] == 1'b1 ? alpha_im_23[13] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[13] = {MMul_dot_product_in0_1[13][13], MMul_dot_product_in0_1[13]};
  assign MMul_dot_product_out_im_6[13] = {{3{MMul_dot_product_cast_1[13][14]}}, MMul_dot_product_cast_1[13]};
  assign MMul_dot_product_in0[14] = (s_2[14] == 1'b1 ? alpha_re_23[14] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[14] = {MMul_dot_product_in0[14][13], MMul_dot_product_in0[14]};
  assign MMul_dot_product_out_re_6[14] = {{3{MMul_dot_product_cast[14][14]}}, MMul_dot_product_cast[14]};
  assign MMul_dot_product_in0_1[14] = (s_2[14] == 1'b1 ? alpha_im_23[14] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[14] = {MMul_dot_product_in0_1[14][13], MMul_dot_product_in0_1[14]};
  assign MMul_dot_product_out_im_6[14] = {{3{MMul_dot_product_cast_1[14][14]}}, MMul_dot_product_cast_1[14]};
  assign MMul_dot_product_in0[15] = (s_2[15] == 1'b1 ? alpha_re_23[15] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[15] = {MMul_dot_product_in0[15][13], MMul_dot_product_in0[15]};
  assign MMul_dot_product_out_re_6[15] = {{3{MMul_dot_product_cast[15][14]}}, MMul_dot_product_cast[15]};
  assign MMul_dot_product_in0_1[15] = (s_2[15] == 1'b1 ? alpha_im_23[15] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[15] = {MMul_dot_product_in0_1[15][13], MMul_dot_product_in0_1[15]};
  assign MMul_dot_product_out_im_6[15] = {{3{MMul_dot_product_cast_1[15][14]}}, MMul_dot_product_cast_1[15]};
  assign MMul_dot_product_in0[16] = (s_2[16] == 1'b1 ? alpha_re_23[16] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[16] = {MMul_dot_product_in0[16][13], MMul_dot_product_in0[16]};
  assign MMul_dot_product_out_re_6[16] = {{3{MMul_dot_product_cast[16][14]}}, MMul_dot_product_cast[16]};
  assign MMul_dot_product_in0_1[16] = (s_2[16] == 1'b1 ? alpha_im_23[16] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[16] = {MMul_dot_product_in0_1[16][13], MMul_dot_product_in0_1[16]};
  assign MMul_dot_product_out_im_6[16] = {{3{MMul_dot_product_cast_1[16][14]}}, MMul_dot_product_cast_1[16]};
  assign MMul_dot_product_in0[17] = (s_2[17] == 1'b1 ? alpha_re_23[17] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[17] = {MMul_dot_product_in0[17][13], MMul_dot_product_in0[17]};
  assign MMul_dot_product_out_re_6[17] = {{3{MMul_dot_product_cast[17][14]}}, MMul_dot_product_cast[17]};
  assign MMul_dot_product_in0_1[17] = (s_2[17] == 1'b1 ? alpha_im_23[17] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[17] = {MMul_dot_product_in0_1[17][13], MMul_dot_product_in0_1[17]};
  assign MMul_dot_product_out_im_6[17] = {{3{MMul_dot_product_cast_1[17][14]}}, MMul_dot_product_cast_1[17]};
  assign MMul_dot_product_in0[18] = (s_2[18] == 1'b1 ? alpha_re_23[18] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[18] = {MMul_dot_product_in0[18][13], MMul_dot_product_in0[18]};
  assign MMul_dot_product_out_re_6[18] = {{3{MMul_dot_product_cast[18][14]}}, MMul_dot_product_cast[18]};
  assign MMul_dot_product_in0_1[18] = (s_2[18] == 1'b1 ? alpha_im_23[18] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[18] = {MMul_dot_product_in0_1[18][13], MMul_dot_product_in0_1[18]};
  assign MMul_dot_product_out_im_6[18] = {{3{MMul_dot_product_cast_1[18][14]}}, MMul_dot_product_cast_1[18]};
  assign MMul_dot_product_in0[19] = (s_2[19] == 1'b1 ? alpha_re_23[19] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[19] = {MMul_dot_product_in0[19][13], MMul_dot_product_in0[19]};
  assign MMul_dot_product_out_re_6[19] = {{3{MMul_dot_product_cast[19][14]}}, MMul_dot_product_cast[19]};
  assign MMul_dot_product_in0_1[19] = (s_2[19] == 1'b1 ? alpha_im_23[19] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[19] = {MMul_dot_product_in0_1[19][13], MMul_dot_product_in0_1[19]};
  assign MMul_dot_product_out_im_6[19] = {{3{MMul_dot_product_cast_1[19][14]}}, MMul_dot_product_cast_1[19]};
  assign MMul_dot_product_in0[20] = (s_2[20] == 1'b1 ? alpha_re_23[20] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[20] = {MMul_dot_product_in0[20][13], MMul_dot_product_in0[20]};
  assign MMul_dot_product_out_re_6[20] = {{3{MMul_dot_product_cast[20][14]}}, MMul_dot_product_cast[20]};
  assign MMul_dot_product_in0_1[20] = (s_2[20] == 1'b1 ? alpha_im_23[20] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[20] = {MMul_dot_product_in0_1[20][13], MMul_dot_product_in0_1[20]};
  assign MMul_dot_product_out_im_6[20] = {{3{MMul_dot_product_cast_1[20][14]}}, MMul_dot_product_cast_1[20]};
  assign MMul_dot_product_in0[21] = (s_2[21] == 1'b1 ? alpha_re_23[21] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[21] = {MMul_dot_product_in0[21][13], MMul_dot_product_in0[21]};
  assign MMul_dot_product_out_re_6[21] = {{3{MMul_dot_product_cast[21][14]}}, MMul_dot_product_cast[21]};
  assign MMul_dot_product_in0_1[21] = (s_2[21] == 1'b1 ? alpha_im_23[21] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[21] = {MMul_dot_product_in0_1[21][13], MMul_dot_product_in0_1[21]};
  assign MMul_dot_product_out_im_6[21] = {{3{MMul_dot_product_cast_1[21][14]}}, MMul_dot_product_cast_1[21]};
  assign MMul_dot_product_in0[22] = (s_2[22] == 1'b1 ? alpha_re_23[22] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[22] = {MMul_dot_product_in0[22][13], MMul_dot_product_in0[22]};
  assign MMul_dot_product_out_re_6[22] = {{3{MMul_dot_product_cast[22][14]}}, MMul_dot_product_cast[22]};
  assign MMul_dot_product_in0_1[22] = (s_2[22] == 1'b1 ? alpha_im_23[22] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[22] = {MMul_dot_product_in0_1[22][13], MMul_dot_product_in0_1[22]};
  assign MMul_dot_product_out_im_6[22] = {{3{MMul_dot_product_cast_1[22][14]}}, MMul_dot_product_cast_1[22]};
  assign MMul_dot_product_in0[23] = (s_2[23] == 1'b1 ? alpha_re_23[23] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[23] = {MMul_dot_product_in0[23][13], MMul_dot_product_in0[23]};
  assign MMul_dot_product_out_re_6[23] = {{3{MMul_dot_product_cast[23][14]}}, MMul_dot_product_cast[23]};
  assign MMul_dot_product_in0_1[23] = (s_2[23] == 1'b1 ? alpha_im_23[23] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[23] = {MMul_dot_product_in0_1[23][13], MMul_dot_product_in0_1[23]};
  assign MMul_dot_product_out_im_6[23] = {{3{MMul_dot_product_cast_1[23][14]}}, MMul_dot_product_cast_1[23]};
  assign MMul_dot_product_in0[24] = (s_2[24] == 1'b1 ? alpha_re_23[24] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[24] = {MMul_dot_product_in0[24][13], MMul_dot_product_in0[24]};
  assign MMul_dot_product_out_re_6[24] = {{3{MMul_dot_product_cast[24][14]}}, MMul_dot_product_cast[24]};
  assign MMul_dot_product_in0_1[24] = (s_2[24] == 1'b1 ? alpha_im_23[24] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[24] = {MMul_dot_product_in0_1[24][13], MMul_dot_product_in0_1[24]};
  assign MMul_dot_product_out_im_6[24] = {{3{MMul_dot_product_cast_1[24][14]}}, MMul_dot_product_cast_1[24]};
  assign MMul_dot_product_in0[25] = (s_2[25] == 1'b1 ? alpha_re_23[25] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[25] = {MMul_dot_product_in0[25][13], MMul_dot_product_in0[25]};
  assign MMul_dot_product_out_re_6[25] = {{3{MMul_dot_product_cast[25][14]}}, MMul_dot_product_cast[25]};
  assign MMul_dot_product_in0_1[25] = (s_2[25] == 1'b1 ? alpha_im_23[25] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[25] = {MMul_dot_product_in0_1[25][13], MMul_dot_product_in0_1[25]};
  assign MMul_dot_product_out_im_6[25] = {{3{MMul_dot_product_cast_1[25][14]}}, MMul_dot_product_cast_1[25]};
  assign MMul_dot_product_in0[26] = (s_2[26] == 1'b1 ? alpha_re_23[26] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[26] = {MMul_dot_product_in0[26][13], MMul_dot_product_in0[26]};
  assign MMul_dot_product_out_re_6[26] = {{3{MMul_dot_product_cast[26][14]}}, MMul_dot_product_cast[26]};
  assign MMul_dot_product_in0_1[26] = (s_2[26] == 1'b1 ? alpha_im_23[26] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[26] = {MMul_dot_product_in0_1[26][13], MMul_dot_product_in0_1[26]};
  assign MMul_dot_product_out_im_6[26] = {{3{MMul_dot_product_cast_1[26][14]}}, MMul_dot_product_cast_1[26]};
  assign MMul_dot_product_in0[27] = (s_2[27] == 1'b1 ? alpha_re_23[27] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[27] = {MMul_dot_product_in0[27][13], MMul_dot_product_in0[27]};
  assign MMul_dot_product_out_re_6[27] = {{3{MMul_dot_product_cast[27][14]}}, MMul_dot_product_cast[27]};
  assign MMul_dot_product_in0_1[27] = (s_2[27] == 1'b1 ? alpha_im_23[27] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[27] = {MMul_dot_product_in0_1[27][13], MMul_dot_product_in0_1[27]};
  assign MMul_dot_product_out_im_6[27] = {{3{MMul_dot_product_cast_1[27][14]}}, MMul_dot_product_cast_1[27]};
  assign MMul_dot_product_in0[28] = (s_2[28] == 1'b1 ? alpha_re_23[28] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[28] = {MMul_dot_product_in0[28][13], MMul_dot_product_in0[28]};
  assign MMul_dot_product_out_re_6[28] = {{3{MMul_dot_product_cast[28][14]}}, MMul_dot_product_cast[28]};
  assign MMul_dot_product_in0_1[28] = (s_2[28] == 1'b1 ? alpha_im_23[28] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[28] = {MMul_dot_product_in0_1[28][13], MMul_dot_product_in0_1[28]};
  assign MMul_dot_product_out_im_6[28] = {{3{MMul_dot_product_cast_1[28][14]}}, MMul_dot_product_cast_1[28]};
  assign MMul_dot_product_in0[29] = (s_2[29] == 1'b1 ? alpha_re_23[29] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[29] = {MMul_dot_product_in0[29][13], MMul_dot_product_in0[29]};
  assign MMul_dot_product_out_re_6[29] = {{3{MMul_dot_product_cast[29][14]}}, MMul_dot_product_cast[29]};
  assign MMul_dot_product_in0_1[29] = (s_2[29] == 1'b1 ? alpha_im_23[29] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[29] = {MMul_dot_product_in0_1[29][13], MMul_dot_product_in0_1[29]};
  assign MMul_dot_product_out_im_6[29] = {{3{MMul_dot_product_cast_1[29][14]}}, MMul_dot_product_cast_1[29]};
  assign MMul_dot_product_in0[30] = (s_2[30] == 1'b1 ? alpha_re_23[30] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[30] = {MMul_dot_product_in0[30][13], MMul_dot_product_in0[30]};
  assign MMul_dot_product_out_re_6[30] = {{3{MMul_dot_product_cast[30][14]}}, MMul_dot_product_cast[30]};
  assign MMul_dot_product_in0_1[30] = (s_2[30] == 1'b1 ? alpha_im_23[30] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[30] = {MMul_dot_product_in0_1[30][13], MMul_dot_product_in0_1[30]};
  assign MMul_dot_product_out_im_6[30] = {{3{MMul_dot_product_cast_1[30][14]}}, MMul_dot_product_cast_1[30]};
  assign MMul_dot_product_in0[31] = (s_2[31] == 1'b1 ? alpha_re_23[31] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[31] = {MMul_dot_product_in0[31][13], MMul_dot_product_in0[31]};
  assign MMul_dot_product_out_re_6[31] = {{3{MMul_dot_product_cast[31][14]}}, MMul_dot_product_cast[31]};
  assign MMul_dot_product_in0_1[31] = (s_2[31] == 1'b1 ? alpha_im_23[31] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[31] = {MMul_dot_product_in0_1[31][13], MMul_dot_product_in0_1[31]};
  assign MMul_dot_product_out_im_6[31] = {{3{MMul_dot_product_cast_1[31][14]}}, MMul_dot_product_cast_1[31]};
  assign MMul_dot_product_in0[32] = (s_2[32] == 1'b1 ? alpha_re_23[32] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[32] = {MMul_dot_product_in0[32][13], MMul_dot_product_in0[32]};
  assign MMul_dot_product_out_re_6[32] = {{3{MMul_dot_product_cast[32][14]}}, MMul_dot_product_cast[32]};
  assign MMul_dot_product_in0_1[32] = (s_2[32] == 1'b1 ? alpha_im_23[32] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[32] = {MMul_dot_product_in0_1[32][13], MMul_dot_product_in0_1[32]};
  assign MMul_dot_product_out_im_6[32] = {{3{MMul_dot_product_cast_1[32][14]}}, MMul_dot_product_cast_1[32]};
  assign MMul_dot_product_in0[33] = (s_2[33] == 1'b1 ? alpha_re_23[33] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[33] = {MMul_dot_product_in0[33][13], MMul_dot_product_in0[33]};
  assign MMul_dot_product_out_re_6[33] = {{3{MMul_dot_product_cast[33][14]}}, MMul_dot_product_cast[33]};
  assign MMul_dot_product_in0_1[33] = (s_2[33] == 1'b1 ? alpha_im_23[33] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[33] = {MMul_dot_product_in0_1[33][13], MMul_dot_product_in0_1[33]};
  assign MMul_dot_product_out_im_6[33] = {{3{MMul_dot_product_cast_1[33][14]}}, MMul_dot_product_cast_1[33]};
  assign MMul_dot_product_in0[34] = (s_2[34] == 1'b1 ? alpha_re_23[34] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[34] = {MMul_dot_product_in0[34][13], MMul_dot_product_in0[34]};
  assign MMul_dot_product_out_re_6[34] = {{3{MMul_dot_product_cast[34][14]}}, MMul_dot_product_cast[34]};
  assign MMul_dot_product_in0_1[34] = (s_2[34] == 1'b1 ? alpha_im_23[34] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[34] = {MMul_dot_product_in0_1[34][13], MMul_dot_product_in0_1[34]};
  assign MMul_dot_product_out_im_6[34] = {{3{MMul_dot_product_cast_1[34][14]}}, MMul_dot_product_cast_1[34]};
  assign MMul_dot_product_in0[35] = (s_2[35] == 1'b1 ? alpha_re_23[35] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[35] = {MMul_dot_product_in0[35][13], MMul_dot_product_in0[35]};
  assign MMul_dot_product_out_re_6[35] = {{3{MMul_dot_product_cast[35][14]}}, MMul_dot_product_cast[35]};
  assign MMul_dot_product_in0_1[35] = (s_2[35] == 1'b1 ? alpha_im_23[35] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[35] = {MMul_dot_product_in0_1[35][13], MMul_dot_product_in0_1[35]};
  assign MMul_dot_product_out_im_6[35] = {{3{MMul_dot_product_cast_1[35][14]}}, MMul_dot_product_cast_1[35]};
  assign MMul_dot_product_in0[36] = (s_2[36] == 1'b1 ? alpha_re_23[36] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[36] = {MMul_dot_product_in0[36][13], MMul_dot_product_in0[36]};
  assign MMul_dot_product_out_re_6[36] = {{3{MMul_dot_product_cast[36][14]}}, MMul_dot_product_cast[36]};
  assign MMul_dot_product_in0_1[36] = (s_2[36] == 1'b1 ? alpha_im_23[36] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[36] = {MMul_dot_product_in0_1[36][13], MMul_dot_product_in0_1[36]};
  assign MMul_dot_product_out_im_6[36] = {{3{MMul_dot_product_cast_1[36][14]}}, MMul_dot_product_cast_1[36]};
  assign MMul_dot_product_in0[37] = (s_2[37] == 1'b1 ? alpha_re_23[37] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[37] = {MMul_dot_product_in0[37][13], MMul_dot_product_in0[37]};
  assign MMul_dot_product_out_re_6[37] = {{3{MMul_dot_product_cast[37][14]}}, MMul_dot_product_cast[37]};
  assign MMul_dot_product_in0_1[37] = (s_2[37] == 1'b1 ? alpha_im_23[37] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[37] = {MMul_dot_product_in0_1[37][13], MMul_dot_product_in0_1[37]};
  assign MMul_dot_product_out_im_6[37] = {{3{MMul_dot_product_cast_1[37][14]}}, MMul_dot_product_cast_1[37]};
  assign MMul_dot_product_in0[38] = (s_2[38] == 1'b1 ? alpha_re_23[38] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[38] = {MMul_dot_product_in0[38][13], MMul_dot_product_in0[38]};
  assign MMul_dot_product_out_re_6[38] = {{3{MMul_dot_product_cast[38][14]}}, MMul_dot_product_cast[38]};
  assign MMul_dot_product_in0_1[38] = (s_2[38] == 1'b1 ? alpha_im_23[38] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[38] = {MMul_dot_product_in0_1[38][13], MMul_dot_product_in0_1[38]};
  assign MMul_dot_product_out_im_6[38] = {{3{MMul_dot_product_cast_1[38][14]}}, MMul_dot_product_cast_1[38]};
  assign MMul_dot_product_in0[39] = (s_2[39] == 1'b1 ? alpha_re_23[39] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[39] = {MMul_dot_product_in0[39][13], MMul_dot_product_in0[39]};
  assign MMul_dot_product_out_re_6[39] = {{3{MMul_dot_product_cast[39][14]}}, MMul_dot_product_cast[39]};
  assign MMul_dot_product_in0_1[39] = (s_2[39] == 1'b1 ? alpha_im_23[39] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[39] = {MMul_dot_product_in0_1[39][13], MMul_dot_product_in0_1[39]};
  assign MMul_dot_product_out_im_6[39] = {{3{MMul_dot_product_cast_1[39][14]}}, MMul_dot_product_cast_1[39]};
  assign MMul_dot_product_in0[40] = (s_2[40] == 1'b1 ? alpha_re_23[40] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[40] = {MMul_dot_product_in0[40][13], MMul_dot_product_in0[40]};
  assign MMul_dot_product_out_re_6[40] = {{3{MMul_dot_product_cast[40][14]}}, MMul_dot_product_cast[40]};
  assign MMul_dot_product_in0_1[40] = (s_2[40] == 1'b1 ? alpha_im_23[40] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[40] = {MMul_dot_product_in0_1[40][13], MMul_dot_product_in0_1[40]};
  assign MMul_dot_product_out_im_6[40] = {{3{MMul_dot_product_cast_1[40][14]}}, MMul_dot_product_cast_1[40]};
  assign MMul_dot_product_in0[41] = (s_2[41] == 1'b1 ? alpha_re_23[41] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[41] = {MMul_dot_product_in0[41][13], MMul_dot_product_in0[41]};
  assign MMul_dot_product_out_re_6[41] = {{3{MMul_dot_product_cast[41][14]}}, MMul_dot_product_cast[41]};
  assign MMul_dot_product_in0_1[41] = (s_2[41] == 1'b1 ? alpha_im_23[41] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[41] = {MMul_dot_product_in0_1[41][13], MMul_dot_product_in0_1[41]};
  assign MMul_dot_product_out_im_6[41] = {{3{MMul_dot_product_cast_1[41][14]}}, MMul_dot_product_cast_1[41]};
  assign MMul_dot_product_in0[42] = (s_2[42] == 1'b1 ? alpha_re_23[42] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[42] = {MMul_dot_product_in0[42][13], MMul_dot_product_in0[42]};
  assign MMul_dot_product_out_re_6[42] = {{3{MMul_dot_product_cast[42][14]}}, MMul_dot_product_cast[42]};
  assign MMul_dot_product_in0_1[42] = (s_2[42] == 1'b1 ? alpha_im_23[42] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[42] = {MMul_dot_product_in0_1[42][13], MMul_dot_product_in0_1[42]};
  assign MMul_dot_product_out_im_6[42] = {{3{MMul_dot_product_cast_1[42][14]}}, MMul_dot_product_cast_1[42]};
  assign MMul_dot_product_in0[43] = (s_2[43] == 1'b1 ? alpha_re_23[43] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[43] = {MMul_dot_product_in0[43][13], MMul_dot_product_in0[43]};
  assign MMul_dot_product_out_re_6[43] = {{3{MMul_dot_product_cast[43][14]}}, MMul_dot_product_cast[43]};
  assign MMul_dot_product_in0_1[43] = (s_2[43] == 1'b1 ? alpha_im_23[43] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[43] = {MMul_dot_product_in0_1[43][13], MMul_dot_product_in0_1[43]};
  assign MMul_dot_product_out_im_6[43] = {{3{MMul_dot_product_cast_1[43][14]}}, MMul_dot_product_cast_1[43]};
  assign MMul_dot_product_in0[44] = (s_2[44] == 1'b1 ? alpha_re_23[44] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[44] = {MMul_dot_product_in0[44][13], MMul_dot_product_in0[44]};
  assign MMul_dot_product_out_re_6[44] = {{3{MMul_dot_product_cast[44][14]}}, MMul_dot_product_cast[44]};
  assign MMul_dot_product_in0_1[44] = (s_2[44] == 1'b1 ? alpha_im_23[44] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[44] = {MMul_dot_product_in0_1[44][13], MMul_dot_product_in0_1[44]};
  assign MMul_dot_product_out_im_6[44] = {{3{MMul_dot_product_cast_1[44][14]}}, MMul_dot_product_cast_1[44]};
  assign MMul_dot_product_in0[45] = (s_2[45] == 1'b1 ? alpha_re_23[45] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[45] = {MMul_dot_product_in0[45][13], MMul_dot_product_in0[45]};
  assign MMul_dot_product_out_re_6[45] = {{3{MMul_dot_product_cast[45][14]}}, MMul_dot_product_cast[45]};
  assign MMul_dot_product_in0_1[45] = (s_2[45] == 1'b1 ? alpha_im_23[45] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[45] = {MMul_dot_product_in0_1[45][13], MMul_dot_product_in0_1[45]};
  assign MMul_dot_product_out_im_6[45] = {{3{MMul_dot_product_cast_1[45][14]}}, MMul_dot_product_cast_1[45]};
  assign MMul_dot_product_in0[46] = (s_2[46] == 1'b1 ? alpha_re_23[46] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[46] = {MMul_dot_product_in0[46][13], MMul_dot_product_in0[46]};
  assign MMul_dot_product_out_re_6[46] = {{3{MMul_dot_product_cast[46][14]}}, MMul_dot_product_cast[46]};
  assign MMul_dot_product_in0_1[46] = (s_2[46] == 1'b1 ? alpha_im_23[46] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[46] = {MMul_dot_product_in0_1[46][13], MMul_dot_product_in0_1[46]};
  assign MMul_dot_product_out_im_6[46] = {{3{MMul_dot_product_cast_1[46][14]}}, MMul_dot_product_cast_1[46]};
  assign MMul_dot_product_in0[47] = (s_2[47] == 1'b1 ? alpha_re_23[47] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[47] = {MMul_dot_product_in0[47][13], MMul_dot_product_in0[47]};
  assign MMul_dot_product_out_re_6[47] = {{3{MMul_dot_product_cast[47][14]}}, MMul_dot_product_cast[47]};
  assign MMul_dot_product_in0_1[47] = (s_2[47] == 1'b1 ? alpha_im_23[47] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[47] = {MMul_dot_product_in0_1[47][13], MMul_dot_product_in0_1[47]};
  assign MMul_dot_product_out_im_6[47] = {{3{MMul_dot_product_cast_1[47][14]}}, MMul_dot_product_cast_1[47]};
  assign MMul_dot_product_in0[48] = (s_2[48] == 1'b1 ? alpha_re_23[48] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[48] = {MMul_dot_product_in0[48][13], MMul_dot_product_in0[48]};
  assign MMul_dot_product_out_re_6[48] = {{3{MMul_dot_product_cast[48][14]}}, MMul_dot_product_cast[48]};
  assign MMul_dot_product_in0_1[48] = (s_2[48] == 1'b1 ? alpha_im_23[48] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[48] = {MMul_dot_product_in0_1[48][13], MMul_dot_product_in0_1[48]};
  assign MMul_dot_product_out_im_6[48] = {{3{MMul_dot_product_cast_1[48][14]}}, MMul_dot_product_cast_1[48]};
  assign MMul_dot_product_in0[49] = (s_2[49] == 1'b1 ? alpha_re_23[49] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[49] = {MMul_dot_product_in0[49][13], MMul_dot_product_in0[49]};
  assign MMul_dot_product_out_re_6[49] = {{3{MMul_dot_product_cast[49][14]}}, MMul_dot_product_cast[49]};
  assign MMul_dot_product_in0_1[49] = (s_2[49] == 1'b1 ? alpha_im_23[49] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[49] = {MMul_dot_product_in0_1[49][13], MMul_dot_product_in0_1[49]};
  assign MMul_dot_product_out_im_6[49] = {{3{MMul_dot_product_cast_1[49][14]}}, MMul_dot_product_cast_1[49]};
  assign MMul_dot_product_in0[50] = (s_2[50] == 1'b1 ? alpha_re_23[50] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[50] = {MMul_dot_product_in0[50][13], MMul_dot_product_in0[50]};
  assign MMul_dot_product_out_re_6[50] = {{3{MMul_dot_product_cast[50][14]}}, MMul_dot_product_cast[50]};
  assign MMul_dot_product_in0_1[50] = (s_2[50] == 1'b1 ? alpha_im_23[50] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[50] = {MMul_dot_product_in0_1[50][13], MMul_dot_product_in0_1[50]};
  assign MMul_dot_product_out_im_6[50] = {{3{MMul_dot_product_cast_1[50][14]}}, MMul_dot_product_cast_1[50]};
  assign MMul_dot_product_in0[51] = (s_2[51] == 1'b1 ? alpha_re_23[51] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[51] = {MMul_dot_product_in0[51][13], MMul_dot_product_in0[51]};
  assign MMul_dot_product_out_re_6[51] = {{3{MMul_dot_product_cast[51][14]}}, MMul_dot_product_cast[51]};
  assign MMul_dot_product_in0_1[51] = (s_2[51] == 1'b1 ? alpha_im_23[51] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[51] = {MMul_dot_product_in0_1[51][13], MMul_dot_product_in0_1[51]};
  assign MMul_dot_product_out_im_6[51] = {{3{MMul_dot_product_cast_1[51][14]}}, MMul_dot_product_cast_1[51]};
  assign MMul_dot_product_in0[52] = (s_2[52] == 1'b1 ? alpha_re_23[52] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[52] = {MMul_dot_product_in0[52][13], MMul_dot_product_in0[52]};
  assign MMul_dot_product_out_re_6[52] = {{3{MMul_dot_product_cast[52][14]}}, MMul_dot_product_cast[52]};
  assign MMul_dot_product_in0_1[52] = (s_2[52] == 1'b1 ? alpha_im_23[52] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[52] = {MMul_dot_product_in0_1[52][13], MMul_dot_product_in0_1[52]};
  assign MMul_dot_product_out_im_6[52] = {{3{MMul_dot_product_cast_1[52][14]}}, MMul_dot_product_cast_1[52]};
  assign MMul_dot_product_in0[53] = (s_2[53] == 1'b1 ? alpha_re_23[53] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[53] = {MMul_dot_product_in0[53][13], MMul_dot_product_in0[53]};
  assign MMul_dot_product_out_re_6[53] = {{3{MMul_dot_product_cast[53][14]}}, MMul_dot_product_cast[53]};
  assign MMul_dot_product_in0_1[53] = (s_2[53] == 1'b1 ? alpha_im_23[53] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[53] = {MMul_dot_product_in0_1[53][13], MMul_dot_product_in0_1[53]};
  assign MMul_dot_product_out_im_6[53] = {{3{MMul_dot_product_cast_1[53][14]}}, MMul_dot_product_cast_1[53]};
  assign MMul_dot_product_in0[54] = (s_2[54] == 1'b1 ? alpha_re_23[54] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[54] = {MMul_dot_product_in0[54][13], MMul_dot_product_in0[54]};
  assign MMul_dot_product_out_re_6[54] = {{3{MMul_dot_product_cast[54][14]}}, MMul_dot_product_cast[54]};
  assign MMul_dot_product_in0_1[54] = (s_2[54] == 1'b1 ? alpha_im_23[54] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[54] = {MMul_dot_product_in0_1[54][13], MMul_dot_product_in0_1[54]};
  assign MMul_dot_product_out_im_6[54] = {{3{MMul_dot_product_cast_1[54][14]}}, MMul_dot_product_cast_1[54]};
  assign MMul_dot_product_in0[55] = (s_2[55] == 1'b1 ? alpha_re_23[55] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[55] = {MMul_dot_product_in0[55][13], MMul_dot_product_in0[55]};
  assign MMul_dot_product_out_re_6[55] = {{3{MMul_dot_product_cast[55][14]}}, MMul_dot_product_cast[55]};
  assign MMul_dot_product_in0_1[55] = (s_2[55] == 1'b1 ? alpha_im_23[55] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[55] = {MMul_dot_product_in0_1[55][13], MMul_dot_product_in0_1[55]};
  assign MMul_dot_product_out_im_6[55] = {{3{MMul_dot_product_cast_1[55][14]}}, MMul_dot_product_cast_1[55]};
  assign MMul_dot_product_in0[56] = (s_2[56] == 1'b1 ? alpha_re_23[56] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[56] = {MMul_dot_product_in0[56][13], MMul_dot_product_in0[56]};
  assign MMul_dot_product_out_re_6[56] = {{3{MMul_dot_product_cast[56][14]}}, MMul_dot_product_cast[56]};
  assign MMul_dot_product_in0_1[56] = (s_2[56] == 1'b1 ? alpha_im_23[56] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[56] = {MMul_dot_product_in0_1[56][13], MMul_dot_product_in0_1[56]};
  assign MMul_dot_product_out_im_6[56] = {{3{MMul_dot_product_cast_1[56][14]}}, MMul_dot_product_cast_1[56]};
  assign MMul_dot_product_in0[57] = (s_2[57] == 1'b1 ? alpha_re_23[57] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[57] = {MMul_dot_product_in0[57][13], MMul_dot_product_in0[57]};
  assign MMul_dot_product_out_re_6[57] = {{3{MMul_dot_product_cast[57][14]}}, MMul_dot_product_cast[57]};
  assign MMul_dot_product_in0_1[57] = (s_2[57] == 1'b1 ? alpha_im_23[57] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[57] = {MMul_dot_product_in0_1[57][13], MMul_dot_product_in0_1[57]};
  assign MMul_dot_product_out_im_6[57] = {{3{MMul_dot_product_cast_1[57][14]}}, MMul_dot_product_cast_1[57]};
  assign MMul_dot_product_in0[58] = (s_2[58] == 1'b1 ? alpha_re_23[58] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[58] = {MMul_dot_product_in0[58][13], MMul_dot_product_in0[58]};
  assign MMul_dot_product_out_re_6[58] = {{3{MMul_dot_product_cast[58][14]}}, MMul_dot_product_cast[58]};
  assign MMul_dot_product_in0_1[58] = (s_2[58] == 1'b1 ? alpha_im_23[58] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[58] = {MMul_dot_product_in0_1[58][13], MMul_dot_product_in0_1[58]};
  assign MMul_dot_product_out_im_6[58] = {{3{MMul_dot_product_cast_1[58][14]}}, MMul_dot_product_cast_1[58]};
  assign MMul_dot_product_in0[59] = (s_2[59] == 1'b1 ? alpha_re_23[59] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[59] = {MMul_dot_product_in0[59][13], MMul_dot_product_in0[59]};
  assign MMul_dot_product_out_re_6[59] = {{3{MMul_dot_product_cast[59][14]}}, MMul_dot_product_cast[59]};
  assign MMul_dot_product_in0_1[59] = (s_2[59] == 1'b1 ? alpha_im_23[59] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[59] = {MMul_dot_product_in0_1[59][13], MMul_dot_product_in0_1[59]};
  assign MMul_dot_product_out_im_6[59] = {{3{MMul_dot_product_cast_1[59][14]}}, MMul_dot_product_cast_1[59]};
  assign MMul_dot_product_in0[60] = (s_2[60] == 1'b1 ? alpha_re_23[60] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[60] = {MMul_dot_product_in0[60][13], MMul_dot_product_in0[60]};
  assign MMul_dot_product_out_re_6[60] = {{3{MMul_dot_product_cast[60][14]}}, MMul_dot_product_cast[60]};
  assign MMul_dot_product_in0_1[60] = (s_2[60] == 1'b1 ? alpha_im_23[60] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[60] = {MMul_dot_product_in0_1[60][13], MMul_dot_product_in0_1[60]};
  assign MMul_dot_product_out_im_6[60] = {{3{MMul_dot_product_cast_1[60][14]}}, MMul_dot_product_cast_1[60]};
  assign MMul_dot_product_in0[61] = (s_2[61] == 1'b1 ? alpha_re_23[61] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[61] = {MMul_dot_product_in0[61][13], MMul_dot_product_in0[61]};
  assign MMul_dot_product_out_re_6[61] = {{3{MMul_dot_product_cast[61][14]}}, MMul_dot_product_cast[61]};
  assign MMul_dot_product_in0_1[61] = (s_2[61] == 1'b1 ? alpha_im_23[61] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[61] = {MMul_dot_product_in0_1[61][13], MMul_dot_product_in0_1[61]};
  assign MMul_dot_product_out_im_6[61] = {{3{MMul_dot_product_cast_1[61][14]}}, MMul_dot_product_cast_1[61]};
  assign MMul_dot_product_in0[62] = (s_2[62] == 1'b1 ? alpha_re_23[62] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[62] = {MMul_dot_product_in0[62][13], MMul_dot_product_in0[62]};
  assign MMul_dot_product_out_re_6[62] = {{3{MMul_dot_product_cast[62][14]}}, MMul_dot_product_cast[62]};
  assign MMul_dot_product_in0_1[62] = (s_2[62] == 1'b1 ? alpha_im_23[62] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[62] = {MMul_dot_product_in0_1[62][13], MMul_dot_product_in0_1[62]};
  assign MMul_dot_product_out_im_6[62] = {{3{MMul_dot_product_cast_1[62][14]}}, MMul_dot_product_cast_1[62]};
  assign MMul_dot_product_in0[63] = (s_2[63] == 1'b1 ? alpha_re_23[63] :
              14'sb00000000000000);
  assign MMul_dot_product_cast[63] = {MMul_dot_product_in0[63][13], MMul_dot_product_in0[63]};
  assign MMul_dot_product_out_re_6[63] = {{3{MMul_dot_product_cast[63][14]}}, MMul_dot_product_cast[63]};
  assign MMul_dot_product_in0_1[63] = (s_2[63] == 1'b1 ? alpha_im_23[63] :
              14'sb00000000000000);
  assign MMul_dot_product_cast_1[63] = {MMul_dot_product_in0_1[63][13], MMul_dot_product_in0_1[63]};
  assign MMul_dot_product_out_im_6[63] = {{3{MMul_dot_product_cast_1[63][14]}}, MMul_dot_product_cast_1[63]};

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  always_comb begin
    reshape_out_re_6[0][0] = MMul_dot_product_out_re_6[0];
    reshape_out_im_6[0][0] = MMul_dot_product_out_im_6[0];
    reshape_out_re_6[1][0] = MMul_dot_product_out_re_6[1];
    reshape_out_im_6[1][0] = MMul_dot_product_out_im_6[1];
    reshape_out_re_6[2][0] = MMul_dot_product_out_re_6[2];
    reshape_out_im_6[2][0] = MMul_dot_product_out_im_6[2];
    reshape_out_re_6[3][0] = MMul_dot_product_out_re_6[3];
    reshape_out_im_6[3][0] = MMul_dot_product_out_im_6[3];
    reshape_out_re_6[4][0] = MMul_dot_product_out_re_6[4];
    reshape_out_im_6[4][0] = MMul_dot_product_out_im_6[4];
    reshape_out_re_6[5][0] = MMul_dot_product_out_re_6[5];
    reshape_out_im_6[5][0] = MMul_dot_product_out_im_6[5];
    reshape_out_re_6[6][0] = MMul_dot_product_out_re_6[6];
    reshape_out_im_6[6][0] = MMul_dot_product_out_im_6[6];
    reshape_out_re_6[7][0] = MMul_dot_product_out_re_6[7];
    reshape_out_im_6[7][0] = MMul_dot_product_out_im_6[7];
    reshape_out_re_6[0][1] = MMul_dot_product_out_re_6[8];
    reshape_out_im_6[0][1] = MMul_dot_product_out_im_6[8];
    reshape_out_re_6[1][1] = MMul_dot_product_out_re_6[9];
    reshape_out_im_6[1][1] = MMul_dot_product_out_im_6[9];
    reshape_out_re_6[2][1] = MMul_dot_product_out_re_6[10];
    reshape_out_im_6[2][1] = MMul_dot_product_out_im_6[10];
    reshape_out_re_6[3][1] = MMul_dot_product_out_re_6[11];
    reshape_out_im_6[3][1] = MMul_dot_product_out_im_6[11];
    reshape_out_re_6[4][1] = MMul_dot_product_out_re_6[12];
    reshape_out_im_6[4][1] = MMul_dot_product_out_im_6[12];
    reshape_out_re_6[5][1] = MMul_dot_product_out_re_6[13];
    reshape_out_im_6[5][1] = MMul_dot_product_out_im_6[13];
    reshape_out_re_6[6][1] = MMul_dot_product_out_re_6[14];
    reshape_out_im_6[6][1] = MMul_dot_product_out_im_6[14];
    reshape_out_re_6[7][1] = MMul_dot_product_out_re_6[15];
    reshape_out_im_6[7][1] = MMul_dot_product_out_im_6[15];
    reshape_out_re_6[0][2] = MMul_dot_product_out_re_6[16];
    reshape_out_im_6[0][2] = MMul_dot_product_out_im_6[16];
    reshape_out_re_6[1][2] = MMul_dot_product_out_re_6[17];
    reshape_out_im_6[1][2] = MMul_dot_product_out_im_6[17];
    reshape_out_re_6[2][2] = MMul_dot_product_out_re_6[18];
    reshape_out_im_6[2][2] = MMul_dot_product_out_im_6[18];
    reshape_out_re_6[3][2] = MMul_dot_product_out_re_6[19];
    reshape_out_im_6[3][2] = MMul_dot_product_out_im_6[19];
    reshape_out_re_6[4][2] = MMul_dot_product_out_re_6[20];
    reshape_out_im_6[4][2] = MMul_dot_product_out_im_6[20];
    reshape_out_re_6[5][2] = MMul_dot_product_out_re_6[21];
    reshape_out_im_6[5][2] = MMul_dot_product_out_im_6[21];
    reshape_out_re_6[6][2] = MMul_dot_product_out_re_6[22];
    reshape_out_im_6[6][2] = MMul_dot_product_out_im_6[22];
    reshape_out_re_6[7][2] = MMul_dot_product_out_re_6[23];
    reshape_out_im_6[7][2] = MMul_dot_product_out_im_6[23];
    reshape_out_re_6[0][3] = MMul_dot_product_out_re_6[24];
    reshape_out_im_6[0][3] = MMul_dot_product_out_im_6[24];
    reshape_out_re_6[1][3] = MMul_dot_product_out_re_6[25];
    reshape_out_im_6[1][3] = MMul_dot_product_out_im_6[25];
    reshape_out_re_6[2][3] = MMul_dot_product_out_re_6[26];
    reshape_out_im_6[2][3] = MMul_dot_product_out_im_6[26];
    reshape_out_re_6[3][3] = MMul_dot_product_out_re_6[27];
    reshape_out_im_6[3][3] = MMul_dot_product_out_im_6[27];
    reshape_out_re_6[4][3] = MMul_dot_product_out_re_6[28];
    reshape_out_im_6[4][3] = MMul_dot_product_out_im_6[28];
    reshape_out_re_6[5][3] = MMul_dot_product_out_re_6[29];
    reshape_out_im_6[5][3] = MMul_dot_product_out_im_6[29];
    reshape_out_re_6[6][3] = MMul_dot_product_out_re_6[30];
    reshape_out_im_6[6][3] = MMul_dot_product_out_im_6[30];
    reshape_out_re_6[7][3] = MMul_dot_product_out_re_6[31];
    reshape_out_im_6[7][3] = MMul_dot_product_out_im_6[31];
    reshape_out_re_6[0][4] = MMul_dot_product_out_re_6[32];
    reshape_out_im_6[0][4] = MMul_dot_product_out_im_6[32];
    reshape_out_re_6[1][4] = MMul_dot_product_out_re_6[33];
    reshape_out_im_6[1][4] = MMul_dot_product_out_im_6[33];
    reshape_out_re_6[2][4] = MMul_dot_product_out_re_6[34];
    reshape_out_im_6[2][4] = MMul_dot_product_out_im_6[34];
    reshape_out_re_6[3][4] = MMul_dot_product_out_re_6[35];
    reshape_out_im_6[3][4] = MMul_dot_product_out_im_6[35];
    reshape_out_re_6[4][4] = MMul_dot_product_out_re_6[36];
    reshape_out_im_6[4][4] = MMul_dot_product_out_im_6[36];
    reshape_out_re_6[5][4] = MMul_dot_product_out_re_6[37];
    reshape_out_im_6[5][4] = MMul_dot_product_out_im_6[37];
    reshape_out_re_6[6][4] = MMul_dot_product_out_re_6[38];
    reshape_out_im_6[6][4] = MMul_dot_product_out_im_6[38];
    reshape_out_re_6[7][4] = MMul_dot_product_out_re_6[39];
    reshape_out_im_6[7][4] = MMul_dot_product_out_im_6[39];
    reshape_out_re_6[0][5] = MMul_dot_product_out_re_6[40];
    reshape_out_im_6[0][5] = MMul_dot_product_out_im_6[40];
    reshape_out_re_6[1][5] = MMul_dot_product_out_re_6[41];
    reshape_out_im_6[1][5] = MMul_dot_product_out_im_6[41];
    reshape_out_re_6[2][5] = MMul_dot_product_out_re_6[42];
    reshape_out_im_6[2][5] = MMul_dot_product_out_im_6[42];
    reshape_out_re_6[3][5] = MMul_dot_product_out_re_6[43];
    reshape_out_im_6[3][5] = MMul_dot_product_out_im_6[43];
    reshape_out_re_6[4][5] = MMul_dot_product_out_re_6[44];
    reshape_out_im_6[4][5] = MMul_dot_product_out_im_6[44];
    reshape_out_re_6[5][5] = MMul_dot_product_out_re_6[45];
    reshape_out_im_6[5][5] = MMul_dot_product_out_im_6[45];
    reshape_out_re_6[6][5] = MMul_dot_product_out_re_6[46];
    reshape_out_im_6[6][5] = MMul_dot_product_out_im_6[46];
    reshape_out_re_6[7][5] = MMul_dot_product_out_re_6[47];
    reshape_out_im_6[7][5] = MMul_dot_product_out_im_6[47];
    reshape_out_re_6[0][6] = MMul_dot_product_out_re_6[48];
    reshape_out_im_6[0][6] = MMul_dot_product_out_im_6[48];
    reshape_out_re_6[1][6] = MMul_dot_product_out_re_6[49];
    reshape_out_im_6[1][6] = MMul_dot_product_out_im_6[49];
    reshape_out_re_6[2][6] = MMul_dot_product_out_re_6[50];
    reshape_out_im_6[2][6] = MMul_dot_product_out_im_6[50];
    reshape_out_re_6[3][6] = MMul_dot_product_out_re_6[51];
    reshape_out_im_6[3][6] = MMul_dot_product_out_im_6[51];
    reshape_out_re_6[4][6] = MMul_dot_product_out_re_6[52];
    reshape_out_im_6[4][6] = MMul_dot_product_out_im_6[52];
    reshape_out_re_6[5][6] = MMul_dot_product_out_re_6[53];
    reshape_out_im_6[5][6] = MMul_dot_product_out_im_6[53];
    reshape_out_re_6[6][6] = MMul_dot_product_out_re_6[54];
    reshape_out_im_6[6][6] = MMul_dot_product_out_im_6[54];
    reshape_out_re_6[7][6] = MMul_dot_product_out_re_6[55];
    reshape_out_im_6[7][6] = MMul_dot_product_out_im_6[55];
    reshape_out_re_6[0][7] = MMul_dot_product_out_re_6[56];
    reshape_out_im_6[0][7] = MMul_dot_product_out_im_6[56];
    reshape_out_re_6[1][7] = MMul_dot_product_out_re_6[57];
    reshape_out_im_6[1][7] = MMul_dot_product_out_im_6[57];
    reshape_out_re_6[2][7] = MMul_dot_product_out_re_6[58];
    reshape_out_im_6[2][7] = MMul_dot_product_out_im_6[58];
    reshape_out_re_6[3][7] = MMul_dot_product_out_re_6[59];
    reshape_out_im_6[3][7] = MMul_dot_product_out_im_6[59];
    reshape_out_re_6[4][7] = MMul_dot_product_out_re_6[60];
    reshape_out_im_6[4][7] = MMul_dot_product_out_im_6[60];
    reshape_out_re_6[5][7] = MMul_dot_product_out_re_6[61];
    reshape_out_im_6[5][7] = MMul_dot_product_out_im_6[61];
    reshape_out_re_6[6][7] = MMul_dot_product_out_re_6[62];
    reshape_out_im_6[6][7] = MMul_dot_product_out_im_6[62];
    reshape_out_re_6[7][7] = MMul_dot_product_out_re_6[63];
    reshape_out_im_6[7][7] = MMul_dot_product_out_im_6[63];
  end

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_60[0] = reshape_out_re_6[0][0];
  assign selector_out_im_60[0] = reshape_out_im_6[0][0];
  assign selector_out_re_60[1] = reshape_out_re_6[0][1];
  assign selector_out_im_60[1] = reshape_out_im_6[0][1];
  assign selector_out_re_60[2] = reshape_out_re_6[0][2];
  assign selector_out_im_60[2] = reshape_out_im_6[0][2];
  assign selector_out_re_60[3] = reshape_out_re_6[0][3];
  assign selector_out_im_60[3] = reshape_out_im_6[0][3];
  assign selector_out_re_60[4] = reshape_out_re_6[0][4];
  assign selector_out_im_60[4] = reshape_out_im_6[0][4];
  assign selector_out_re_60[5] = reshape_out_re_6[0][5];
  assign selector_out_im_60[5] = reshape_out_im_6[0][5];
  assign selector_out_re_60[6] = reshape_out_re_6[0][6];
  assign selector_out_im_60[6] = reshape_out_im_6[0][6];
  assign selector_out_re_60[7] = reshape_out_re_6[0][7];
  assign selector_out_im_60[7] = reshape_out_im_6[0][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_61[0] = reshape_out_re_6[1][0];
  assign selector_out_im_61[0] = reshape_out_im_6[1][0];
  assign selector_out_re_61[1] = reshape_out_re_6[1][1];
  assign selector_out_im_61[1] = reshape_out_im_6[1][1];
  assign selector_out_re_61[2] = reshape_out_re_6[1][2];
  assign selector_out_im_61[2] = reshape_out_im_6[1][2];
  assign selector_out_re_61[3] = reshape_out_re_6[1][3];
  assign selector_out_im_61[3] = reshape_out_im_6[1][3];
  assign selector_out_re_61[4] = reshape_out_re_6[1][4];
  assign selector_out_im_61[4] = reshape_out_im_6[1][4];
  assign selector_out_re_61[5] = reshape_out_re_6[1][5];
  assign selector_out_im_61[5] = reshape_out_im_6[1][5];
  assign selector_out_re_61[6] = reshape_out_re_6[1][6];
  assign selector_out_im_61[6] = reshape_out_im_6[1][6];
  assign selector_out_re_61[7] = reshape_out_re_6[1][7];
  assign selector_out_im_61[7] = reshape_out_im_6[1][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_add_01_out_re_6[0] = selector_out_re_60[0] + selector_out_re_61[0];
  assign MMul_add_01_out_im_6[0] = selector_out_im_60[0] + selector_out_im_61[0];
  assign MMul_add_01_out_re_6[1] = selector_out_re_60[1] + selector_out_re_61[1];
  assign MMul_add_01_out_im_6[1] = selector_out_im_60[1] + selector_out_im_61[1];
  assign MMul_add_01_out_re_6[2] = selector_out_re_60[2] + selector_out_re_61[2];
  assign MMul_add_01_out_im_6[2] = selector_out_im_60[2] + selector_out_im_61[2];
  assign MMul_add_01_out_re_6[3] = selector_out_re_60[3] + selector_out_re_61[3];
  assign MMul_add_01_out_im_6[3] = selector_out_im_60[3] + selector_out_im_61[3];
  assign MMul_add_01_out_re_6[4] = selector_out_re_60[4] + selector_out_re_61[4];
  assign MMul_add_01_out_im_6[4] = selector_out_im_60[4] + selector_out_im_61[4];
  assign MMul_add_01_out_re_6[5] = selector_out_re_60[5] + selector_out_re_61[5];
  assign MMul_add_01_out_im_6[5] = selector_out_im_60[5] + selector_out_im_61[5];
  assign MMul_add_01_out_re_6[6] = selector_out_re_60[6] + selector_out_re_61[6];
  assign MMul_add_01_out_im_6[6] = selector_out_im_60[6] + selector_out_im_61[6];
  assign MMul_add_01_out_re_6[7] = selector_out_re_60[7] + selector_out_re_61[7];
  assign MMul_add_01_out_im_6[7] = selector_out_im_60[7] + selector_out_im_61[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_62[0] = reshape_out_re_6[2][0];
  assign selector_out_im_62[0] = reshape_out_im_6[2][0];
  assign selector_out_re_62[1] = reshape_out_re_6[2][1];
  assign selector_out_im_62[1] = reshape_out_im_6[2][1];
  assign selector_out_re_62[2] = reshape_out_re_6[2][2];
  assign selector_out_im_62[2] = reshape_out_im_6[2][2];
  assign selector_out_re_62[3] = reshape_out_re_6[2][3];
  assign selector_out_im_62[3] = reshape_out_im_6[2][3];
  assign selector_out_re_62[4] = reshape_out_re_6[2][4];
  assign selector_out_im_62[4] = reshape_out_im_6[2][4];
  assign selector_out_re_62[5] = reshape_out_re_6[2][5];
  assign selector_out_im_62[5] = reshape_out_im_6[2][5];
  assign selector_out_re_62[6] = reshape_out_re_6[2][6];
  assign selector_out_im_62[6] = reshape_out_im_6[2][6];
  assign selector_out_re_62[7] = reshape_out_re_6[2][7];
  assign selector_out_im_62[7] = reshape_out_im_6[2][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_add_12_out_re_6[0] = MMul_add_01_out_re_6[0] + selector_out_re_62[0];
  assign MMul_add_12_out_im_6[0] = MMul_add_01_out_im_6[0] + selector_out_im_62[0];
  assign MMul_add_12_out_re_6[1] = MMul_add_01_out_re_6[1] + selector_out_re_62[1];
  assign MMul_add_12_out_im_6[1] = MMul_add_01_out_im_6[1] + selector_out_im_62[1];
  assign MMul_add_12_out_re_6[2] = MMul_add_01_out_re_6[2] + selector_out_re_62[2];
  assign MMul_add_12_out_im_6[2] = MMul_add_01_out_im_6[2] + selector_out_im_62[2];
  assign MMul_add_12_out_re_6[3] = MMul_add_01_out_re_6[3] + selector_out_re_62[3];
  assign MMul_add_12_out_im_6[3] = MMul_add_01_out_im_6[3] + selector_out_im_62[3];
  assign MMul_add_12_out_re_6[4] = MMul_add_01_out_re_6[4] + selector_out_re_62[4];
  assign MMul_add_12_out_im_6[4] = MMul_add_01_out_im_6[4] + selector_out_im_62[4];
  assign MMul_add_12_out_re_6[5] = MMul_add_01_out_re_6[5] + selector_out_re_62[5];
  assign MMul_add_12_out_im_6[5] = MMul_add_01_out_im_6[5] + selector_out_im_62[5];
  assign MMul_add_12_out_re_6[6] = MMul_add_01_out_re_6[6] + selector_out_re_62[6];
  assign MMul_add_12_out_im_6[6] = MMul_add_01_out_im_6[6] + selector_out_im_62[6];
  assign MMul_add_12_out_re_6[7] = MMul_add_01_out_re_6[7] + selector_out_re_62[7];
  assign MMul_add_12_out_im_6[7] = MMul_add_01_out_im_6[7] + selector_out_im_62[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_63[0] = reshape_out_re_6[3][0];
  assign selector_out_im_63[0] = reshape_out_im_6[3][0];
  assign selector_out_re_63[1] = reshape_out_re_6[3][1];
  assign selector_out_im_63[1] = reshape_out_im_6[3][1];
  assign selector_out_re_63[2] = reshape_out_re_6[3][2];
  assign selector_out_im_63[2] = reshape_out_im_6[3][2];
  assign selector_out_re_63[3] = reshape_out_re_6[3][3];
  assign selector_out_im_63[3] = reshape_out_im_6[3][3];
  assign selector_out_re_63[4] = reshape_out_re_6[3][4];
  assign selector_out_im_63[4] = reshape_out_im_6[3][4];
  assign selector_out_re_63[5] = reshape_out_re_6[3][5];
  assign selector_out_im_63[5] = reshape_out_im_6[3][5];
  assign selector_out_re_63[6] = reshape_out_re_6[3][6];
  assign selector_out_im_63[6] = reshape_out_im_6[3][6];
  assign selector_out_re_63[7] = reshape_out_re_6[3][7];
  assign selector_out_im_63[7] = reshape_out_im_6[3][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_add_23_out_re_6[0] = MMul_add_12_out_re_6[0] + selector_out_re_63[0];
  assign MMul_add_23_out_im_6[0] = MMul_add_12_out_im_6[0] + selector_out_im_63[0];
  assign MMul_add_23_out_re_6[1] = MMul_add_12_out_re_6[1] + selector_out_re_63[1];
  assign MMul_add_23_out_im_6[1] = MMul_add_12_out_im_6[1] + selector_out_im_63[1];
  assign MMul_add_23_out_re_6[2] = MMul_add_12_out_re_6[2] + selector_out_re_63[2];
  assign MMul_add_23_out_im_6[2] = MMul_add_12_out_im_6[2] + selector_out_im_63[2];
  assign MMul_add_23_out_re_6[3] = MMul_add_12_out_re_6[3] + selector_out_re_63[3];
  assign MMul_add_23_out_im_6[3] = MMul_add_12_out_im_6[3] + selector_out_im_63[3];
  assign MMul_add_23_out_re_6[4] = MMul_add_12_out_re_6[4] + selector_out_re_63[4];
  assign MMul_add_23_out_im_6[4] = MMul_add_12_out_im_6[4] + selector_out_im_63[4];
  assign MMul_add_23_out_re_6[5] = MMul_add_12_out_re_6[5] + selector_out_re_63[5];
  assign MMul_add_23_out_im_6[5] = MMul_add_12_out_im_6[5] + selector_out_im_63[5];
  assign MMul_add_23_out_re_6[6] = MMul_add_12_out_re_6[6] + selector_out_re_63[6];
  assign MMul_add_23_out_im_6[6] = MMul_add_12_out_im_6[6] + selector_out_im_63[6];
  assign MMul_add_23_out_re_6[7] = MMul_add_12_out_re_6[7] + selector_out_re_63[7];
  assign MMul_add_23_out_im_6[7] = MMul_add_12_out_im_6[7] + selector_out_im_63[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_64[0] = reshape_out_re_6[4][0];
  assign selector_out_im_64[0] = reshape_out_im_6[4][0];
  assign selector_out_re_64[1] = reshape_out_re_6[4][1];
  assign selector_out_im_64[1] = reshape_out_im_6[4][1];
  assign selector_out_re_64[2] = reshape_out_re_6[4][2];
  assign selector_out_im_64[2] = reshape_out_im_6[4][2];
  assign selector_out_re_64[3] = reshape_out_re_6[4][3];
  assign selector_out_im_64[3] = reshape_out_im_6[4][3];
  assign selector_out_re_64[4] = reshape_out_re_6[4][4];
  assign selector_out_im_64[4] = reshape_out_im_6[4][4];
  assign selector_out_re_64[5] = reshape_out_re_6[4][5];
  assign selector_out_im_64[5] = reshape_out_im_6[4][5];
  assign selector_out_re_64[6] = reshape_out_re_6[4][6];
  assign selector_out_im_64[6] = reshape_out_im_6[4][6];
  assign selector_out_re_64[7] = reshape_out_re_6[4][7];
  assign selector_out_im_64[7] = reshape_out_im_6[4][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_add_34_out_re_6[0] = MMul_add_23_out_re_6[0] + selector_out_re_64[0];
  assign MMul_add_34_out_im_6[0] = MMul_add_23_out_im_6[0] + selector_out_im_64[0];
  assign MMul_add_34_out_re_6[1] = MMul_add_23_out_re_6[1] + selector_out_re_64[1];
  assign MMul_add_34_out_im_6[1] = MMul_add_23_out_im_6[1] + selector_out_im_64[1];
  assign MMul_add_34_out_re_6[2] = MMul_add_23_out_re_6[2] + selector_out_re_64[2];
  assign MMul_add_34_out_im_6[2] = MMul_add_23_out_im_6[2] + selector_out_im_64[2];
  assign MMul_add_34_out_re_6[3] = MMul_add_23_out_re_6[3] + selector_out_re_64[3];
  assign MMul_add_34_out_im_6[3] = MMul_add_23_out_im_6[3] + selector_out_im_64[3];
  assign MMul_add_34_out_re_6[4] = MMul_add_23_out_re_6[4] + selector_out_re_64[4];
  assign MMul_add_34_out_im_6[4] = MMul_add_23_out_im_6[4] + selector_out_im_64[4];
  assign MMul_add_34_out_re_6[5] = MMul_add_23_out_re_6[5] + selector_out_re_64[5];
  assign MMul_add_34_out_im_6[5] = MMul_add_23_out_im_6[5] + selector_out_im_64[5];
  assign MMul_add_34_out_re_6[6] = MMul_add_23_out_re_6[6] + selector_out_re_64[6];
  assign MMul_add_34_out_im_6[6] = MMul_add_23_out_im_6[6] + selector_out_im_64[6];
  assign MMul_add_34_out_re_6[7] = MMul_add_23_out_re_6[7] + selector_out_re_64[7];
  assign MMul_add_34_out_im_6[7] = MMul_add_23_out_im_6[7] + selector_out_im_64[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_65[0] = reshape_out_re_6[5][0];
  assign selector_out_im_65[0] = reshape_out_im_6[5][0];
  assign selector_out_re_65[1] = reshape_out_re_6[5][1];
  assign selector_out_im_65[1] = reshape_out_im_6[5][1];
  assign selector_out_re_65[2] = reshape_out_re_6[5][2];
  assign selector_out_im_65[2] = reshape_out_im_6[5][2];
  assign selector_out_re_65[3] = reshape_out_re_6[5][3];
  assign selector_out_im_65[3] = reshape_out_im_6[5][3];
  assign selector_out_re_65[4] = reshape_out_re_6[5][4];
  assign selector_out_im_65[4] = reshape_out_im_6[5][4];
  assign selector_out_re_65[5] = reshape_out_re_6[5][5];
  assign selector_out_im_65[5] = reshape_out_im_6[5][5];
  assign selector_out_re_65[6] = reshape_out_re_6[5][6];
  assign selector_out_im_65[6] = reshape_out_im_6[5][6];
  assign selector_out_re_65[7] = reshape_out_re_6[5][7];
  assign selector_out_im_65[7] = reshape_out_im_6[5][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_add_45_out_re_6[0] = MMul_add_34_out_re_6[0] + selector_out_re_65[0];
  assign MMul_add_45_out_im_6[0] = MMul_add_34_out_im_6[0] + selector_out_im_65[0];
  assign MMul_add_45_out_re_6[1] = MMul_add_34_out_re_6[1] + selector_out_re_65[1];
  assign MMul_add_45_out_im_6[1] = MMul_add_34_out_im_6[1] + selector_out_im_65[1];
  assign MMul_add_45_out_re_6[2] = MMul_add_34_out_re_6[2] + selector_out_re_65[2];
  assign MMul_add_45_out_im_6[2] = MMul_add_34_out_im_6[2] + selector_out_im_65[2];
  assign MMul_add_45_out_re_6[3] = MMul_add_34_out_re_6[3] + selector_out_re_65[3];
  assign MMul_add_45_out_im_6[3] = MMul_add_34_out_im_6[3] + selector_out_im_65[3];
  assign MMul_add_45_out_re_6[4] = MMul_add_34_out_re_6[4] + selector_out_re_65[4];
  assign MMul_add_45_out_im_6[4] = MMul_add_34_out_im_6[4] + selector_out_im_65[4];
  assign MMul_add_45_out_re_6[5] = MMul_add_34_out_re_6[5] + selector_out_re_65[5];
  assign MMul_add_45_out_im_6[5] = MMul_add_34_out_im_6[5] + selector_out_im_65[5];
  assign MMul_add_45_out_re_6[6] = MMul_add_34_out_re_6[6] + selector_out_re_65[6];
  assign MMul_add_45_out_im_6[6] = MMul_add_34_out_im_6[6] + selector_out_im_65[6];
  assign MMul_add_45_out_re_6[7] = MMul_add_34_out_re_6[7] + selector_out_re_65[7];
  assign MMul_add_45_out_im_6[7] = MMul_add_34_out_im_6[7] + selector_out_im_65[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_66[0] = reshape_out_re_6[6][0];
  assign selector_out_im_66[0] = reshape_out_im_6[6][0];
  assign selector_out_re_66[1] = reshape_out_re_6[6][1];
  assign selector_out_im_66[1] = reshape_out_im_6[6][1];
  assign selector_out_re_66[2] = reshape_out_re_6[6][2];
  assign selector_out_im_66[2] = reshape_out_im_6[6][2];
  assign selector_out_re_66[3] = reshape_out_re_6[6][3];
  assign selector_out_im_66[3] = reshape_out_im_6[6][3];
  assign selector_out_re_66[4] = reshape_out_re_6[6][4];
  assign selector_out_im_66[4] = reshape_out_im_6[6][4];
  assign selector_out_re_66[5] = reshape_out_re_6[6][5];
  assign selector_out_im_66[5] = reshape_out_im_6[6][5];
  assign selector_out_re_66[6] = reshape_out_re_6[6][6];
  assign selector_out_im_66[6] = reshape_out_im_6[6][6];
  assign selector_out_re_66[7] = reshape_out_re_6[6][7];
  assign selector_out_im_66[7] = reshape_out_im_6[6][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign MMul_add_56_out_re_6[0] = MMul_add_45_out_re_6[0] + selector_out_re_66[0];
  assign MMul_add_56_out_im_6[0] = MMul_add_45_out_im_6[0] + selector_out_im_66[0];
  assign MMul_add_56_out_re_6[1] = MMul_add_45_out_re_6[1] + selector_out_re_66[1];
  assign MMul_add_56_out_im_6[1] = MMul_add_45_out_im_6[1] + selector_out_im_66[1];
  assign MMul_add_56_out_re_6[2] = MMul_add_45_out_re_6[2] + selector_out_re_66[2];
  assign MMul_add_56_out_im_6[2] = MMul_add_45_out_im_6[2] + selector_out_im_66[2];
  assign MMul_add_56_out_re_6[3] = MMul_add_45_out_re_6[3] + selector_out_re_66[3];
  assign MMul_add_56_out_im_6[3] = MMul_add_45_out_im_6[3] + selector_out_im_66[3];
  assign MMul_add_56_out_re_6[4] = MMul_add_45_out_re_6[4] + selector_out_re_66[4];
  assign MMul_add_56_out_im_6[4] = MMul_add_45_out_im_6[4] + selector_out_im_66[4];
  assign MMul_add_56_out_re_6[5] = MMul_add_45_out_re_6[5] + selector_out_re_66[5];
  assign MMul_add_56_out_im_6[5] = MMul_add_45_out_im_6[5] + selector_out_im_66[5];
  assign MMul_add_56_out_re_6[6] = MMul_add_45_out_re_6[6] + selector_out_re_66[6];
  assign MMul_add_56_out_im_6[6] = MMul_add_45_out_im_6[6] + selector_out_im_66[6];
  assign MMul_add_56_out_re_6[7] = MMul_add_45_out_re_6[7] + selector_out_re_66[7];
  assign MMul_add_56_out_im_6[7] = MMul_add_45_out_im_6[7] + selector_out_im_66[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign selector_out_re_67[0] = reshape_out_re_6[7][0];
  assign selector_out_im_67[0] = reshape_out_im_6[7][0];
  assign selector_out_re_67[1] = reshape_out_re_6[7][1];
  assign selector_out_im_67[1] = reshape_out_im_6[7][1];
  assign selector_out_re_67[2] = reshape_out_re_6[7][2];
  assign selector_out_im_67[2] = reshape_out_im_6[7][2];
  assign selector_out_re_67[3] = reshape_out_re_6[7][3];
  assign selector_out_im_67[3] = reshape_out_im_6[7][3];
  assign selector_out_re_67[4] = reshape_out_re_6[7][4];
  assign selector_out_im_67[4] = reshape_out_im_6[7][4];
  assign selector_out_re_67[5] = reshape_out_re_6[7][5];
  assign selector_out_im_67[5] = reshape_out_im_6[7][5];
  assign selector_out_re_67[6] = reshape_out_re_6[7][6];
  assign selector_out_im_67[6] = reshape_out_im_6[7][6];
  assign selector_out_re_67[7] = reshape_out_re_6[7][7];
  assign selector_out_im_67[7] = reshape_out_im_6[7][7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign alpha_re_24[0] = MMul_add_56_out_re_6[0] + selector_out_re_67[0];
  assign alpha_im_24[0] = MMul_add_56_out_im_6[0] + selector_out_im_67[0];
  assign alpha_re_24[1] = MMul_add_56_out_re_6[1] + selector_out_re_67[1];
  assign alpha_im_24[1] = MMul_add_56_out_im_6[1] + selector_out_im_67[1];
  assign alpha_re_24[2] = MMul_add_56_out_re_6[2] + selector_out_re_67[2];
  assign alpha_im_24[2] = MMul_add_56_out_im_6[2] + selector_out_im_67[2];
  assign alpha_re_24[3] = MMul_add_56_out_re_6[3] + selector_out_re_67[3];
  assign alpha_im_24[3] = MMul_add_56_out_im_6[3] + selector_out_im_67[3];
  assign alpha_re_24[4] = MMul_add_56_out_re_6[4] + selector_out_re_67[4];
  assign alpha_im_24[4] = MMul_add_56_out_im_6[4] + selector_out_im_67[4];
  assign alpha_re_24[5] = MMul_add_56_out_re_6[5] + selector_out_re_67[5];
  assign alpha_im_24[5] = MMul_add_56_out_im_6[5] + selector_out_im_67[5];
  assign alpha_re_24[6] = MMul_add_56_out_re_6[6] + selector_out_re_67[6];
  assign alpha_im_24[6] = MMul_add_56_out_im_6[6] + selector_out_im_67[6];
  assign alpha_re_24[7] = MMul_add_56_out_re_6[7] + selector_out_re_67[7];
  assign alpha_im_24[7] = MMul_add_56_out_im_6[7] + selector_out_im_67[7];

  // Step 7: Apply SWAP to reverse qubit order (SWAP qubit 1 and qubit 3)
  // Apply SWAP between qubit 1 and qubit 3
  assign out0_re_6[0] = alpha_re_24[0];
  assign out0_im_6[0] = alpha_im_24[0];
  assign out0_re_6[1] = alpha_re_24[1];
  assign out0_im_6[1] = alpha_im_24[1];
  assign out0_re_6[2] = alpha_re_24[2];
  assign out0_im_6[2] = alpha_im_24[2];
  assign out0_re_6[3] = alpha_re_24[3];
  assign out0_im_6[3] = alpha_im_24[3];
  assign out0_re_6[4] = alpha_re_24[4];
  assign out0_im_6[4] = alpha_im_24[4];
  assign out0_re_6[5] = alpha_re_24[5];
  assign out0_im_6[5] = alpha_im_24[5];
  assign out0_re_6[6] = alpha_re_24[6];
  assign out0_im_6[6] = alpha_im_24[6];
  assign out0_re_6[7] = alpha_re_24[7];
  assign out0_im_6[7] = alpha_im_24[7];

  assign final_state_re_1[0] = out0_re_6[0][13:0];
  assign final_state_im_1[0] = out0_im_6[0][13:0];
  assign final_state_re_1[1] = out0_re_6[1][13:0];
  assign final_state_im_1[1] = out0_im_6[1][13:0];
  assign final_state_re_1[2] = out0_re_6[2][13:0];
  assign final_state_im_1[2] = out0_im_6[2][13:0];
  assign final_state_re_1[3] = out0_re_6[3][13:0];
  assign final_state_im_1[3] = out0_im_6[3][13:0];
  assign final_state_re_1[4] = out0_re_6[4][13:0];
  assign final_state_im_1[4] = out0_im_6[4][13:0];
  assign final_state_re_1[5] = out0_re_6[5][13:0];
  assign final_state_im_1[5] = out0_im_6[5][13:0];
  assign final_state_re_1[6] = out0_re_6[6][13:0];
  assign final_state_im_1[6] = out0_im_6[6][13:0];
  assign final_state_re_1[7] = out0_re_6[7][13:0];
  assign final_state_im_1[7] = out0_im_6[7][13:0];

  always_ff @(posedge clk)
    begin : final_state_reg_process
      final_state_re_2 <= final_state_re_1;
      final_state_im_2 <= final_state_im_1;
    end

  assign final_state_re = final_state_re_2;

  assign final_state_im = final_state_im_2;

endmodule  // qft_3qubit_fixpt

