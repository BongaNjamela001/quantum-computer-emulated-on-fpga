// -------------------------------------------------------------
// 
// File Name: /home/bonga/Desktop/EEE4022S/EEE4022S_Github/qaes/quantum_search/codegen/quantum_search/hdlsrc/quantum_search_fixpt.sv
// Created: 2024-10-26 14:30:20
// 
// Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Design base rate: 1
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        1
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// result                        ce_out        1
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: quantum_search_fixpt
// Source Path: quantum_search_fixpt
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module quantum_search_fixpt
          (  input logic clk,
             input logic reset,
             input logic clk_enable,
             output logic ce_out,
             output logic [1:0] result  /* ufix2 */);


  logic enb;
  logic [1:0] result_1;  /* ufix2 */
  logic [1:0] result_2;  /* ufix2 */


  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  //                                                                          %
  //          Generated by MATLAB 24.2 and Fixed-Point Designer 24.2          %
  //                                                                          %
  //%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  // Step 1: Initialise two-qubit register to the ground state |00>
  // |00> state for a two-qubit system
  // Step 2: Apply Hadamard gates to both qubits without kron
  // Define Hadamard gate
  // Manually compute the tensor product of H ox H for two qubits
  // Apply H2 to the initial state
  // Step 3: Apply the controlled-Z gate as the oracle
  // Controlled-Z gate flips the sign of |11> state
  // Step 4: Apply Hadamard gates to both qubits
  // Step 5: Apply Z gates to both qubits without kron
  // Define Pauli-Z gate
  // Manually compute the tensor product of Z ox Z for two qubits
  // Apply Z2 to the state
  // Step 6: Apply the controlled-Z gate again
  // Step 7: Apply Hadamard gates to both qubits
  // Step 8: Measure the qubits to obtain the classical output
  // by finding the highest probability outcome
  // Convert to binary to get classical bits
  // disp('Measured output: %s\n', result);
  assign result_1 = 2'b11;

  assign enb = clk_enable;

  always_ff @(posedge clk)
    begin : result_reg_process
      if (reset == 1'b1) begin
        result_2 <= 2'b00;
      end
      else begin
        if (enb) begin
          result_2 <= result_1;
        end
      end
    end

  assign ce_out = clk_enable;

  assign result = result_2;

endmodule  // quantum_search_fixpt

