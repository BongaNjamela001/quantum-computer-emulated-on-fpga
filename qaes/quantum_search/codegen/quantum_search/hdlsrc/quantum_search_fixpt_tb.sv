// -------------------------------------------------------------
// 
// File Name: /home/bonga/Desktop/EEE4022S/EEE4022S_Github/qaes/quantum_search/codegen/quantum_search/hdlsrc/quantum_search_fixpt_tb.sv
// Created: 2024-10-26 14:30:51
// 
// Generated by MATLAB 24.2, MATLAB Coder 24.2 and HDL Coder 24.2
// 
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 1
// Target subsystem base rate: 1
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: quantum_search_fixpt_tb
// Source Path: 
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module quantum_search_fixpt_tb;

  logic clk;
  logic reset;
  logic enb;
  logic result_done;  /* ufix1 */
  logic rdEnb;
  logic result_done_enb;  /* ufix1 */
  logic result_addr;  /* ufix1 */
  logic result_active;  /* ufix1 */
  logic snkDone;
  logic snkDonen;
  logic resetn;
  logic tb_enb;
  logic ce_out;
  logic [1:0] result;  /* ufix2 */
  logic result_enb;  /* ufix1 */
  logic result_lastAddr;  /* ufix1 */
  logic constone;  /* ufix1 */
  logic result_chkenb;  /* ufix1 */
  logic result_chkdata;  /* ufix1 */
  logic result_addr_delay_1;  /* ufix1 */
  logic signed [31:0] fp_result_expected;  /* sfix32 */
  logic [1:0] result_expected;  /* ufix2 */
  logic signed [31:0] status_result_expected;  /* sfix32 */
  logic [1:0] result_ref;  /* ufix2 */
  logic result_testFailure;  /* ufix1 */
  logic testFailure;  /* ufix1 */


  assign result_done_enb = result_done & rdEnb;

  assign result_active = result_addr != 1'b1;

  assign snkDonen =  ~ snkDone;

  assign resetn =  ~ reset;

  assign tb_enb = resetn & snkDonen;

  assign rdEnb = (snkDone == 1'b0 ? tb_enb :
              1'b0);

  assign #2 enb = rdEnb;

  initial
    begin : reset_gen
      reset <= 1'b1;
      # (20);
      @ (posedge clk)
      # (2);
      reset <= 1'b0;
    end

  always 
    begin : clk_gen
      clk <= 1'b1;
      # (5);
      clk <= 1'b0;
      # (5);
      if (snkDone == 1'b1) begin
        clk <= 1'b1;
        # (5);
        clk <= 1'b0;
        # (5);
        $stop;
      end
    end

  quantum_search_fixpt u_quantum_search_fixpt (.clk(clk),
                                               .reset(reset),
                                               .clk_enable(enb),
                                               .ce_out(ce_out),
                                               .result(result)  /* ufix2 */
                                               );

  assign result_enb = ce_out & result_active;

  // Count limited, Unsigned Counter
  //  initial value   = 0
  //  step value      = 1
  //  count to value  = 1
  always_ff @(posedge clk)
    begin : result_1_process
      if (reset == 1'b1) begin
        result_addr <= 1'b0;
      end
      else begin
        if (result_enb) begin
          result_addr <=  ~ result_addr;
        end
      end
    end

  assign result_lastAddr = result_addr == 1'b1;

  assign result_done = result_lastAddr & resetn;

  // Delay to allow last sim cycle to complete
  always @(posedge clk)
    begin : checkDone_1
      if (reset) begin
        snkDone <= 0;
      end
      else begin
        if (result_done_enb) begin
          snkDone <= result_done;
        end
      end
    end

  assign constone = 1'b1;

  // Delay to implement IgnoreDataChecking
  always @(posedge clk)
    begin : result_IgnoreDataChecking
      if (reset) begin
        result_chkenb <= 0;
      end
      else begin
        if (ce_out) begin
          result_chkenb <= constone;
        end
      end
    end

  assign result_chkdata = ce_out & result_chkenb;

  assign #1 result_addr_delay_1 = result_addr;

  // Data source for result_expected
  initial
    begin : result_expected_fileread
      fp_result_expected = $fopen("result_expected.dat", "r");
      status_result_expected = $rewind(fp_result_expected);
    end

  always @(result_addr_delay_1, ce_out, tb_enb)
    begin
      if (tb_enb == 0) begin
        result_expected <= 2'bx;
      end
      else if (ce_out == 1) begin
        status_result_expected = $fscanf(fp_result_expected, "%h", result_expected);
      end
    end

  assign result_ref = result_expected;

  always @(posedge clk)
    begin : result_checker
      if (reset == 1'b1) begin
        result_testFailure <= 1'b0;
      end
      else begin
        if (result_chkdata == 1'b1 && result !== result_ref) begin
          result_testFailure <= 1'b1;
          $display("ERROR in result at time %t : Expected '%h' Actual '%h'", $time, result_ref, result);
        end
      end
    end

  assign testFailure = result_testFailure;

  always @(posedge clk)
    begin : completed_msg
      if (snkDone == 1'b1) begin
        if (testFailure == 1'b0) begin
          $display("**************TEST COMPLETED (PASSED)**************");
        end
        else begin
          $display("**************TEST COMPLETED (FAILED)**************");
        end
      end
    end

endmodule  // quantum_search_fixpt_tb

