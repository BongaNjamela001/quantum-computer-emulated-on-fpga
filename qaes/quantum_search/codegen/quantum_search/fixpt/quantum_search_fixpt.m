%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                          %
%          Generated by MATLAB 24.2 and Fixed-Point Designer 24.2          %
%                                                                          %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%#codegen
function result = quantum_search_fixpt()

    % Step 1: Initialise two-qubit register to the ground state |00>
    fm = get_fimath();

    state = fi([1; 0; 0; 0], 1, 14, 12, fm); % |00> state for a two-qubit system

    % Step 2: Apply Hadamard gates to both qubits without kron
    % Define Hadamard gate
    H = fi((1/sqrt(2)) * [1, 1; 1, -1], 1, 14, 13, fm);
    
    % Manually compute the tensor product of H ox H for two qubits
    H2 = fi([
        H(1,1)*H, H(1,2)*H;
        H(2,1)*H, H(2,2)*H
    ], 1, 14, 13, fm);

    % Apply H2 to the initial state
    state(:) = H2 * state;

    % Step 3: Apply the controlled-Z gate as the oracle
    CZ = fi(eye(4), 1, 2, 0, fm);
    CZ(4, 4) = -1; % Controlled-Z gate flips the sign of |11> state
    state(:) = CZ * state;

    % Step 4: Apply Hadamard gates to both qubits
    state(:) = H2 * state;

    % Step 5: Apply Z gates to both qubits without kron
    % Define Pauli-Z gate
    Z = fi([1, 0; 0, -1], 1, 2, 0, fm);
    
    % Manually compute the tensor product of Z ox Z for two qubits
    Z2 = fi([
        Z(1,1)*Z, Z(1,2)*Z;
        Z(2,1)*Z, Z(2,2)*Z
    ], 1, 2, 0, fm);

    % Apply Z2 to the state
    state(:) = Z2 * state;

    % Step 6: Apply the controlled-Z gate again
    state(:) = CZ * state;

    % Step 7: Apply Hadamard gates to both qubits
    state(:) = H2 * state;

    % Step 8: Measure the qubits to obtain the classical output
    % by finding the highest probability outcome
    probabilities = fi(abs(state).^2, 0, 14, 13, fm);
    [~, fmo_1] = max(probabilities);
    result_index = fi(fmo_1, 0, 3, 0, fm);
    result = fi(3, 0, 2, 0, fm); % Convert to binary to get classical bits
    
    % disp('Measured output: %s\n', result);
end


function fm = get_fimath()
	fm = fimath('RoundingMethod', 'Floor',...
	     'OverflowAction', 'Wrap',...
	     'ProductMode','FullPrecision',...
	     'MaxProductWordLength', 128,...
	     'SumMode','FullPrecision',...
	     'MaxSumWordLength', 128);
end
